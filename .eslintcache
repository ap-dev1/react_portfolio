[{"/home/jnfri/Documents/react_portfolio/src/index.js":"1","/home/jnfri/Documents/react_portfolio/src/App.js":"2","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/Chapter02.js":"3","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/Chapter03.js":"4","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/Chapter04.js":"5","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/Chapter01.js":"6","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/FastMatchingDemo.js":"7","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/MyTimeline.js":"8","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ReadMore.js":"9","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ImagesCarousel.js":"10","/home/jnfri/Documents/react_portfolio/src/DATA/infoReferences.js":"11","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/about_files/AboutSection.js":"12","/home/jnfri/Documents/react_portfolio/src/DATA/myData.js":"13","/home/jnfri/Documents/react_portfolio/src/DATA/infoSkills.js":"14","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/header_files/HeaderSection.js":"15","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/header_files/NavMain.js":"16","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/header_files/NavAcronyms.js":"17","/home/jnfri/Documents/react_portfolio/src/DATA/infoTimeline.js":"18","/home/jnfri/Documents/react_portfolio/src/DATA/infoNav.js":"19","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/recent/RecentProjects.js":"20","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/teaching/TeachingSection.js":"21","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/contact/ContactSection.js":"22","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/recent/recentProject.js":"23","/home/jnfri/Documents/react_portfolio/src/DATA/infoContact.js":"24","/home/jnfri/Documents/react_portfolio/src/DATA/infoRecent.js":"25","/home/jnfri/Documents/react_portfolio/src/DATA/infoTeaching.js":"26","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/references/ReferencesSection.js":"27","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/ShapeOfWill.js":"28","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ResearchStudy.js":"29","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/dataManipulation.js":"30","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/matchingState.js":"31","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/MatchingDemo.js":"32","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/hookToggleCOD.js":"33","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/svgMatching.js":"34","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/ETBD.js":"35","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/recombineAndMutate.js":"36","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/etbdState.js":"37","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/ChartPhenotypes.js":"38","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/drawETBD.js":"39","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/HistogramETBD.js":"40","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/Qual.js":"41","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ImagesContainer.js":"42","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/teaching/OrderFellowship.js":"43","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/vitae/infoPublications.js":"44","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/vitae/infoConferences.js":"45","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/vitae/MyVitae.js":"46","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/CollapseHook.js":"47","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HammingDemo.js":"48","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/hammingFunctions.js":"49","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HeatmapTemplate.js":"50","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_input/InputClasses.js":"51","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_input/InputTemplate.js":"52","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/defaultDataPhens.js":"53","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/hdValues.js":"54","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/drawPhenotypes.js":"55","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/hdCodValues.js":"56","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HeatmapHook.js":"57","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/inputNumberHook.js":"58","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/TableHook.js":"59","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HammingDistances.js":"60","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_input/InputRange.js":"61","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/MathematicalModels.js":"62","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/D3ScatterRatios.js":"63","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/BasicSummaryTable.js":"64","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/D3ScatterLogs.js":"65","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/MatchingEquations.js":"66","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/EtbdEmergence.js":"67","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_emergence/DrawEtbdInteractive.js":"68","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/EmergenceMain.js":"69","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/AgentHistory.js":"70","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/ButtonNext.jsx":"71","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/mutation/MutationDemo.jsx":"72","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/mutation/CheckProps.js":"73","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/HammingDistances.js":"74","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/recombination/RecombinationDemo.jsx":"75","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/recombination/RadioBit.jsx":"76","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/NeonsFunctionality.js":"77","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/emission/Emission.jsx":"78","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/selection/ToggleReinforcement.jsx":"79","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/selection/Selection.js":"80","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/EmergenceSettings.js":"81","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/rechooks/Rec2.js":"82","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/rechooks/RadioHook.js":"83","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/SvgRecord.js":"84"},{"size":219,"mtime":1621274560604,"results":"85","hashOfConfig":"86"},{"size":5004,"mtime":1637065275085,"results":"87","hashOfConfig":"86"},{"size":3764,"mtime":1628283928018,"results":"88","hashOfConfig":"89"},{"size":5936,"mtime":1628383419768,"results":"90","hashOfConfig":"89"},{"size":5364,"mtime":1632489298067,"results":"91","hashOfConfig":"86"},{"size":3950,"mtime":1637065270917,"results":"92","hashOfConfig":"86"},{"size":31521,"mtime":1629497592262,"results":"93","hashOfConfig":"89"},{"size":8405,"mtime":1637070436817,"results":"94","hashOfConfig":"86"},{"size":1137,"mtime":1632481584177,"results":"95","hashOfConfig":"86"},{"size":1366,"mtime":1632481358675,"results":"96","hashOfConfig":"86"},{"size":12133,"mtime":1630708098586,"results":"97","hashOfConfig":"89"},{"size":2773,"mtime":1632489314611,"results":"98","hashOfConfig":"86"},{"size":2600,"mtime":1627844177683,"results":"99","hashOfConfig":"86"},{"size":2598,"mtime":1620156124293,"results":"100","hashOfConfig":"86"},{"size":998,"mtime":1627936619022,"results":"101","hashOfConfig":"86"},{"size":2290,"mtime":1632436436382,"results":"102","hashOfConfig":"86"},{"size":3139,"mtime":1632487435145,"results":"103","hashOfConfig":"86"},{"size":51154,"mtime":1637069441709,"results":"104","hashOfConfig":"86"},{"size":3486,"mtime":1631206458045,"results":"105","hashOfConfig":"86"},{"size":1588,"mtime":1628382977829,"results":"106","hashOfConfig":"86"},{"size":2002,"mtime":1632487548900,"results":"107","hashOfConfig":"86"},{"size":3527,"mtime":1632487180306,"results":"108","hashOfConfig":"86"},{"size":1185,"mtime":1627845351159,"results":"109","hashOfConfig":"86"},{"size":2265,"mtime":1632487714203,"results":"110","hashOfConfig":"86"},{"size":3767,"mtime":1629054348968,"results":"111","hashOfConfig":"86"},{"size":5985,"mtime":1632436731550,"results":"112","hashOfConfig":"86"},{"size":2383,"mtime":1628382921104,"results":"113","hashOfConfig":"89"},{"size":5405,"mtime":1628624048361,"results":"114","hashOfConfig":"89"},{"size":3403,"mtime":1632676115452,"results":"115","hashOfConfig":"86"},{"size":722,"mtime":1632488446595,"results":"116","hashOfConfig":"86"},{"size":1771,"mtime":1633133216553,"results":"117","hashOfConfig":"86"},{"size":21427,"mtime":1633136355601,"results":"118","hashOfConfig":"86"},{"size":602,"mtime":1629573728781,"results":"119","hashOfConfig":"89"},{"size":1406,"mtime":1630415715671,"results":"120","hashOfConfig":"86"},{"size":23541,"mtime":1633126488277,"results":"121","hashOfConfig":"86"},{"size":1172,"mtime":1629754669365,"results":"122","hashOfConfig":"86"},{"size":1171,"mtime":1630448793680,"results":"123","hashOfConfig":"86"},{"size":3184,"mtime":1629743839354,"results":"124","hashOfConfig":"89"},{"size":4386,"mtime":1634760685842,"results":"125","hashOfConfig":"86"},{"size":2093,"mtime":1630342691697,"results":"126","hashOfConfig":"89"},{"size":4352,"mtime":1637071255817,"results":"127","hashOfConfig":"86"},{"size":942,"mtime":1632484501937,"results":"128","hashOfConfig":"86"},{"size":1940,"mtime":1631044912234,"results":"129","hashOfConfig":"89"},{"size":15978,"mtime":1632487670644,"results":"130","hashOfConfig":"86"},{"size":26892,"mtime":1632487632992,"results":"131","hashOfConfig":"86"},{"size":3464,"mtime":1632487686396,"results":"132","hashOfConfig":"86"},{"size":1194,"mtime":1631220950041,"results":"133","hashOfConfig":"86"},{"size":8684,"mtime":1633119169994,"results":"134","hashOfConfig":"86"},{"size":2424,"mtime":1637336752687,"results":"135","hashOfConfig":"86"},{"size":12353,"mtime":1632471406928,"results":"136","hashOfConfig":"89"},{"size":1756,"mtime":1632005327896,"results":"137","hashOfConfig":"89"},{"size":713,"mtime":1632971929892,"results":"138","hashOfConfig":"86"},{"size":15779,"mtime":1631906055564,"results":"139","hashOfConfig":"89"},{"size":197239,"mtime":1632062791648,"results":"140","hashOfConfig":"86"},{"size":16372,"mtime":1632794400471,"results":"141","hashOfConfig":"89"},{"size":564934,"mtime":1632395169570,"results":"142","hashOfConfig":"86"},{"size":12797,"mtime":1637690878954,"results":"143","hashOfConfig":"86"},{"size":1204,"mtime":1632971218456,"results":"144","hashOfConfig":"89"},{"size":6742,"mtime":1633119321282,"results":"145","hashOfConfig":"86"},{"size":5344,"mtime":1633118783126,"results":"146","hashOfConfig":"86"},{"size":0,"mtime":1632856187981,"results":"147","hashOfConfig":"89"},{"size":5407,"mtime":1634610056383,"results":"148","hashOfConfig":"86"},{"size":7270,"mtime":1634348964155,"results":"149","hashOfConfig":"86"},{"size":4596,"mtime":1635159429891,"results":"150","hashOfConfig":"86"},{"size":9470,"mtime":1635991950941,"results":"151","hashOfConfig":"86"},{"size":1410,"mtime":1635159521144,"results":"152","hashOfConfig":"86"},{"size":2018,"mtime":1636085576177,"results":"153","hashOfConfig":"86"},{"size":3503,"mtime":1636023499430,"results":"154","hashOfConfig":"86"},{"size":25830,"mtime":1638644544516,"results":"155","hashOfConfig":"86"},{"size":3872,"mtime":1638638965089,"results":"156","hashOfConfig":"86"},{"size":363,"mtime":1637158824684,"results":"157","hashOfConfig":"86"},{"size":7481,"mtime":1638636207493,"results":"158","hashOfConfig":"86"},{"size":1599,"mtime":1638573695894,"results":"159","hashOfConfig":"86"},{"size":4402,"mtime":1637070366611,"results":"160","hashOfConfig":"86"},{"size":6385,"mtime":1638301050499,"results":"161","hashOfConfig":"86"},{"size":2504,"mtime":1637888039976,"results":"162","hashOfConfig":"86"},{"size":4556,"mtime":1638638074179,"results":"163","hashOfConfig":"86"},{"size":2474,"mtime":1638275739883,"results":"164","hashOfConfig":"86"},{"size":1259,"mtime":1637845543548,"results":"165","hashOfConfig":"86"},{"size":1589,"mtime":1638275719639,"results":"166","hashOfConfig":"86"},{"size":1042,"mtime":1637918957305,"results":"167","hashOfConfig":"86"},{"size":11405,"mtime":1638645417493,"results":"168","hashOfConfig":"86"},{"size":1376,"mtime":1638361488528,"results":"169","hashOfConfig":"86"},{"size":190,"mtime":1637346381344,"results":"170","hashOfConfig":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},"1x1ednu",{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"179"},"1nrx25",{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"179"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"173"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"173"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"173"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"173"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"261"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"173"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"295"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"173"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"303","messages":"304","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"173"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"173"},{"filePath":"309","messages":"310","errorCount":4,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"173"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"173"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"173"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"328","messages":"329","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"330","messages":"331","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"173"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"173"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"173"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"173"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"347"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"347"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"173"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"173"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"359"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"173"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"359"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"173"},"/home/jnfri/Documents/react_portfolio/src/index.js",[],["372","373"],"/home/jnfri/Documents/react_portfolio/src/App.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/Chapter02.js",["374"],"import React, { Component } from \"react\";\nimport parse from \"html-react-parser\";\n\nclass Chapter02 extends Component {\n    render() {\n        var skills = [\n            \"principal investigator\",\n            \"VB.Net\",\n            \"Excel/VBA\",\n            \"experimental interface\",\n            \"human and synthetic data\",\n            \"translational research\",\n        ];\n\n        var Skills = skills.map((s) => {\n            return <label key={s}>{s}</label>;\n        });\n\n        return (\n            <div\n                id=\"ch2\"\n                className=\"chapter\"\n                style={{\n                    backgroundColor: \"#1D2731\",\n                }}\n            >\n                <div className=\"chapterRow\">\n                    <div className=\"chapterCol\">\n                        <h1 className=\"chapter-title\" style={{ fontSize: \"2.2rem\", marginBottom: \"1rem\" }}>From bits to ADHD</h1>\n\n                        <span className=\"spanYears\">2011 - 2013</span>\n\n                        <div className=\"chapterSkills\">{Skills}</div>\n\n                        <p id=\"ch2_p1\" className=\"p-left\">\n                            For my dissertation project I tackled the parallel between mutation and ADHD. My main goals were to verify if ETBD can simulate ADHD symptoms, treatments, and developmental trajectories, and if ETBD data is relevant to human behavior. In both cases, the answer was yes.</p>\n\n\n                        {/* <p>\n                            <a\n                                href=\"https://www.andreipopa515.com/computational-adhd\"\n                                className=\"link515\"\n                            >\n                        {\n                            \"More details and subsequent analyses here: https://www.andreipopa515.com/computational-adhd\"\n                        }\n                            </a>\n                        </p> */}\n\n\n                    </div>\n\n\n                    <div className=\"chapterCol\">\n\n                        <p className=\"p-left\">In part one, I explored interactions between mutation rate and environmental properties: reinforcement rate, magnitude, and COD.<br /><br /></p>\n\n\n                        <p className=\"p-left\">In part two, I explored human behavior under different COD requirements and I compared it with that of ETBD.<br /><br /></p>\n\n\n                        <p className=\"p-left\">In part three, I used traditional instruments to measure ADHD symptoms in the same participants and I compared the scores with measures of choice behavior.</p>\n\n                        <p className=\"p-left\"\n                            style={{\n                                marginTop: \"2rem\",\n                                border: \"1px solid #888\",\n                                borderRadius: \"10px\",\n                                padding: \"0.5rem\",\n                                // backgroundColor: \"#fdff9f\",\n                                // backgroundColor: \"rgb(20, 33, 61)\",\n                                // backgroundColor: \"rgb(20, 33, 61)\",\n                                backgroundColor: \"rgba(5, 75, 87, 0.5)\",\n\n\n                                width: \"90%\",\n                                color: \"#fff\",\n                                opacity: \"0.8\",\n                                fontSize: \".9rem\",\n                                lineHeight: \"1.5rem\",\n                            }}\n\n                        ><b>Fast Matching.</b> To accomplish two and three I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side. This was my first study as a principal investigator.</p>\n                    </div>\n\n\n                </div >\n            </div >\n        );\n    }\n}\n\nexport default Chapter02;\n",["375","376"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/Chapter03.js",["377"],"import React, { Component } from \"react\";\nimport parse from \"html-react-parser\";\n\nclass Chapter03 extends Component {\n    render() {\n\n        var skills = [\n            \"VB.Net\",\n            \"Excel/VBA\",\n            \"Python\",\n            \"SQL\",\n            \"Octave\",\n            \"human research\",\n            \"computational research\",\n            'study management',\n            \"experimental interfaces\",\n        ];\n\n        var Skills = skills.map((s) => {\n            return <label key={s}>{s}</label>;\n        });\n\n        return (\n            <div\n                id=\"ch3\"\n                className=\"chapter\"\n                style={{ backgroundColor: \"#1D2731\", }}\n            >\n\n                <div className=\"chapterRow\">\n                    <div className=\"chapterCol\">\n                        <h1\n                            className=\"chapter-title\"\n                            style={{ fontSize: \"2.2rem\", marginBottom: \"1rem\", }}\n                        >\n                            Rules, Context + Time\n                        </h1>\n\n                        <span className=\"spanYears\">2014 - 2018</span>\n\n                        <p id=\"ch3_p1\" className=\"p-left\">\n                            After graduation I focused on the puzzle of human development.\n                        By now it was clear to me that developmental \"outcomes\" like ADHD emerge from learning processes.</p>\n\n\n                        {/* \n                        <h1 className=\"chapter-title\" style={{ fontSize: \"1.3rem\", margin: \"2rem 0rem 1rem 0rem\" }}>The last time the environment affected your genes, did you consent?</h1>\n\n                        <h1 className=\"chapter-title\" style={{ fontSize: \"1.3rem\", margin: \"2rem 0rem 1rem 0rem\" }}>When was the last time your environment interacted with your genes?</h1>\n\n                        <p id=\"ch3_p2\" className=\"p-left\">Modern psychological \"perspectives\" recognize that developmental outcomes are influenced by biological, psychological, and social factors. variables that interact in complicated ways during the lifetime of the individual (any textbook).</p>\n\n\n                        <h1 className=\"chapter-title\" style={{ fontSize: \"1.3rem\", margin: \"2rem 0rem 1rem 0rem\" }}>How, when, and where do these variables interact, exactly?</h1>\n\n                        <p id=\"ch3_p3\" className=\"p-left\">\n                            How does society influence biology?<br />Where do genes interact with families?<br />How do nature and nurture mediate each other?</p>\n\n                        <p id=\"ch3_p4\" className=\"p-left\">\n                            If one wants to observe and interfere with these interactions, where would one begin?<br />A handful of factors, somehow, give rise to seven billion unique personalities, thousands of disorders, three parenting styles (lol),  How?<br />Statistical jargon aside, to interact is to modify: something, somewhere, must undergo some kind of observable transformations.<br /><br />Whenandwheredothesetransformationsoccur?<br />How do they map on the plethora of contributing factors and developmental \"outcomes\"?What are sentience, agency, will? What role, if any,do they play in human life?</p>\n\n */}\n\n\n\n\n                        <div className=\"chapterSkills\">{Skills}</div>\n                    </div>\n\n                    <div className=\"chapterCol\">\n\n\n                        <h1 className=\"chapter-title\" style={{ fontSize: \"1.3rem\", margin: \"2rem 0rem 1rem 0rem\" }}>Concepts, Forces</h1>\n\n                        {/* <p className=\"p-left\" style={{ color: \"#14A76C\" }}>\n                            <a href=\"https://www.andreipopa515.com/computational-adhd\" target=\"_blank\">Disrupted neuronal dynamics and ADHD symptomatology</a>\n                        </p> */}\n\n\n                        <h1 className=\"chapter-title\" style={{ fontSize: \"1.3rem\", margin: \"2rem 0rem 1rem 0rem\" }}>Emerge this, Jack</h1>\n\n\n                        <p className=\"p-left\" >\n                            Punishment, negative reinforcement, and context - or <i>stimulus control</i> - became the focus of my next two research studies. Both resulted in interesting findings, some of which make challenging benchmarks for computational theories.\n                        </p>\n\n\n                        <p className=\"p-left\" style={{ color: \"#FF652F\" }}>\n                            Examples?\n                        </p>\n\n\n                        {/* <h1 className=\"chapter-title\" style={{ fontSize: \"1.3rem\", margin: \"2rem 0rem 1rem 0rem\" }}>Development happens here and now</h1>\n\n\n\n                        <h1 className=\"chapter-title\" style={{ fontSize: \"1.3rem\", margin: \"2rem 0rem 1rem 0rem\" }}>Social evolution is caused by neuronal changes</h1>\n\n                        <p className=\"p-left\" style={{ fontSize: \".8rem\", lineHeight: \"1.3rem\" }}>\n                            The only causal factors that shape human society are the actions of individuals, and these actions are streams of neuronal activity. Modelling societies is to model populations of interacting nervous systems that act and interact. Now, this is a puzzle worth solving.\n                        </p>\n\n                        <h2 className=\"chapter-title\" style={{ fontSize: \"1.3rem\", margin: \"2rem 0rem 1rem 0rem\" }}>Recreate this, Jack!</h2>\n\n                        <p className=\"p-left\" style={{ fontSize: \".8rem\", lineHeight: \"1.3rem\" }} >\n                            In addition to positively reinforced behavior, a complete theory of learning should account for punishment, negative reinforcement, and context (or stimulus control). That's why I focused my next two research projects on these phenomena. Both resulted in interesting findings, all of which can serve as verification criteria for computational theories of learning.\n                        </p> */}\n\n\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Chapter03;\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/Chapter04.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/Chapter01.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/FastMatchingDemo.js",["378","379","380","381","382","383","384","385","386"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/MyTimeline.js",["387","388"],"import React from \"react\";\nimport parse from \"html-react-parser\";\nimport PropTypes from \"prop-types\";\n\nimport infoTimeline from \"../../DATA/infoTimeline\";\nimport ReadMore from \"./ReadMore\";\nimport ImagesCarousel from \"./ImagesCarousel\";\n\nimport \"./timeline.sass\";\n\nimport ResearchStudy from \"./ResearchStudy\";\n\nimport Qual from \"./Qual\";\n\nimport CollapseHook from \"./CollapseHook\"\n\nimport MathematicalModels from \"./MathematicalModels\"\n\nimport EtbdEmergence from \"./EtbdEmergence\"\n\nimport HammingDistances from \"./HammingDistances\"\n\nconst MyTimeline = (props) => {\n\n    // let { events, orientation, startFrom } = props;\n    let { events } = props;\n\n    var goToLink = (e) => {\n        e.preventDefault();\n        let destination = e.target.id;\n        window.open(destination, \"_blank\");\n    };\n\n\n\n\n\n    const eventsMappedToElements = events.map((e, i) => {\n\n        var Links = null,\n            //Tags = null,\n            Description = \"\",\n            //Citation = \"\",\n            Technologies = [];\n        //DisplayedDate = \"\";\n\n\n\n\n\n\n        // LINKS\n        if (e.urls.length > 0) {\n            Links = e.urls.map((item) => (\n                <button\n                    className=\"btnLink\"\n                    key={item.link}\n                    id={item.link}\n                    title={item.link}\n                    onClick={goToLink}\n                >\n                    { item.name}\n                </button >\n            ))\n        }\n\n\n\n        // TECH\n        if (e.technologies) {\n            Technologies = e.technologies.map((item) =>\n                <label key={item}> {parse(item)} </label>\n            )\n        }\n\n\n\n\n\n\n        // if (e.tags.length > 0) {\n        //     Tags = e.tags.map((item) => <label key={item}>{parse(item)}</label>);\n        // }\n\n        if (e.description !== \"\") {\n            Description = parse(e.description);\n        }\n\n\n\n        // if (e.date === \"in progress\") {\n        //     DisplayedDate = \"[\" + e.id + \"]  \" + \"in progress\"\n        // } else {\n        //     let mo = e.date.slice(0, 2);\n        //     DisplayedDate = \"[\" + e.id + \"]  \" + mo + \"-\" + e.date.slice(-4)\n\n        // }\n\n\n        var DisplayedDateTemp = \"\"\n\n        if (e.date === \"in progress\") {\n            DisplayedDateTemp = \"(\" + e.id + \")  \" + \"in progress\"\n        } else {\n            DisplayedDateTemp = e.date.replaceAll(\"/\", \".\")\n        }\n\n\n        // var Authors = []\n\n        // if (e.authors) {\n        //     Authors = e.authors.map(author => {\n\n        //         if (author) {\n        //             var rf = infoReferences.filter(item => item.authors === author)\n\n        //             if (rf[0]) {\n        //                 return (\n        //                     <span className=\"authors\" title={parse(rf[0].citation)} >{parse(author)}</span>\n        //                 )\n        //             } else {\n        //                 //console.log(\"err:\", e.title, author)\n        //             }\n        //         }\n        //     })\n        // }\n\n\n        var References = []\n\n        if (e.references) {\n            References = e.references.map((item) => {\n\n                if (item) {\n                    return < p\n                        className=\"citation-apa\"\n                        key={item}\n                    //title={parse(item)}\n                    >\n                        {parse(item)}\n                    </p >\n                }\n\n\n            })\n        }\n\n\n        var nickname = \"\"\n\n        if (e.nickname) {\n            nickname = e.nickname\n        } else {\n            nickname = e.title\n        }\n\n        var fontFam = e.fontFam\n\n        //var itemKey = e.date + e.description\n\n\n        // RESEARCH STUDY: \n        if (e.studyInfo) {\n            let studyTitle = e.title.split(\":\")\n\n            return (\n                <ResearchStudy\n                    nickname={nickname}\n                    key={e.studyInfo[3].irb.toString()}\n                    name={\"\"}\n                    studyInfo={e.studyInfo}\n                    links={Links}\n                    tech={Technologies}\n                    description={Description}\n                    img={e.img}\n                    // title={e.title}\n                    // title={e.title.toUpperCase()}\n                    title={studyTitle}\n                />\n            )\n        };\n\n\n\n        // SENSITIVITY demo:\n        if (e.title === 'Mathematical models & computational theories') {\n            return (\n                <MathematicalModels\n                    qualDate={DisplayedDateTemp}\n                    key={\"sensitivity_demo_sdgffgabalaxfxfsdg\"}\n                    style={{ fontFamily: fontFam }}\n\n                    //tech={Technologies}\n                    title={parse(e.title)}\n                    description={Description}\n                    links={Links}\n                    references={References}\n                />\n            )\n        };\n\n\n\n        // EMEMRGENCE demo:\n        if (e.custom_item === 'emergence_demo') {\n            return (\n                <EtbdEmergence\n                    qualDate={DisplayedDateTemp}\n                    key={\"emergence_demo_sdgffgabalaxfxfsdg\"}\n                    style={{ fontFamily: fontFam }}\n                    tech={Technologies}\n                    title={parse(e.title)}\n                    description={Description}\n                    links={Links}\n                    references={References}\n                />\n            )\n        };\n\n\n\n        // HAMMING: \n        if (e.custom_item === 'hamming_demo') {\n            return (\n                <HammingDistances\n                    qualDate={DisplayedDateTemp}\n                    key={\"qual_item_balabalaxfxfsdg\"}\n                    style={{ fontFamily: fontFam }}\n                    //tech={Technologies}\n                    title={parse(e.title)}\n                    description={Description}\n                    links={Links}\n                    references={References}\n                />\n            )\n        };\n\n\n        // QUAL:\n        if (e.nickname === 'Qual') {\n            return (\n                <Qual\n                    qualDate={DisplayedDateTemp}\n                    key={\"qual_item_balabalaxfxfsdg\"}\n                    style={{ fontFamily: fontFam }}\n                    //tech={Technologies}\n                    title={parse(e.title)}\n                    description={Description}\n                    links={Links}\n                    references={References}\n                />\n            )\n        };\n\n\n\n\n        // DEFAULT:\n        return (\n            <div\n                className=\"item\"\n                content1={parse(DisplayedDateTemp)}\n                key={e.date + e.title}\n                id={e.date}\n                style={{ fontFamily: fontFam }}\n            >\n                <div className=\"itemContent\">\n\n\n                    {/* -------------------       Event A      ---------------------- */}\n\n                    <div className=\"projectColumnLeft\">\n\n                        <span className=\"title\">{parse(e.title)}</span>\n\n                        <ReadMore maxChars={1000} overview={Description} />\n\n\n                        <CollapseHook\n                            collapsedTitle={\"Relevant work\"}\n\n                            collapsedText={\n                                <div className=\"divRefs\">  {References}  </div>\n                            }\n                        />\n\n                        <div className=\"divTech\">  {Technologies}  </div>\n\n                        <div className=\"links\" >  {Links}  </div>\n\n                    </div>\n\n\n                    <div className=\"projectColumnImages\">\n                        <ImagesCarousel props={e.img} />\n                    </div>\n\n\n                </div>\n            </div>\n        );\n    });\n\n\n    return (\n\n        <div className=\"timeline\">\n            {eventsMappedToElements}\n        </div>\n    );\n};\n\n\n\n\n\n\n\n\nMyTimeline.propTypes = {\n    events: PropTypes.arrayOf(\n        PropTypes.shape({\n            //time: PropTypes.string.isRequired,\n            title: PropTypes.string.isRequired,\n            //desc: PropTypes.string.isRequired\n        })\n    ).isRequired,\n    orientation: PropTypes.oneOf([\"horizontal\", \"vertical\"]).isRequired,\n    startFrom: PropTypes.oneOf([\"first\", \"last\"]).isRequired,\n};\n\nMyTimeline.defaultProps = {\n    orientation: \"vertical\",\n    startFrom: \"first\",\n    events: infoTimeline,\n};\n\nexport default MyTimeline;\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ReadMore.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ImagesCarousel.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoReferences.js",[],["389","390"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/about_files/AboutSection.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/myData.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoSkills.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/header_files/HeaderSection.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/header_files/NavMain.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/header_files/NavAcronyms.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoTimeline.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoNav.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/recent/RecentProjects.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/teaching/TeachingSection.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/contact/ContactSection.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/recent/recentProject.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoContact.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoRecent.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoTeaching.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/references/ReferencesSection.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/ShapeOfWill.js",["391","392"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ResearchStudy.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/dataManipulation.js",["393"],"//import * as d3 from \"d3\"\n\nexport function findLastTarget(array1) {\n\n\n    // This works fine, use it after fixing the events.\n    // for now, it starts with one empty event, so this \n    // needs addressed. \n\n    let array2 = array1.filter((item) => {\n        if (item.class === \"b1\" | item.class === \"b2\") {\n            return item\n        }\n    })\n\n\n    //console.log(\"original: \", array1)\n    //console.log(\"filtered: \", array2)\n\n    if (array2.length === 0) {\n\n        //console.log(\"return original: \", array1[(array1.length - 1)])\n\n        return array1[(array1.length - 1)]\n\n    } else {\n\n        //console.log(\"return filtered: \", array2[(array2.length - 1)])\n\n        return array2[(array2.length - 1)]\n    }\n\n\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/matchingState.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/MatchingDemo.js",["394","395","396","397","398","399","400","401"],"\n// More elegant version than FastMatchingDemo;\n\nimport React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n//import parse from \"html-react-parser\";\nimport \"./matching.sass\";\n\nimport { findLastTarget } from \"./dataManipulation\";\nimport { setMatchingState } from \"./matchingState\";\nimport { createSVG_Matching } from \"./svgMatching\";\n\nimport ETBD from \"../etbd/ETBD\"\n\n\n\nexport default class MatchingDemo extends Component {\n\n    constructor() {\n        super();\n        let myState = setMatchingState();\n        this.state = myState;\n    };\n\n\n\n    beginSession = () => {\n\n        d3.select(\"#svgMatching\").on(\"click\", this.evaluateResponse);\n\n\n        let thisEvent = {\n            timestamp: performance.now(),\n            x: 0,\n            y: 0,\n            class: \"\",\n            co: 0,\n            points: 0,\n        }\n\n        var myEvents = [thisEvent]\n\n        this.setState({\n            timeStart: performance.now(),\n            events: myEvents,\n        })\n\n\n        d3.selectAll(\".introTexts\").remove()\n\n        let scaleTime = d3\n            .scaleLinear()\n            .domain([0, this.state.timeLimit])\n            .range([0, 350]);\n\n        let scaleResponses = d3\n            .scaleLinear()\n            .domain([0, this.state.recordHeight])\n            .range([0, 250]);\n\n        let recordHeight = this.state.recordHeight\n\n\n\n        let overallInterval = d3.interval((te) => {\n\n            let x1 = 35 + scaleTime((te - 250) / 1000)\n            let x2 = 35 + scaleTime(te / 1000)\n            let B1 = this.state.B1\n            let B2 = this.state.B2\n\n            let y = scaleResponses(\n                recordHeight - ((B1 + B2) % recordHeight)\n            );\n\n            d3.select('#svgRecord').append(\"line\")\n                .attr(\"class\", \"dataLine\")\n                .attr(\"x1\", x1)\n                .attr(\"y1\", y)\n                .attr(\"x2\", x2)\n                .attr(\"y2\", y)\n                .attr(\"stroke\", this.state.responseColor)\n                .attr(\"stroke-width\", 1)\n\n\n            this.setState({ progress: te })\n\n            if (te > this.state.timeLimit * 1000) {\n\n                let svgMatching = d3.select(\"#svgMatching\")\n                svgMatching.on(\"click\", null);\n                overallInterval.stop()\n            }\n        }, 250);\n\n\n        // The first two Random Intervals, between 1000 and 5000 ms, from an exponential with mean 1/RI mean. I use integers here to remove the microseconds. When the timers exceed the intervals, reinforcement becomes available.\n\n        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\n        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\n        d3.timeout((elapsed1) => {\n            this.setState({ r1ready: 1 });\n        }, int1);\n        d3.timeout((elapsed2) => {\n            this.setState({ r2ready: 1 });\n        }, int2);\n\n\n        // EVENTS PER SESSION (15s):\n        let r1min = `${1 / this.state.RI1 * this.state.timeLimit}`\n        let r2min = `${1 / this.state.RI2 * this.state.timeLimit}`\n\n    };\n\n\n\n    evaluateResponse = (e) => {\n        var timeStart = this.state.timeStart;\n        var eventTimeStamp = performance.now()\n        var events = this.state.events;\n\n        this.setState({\n            timeElapsed: eventTimeStamp - timeStart\n        });\n\n\n        // DEFAULT VALUES FOR THE NEW EVENT:\n        var respClass = \"be\",\n            co = 0,\n            // b1 = 0,\n            // b2 = 0,\n            // points1 = 0,\n            // points2 = 0,\n            newID = 0,\n            reinforced = false;\n\n\n        // PE: \n        var pe = events[events.length - 1]\n        newID = pe.id + 1\n\n        // CUMULATIVE FREQUENCIES:\n        var B1 = this.state.B1;\n        var B2 = this.state.B2;\n        var Be = this.state.Be;\n        var Points1 = this.state.Points1;\n        var Points2 = this.state.Points2;\n        //var Points3 = this.state.Points2;\n        var CO = this.state.CO;\n\n        // VARIABLES RELATED TO CHANGEOVER DELAYS:\n        var cod1_duration = this.state.cod1_duration\n        var cod1_status = this.state.cod1_status\n        var cod2_duration = this.state.cod2_duration\n        var cod2_status = this.state.cod2_status\n\n\n        // EVENT COORDINATES:\n        var x = e.offsetX;\n        var y = e.offsetY;\n\n\n\n\n\n        //                            EVALUATE EVENT CLASS: B1, B2, Be\n\n\n\n\n        // --------------------------------------------------------------   B1\n\n        if (d3.polygonContains(this.state.class1, [x, y])) {\n\n            respClass = \"b1\";\n            //b1 = events[events.length - 1].b1 + 1;\n            //b2 = events[events.length - 1].b2 + 0;\n\n            this.setState({\n                B1: B1 + 1,\n                //B2: B2,\n                //Be: Be,\n                responseColor: this.state.color1\n            })\n\n\n            // CHANGEOVER? \n            if (pe.class === \"b2\") {\n                co = 1;\n                // CO = CO + 1\n                this.setState({\n                    CO: CO + 1,\n                    responseColor: this.state.colorCO\n                })\n\n\n                // CODE ENABLED? \n                if (cod1_duration > 0) {\n                    cod2_status = \"off\"\n                    cod1_status = \"on\"\n                    reinforced = false\n                    this.setState({ cod1_status: \"on\", cod2_status: \"off\", codColor: \"#61DAFB\" })\n\n                    // START TIMER FOR COD 1\n                    let cod1 = d3.timeout((elapsedCOD1) => {\n                        cod1_status = \"off\"\n\n                        this.setState({ cod1_status: \"off\" })\n\n                        if (this.state.cod2_status === \"off\") {\n                            this.setState({ codColor: \"#282c34\" })\n                        }\n\n                        cod1.stop()\n\n                    }, cod1_duration);\n\n\n                    // IF NO COD IN EFFECT, CHECK FOR REINFORCEMENT: \n                } else {\n\n                    if (this.state.r1ready !== 0) {\n                        reinforced = true\n\n                        this.setState({\n                            Points1: Points1 + this.state.r1ready,\n                            Points2: Points2\n                        })\n\n                        this.setState({ r1ready: 0 });\n\n                        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\n\n                        let t1 = d3.timeout((elapsed1) => {\n                            this.setState({ r1ready: 1 });\n                        }, int1);\n                    }\n                }\n\n\n                // IF NOT CHANGEOVER, CHECK IF COD IS ON:\n            } else {\n\n                if (cod1_status === \"off\" & this.state.cod1_status === \"off\") {\n                    if (this.state.r1ready !== 0) {\n                        reinforced = true\n                        this.setState({\n                            Points1: Points1 + this.state.r1ready,\n                            Points2: Points2\n                        })\n                        this.setState({ r1ready: 0 });\n\n                        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\n\n                        let t1 = d3.timeout((elapsed1) => {\n                            this.setState({ r1ready: 1 });\n                        }, int1);\n                    }\n                } else {\n                    reinforced = false\n                    this.setState({\n                        Points1: Points1,\n                        Points2: Points2\n                    })\n                }\n            }\n        };  // _____ END of B1 ________\n\n\n\n        // --------------------------------------------------------------   B2\n        if (d3.polygonContains(this.state.class2, [x, y])) {\n            respClass = \"b2\";\n            //b1 = events[events.length - 1].b1 + 0;\n            //b2 = events[events.length - 1].b2 + 1;\n\n            this.setState({\n                //B1: B1,\n                B2: B2 + 1,\n                //Be: Be,\n                responseColor: this.state.color2\n            })\n\n\n            if (pe.class === \"b1\") {\n                co = 1;\n                CO += 1\n\n                this.setState({\n                    CO: CO,\n                    responseColor: this.state.colorCO\n                })\n\n                if (cod2_duration > 0) {\n                    cod1_status = \"off\"\n                    cod2_status = \"on\"\n                    reinforced = false\n                    this.setState({ cod1_status: \"off\", cod2_status: \"on\", codColor: \"#61DAFB\" })\n\n                    let cod2 = d3.timeout((elapsedCOD2) => {\n                        cod2_status = \"off\"\n                        this.setState({ cod2_status: \"off\" })\n\n                        if (this.state.cod1_status === \"off\") {\n                            this.setState({ codColor: \"#282c34\" })\n                        }\n\n                        cod2.stop()\n\n                    }, cod2_duration);\n\n                } else {\n\n                    if (this.state.r2ready !== 0) {\n                        reinforced = true\n                        this.setState({\n                            Points1: Points1,\n                            Points2: Points2 + this.state.r2ready\n                        })\n                        this.setState({ r2ready: 0 });\n\n                        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\n                        let t2 = d3.timeout((elapsed2) => {\n                            this.setState({ r2ready: 1 });\n                        }, int2);\n                    }\n                };\n\n\n            } else {\n\n                if (cod2_status === \"off\" & this.state.cod2_status === \"off\") {\n                    if (this.state.r2ready !== 0) {\n                        reinforced = true\n                        this.setState({\n                            Points1: Points1,\n                            Points2: Points2 + this.state.r2ready\n                        })\n                        this.setState({ r2ready: 0 });\n\n                        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\n                        let t2 = d3.timeout((elapsed2) => {\n                            this.setState({ r2ready: 1 });\n                        }, int2);\n                    }\n                } else {\n                    reinforced = false\n                    this.setState({\n                        Points1: Points1 + this.state.r1ready,\n                        Points2: Points2\n                    })\n                }\n            }\n        }  // _____ END of B2 ________\n\n\n\n        // DRAW ONLY IF TARGET RESPONSE: -----------------------------------\n\n        if (respClass === \"b1\" | respClass === \"b2\") {\n\n            // CUMULATIVE RECORD:  SVG, SCALES ---------------------------- \n            let svgRecord = d3.select(\"#svgRecord\");\n\n            let scaleTime = d3\n                .scaleLinear()\n                .domain([0, this.state.timeLimit])\n                .range([0, 350]);\n\n            let scaleResponses = d3\n                .scaleLinear()\n                .domain([0, this.state.recordHeight])\n                .range([0, 250]);\n\n\n\n            // LINE COORDINATES:\n\n            let LTR = findLastTarget(events)  // Last Target Response\n            let delta_t = LTR.timestamp - this.state.timeStart\n\n            //console.log(\"LTR: \", LTR)\n            //console.log(\"LTR.delta_t: \", delta_t / 1000)\n            // console.log(\"this.state.timeElapsed: \", this.state.timeElapsed / 1000)\n            // console.log(\"--------------------------------------------\")\n\n            //let px = 35 + scaleTime(timeElapsed / 1000);\n\n            //let px = 35 + scaleTime(delta_t / 1000)\n\n            //let px1 = 35 + scaleTime(this.state.timeElapsed / 1000);\n            let px = 35 + scaleTime(this.state.progress / 1000);\n\n            // let myBehavior = this.state.B1\n            // let myColor = this.state.color1\n\n            // if (respClass === \"b2\") {\n            //     myBehavior = this.state.B2\n            //     myColor = this.state.color2\n\n            // }\n\n            let myBehavior = this.state.B1 + this.state.B2\n            let py = scaleResponses(\n                this.state.recordHeight - ((myBehavior - 1) % this.state.recordHeight)\n            );\n\n            let py1 = scaleResponses(\n                this.state.recordHeight - ((myBehavior) % this.state.recordHeight)\n            );\n\n\n            // if (respClass === \"b2\") {\n            //     py = scaleResponses(\n            //         this.state.recordHeight - ((B2) % this.state.recordHeight)\n            //     );\n\n            //     py1 = scaleResponses(\n            //         this.state.recordHeight - ((B2 + 1) % this.state.recordHeight)\n            //     );\n            // }\n\n            // let py = scaleResponses(\n            //     this.state.recordHeight - ((B1 + B2) % this.state.recordHeight)\n            // );\n\n            // let py1 = scaleResponses(\n            //     this.state.recordHeight - ((B1 + B2 + 1) % this.state.recordHeight)\n            // );\n\n\n            // DRAW LINE     (but not if the needle needs reset):\n            if ((B1 + B2 + 1) % this.state.recordHeight !== 0) {\n\n                //if ((myBehavior + 1) % this.state.recordHeight !== 0) {\n                // simple line:\n                // svgRecord.append(\"line\").attr(\"class\", \"dataLine\")\n                //     .attr(\"x1\", px)\n                //     .attr(\"y1\", py)\n                //     .attr(\"x2\", px1)\n                //     .attr(\"y2\", py1)\n                //     .attr(\"stroke\", this.state.responseColor)\n                //     .attr(\"stroke-width\", 1)\n\n                svgRecord.append(\"line\").attr(\"class\", \"dataLine\")\n                    .attr(\"x1\", px)\n                    .attr(\"y1\", py)\n                    .attr(\"x2\", px)\n                    .attr(\"y2\", py1)\n                    .attr(\"stroke\", this.state.responseColor)\n                    .attr(\"stroke-width\", 1)\n            }\n\n\n\n            // DRAW CIRCLE:\n            svgRecord\n                .append(\"circle\").attr(\"class\", \"dataCircle\")\n                //.attr(\"cx\", 35 + scaleTime(this.state.timeElapsed / 1000))\n                .attr(\"cx\", 35 + scaleTime(this.state.progress / 1000))\n                .attr(\n                    \"cy\",\n                    scaleResponses(\n                        this.state.recordHeight - ((B1 + B2 + 1) % this.state.recordHeight)\n                    )\n                )\n                .attr(\"stroke\", this.state.responseColor)\n                .attr(\"stroke-width\", 1)\n                .attr(\"r\", () => {\n                    if (reinforced === false) {\n                        return 1\n                    } else {\n                        return 3\n                    }\n                })\n                .attr(\"fill\", () => {\n                    if (reinforced === false) {\n                        return '#282c34'\n                    } else {\n                        return this.state.responseColor\n                    }\n                })\n\n\n        }\n\n\n\n        //  PUSH NEW RESPONSE:  -----------------------------------\n        let newResponse = {\n            id: newID,\n            timestamp: eventTimeStamp,\n            delta_t: eventTimeStamp - timeStart,\n            class: respClass,\n            x: x,\n            y: y,\n            co: co,\n        };\n        events.push(newResponse);\n        this.setState({ events: events });\n\n    };\n\n\n\n\n    resetDemo = () => {\n\n        // RESET ALL TIMERS: \n\n\n        // CLEAR CUMULATIVE RECORD:\n        let svgRecord = d3.select(\"#svgRecord\");\n        svgRecord.selectAll(\".dataLine\").remove();\n        svgRecord.selectAll(\".dataCircle\").remove();\n\n\n        // CLEAR SKINNER BOX :)\n        let svgMatching = d3.select(\"#svgMatching\");\n        svgMatching\n            .append(\"text\")\n            .attr(\"class\", \"introTexts\")\n            .attr(\"x\", 220)\n            .attr(\"y\", 70)\n            .attr(\"fill\", 'rgb(50, 50, 50)')\n            .attr(\"font-size\", \".9rem\")\n            .attr(\"font-family\", 'Montserrat')\n            .text(\"When ready, click START.\");\n\n\n        // RESET STATE: \n        let myState = setMatchingState();\n        this.setState(myState)\n    };\n\n\n\n\n\n\n    componentDidMount() {\n\n\n        // CUMULATIVE RECORD:\n        let svgRecord = d3.select(\"#svgRecord\");\n\n        let scaleTime = d3\n            .scaleLinear()\n            .domain([0, this.state.timeLimit])\n            .range([0, 350]);\n\n        let axisTime = d3.axisBottom(scaleTime);\n\n        axisTime.ticks(3)\n        axisTime.tickValues([5, 10, 15])\n\n        let gTime = svgRecord\n            .append(\"g\")\n            .style(\"font\", \"12px sans-serif\")\n            .attr(\"transform\", `translate(35, ${260})`);\n\n        gTime.call(axisTime);\n\n\n        let scaleResponses = d3\n            .scaleLinear()\n            .domain([this.state.recordHeight, 0])\n            .range([0, 250]);\n\n        let axisResponses = d3.axisLeft(scaleResponses);\n\n        let gResponses = svgRecord\n            .append(\"g\")\n            .attr(\"transform\", `translate(35, 10)`);\n\n        gResponses.call(axisResponses);\n\n        svgRecord.append(\"text\").text(\"responses\")\n            .attr(\"x\", 50).attr(\"y\", 20).attr(\"font-size\", \"1rem\").attr(\"fill\", 'rgb(200, 200, 200').attr(\"font-weight\", 300)\n\n        svgRecord.append(\"text\").text(\"time (s)\")\n            .attr(\"x\", 350).attr(\"y\", 250).attr(\"font-size\", \"1rem\").attr(\"fill\", 'rgb(200, 200, 200').attr(\"font-weight\", 300)\n\n\n\n        let svgMatching = createSVG_Matching()\n\n        svgMatching\n            .append(\"rect\").attr(\"class\", \"lever\").attr(\"id\", \"lever1\")\n            .attr(\"x\", this.state.lever1[0])\n            .attr(\"y\", this.state.lever1[1])\n            .attr(\"width\", this.state.lever1[2])\n            .attr(\"height\", this.state.lever1[3])\n            .attr(\"fill\", \"rgb(121, 47, 0)\");\n\n        svgMatching\n            .append(\"rect\").attr(\"class\", \"lever\").attr(\"id\", \"lever2\")\n            .attr(\"x\", this.state.lever2[0])\n            .attr(\"y\", this.state.lever2[1])\n            .attr(\"width\", this.state.lever2[2])\n            .attr(\"height\", this.state.lever2[3])\n            .attr(\"fill\", \"rgb(6, 45, 6)\");\n\n    }\n\n\n\n\n\n\n    sliderChange = (e) => {\n        this.setState({ cod1_duration: e.currentTarget.value * 1000 })\n        this.setState({ cod2_duration: e.currentTarget.value * 1000 })\n\n        var p0sec = document.getElementById(\"p0sec\")\n        var p2sec = document.getElementById(\"p2sec\")\n\n        if (e.currentTarget.value > 0) {\n            p0sec.classList.remove(\"inEffect\")\n            p0sec.classList.add(\"notInEffect\")\n            p2sec.classList.remove(\"notInEffect\")\n            p2sec.classList.add(\"inEffect\")\n        } else {\n            p2sec.classList.remove(\"inEffect\")\n            p2sec.classList.add(\"notInEffect\")\n            p0sec.classList.add(\"inEffect\")\n            p0sec.classList.remove(\"notInEffect\")\n\n        }\n    }\n\n\n\n\n\n\n\n\n    render() {\n        return (\n\n            <div className=\"matchingMetaWrapper\">\n\n                <div id=\"FastMatchingDemo\" className=\"matchingWrapper\">\n\n                    <div className=\"top\">\n\n                        <div className=\"matching-results\" id=\"charts\">\n                            <svg\n                                id=\"svgRecord\"\n                                style={{\n                                    width: \"100%\",\n                                    height: \"100%\",\n                                    backgroundColor: \"#282c34\",\n                                    color: \"rgb(179,179,179)\",\n                                    fontSize: \"22px\",\n                                }}\n                            >\n\n                            </svg>\n                        </div>\n\n\n                        <div className=\"top-parameters\">\n\n                            <button\n                                id=\"btnCOD\"\n                                style={{ backgroundColor: this.state.codColor }}\n                            >COD</button>\n\n                            <div className=\"divSlider\">\n\n                                <p className=\"inEffect\" id=\"p0sec\" title=\"No changeover delay\">0s\n                                </p>\n\n                                <input\n                                    type=\"range\"\n                                    id=\"codSlider\"\n                                    title=\"COD duration\"\n                                    min=\"0\"\n                                    max=\"2\"\n                                    step=\"2\"\n                                    value={this.state.cod1_duration}\n                                    list=\"codSliderList\"\n                                    onInput={this.sliderChange}\n                                >{this.value}</input>\n\n                                <p className=\"notInEffect\" id=\"p2sec\">2s</p>\n\n                            </div>\n\n                            <div className=\"divStartReset\">\n                                <button id=\"btnStartMatching\" onClick={this.beginSession}>START</button>\n                                <button id=\"btnResetMatching\" onClick={this.resetDemo}>CLR</button>\n                            </div>\n\n\n                            <ETBD />\n\n                        </div>\n\n                    </div>\n\n\n\n\n                    <div className=\"bottom\">\n\n                        <div id=\"demo\"></div>\n\n\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/hookToggleCOD.js",["402"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/svgMatching.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/ETBD.js",["403","404","405","406","407","408"],"import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n//import { axisBottom, range, svg } from \"d3\";\nimport { recombineAndMutate } from \"./recombineAndMutate.js\"\n//import DrawChartPhenotypes from \"./ChartPhenotypes\"\nimport etbdState from \"./etbdState\"\nimport \"./etbd.sass\";\n\nimport { findLastTarget } from \"../matching/dataManipulation\"\n\nimport { drawETBD, addData } from \"./drawETBD\";\n//import { HistogramETBD } from \"./HistogramETBD\";\n\nexport default class ETBD extends Component {\n\n    constructor() {\n        super();\n\n        this.state = etbdState\n    }\n\n\n    showETBD = () => {\n        d3.selectAll(\".introTexts\").remove()\n\n        drawETBD(this.state.population);\n        //HistogramETBD(this.state.population);\n\n        d3.selectAll(\".lever\").style(\"opacity\", .15)\n\n\n        //  button to run ETBD:\n\n        let btnRunETBD = d3.select(\"#svgMatching\").append('g').attr(\"id\", \"btnRunETBD\")\n\n        btnRunETBD.append('text').text(\"run ETBD\")\n            .attr(\"x\", 505)\n            .attr(\"y\", 35)\n            .attr(\"width\", 100)\n            .attr(\"height\", 40)\n            .attr(\"color\", \"#222\")\n\n        btnRunETBD.append('rect').on(\"click\", this.beginSimulation)\n            .attr(\"x\", 480)\n            .attr(\"y\", 10)\n            .attr(\"width\", 120)\n            .attr(\"height\", 40)\n            .attr(\"fill\", \"#ccc\")\n            .attr(\"stroke\", \"#111\")\n            .attr(\"stroke-width\", 2)\n            .style(\"cursor\", \"pointer\")\n            .style(\"opacity\", .3)\n            .style(\"font-family\", 'Iceland')\n            .style(\"border\", '1 px solid #111')\n\n        // d3.select(\"#svgMatching\").append('text').text(\"run ETBD\")\n        //     .attr(\"x\", 505)\n        //     .attr(\"y\", 35)\n        //     .attr(\"width\", 100)\n        //     .attr(\"height\", 40)\n        //     .attr(\"color\", \"#222\")\n\n        // d3.select(\"#svgMatching\").append('rect').on(\"click\", this.beginSimulation)\n        //     .attr(\"x\", 480)\n        //     .attr(\"y\", 10)\n        //     .attr(\"width\", 120)\n        //     .attr(\"height\", 40)\n        //     .attr(\"fill\", \"#ccc\")\n        //     .attr(\"stroke\", \"#222\")\n        //     .attr(\"stroke-width\", 1)\n        //     .style(\"cursor\", \"pointer\")\n        //     .style(\"opacity\", .3)\n        //     .style(\"font-family\", 'Iceland')\n\n\n        // // display responses and reinforcers:\n\n        // // B1, r1\n        // d3.select(\"#svgMatching\").append('text').text(`${this.state.B1}`)\n        //     .attr(\"x\", 200)\n        //     .attr(\"y\", 100)\n        //     .attr(\"fill\", 'rgb(255, 128, 49)')\n\n        // d3.select(\"#svgMatching\").append('text').text(() => this.state.Points1)\n        //     .attr(\"x\", 200)\n        //     .attr(\"y\", 130)\n        //     .attr(\"stroke\", 'rgb(255, 128, 49)')\n\n        // // B2, r2\n        // d3.select(\"#svgMatching\").append('text').text(`${this.state.B2}`)\n        //     .attr(\"x\", 350)\n        //     .attr(\"y\", 100)\n        //     .attr(\"fill\", '#0c6e0c')\n\n        // d3.select(\"#svgMatching\").append('text').text(`${this.state.Points2}`)\n        //     .attr(\"x\", 350)\n        //     .attr(\"y\", 130)\n        //     .attr(\"stroke\", '#0c6e0c')\n\n\n    };\n\n\n    hideETBD = () => {\n        //d3.selectAll(\".axisLine\").remove()\n        d3.select(\"#groupHistogram\").remove()\n        d3.select(\"#btnRunETBD\").remove()\n        d3.selectAll(\".lever\").style(\"opacity\", .5)\n\n        d3.select(\"#svgMatching\").append(\"text\").text(\"When ready, click START.\")\n            .attr(\"class\", \"introTexts\")\n            .attr(\"x\", 220)\n            .attr(\"y\", 230)\n            .attr(\"fill\", 'rgb(50, 50, 50)')\n            .attr(\"font-size\", \".9rem\")\n            .attr(\"font-family\", 'Montserrat')\n\n    };\n\n\n    beginSimulation = () => {\n\n        //d3.select(\"#svgMatching\").on(\"click\", this.evaluateResponse);\n\n        let thisEvent = {\n            timestamp: performance.now(),\n            //population: genZero,\n            emission: 0,\n            class: \"\",\n            co: 0,\n            points: 0,\n        }\n\n        var myEvents = [thisEvent]\n\n        this.setState({\n            timeStart: performance.now(),\n            events: myEvents,\n        })\n\n\n        d3.selectAll(\".introTexts\").remove()\n\n        let scaleTime = d3\n            .scaleLinear()\n            .domain([0, this.state.timeLimit])\n            .range([0, 350]);\n\n        let scaleResponses = d3\n            .scaleLinear()\n            .domain([0, this.state.recordHeight])\n            .range([0, 250]);\n\n        let recordHeight = this.state.recordHeight\n\n\n\n\n        // The first two Random Intervals, between 1000 and 5000 ms, from an exponential with mean 1/RI mean. I use integers here to remove the microseconds. When the timers exceed the intervals, reinforcement becomes available.\n\n        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\n        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\n        d3.timeout((elapsed1) => {\n            this.setState({ r1ready: 1 });\n        }, int1);\n        d3.timeout((elapsed2) => {\n            this.setState({ r2ready: 1 });\n        }, int2);\n\n\n        // EVENTS PER SESSION (15s):\n        let r1min = `${1 / this.state.RI1 * this.state.timeLimit}`\n        let r2min = `${1 / this.state.RI2 * this.state.timeLimit}`\n\n\n\n        let overallInterval = d3.interval((te) => {\n\n            //addData(this.state.allPopulations);\n            //addData(this.state.population);\n\n            let x1 = 35 + scaleTime((te - this.state.irt) / 1000)\n            let x2 = 35 + scaleTime(te / 1000)\n            let B1 = this.state.B1\n            let B2 = this.state.B2\n\n            let y = scaleResponses(\n                recordHeight - ((B1 + B2) % recordHeight)\n            );\n\n            d3.select('#svgRecord').append(\"line\")\n                .attr(\"class\", \"dataLine\")\n                .attr(\"x1\", x1)\n                .attr(\"y1\", y)\n                .attr(\"x2\", x2)\n                .attr(\"y2\", y)\n                .attr(\"stroke\", this.state.responseColor)\n                .attr(\"stroke-width\", 1)\n\n\n            this.setState({ progress: te })\n\n\n            if (te > this.state.timeLimit * 1000) {\n                //let svgMatching = d3.select(\"#svgMatching\")\n                //svgMatching.on(\"click\", null);\n                overallInterval.stop()\n                console.log(\"etbd_state = \", this.state)\n\n            } else {\n\n                this.runETBD();\n\n            }\n\n        }, this.state.irt);\n\n\n\n\n    };\n\n\n\n\n    //-----------------------________________________\n    runETBD = () => {\n        var timeStart = this.state.timeStart;\n        var eventTimeStamp = performance.now()\n        var events = this.state.events;\n\n        this.setState({\n            timeElapsed: eventTimeStamp - timeStart\n        });\n\n\n        // RANDOM EMISSION:\n        var population = this.state.population;\n        var allPopulations = this.state.allPopulations;\n\n        var randomEmission = 0;\n        let idx = d3.randomInt(0, 9)()\n        randomEmission = population[idx]\n\n        var respClass = \"be\";\n        var co = 0;\n        var newID = 0;\n        var reinforced = false;\n        //gen = this.state.gen;\n\n\n        // PE: \n        var pe = events[events.length - 1]\n        newID = pe.id + 1\n\n        // CUMULATIVE FREQUENCIES:\n        var B1 = this.state.B1;\n        var B2 = this.state.B2;\n        var Be = this.state.Be;\n        var Points1 = this.state.Points1;\n        var Points2 = this.state.Points2;\n        var CO = this.state.CO;\n\n        var class1 = this.state.class1;\n        var class2 = this.state.class2;\n\n\n        //                             EMISSION CLASS: B1, B2, Be\n\n        // -------------------------------------------------------------- Class 1\n\n        //if (randomEmission >= class1[0] & randomEmission <= class1[-1]) {\n        if (class1.includes(randomEmission)) {\n\n            let svgMatching = d3.select(\"#svgMatching\")\n            let lv1 = svgMatching.select(\"#lever1\")\n\n            lv1\n                .style(\"opacity\", .9)\n                .attr(\"transform\", \"scale(0.98)\")\n                .attr(\"transform\", \"translate(2, 2)\")\n                .attr(\"box-shadow\", \"3px 2px 22px 1px rgba(0, 0, 0, 0.24)\")\n\n\n\n            respClass = \"b1\";\n            this.setState({\n                B1: B1 + 1,\n                responseColor: this.state.color1\n            })\n\n            // CHANGEOVER? \n            if (pe.class === \"b2\") {\n                co = 1;\n                this.setState({\n                    CO: CO + 1,\n                    responseColor: this.state.colorCO\n                })\n            }\n\n            // CHECK FOR REINFORCEMENT: \n            if (this.state.r1ready !== 0) {\n                reinforced = true\n\n                this.setState({\n                    Points1: Points1 + this.state.r1ready,\n                    r1ready: 0,\n                });\n\n                let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\n\n                d3.timeout((elapsed1) => {\n                    this.setState({ r1ready: 1 });\n                }, int1);\n            };\n\n\n\n            lv1\n                .transition().duration(300).style(\"opacity\", .5)\n                .attr(\"transform\", \"scale(1)\")\n                .attr(\"transform\", \"translate(-2, -2)\")\n                .attr(\"box-shadow\", \"none\")\n\n        };\n\n\n\n\n        // -------------------------------------------------------------- Class 2\n\n        if (class2.includes(randomEmission)) {\n\n            let svgMatching = d3.select(\"#svgMatching\")\n            let lv2 = svgMatching.select(\"#lever2\")\n\n            lv2\n                .style(\"opacity\", .9)\n                .attr(\"transform\", \"scale(0.98)\")\n                .attr(\"transform\", \"translate(2, 2)\")\n                .attr(\"box-shadow\", \"3px 2px 22px 1px rgba(0, 0, 0, 0.24)\")\n\n\n            respClass = \"b2\";\n            this.setState({\n                B2: B2 + 1,\n                responseColor: this.state.color2\n            });\n\n            // CHANGEOVER? \n            if (pe.class === \"b1\") {\n                co = 1;\n                this.setState({\n                    CO: CO + 1,\n                    responseColor: this.state.colorCO\n                });\n            }\n\n            // CHECK FOR REINFORCEMENT: \n            if (this.state.r2ready !== 0) {\n                reinforced = true\n\n                this.setState({\n                    Points2: Points2 + this.state.r2ready,\n                    r2ready: 0,\n                });\n\n                let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\n\n                d3.timeout((elapsed2) => {\n                    this.setState({ r2ready: 1 });\n                }, int2);\n            };\n\n            lv2\n                .transition().duration(300).style(\"opacity\", .5)\n                .attr(\"transform\", \"scale(1)\")\n                .attr(\"transform\", \"translate(-2, -2)\")\n                .attr(\"box-shadow\", \"none\")\n        };\n\n\n\n        //    ----------------   CUMULATIVE RECORD  ----------------\n\n\n\n\n        if (respClass === \"b1\" | respClass === \"b2\") {\n\n\n            // SVG CUMULATIVE RECORD:\n            let svgRecord = d3.select(\"#svgRecord\");\n\n            let scaleTime = d3\n                .scaleLinear()\n                .domain([0, this.state.timeLimit])\n                .range([0, 350]);\n\n            let scaleResponses = d3\n                .scaleLinear()\n                .domain([0, this.state.recordHeight])\n                .range([0, 250]);\n\n            // LINE COORDINATES:\n\n            let LTR = findLastTarget(events)  // Last Target Response\n            let delta_t = LTR.timestamp - this.state.timeStart\n\n            let px = 35 + scaleTime(this.state.progress / 1000);\n\n            let myBehavior = this.state.B1 + this.state.B2\n\n            let py = scaleResponses(\n                this.state.recordHeight - ((myBehavior - 1) % this.state.recordHeight)\n            );\n\n            let py1 = scaleResponses(\n                this.state.recordHeight - ((myBehavior) % this.state.recordHeight)\n            );\n\n\n            // DRAW LINE     (but not if the needle needs reset):\n            if ((B1 + B2 + 1) % this.state.recordHeight !== 0) {\n                svgRecord.append(\"line\").attr(\"class\", \"dataLine\")\n                    .attr(\"x1\", px)\n                    .attr(\"y1\", py)\n                    .attr(\"x2\", px)\n                    .attr(\"y2\", py1)\n                    .attr(\"stroke\", this.state.responseColor)\n                    .attr(\"stroke-width\", 1)\n            }\n\n\n            // DRAW CIRCLE:\n            svgRecord\n                .append(\"circle\").attr(\"class\", \"dataCircle\")\n                //.attr(\"cx\", 35 + scaleTime(this.state.timeElapsed / 1000))\n                .attr(\"cx\", 35 + scaleTime(this.state.progress / 1000))\n                .attr(\n                    \"cy\",\n                    scaleResponses(\n                        this.state.recordHeight - ((B1 + B2 + 1) % this.state.recordHeight)\n                    )\n                )\n                .attr(\"stroke\", this.state.responseColor)\n                .attr(\"stroke-width\", 1)\n                .attr(\"r\", () => {\n                    if (reinforced === false) {\n                        return 1\n                    } else {\n                        return 3\n                    }\n                })\n                .attr(\"fill\", () => {\n                    if (reinforced === false) {\n                        return '#282c34'\n                    } else {\n                        return this.state.responseColor\n                    }\n                })\n\n\n            // SVG MATCHING:\n\n            //console.log(randomEmission)\n\n            //let svgMatching = d3.select(\"#svgMatching\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 180).attr(\"y\", 90).attr(\"font-size\", \".7rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 205).attr(\"y\", 90).attr(\"font-size\", \".7rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 180).attr(\"y\", 105).attr(\"font-size\", \".7rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 205).attr(\"y\", 105).attr(\"font-size\", \".8rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 230).attr(\"y\", 90).attr(\"font-size\", \".8rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 230).attr(\"y\", 105).attr(\"font-size\", \".8rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 255).attr(\"y\", 90).attr(\"font-size\", \".7rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 255).attr(\"y\", 105).attr(\"font-size\", \".7rem\")\n\n        };\n\n\n\n        //  RECORD THIS EVENT:\n        let newResponse = {\n            id: newID,\n            timestamp: eventTimeStamp,\n            class: respClass,\n            emission: randomEmission,\n            reinforced: reinforced,\n            population: population,\n            co: co,\n            // points1: points1,\n            // points2: points2,\n        };\n\n        events.push(newResponse);\n        this.setState({ events: events });\n\n\n\n\n\n\n\n\n\n        //               CREATE NEW_POPULATION:\n\n\n\n\n        var next_population = []\n\n        if (reinforced === false) {\n\n            for (let j = 0; j < population.length; j++) {\n\n                let idx1 = d3.randomInt(9)()\n                let p1 = population[idx1]\n                let idx2 = d3.randomInt(population.length)()\n                let p2 = population[idx2]\n\n                var phenRandom = recombineAndMutate(p1, p2, this.state.mutation_rate)\n\n                if (this.state.repertoire.includes(phenRandom)) {\n                    next_population.push(phenRandom)\n                } else {\n                    next_population.push(phenRandom % this.state.repertoire.length)\n                }\n\n            }\n\n            addData(next_population)\n            this.setState({ population: next_population })\n\n            // next_population.forEach(item => {\n            //     allPopulations.push(item)\n            // })\n\n            //this.setState({ allPopulations: allPopulations })\n\n            //this.setState({ responseColor: \"grey\" });\n\n\n        } else if (reinforced === true) {\n\n            var fitnessValues = []\n\n            population.forEach(phenotype => {\n                let phen_dif = Math.abs(phenotype - randomEmission)\n                fitnessValues.push(phen_dif)\n            })\n\n\n            // for each behavior in the population:\n            for (let j = 0; j < population.length; j++) {\n\n\n                // Get two parents:\n\n                var parents = []\n\n                while (parents.length < 2) {\n                    var randomFitness = parseInt(d3.randomExponential(1, 300)(this.state.Miu1) * 100);\n                    var relativeFitnessValues = []\n\n                    fitnessValues.forEach(fitness => {\n                        let fitness_dif = Math.abs(fitness - randomFitness)\n                        relativeFitnessValues.push(fitness_dif)\n                    })\n\n\n                    var closestIndex = d3.minIndex(relativeFitnessValues)\n                    var closestPhen = population[closestIndex]\n\n                    if (!parents.includes(closestPhen)) {\n                        parents.push(closestPhen)\n                    }\n                }\n\n\n                // CHILD BEHAVIOR:\n                //var phenFitness = recombineAndMutate(p1, p2, 0.50)\n                var child = recombineAndMutate(parents[0], parents[1], this.state.mutation_rate)\n\n                //console.log(\"emission: \", randomEmission, \"; parents: \", parents, \" --> \", child)\n\n\n                // IS THIS TO WRAP THE REPERTOIRE ... ?? \n                if (this.state.repertoire.includes(child)) {\n                    next_population.push(child)\n                } else {\n                    next_population.push(child % this.state.repertoire.length)\n                }\n\n                /* console.log(\"population: \", population, \"; \", randomEmission)\n                console.log(\"fitnessValues: \", fitnessValues)\n                console.log(\"randomFitness: \", randomFitness)\n                console.log(\"relFitnessVals: \", relativeFitnessValues)\n                console.log(\"closestPhen: \", closestPhen, \"; index: \", closestIndex, \"; parent: \", closestPhen)\n                console.log(\"-----------------------------\") */\n\n\n                // let idx1 = d3.randomInt(9)()\n                // let p1 = population[idx1]\n                // let idx2 = d3.randomInt(population.length)()\n                // let p2 = population[idx2]\n\n                //var phenFitness = recombineAndMutate(p1, p2, 0.50)\n\n                // if (this.state.repertoire.includes(phenFitness)) {\n                //     next_population.push(phenFitness)\n                // } else {\n                //     next_population.push(phenFitness % this.state.repertoire.length)\n                // }\n\n\n            };\n\n            addData(next_population)\n            this.setState({ population: next_population })\n\n            // next_population.forEach(item => {\n            //     allPopulations.push(item)\n            // })\n\n            // this.setState({ allPopulations: allPopulations })\n\n            //this.setState({ responseColor: \"grey\" });\n        };\n\n\n\n\n\n\n\n        //}\n\n        //}, this.state.irt); // END OF TIMER\n\n    } // END OF FUNCTION runETBD()\n\n\n\n\n    resetETBD = () => {\n\n        // RESET ALL TIMERS: \n\n\n        // CLEAR CUMULATIVE RECORD:\n        let svgRecord = d3.select(\"#svgRecord\");\n        svgRecord.selectAll(\".dataLine\").remove();\n        svgRecord.selectAll(\".dataCircle\").remove();\n\n        let svgMatching = d3.select(\"#svgMatching\")\n        svgMatching.selectAll(\".histRect\").remove()\n\n\n        // CLEAR SKINNER BOX :)\n        //let svgMatching = d3.select(\"#svgMatching\");\n\n        // svgMatching\n        //     .append(\"text\")\n        //     .attr(\"class\", \"introTexts\")\n        //     .attr(\"x\", 220)\n        //     .attr(\"y\", 70)\n        //     .attr(\"fill\", 'rgb(50, 50, 50)')\n        //     .attr(\"font-size\", \".9rem\")\n        //     .attr(\"font-family\", 'Montserrat')\n        //     .text(\"When ready, click START.\");\n\n\n        // RESET STATE: \n        this.setState(etbdState)\n\n        let genZero = []\n        let n = this.state.N\n        for (let i = 0; i < n; i++) {\n            let b = d3.randomInt(1000)()\n            genZero.push(b)\n        }\n        this.setState({ population: genZero })\n        this.setState({ allPopulations: genZero })\n    };\n\n\n\n    componentDidMount() {\n        // CREATE RANDOM POPULATION\n        let genZero = []\n        let n = this.state.N\n        for (let i = 0; i < n; i++) {\n            let b = d3.randomInt(1000)()\n            genZero.push(b)\n        }\n        this.setState({ population: genZero })\n        this.setState({ allPopulations: genZero })\n\n        d3.select(\"#btnStartETBD\").on(\"click\", this.beginSimulation)\n        d3.select(\"#btnResetETBD\").on(\"click\", this.resetETBD)\n    };\n\n\n\n\n    // BAR CHART REPERTOIRE ======================================      REPERTOIRE BAR CHART: \n\n\n\n    // var myPhens = phensTest.filter(item => item.present.length > 0)\n    // DrawChartPhenotypes(myPhens, [d3.min(this.state.repertoire), d3.max(this.state.repertoire)])\n\n\n\n\n\n\n    // svgMatching: ===========================================================  svgMatching\n    // var svg = d3\n    //     .select(\"#demo\")\n    //     .append(\"svg\")\n    //     .attr(\"id\", \"svgMatching\")\n    //     .attr(\"width\", \"100%\")\n    //     .attr(\"height\", \"100%\");\n\n    // svg.on(\"click\", this.runETBD);\n\n    // var svgETBD = d3\n    //     .select(\"#demoETBD\")\n    //     .append(\"svg\")\n    //     .attr(\"id\", \"svgETBD\")\n    //     .attr(\"width\", \"100%\")\n    //     .attr(\"height\", \"100%\");\n\n    // svgETBD.on(\"click\", this.runETBD);\n    //}\n\n\n    // sliderChange = (e) => {\n    //     this.setState({ cod1_duration: e.currentTarget.value * 1000 })\n    //     this.setState({ cod2_duration: e.currentTarget.value * 1000 })\n    // }\n\n    // dummyFunc = () => {\n\n    //     d3.select(\"#svgMatching\").append('text').text(`${this.state.B1}`)\n    //         .attr(\"x\", 200)\n    //         .attr(\"y\", 100)\n    //         .attr(\"fill\", 'rgb(255, 128, 49)')\n\n    //     d3.select(\"#svgMatching\").append('text').text(`${this.state.Points1}`)\n    //         .attr(\"x\", 200)\n    //         .attr(\"y\", 130)\n    //         .attr(\"stroke\", 'rgb(255, 128, 49)')\n\n    //     // B2, r2\n    //     d3.select(\"#svgMatching\").append('text').text(`${this.state.B2}`)\n    //         .attr(\"x\", 350)\n    //         .attr(\"y\", 100)\n    //         .attr(\"fill\", '#0c6e0c')\n\n    //     d3.select(\"#svgMatching\").append('text').text(`${this.state.Points2}`)\n    //         .attr(\"x\", 350)\n    //         .attr(\"y\", 130)\n    //         .attr(\"stroke\", '#0c6e0c')\n    // }\n\n    render() {\n\n\n        return (\n\n            <>\n                <div className=\"divShowHideETBD\">\n                    <button id=\"btnShowETBD\" onClick={this.showETBD}>Show ETBD</button>\n                    <button id=\"btnClearETBD\" onClick={this.hideETBD}>Hide</button>\n                </div>\n\n                <div className=\"divStartResetETBD\">\n                    <button id=\"btnStartETBD\" onClick={this.beginSimulation}>run ETBD</button>\n                    <button id=\"btnResetETBD\" onClick={this.resetETBD}>reset</button>\n                </div>\n\n            </>\n\n\n\n        );\n    };\n}\n//}\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/recombineAndMutate.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/etbdState.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/ChartPhenotypes.js",["409","410"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/drawETBD.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/HistogramETBD.js",["411","412","413","414"],"import React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nexport function HistogramETBD(props) {\n\n    //var [data, setData] = useState([])\n    var data = props\n\n    useEffect(() => {\n        var margin = { top: 75, left: 120, bottom: 100, right: 120 }\n        var svgWidth = document.getElementById(\"svgMatching\").clientWidth\n        var svgHeight = document.getElementById(\"svgMatching\").clientHeight\n        var width = svgWidth - margin.left - margin.right\n        var height = svgHeight - margin.top - margin.bottom\n\n\n        var X_scale = d3.scaleLinear().domain([0, 256]).range([0, width]);\n        var Y_scale = d3.scaleLinear().range([height, 0]).domain([0, 20])\n\n        var groupHistogram = d3.select(\"#svgMatching\")\n            .append(\"g\")\n            .attr(\"id\", \"groupHistogram\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        groupHistogram.select(\"#hist_X_axis\")\n            .attr(\"class\", \"axisLine\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(d3.axisBottom(X_scale));\n\n\n\n        // Turn data array into bins; \n        // Must be done before calling the Y_axis.\n        var binGenerator = d3.bin()\n            .value(function (d) { return d; })\n            .domain(X_scale.domain())\n            .thresholds(X_scale.ticks(8));\n\n        var bins = binGenerator(data);\n\n        groupHistogram.select(\"#hist_Y_axis\")\n            .attr(\"class\", \"axisLine\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(d3.axisBottom(X_scale));\n\n        groupHistogram.selectAll(\"rect\")\n            .data(bins)\n            .join(\"rect\")\n            .attr(\"class\", \"histRect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", function (d) { return `translate(${X_scale(d.x0)} , ${Y_scale(d.length)})` })\n            .attr(\"width\", function (d) { return X_scale(d.x1) - X_scale(d.x0) - 1 })\n            .attr(\"height\", function (d) { return height - Y_scale(d.length); })\n            .style(\"fill\", \"#69b3a2\")\n    }, []);\n\n\n\n\n}",["415","416"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/Qual.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ImagesContainer.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/teaching/OrderFellowship.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/vitae/infoPublications.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/vitae/infoConferences.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/vitae/MyVitae.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/CollapseHook.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HammingDemo.js",["417","418"],"import \"./hamming_style.sass\";\nimport '../etbd_input/input_styles.sass'\n\nimport React from \"react\";\n//import parse from \"html-react-parser\"\n\nimport { hdValues } from \"./hdValues\";\nimport { hdCodValues } from \"./hdCodValues\";\n\n\n// import DrawPhenotypes from \"./drawPhenotypes\";\nimport HammingDistances from \"./HammingDistances\"\n\nimport InputTemplate from \"../etbd_input/InputTemplate\";\nimport HeatMapHook from \"./HeatmapHook\";\nimport TableHD from \"./TableHook\"\n\n\nexport default class HammingDemo extends React.Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            range1: 0,\n            limit1: 471,\n            boundary1: 511,\n            boundary2: 512,\n            limit2: 552,\n            range2: 1023,\n            hdValues: hdValues,\n            hdCodValues: hdCodValues,\n            lim1: 471,\n            lim2: 512,\n            lim3: 553,\n            hdSame: 0,\n            hdOther: 0\n        };\n\n\n\n        this.updateValue = this.updateValue.bind(this)\n        // this.decreaseValue = this.decreaseValue.bind(this)\n        // this.increaseValue = this.increaseValue.bind(this)\n\n        //this.handleFieldChange = this.handleFieldChange.bind(this)\n    };\n\n\n    updateValue = (e) => {\n        e.preventDefault();\n        let a22 = e.target.name\n        let b22 = e.target.value\n        this.setState({ [a22]: parseInt(b22) })\n        console.log(\"target name & value: \", a22, b22)\n    };\n\n\n    // handleFieldChange = (e) => {\n    //     //e.preventDefault();\n    //     let a22 = e.target.name\n    //     let b22 = e.target.value\n    //     this.setState({ [a22]: parseInt(b22) })\n    //     console.log(\"target name & value: \", a22, b22)\n    // };\n\n\n    decreaseValue = (e) => {\n        //e.preventDefault();\n        let a22 = e.target.name\n        let b22 = e.target.value\n        this.setState({ [a22]: parseInt(b22) })\n    };\n\n    increaseValue = (e) => {\n        //e.preventDefault();\n        let a22 = e.target.name\n        let b22 = e.target.value\n        this.setState({ [a22]: parseInt(b22) })\n    };\n\n\n    componentDidMount() {\n        // let c1 = d3.range(471, 512)\n        // let c11 = d3.range(471, 553)\n        // let hdScatter = loadHammingDataOriginal(c11, c1)\n        // this.setState({ scatterData: hdScatter })\n        // console.log(this.state.lim1)\n    };\n\n\n    componentDidUpdate() {\n        //console.log(\"HammingDemo did update\")\n    };\n\n\n    render() {\n\n        var formFields = Object.entries(this.state).map((key, value) => {\n\n            let exceptions = ['hdValues', 'range1', 'range2', 'hdCodValues', \"lim1\", \"lim2\", \"lim3\", 'hdSame', 'hdOther', \"\"];\n\n            if (exceptions.includes(key[0]) === true) {\n                return\n            } else {\n                return (\n                    <InputTemplate\n                        key={key[0]}\n                        name={key[0]}\n                        value={key[1]}\n                        updateValue={this.updateValue}\n                    >\n                    </InputTemplate>\n                )\n            }\n        })\n\n        // var hdScatter = this.state.hdCodValues.filter(\n        //     item => item.variable > this.state.boundary1 - 3\n        //         & item.variable <= this.state.boundary1\n        //         & item.group > this.state.boundary1 - 3\n        //         & item.group < this.state.boundary2 + 3\n        // )\n        //console.log(hdScatter)\n\n\n\n        return (\n\n            <>\n                <div id=\"divHamming\">\n\n                    {/* <div\n                        style={{display: \"flex\", flexDirection: \"row\",}}>\n                        <svg id=\"svgHamming\"></svg>\n                    </div> */}\n\n\n\n                    {/* <Scatter2\n                        limit1={this.state.limit1}\n                        limit2={this.state.limit2}\n                        boundary1={this.state.boundary1}\n                        boundary2={this.state.boundary2}\n                    /> */}\n\n\n\n\n                    <HeatMapHook\n                        //myData={hdScatter}\n                        limit1={this.state.limit1}\n                        limit2={this.state.limit2}\n                        boundary1={this.state.boundary1}\n                        boundary2={this.state.boundary2}\n                    />\n\n\n\n                    {/* <TableHD\n                        limit1={this.state.limit1}\n                        limit2={this.state.limit2}\n                        boundary1={this.state.boundary1}\n                        boundary2={this.state.boundary2}\n                    /> */}\n\n                    <HammingDistances\n                        myData={this.state.hdValues}\n                        limit1={this.state.limit1}\n                        limit2={this.state.limit2}\n                        boundary1={this.state.boundary1}\n                        boundary2={this.state.boundary2}\n                    />\n\n\n                    {/* <DrawPhenotypes\n                        myData={this.state.hdValues}\n                        limit1={this.state.limit1}\n                        limit2={this.state.limit2}\n                        boundary1={this.state.boundary1}\n                        boundary2={this.state.boundary2}\n                    /> */}\n\n\n\n\n                    <div className=\"divButtons\">\n                        {formFields}\n                    </div>\n\n\n                    <div className=\"divButtons\">\n\n                        <button\n                            name=\"reset\"\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\n                            onClick={() => {\n                                this.setState({\n                                    limit1: 303,\n                                    boundary1: 343,\n                                    boundary2: 344,\n                                    limit2: 384,\n                                })\n                            }}\n                        >???</button>\n\n\n                        <button\n                            name=\"reset\"\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\n                            onClick={() => {\n                                this.setState({\n                                    limit1: 407,\n                                    boundary1: 447,\n                                    boundary2: 448,\n                                    limit2: 488,\n                                })\n                            }}\n                        >1.4</button>\n\n\n                        <button\n                            name=\"reset\"\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\n                            onClick={() => {\n                                this.setState({\n                                    limit1: 215,\n                                    boundary1: 255,\n                                    boundary2: 256,\n                                    limit2: 296,\n                                })\n                            }}\n                        >3.4</button>\n\n\n                        <button\n                            name=\"reset\"\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\n                            onClick={() => {\n                                this.setState({\n                                    limit1: 471,\n                                    boundary1: 511,\n                                    boundary2: 512,\n                                    limit2: 552,\n                                })\n                            }}\n                        >4.4</button>\n\n\n\n                    </div>\n\n\n                    {/* <div\n                        id=\"divHeatMap\"\n                        style={{\n                            //backgroundColor: \"#446b58\",\n\n                        }}\n                    >\n                        <svg id=\"svgHeatMap\"></svg>\n\n                        <div id=\"ttHeatMap\"></div>\n                    </div > */}\n\n\n                    {/* {drawHeatMap(\n                        // this.state.hdCodValues.filter(\n                        //     item => item.variable > 506\n                        //         & item.variable <= 511\n                        //         & item.group > 506\n                        //         & item.group < 517\n                        // ),\n                        hdScatter,\n                        [],\n                        //this.state.tick_values_heat,\n                        [this.state.limit1, this.state.boundary1],\n                    )\n                    } */}\n\n\n                </div>\n            </>\n\n        )\n    }\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/hammingFunctions.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HeatmapTemplate.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_input/InputClasses.js",["419","420","421"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_input/InputTemplate.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/defaultDataPhens.js",[],["422","423"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/hdValues.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/drawPhenotypes.js",["424"],"import \"./hamming_style.sass\";\nimport \"./phenotypes.sass\";\n\n//import parse from \"html-react-parser\"\nimport * as d3 from \"d3\";\n\nimport { useEffect } from \"react\";\n//import { useRef } from \"react\";\n\n\nfunction DrawPhenotypes(props) {\n\n\n    useEffect(() => {\n        let margin = { top: 20, right: 20, bottom: 50, left: 30, }\n        let svgWidth = 550\n        let svgHeight = 150\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n\n        let X_Band = d3.scaleBand()\n            .range([0, width])\n            .domain(\n                props.myData.map((d) => {\n                    return d.hdNext.hdLabel\n                }))\n            .padding(0.0);\n\n\n        // let X_Linear = d3.scaleLinear()\n        //     .range([0, width])\n        //     .domain([props.range1, props.range2])\n\n        let Y_Linear = d3.scaleLinear().range([height, 0]).domain([1, 10]);\n\n\n\n        let chartPhenotypes\n        let xx = document.getElementById('chartPhenotypes')\n\n        if (xx === null) {\n            //console.log(\"no such group\")\n\n            chartPhenotypes = d3.select(\"#svgPhenotypes\").append('g')\n                .attr(\"id\", \"chartPhenotypes\")\n                .attr(\"transform\",\n                    `translate(${margin.left},${margin.top})`);\n\n            chartPhenotypes\n                .append(\"g\")\n                .attr(\"color\", \"yellow\")\n                .attr(\"font-size\", \"10px\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\n                .call(\n                    d3.axisBottom(X_Band)\n                        .tickPadding(5)\n                        .tickSize(0)\n                )\n                .selectAll(\"text\").remove()\n\n            // chartPhenotypes\n            //     .append(\"g\")\n            //     .attr(\"class\", \"hammingLine\")\n            //     .attr(\"transform\", \"translate(0,\" + height + \")\")\n            //     .call(\n            //         d3.axisBottom(X_Linear)\n            //             //.tickPadding(2)\n            //             //.tickSize(0)\n            //             .ticks(5)\n            //     )\n\n            chartPhenotypes\n                .append(\"g\")\n                .attr(\"class\", \"hammingLine\")\n                .call(\n                    d3.axisLeft(Y_Linear)\n                        .tickValues([1, 5, 10])\n                )\n        } else {\n            chartPhenotypes = d3.select(\"#chartPhenotypes\")\n        }\n\n\n        // average HD SELF:\n        chartPhenotypes.append(\"text\")\n            .attr(\"fill\", \"lime\")\n            .attr(\"x\", 100)\n            .attr(\"y\", 0)\n            .text(\"props.hdSelf\")\n\n        // average HD OTHER:\n        chartPhenotypes.append(\"text\")\n            .attr(\"fill\", \"orange\")\n            .attr(\"x\", 300)\n            .attr(\"y\", 0)\n            .text(\"props.hdOther\")\n\n\n        var updateChart = () => {\n            let myBins\n            let bb = document.getElementById(\"#myBins\")\n\n            if (bb === null) {\n                myBins = chartPhenotypes.append('g').attr(\"id\", \"myBins\").attr(\"class\", \"hammingBarPhens\")\n                    .selectAll(\"rect\")\n                    .data(props.myData)\n\n            } else {\n                myBins = d3.select(\"#myBins\").data(props.myData)\n            }\n\n            myBins.enter().append(\"rect\")\n                .attr(\"x\", (d) => X_Band(d.hdNext.hdLabel))\n                .attr(\"y\", (d) => Y_Linear(d.hdNext.hd))\n                .attr(\"width\", X_Band.bandwidth())\n                .attr(\"height\", (d) => height - Y_Linear(d.hdNext.hd))\n                .attr(\"stroke-width\", 1)\n\n            myBins.exit().remove();\n        }\n\n        updateChart()\n\n\n    }, []);\n\n\n\n\n\n    useEffect(() => {\n\n        var updateColors = () => {\n            let groupBins = d3.select(\"#myBins\")\n            let bins1 = groupBins.selectAll(\"rect\")\n\n            bins1.attr(\"fill\", (d) => {\n                if (d.phenotype >= props.limit1 & d.phenotype <= props.boundary1) {\n                    return 'rgb(28, 255, 28)'\n                } else if (d.phenotype >= props.boundary2 & d.phenotype <= props.limit2) {\n                    return 'rgb(255, 128, 49)'\n\n                } else {\n                    return '#fff'\n                }\n            })\n            bins1.attr(\"stroke\", (d) => {\n                if (d.phenotype >= props.limit1 & d.phenotype <= props.boundary1) {\n                    return 'rgb(28, 255, 28)'\n                } else if (d.phenotype >= props.boundary2 & d.phenotype <= props.limit2) {\n                    return 'rgb(255, 128, 49)'\n                } else {\n                    return 'none'\n                }\n            })\n        }\n\n        updateColors()\n\n\n    }, [props.limit1, props.boundary1, props.limit2, props.boundary2]\n    );\n\n\n\n\n\n\n\n\n\n\n\n    return (\n\n        <>\n            <div\n                id=\"divPhenotypes\"\n                style={{\n                    //backgroundColor: \"#446b58\",\n                    position: \"relative\",\n                    marginTop: \"10px\",\n                }}\n            >\n                <svg\n                    id=\"svgPhenotypes\"\n                ></svg>\n\n                {/* <div id=\"ttPhenotypes\"></div> */}\n\n            </div >\n\n        </>\n\n    )\n}\n\n\nexport default DrawPhenotypes;\n\n\n\n\n\n\n    // var highlightClasses = () => {\n\n    //     chartPhenotypes.selectAll(\"text\")\n    //         .attr(\"font-size\", \"14px\")\n    //         .attr(\"transform\", (d) => {\n    //             if (d === limit1) {\n    //                 return \"translate(-20,0)rotate(0)\"\n    //             } else if (d === boundary1) {\n    //                 return \"translate(-10,0)rotate(0)\"\n    //             } else if (d === boundary2) {\n    //                 return \"translate(10,0)rotate(0)\"\n    //             } else if (d === limit2) {\n    //                 return \"translate(20,0)rotate(0)\"\n    //             }\n    //         })\n\n    //     chartPhenotypes.selectAll(\"text\").attr(\"fill\", (d) => {\n    //         if (d === limit1) {\n    //             return \"lime\"\n    //         } else if (d === boundary1) {\n    //             return \"lime\"\n    //         } else if (d === boundary2) {\n    //             return \"orange\"\n    //         } else if (d === limit2) {\n    //             return \"orange\"\n    //         } else {\n    //             return \"#ddd\"\n    //         }\n    //     })\n\n\n    // };\n\n\n    // // X LINEAR\n    // chartPhenotypes\n    //     .append(\"g\")\n    //     .attr(\"class\", \"yellowLine\")\n    //     .attr(\"transform\", \"translate(0,\" + (height + 10) + \")\")\n    //     .call(\n    //         d3.axisBottom(X_Linear)\n    //             .tickPadding(10)\n    //             .tickValues([1, limit1, limit2, 1000,])\n    //             //.ticks(10)\n    //             .tickSize(0)\n    //     )\n    //     .selectAll('text')\n    //     .attr(\"fill\", (d) => {\n    //         if (d === limit1) {\n    //             return \"lime\"\n    //         } else if (d === boundary1) {\n    //             return \"lime\"\n    //         } else if (d === boundary2) {\n    //             return \"orange\"\n    //         } else if (d === limit2) {\n    //             return \"orange\"\n    //         } else {\n    //             return \"#ddd\"\n    //         }\n    //     })\n\n\n\n\n\n\n\n\n    // // // LIMITS AND MOUSE GESTURES: -------------------------------------------------------\n\n    // let gBoundariesPhenotypes = chartPhenotypes.append(\"g\").attr(\"id\", \"gBoundariesPhenotypes\")\n\n    // //LIMIT 1:\n    // gBoundariesPhenotypes.append(\"line\")\n    //     .attr(\"id\", \"L1\")\n    //     .attr(\"class\", \"boundary left\")\n    //     .attr(\"dragging\", true)\n    //     .attr('z-index', 10)\n    //     .attr(\"x1\", X_Linear(this.props.limit1))\n    //     .attr(\"x2\", X_Linear(this.props.limit1))\n    //     .attr(\"y1\", Y_Linear(-7))\n    //     .attr(\"y2\", Y_Linear(-4))\n\n    // //HD BETWEEN:\n    // gBoundariesPhenotypes.append(\"line\")\n    //     .attr(\"id\", \"L2\")\n    //     .attr(\"class\", \"boundary\")\n    //     .attr('z-index', 10)\n    //     .attr(\"dragging\", true)\n    //     .attr(\"x1\", X_Linear(this.props.boundary2))\n    //     .attr(\"x2\", X_Linear(this.props.boundary2))\n    //     .attr(\"y1\", Y_Linear(-7))\n    //     .attr(\"y2\", Y_Linear(-4))\n    //     .attr(\"fill\", \"yellow\")\n    //     .attr(\"stroke\", \"yellow\")\n\n    // //LIMIT 2:\n    // gBoundariesPhenotypes.append(\"line\")\n    //     .attr(\"id\", \"L3\")\n    //     .attr(\"class\", \"boundary right\")\n    //     .attr(\"dragging\", true)\n    //     .attr(\"x1\", X_Linear(this.props.limit2))\n    //     .attr(\"x2\", X_Linear(this.props.limit2))\n    //     .attr(\"y1\", Y_Linear(-7))\n    //     .attr(\"y2\", Y_Linear(-4));\n\n    // // MOUSE OVER:\n    // gBoundariesPhenotypes.selectAll('line').on('mouseover', function (e) {\n    //     //e.preventDefault()\n    //     let id = e.target.id\n    //     let xx = e.layerX\n    //     let yy = e.layerY\n\n    //     // console.log(id)\n    //     // console.log(this)\n    //     // console.log(\"--------------------\")\n    // })\n\n    // // MOUSE OUT:\n    // gBoundariesPhenotypes.selectAll('line').on('mouseout', function (e) {\n    //     //e.preventDefault()\n    //     let id = e.target.id\n    //     let xx = e.layerX\n    //     let yy = e.layerY\n    // })\n\n    // DRAG:\n    //gBoundariesPhenotypes.selectAll(\"line\").call(d3.drag().on('drag', this.props.onDrag))\n\n    // render() {\n    //     return (\n\n    //         <>\n    //             <div\n    //                 id=\"divPhenotypes\"\n    //                 style={{\n    //                     backgroundColor: \"#446b58\",\n    //                     position: \"relative\",\n    //                     marginTop: \"10px\",\n    //                 }}\n    //             >\n    //                 <svg id=\"svgPhenotypes\"></svg>\n    //                 <div id=\"ttPhenotypes\"></div>\n    //             </div >\n\n    //         </>\n\n    //     )\n    // }\n\n\n\n\n\n\n\n\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n// FROM hammingDemo.js\n\n\n// drawPhenotypes = () => {\n\n//     let svgHamming, chartClasses;\n//     let svgWidth, svgHeight, width, height;\n//     let margin = { top: 30, left: 30, bottom: 135, right: 300 }\n\n//     if (!document.getElementById('chartClasses')) {\n//         console.log(\"chartClasses doesnt exist.\")\n//         svgWidth = 550\n//         svgHeight = 250\n//         width = svgWidth - margin.left - margin.right\n//         height = svgHeight - margin.top - margin.bottom\n//     } else {\n//         console.log(\"it already exists\")\n//         svgWidth = document.getElementById(\"svgHamming\").clientWidth\n//         svgHeight = document.getElementById(\"svgHamming\").clientHeight\n//         width = svgWidth - margin.left - margin.right\n//         height = svgHeight - margin.top - margin.bottom\n//     };\n\n//     svgHamming = d3.select(\"#svgHamming\")\n\n//     chartClasses = svgHamming\n//         .append('g')\n//         .attr(\"id\", \"chartClasses\")\n//         .attr(\"transform\",\n//             `translate(${margin.left},${margin.top})`);\n\n\n//     let Xscale = d3.scaleBand()\n//         .range([0, width])\n//         .domain(this.state.hdValues.slice(this.state.limit1, this.state.limit2 + 1).map((d) => {\n//             return d.hdNext.hdLabel\n//         }))\n//         .padding(0.3);\n\n//     chartClasses\n//         .append(\"g\")\n//         .attr(\"class\", \"hammingLine\")\n//         .attr(\"transform\", \"translate(0,\" + height + \")\")\n//         .call(\n//             d3.axisBottom(Xscale)\n//                 .tickPadding(20)\n//                 .tickSize(0)\n//         )\n//         .selectAll(\"text\").remove()\n\n\n//     let Yscale = d3.scaleLinear()\n//         .range([height, 0])\n//         .domain([0, 10]);\n\n//     chartClasses\n//         .append(\"g\")\n//         .attr(\"class\", \"axisLine\")\n//         .call(d3.axisLeft(Yscale).tickValues([1, 5, 10]))\n\n//     chartClasses\n//         .selectAll(\"rect\")\n//         .data(this.state.hdValues.slice(this.state.limit1, this.state.limit2 + 1))\n//         .enter()\n//         .append(\"rect\")\n//         .attr(\"fill\", (d) => {\n//             if (d.phenotype <= this.state.boundary1 & d.phenotype >= this.state.limit1) {\n//                 return 'lime'\n//             } else if (d.phenotype >= this.state.boundary2 & d.phenotype <= this.state.limit2) {\n//                 return 'orange'\n//             } else {\n//                 return '#222'\n//             }\n//         })\n//         .attr(\"x\", (d) => Xscale(d.hdNext.hdLabel))\n//         .attr(\"y\", (d) => Yscale(d.hdNext.hd))\n//         .attr(\"width\", Xscale.bandwidth())\n//         .attr(\"height\", (d) => height - Yscale(d.hdNext.hd))\n//         .attr(\"class\", \"hammingBar\")\n\n\n\n\n//     let new_height = height + 10\n\n//     let Xscale1 = d3.scaleLinear()\n//         .range([0, width])\n//         .domain([this.state.limit1, this.state.limit2 + 1])\n\n//     chartClasses\n//         .append(\"g\")\n//         .attr(\"class\", \"yellowLine\")\n//         .attr(\"transform\", \"translate(0,\" + new_height + \")\")\n//         .call(\n//             d3.axisBottom(Xscale1)\n//                 .tickPadding(5)\n//                 .tickValues([\n//                     this.state.limit1,\n//                     this.state.boundary1,\n//                     this.state.boundary2,\n//                     this.state.limit2\n//                 ])\n//                 .tickSize(0)\n//         )\n//         .selectAll(\"text\")\n//         .attr(\"transform\", (d) => {\n//             if (d === this.state.limit1) {\n//                 return \"translate(10,0)rotate(0)\"\n//             } else if (d === this.state.boundary1) {\n//                 return \"translate(-10,0)rotate(0)\"\n//             } else if (d === this.state.boundary2) {\n//                 return \"translate(15,0)rotate(0)\"\n//             } else if (d === this.state.limit2) {\n//                 return \"translate(-10,0)rotate(0)\"\n//             }\n//         })\n//         .attr(\"fill\", (d) => {\n//             if (d === this.state.limit1) {\n//                 return \"lime\"\n//             } else if (d === this.state.boundary1) {\n//                 return \"lime\"\n//             } else if (d === this.state.boundary2) {\n//                 return \"orange\"\n//             } else if (d === this.state.limit2) {\n//                 return \"orange\"\n//             } else {\n//                 return \"#ddd\"\n//             }\n//         })\n\n//     let gBoundaries = chartClasses.append(\"g\").attr(\"id\", \"gBoundaries\")\n\n//     chartClasses.append(\"line\")\n//         .attr(\"class\", \"boundary\")\n//         .attr(\"id\", \"limit12\")\n//         .attr(\"dragging\", true)\n//         .attr(\"x1\", Xscale1(this.state.boundary2))\n//         .attr(\"x2\", Xscale1(this.state.boundary2))\n//         .attr(\"y1\", Yscale(-7))\n//         .attr(\"y2\", Yscale(-4))\n\n//     chartClasses.append(\"line\")\n//         .attr(\"id\", \"limit1\")\n//         .attr(\"class\", \"boundary left\")\n//         .attr(\"dragging\", true)\n//         .attr(\"x1\", Xscale1(this.state.limit1))\n//         .attr(\"x2\", Xscale1(this.state.limit1))\n//         .attr(\"y1\", Yscale(-7))\n//         .attr(\"y2\", Yscale(-4))\n\n//     chartClasses.append(\"line\")\n//         .attr(\"id\", \"limit2\")\n//         .attr(\"class\", \"boundary right\")\n//         .attr(\"dragging\", true)\n//         .attr(\"x1\", Xscale1(this.state.limit2))\n//         .attr(\"x2\", Xscale1(this.state.limit2))\n//         .attr(\"y1\", Yscale(-7))\n//         .attr(\"y2\", Yscale(-4));\n\n//     gBoundaries.selectAll('line').on('mouseover', function () {\n//         let id = d3.select(this).attr(\"id\")\n//         let xxx = parseInt(d3.select(this).attr(\"x1\"))\n//         let yyy = parseInt(d3.select(this).attr(\"y1\"))\n//         let legend = parse(`${id} <br/> [${xxx}, ${yyy}]`)\n//         console.log(\"id, X: \", id, xxx,)\n//     })\n\n//     gBoundaries.selectAll('line').on('mouseout', function () {\n//         let id = d3.select(this).attr(\"id\")\n//         let xxx = parseInt(d3.select(this).attr(\"x1\"))\n//         this.setState({ [id]: newValue })\n//         console.log(\"newValue: \", newValue)\n//     })\n\n//     gBoundaries.selectAll(\"line\")\n//         .call(\n//             d3.drag()\n//                 .on('drag', function (e) {\n//                     //let lim1 = this.state.limit1\n//                     let x = d3.select(this).attr('x1')\n\n//                     let id = d3.select(this).attr(\"id\")\n\n//                     d3.select(this).attr(\"x1\", x)\n//                     d3.select(this).attr(\"x2\", x)\n//                 }\n//                 )\n//         )\n// };",["425","426"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/hdCodValues.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HeatmapHook.js",["427","428","429","430","431","432","433"],"// /* \n// d3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/heatmap_data.csv\").then(function (data) {\n\n//  */\n\n\n//import React from \"react\";\nimport * as d3 from \"d3\";\nimport \"./hamming_style.sass\";\n\nimport { dec2bin, hdSelf, hdOther } from \"./hammingFunctions\";\n\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\nimport { useState } from \"react\";\n\n// import parse from \"html-react-parser\"\n\nfunction HeatMapHook(props) {\n\n    const refHeatMap = useRef()\n    const refHeatMapSmall = useRef()\n\n\n    const [data, setData] = useState([])\n    const [class1, setClass1] = useState([])\n    const [classes, setClasses] = useState([])\n    const [class2, setClass2] = useState([]) // just for hd-cod;\n\n    const [hd_self, setSelf] = useState(0)\n    const [hd_other, setOther] = useState(0)\n    const [hd_cod, setCod] = useState(0)\n\n    //const [plotAvg, setPlotAvg] = useState(true)\n    const [plotAvg, setPlotAvg] = useState(false)\n\n\n\n    // Creates the data and sets it as state; \n    // uses limits, supplied as props. \n\n\n    useEffect(() => {\n        // let size = 41\n        // let boundary2 = props.boundary1 + 1\n        // let class1 = d3.range(props.boundary1 - size, props.boundary1 + 1)\n        // let classes = d3.range(props.boundary1 - size, boundary2 + 1 + size)\n        // let class2 = d3.range(props.boundary1 + 1, boundary2 + 1 + size)\n\n        let class1 = d3.range(props.limit1, props.boundary1 + 1)\n        let classes = d3.range(props.limit1, props.limit2 + 1)\n        let class2 = d3.range(props.boundary2, props.limit2 + 1)\n\n        let myData = []\n        class1.forEach((b1) => {\n            let g1 = dec2bin(10, b1)\n            classes.forEach((b12) => {\n                let g12 = dec2bin(10, b12)\n                let hd = 0\n                for (let i = 0; i < g12.length; i++) {\n                    if (g1[i] !== g12[i]) {\n                        hd = hd + 1\n                    }\n                }\n                myData.push(\n                    { b1: b1, b12: b12, hd: hd, g1: g1, g12: g12 }\n                )\n            })\n        })\n\n\n        // HD self, other, cod\n        let hd1, hd2, hd3;\n        if (classes.length > 0) {\n            hd1 = hdSelf(class1)\n            hd2 = hdOther(class1, class2)\n            hd3 = Math.abs(hd1 - hd2)\n        } else {\n            hd1 = 0\n            hd2 = 0\n            hd3 = Math.abs(hd1 - hd2)\n        }\n\n\n        setData(myData)\n        setClass1(class1)\n        setClasses(classes)\n        setClass2(class2)\n\n        setSelf(hd1)\n        setOther(hd2)\n        setCod(hd3.toFixed(1))\n\n    }, [props])\n\n\n\n    // ===============================================\n\n    useEffect(() => {\n        let margin = { top: 60, left: 150, bottom: 50, right: 110 }\n        //let margin = { top: 80, left: 100, bottom: 100, right: 325 }\n\n        let colorGreen = 'rgb(28, 255, 28)'\n        let colorOrange = 'rgb(255, 128, 49)'\n\n        var greenOrange = d3.scaleLinear()\n            .domain([1, 10])\n            .range([colorGreen, colorOrange])\n\n        let svgWidth\n        let svgHeight\n\n        if (document.getElementById(\"svgHeatMapHook\")) {\n            svgWidth = document.getElementById(\"svgHeatMapHook\").clientWidth\n            svgHeight = document.getElementById(\"svgHeatMapHook\").clientHeight\n        } else {\n            svgWidth = 550\n            svgHeight = 250\n        }\n\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n\n        // SCALES:\n        let myGroups = Array.from(new Set(data.map(d => d.b1)))\n        let myVars = Array.from(new Set(data.map(d => d.b12)))\n\n        let X_Band = d3.scaleBand().range([0, width]).domain(myVars)\n        let Y_band = d3.scaleBand().range([height, 0]).domain(myGroups)\n\n\n        let chartHeatMap = d3.select(refHeatMap.current).attr(\"transform\",\n            `translate(${margin.left},${margin.top})`);\n\n\n\n\n\n        // CHART INFO:\n        let chartInfo = chartHeatMap.select(\".chartInfo\")\n            .attr(\"transform\", `translate(${0},${0})`)\n\n        chartInfo.selectAll(\"text\").remove()\n\n        // TITLE:\n        chartInfo\n            .append('text')\n            .text(\"HeatmapHook.js\")\n            .attr(\"id\", \"chartTitle1\")\n            .attr(\"x\", -130)\n            .attr(\"y\", -40)\n            .attr(\"fill\", \"yellow\")\n            .attr(\"font-size\", '16px')\n\n\n        // HD SELF:\n        chartInfo.append(\"text\").attr(\"fill\", \"lime\")\n            .attr(\"font-size\", \"14px\")\n            .attr(\"x\", 50)\n            .attr(\"y\", 160)\n            .text(hd_self)\n\n        // HD OTHER:\n        chartInfo.append(\"text\").attr(\"fill\", \"orange\")\n            .attr(\"font-size\", \"14px\")\n            .attr(\"x\", 200)\n            .attr(\"y\", 160)\n            .text(hd_other)\n\n        // COMBINED:\n        chartInfo.append(\"text\").attr(\"fill\", \"cyan\")\n            .attr(\"font-size\", \"14px\")\n            .attr(\"x\", 120)\n            .attr(\"y\", 180)\n            .text(() => {\n                // return `HDcod = | ${hd_self} - ${hd_other} | = ${hd_cod}`\n                return hd_cod\n            })\n\n\n\n\n        // X-axis:\n        chartHeatMap.select(\".heatmapX\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(\n                d3.axisBottom(X_Band)\n                    .tickValues([])\n                // .tickValues(classes)\n                // .tickPadding(11)\n            )\n            .selectAll(\"text\").remove()\n        // .style(\"color\", (d) => {\n        //     if (d <= d3.max(myGroups)) {\n        //         return 'lime'\n        //     } else {\n        //         return 'orange'\n        //     }\n        // })\n\n\n        // Y-axis:\n        chartHeatMap.select(\".heatmapY\")\n            .call(\n                d3.axisLeft(Y_band)\n                    .tickValues([])\n                // .tickValues((class1))\n                // .tickPadding(11)\n            )\n            .selectAll(\"text\").remove()\n        // .text(\n        //     (d) => {\n        //         return `${d}: ${dec2bin(10, d)}`\n        //     }\n        // )\n\n\n        // TOOLTIP:\n        const ttHeatMap = d3.select(\"#ttHeatMap\")\n            .style(\"opacity\", 0)\n            .style(\"class\", \"tooltip\")\n            .style(\"background-color\", \"white\")\n            .style(\"border\", \"solid\")\n            .style(\"border-width\", \"1px\")\n            .style(\"border-radius\", \"5px\")\n            .style(\"padding\", \"5px\")\n            .style(\"font-size\", \"11px\")\n            .attr(\"z-index\", 0)\n\n\n        // MOUSE OVER, MOVE, LEAVE:\n        const mouseover = function (event, d) {\n            //console.log(event)\n            ttHeatMap\n                .style(\"opacity\", 0.8)\n\n        }\n\n        const mousemove = function (event, d) {\n            //console.log(d)\n            ttHeatMap\n                .style(\"opacity\", 0.8)\n                .html(d.description)\n                .style(\"left\", (event.layerX - 30) + \"px\")\n                .style(\"top\", (event.layerY - 15) + \"px\")\n                .style(\"position\", \"absolute\")\n        }\n\n        const mouseleave = function (event, d) {\n            ttHeatMap\n                .style(\"opacity\", 0)\n        }\n\n\n        // DATA:\n        chartHeatMap\n            .selectAll(\"rect\")\n            .data(data)\n            .join(\n                enter => enter.append('rect').attr(\"class\", \"new\"),\n                update => update.attr(\"class\", \"update\"),\n                exit => exit.remove().transition()\n                    .duration(1000)\n            )\n            .attr(\"x\", function (d) { return X_Band(d.b12) })\n            .attr(\"y\", function (d) { return Y_band(d.b1) })\n            .attr(\"width\", X_Band.bandwidth())\n            .attr(\"height\", Y_band.bandwidth())\n            .on(\"mouseover\", mouseover)\n            .on(\"mousemove\", mousemove)\n            .on(\"mouseleave\", mouseleave)\n            .transition()\n            .duration(1000)\n            .style(\"fill\", function (d) {\n\n                if (plotAvg === true) {\n                    if (d.b12 <= props.boundary1) {\n                        return greenOrange(hd_self)\n                    } else {\n                        return greenOrange(hd_other)\n                    }\n                } else {\n                    return greenOrange(d.hd)\n                }\n\n\n            })\n\n\n\n\n    }, [data]);\n\n\n\n\n\n    // SMALL VERSION, ONLY AVERAGES of HD SELF - OTHER\n\n\n\n    useEffect(() => {\n        let margin = { top: 60, left: 30, bottom: 150, right: 450 }\n\n        let colorGreen = 'rgb(28, 255, 28)'\n        let colorOrange = 'rgb(255, 128, 49)'\n\n        var greenOrange = d3.scaleLinear()\n            .domain([1, 10])\n            .range([colorGreen, colorOrange])\n\n        let svgWidth = 550\n        let svgHeight = 250\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n\n\n\n        let smallData = [\n            {\n                b1: 1, b12: 1, hd: hd_self,\n                class: `${props.limit1} - ${props.boundary1}`, g1: \"0111010111\", g12: \"0111010111\"\n            },\n            {\n                b1: 1, b12: 2, hd: hd_other,\n                class: `${props.boundary2} - ${props.limit2}`, g1: \"0111010111\", g12: \"0111010111\"\n            }]\n\n        // SCALES:\n        let mySmallGroups = Array.from(new Set(smallData.map(d => d.b1)))\n        let mySmallVars = Array.from(new Set(smallData.map(d => d.b12)))\n\n        let X_Band = d3.scaleBand().range([0, 100]).domain(mySmallVars)\n        let Y_band = d3.scaleBand().range([50, 0]).domain(mySmallGroups)\n\n        let chartHeatMap = d3.select(refHeatMapSmall.current).attr(\"transform\",\n            `translate(${margin.left},${margin.top})`);\n\n        chartHeatMap.select(\".smallInfo\").selectAll(\"text\").remove()\n        chartHeatMap.select(\".smallInfo\").append(\"text\")\n            .text(hd_cod)\n            .attr(\"font-size\", \"14px\")\n            .attr(\"x\", 35)\n            .attr(\"y\", -10)\n            .attr(\"fill\", \"cyan\")\n        //.attr(\"font-family\", \"Arial\")\n\n\n        // X-axis:\n        chartHeatMap.select(\".smallX\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(\n                d3.axisBottom(X_Band)\n                    .tickSize(0)\n                    .tickPadding(20)\n\n            )\n            .selectAll(\"text\")\n            .style(\"color\", (d) => {\n                if (d <= d3.max(mySmallGroups)) {\n                    return 'lime'\n                } else {\n                    return 'orange'\n                }\n            })\n            .text((d) => {\n                if (d === 1) {\n                    return hd_self\n                } else {\n                    return hd_other\n                }\n            })\n            .attr(\"font-size\", \"12px\")\n\n\n        // Y-axis:\n        chartHeatMap.select(\".smallY\")\n            .call(\n                d3.axisLeft(Y_band)\n                    .tickValues([])\n                    .tickSize(0)\n            )\n\n\n        // SMALL DATA:\n        chartHeatMap\n            .selectAll(\"rect\")\n            .data(smallData)\n            .join(\n                enter => enter.append('rect').attr(\"class\", \"new\"),\n                update => update.attr(\"class\", \"update\"),\n                exit => exit.remove().transition()\n                    .duration(1000)\n            )\n            .attr(\"x\", function (d) { return X_Band(d.b12) })\n            .attr(\"y\", function (d) { return Y_band(d.b1) })\n            .attr(\"width\", X_Band.bandwidth())\n            .attr(\"height\", Y_band.bandwidth())\n            .transition()\n            .duration(1000)\n            .style(\"fill\", function (d) {\n                // console.log(\"d: \", parseFloat(d.hd) + 1)\n                return greenOrange(parseFloat(d.hd))\n\n\n            })\n\n\n        // chartHeatMap\n        //     .selectAll(\"rect\").on(\"mouseover\", mouseover)\n        //     .on(\"mousemove\", mousemove)\n        //     .on(\"mouseleave\", mouseleave)\n\n\n\n    }, [data]);\n\n\n    return (\n\n        <>\n            <div\n                id=\"divHeatMapHook\"\n                style={{\n                    position: \"relative\",\n                    marginTop: \"10px\",\n                    border: \"1px solid red\"\n                }}\n            >\n                <svg id=\"svgHeatMapHook\">\n\n                    <g ref={refHeatMap}>\n                        <g className=\"heatmapX\"></g>\n                        <g className=\"heatmapY\"></g>\n                        <g className=\"chartInfo\"></g>\n                    </g>\n\n\n                    <g ref={refHeatMapSmall}>\n                        <g className=\"smallX\"></g>\n                        <g className=\"smallY\"></g>\n                        <g className=\"smallInfo\"></g>\n                    </g>\n\n\n\n                </svg>\n\n                <div id=\"ttHeatMap\"></div>\n\n            </div >\n\n        </>\n\n    )\n};\n\nexport default HeatMapHook;\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/inputNumberHook.js",["434"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/TableHook.js",["435","436"],"import \"./hamming_style.sass\";\nimport \"./phenotypes.sass\";\n//import \"./scatter.sass\";\n\n\n//import parse from \"html-react-parser\"\nimport * as d3 from \"d3\";\n\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\nimport { useState } from \"react\";\n\nimport { dec2bin } from \"./hammingFunctions\";\n\n\n\n\nfunction HammingCodTable(props) {\n\n    const refHDTable = useRef()\n\n    const [data, setData] = useState([])\n    const [class1, setclass1] = useState([])\n    const [classes, setClasses] = useState([])\n\n\n    useEffect(() => {\n        let size = 2\n        let boundary2 = props.boundary1 + 1\n        let class1 = d3.range(props.boundary1 - size, boundary2)\n        let classes = d3.range(props.boundary1 - size, boundary2 + 1 + size)\n\n\n        let myData = []\n        class1.forEach((b1) => {\n            let g1 = dec2bin(5, b1)\n            classes.forEach((b12) => {\n                let g12 = dec2bin(5, b12)\n                let hd = 0\n                for (let i = 0; i < g12.length; i++) {\n                    if (g1[i] !== g12[i]) {\n                        hd = hd + 1\n                    }\n                }\n                myData.push(\n                    { b1: b1, b12: b12, hd: hd, g1: g1, g12: g12 }\n                )\n            })\n        })\n        console.log(myData)\n        setData(myData)\n        setclass1(class1)\n        setClasses(classes)\n\n    }, [props])\n\n\n    useEffect(() => {\n        let margin = { top: 50, left: 100, bottom: 50, right: 50 }\n        let svgWidth = 550\n        let svgHeight = 250\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n        // let X_Linear = d3.scaleLinear()\n        //     .range([0, width])\n        //     .domain([d3.min(classes) - 1, d3.max(classes) + 1])\n\n        // let Y_Linear = d3.scaleLinear()\n        //     .range([height, 0])\n        //     .domain([d3.max(class1) + 1, d3.min(class1) - 1])\n\n        // let Z_Linear = d3.scaleLinear()\n        //     .range([2, 12])\n        //     .domain([0, 10])\n\n\n        //let svg = d3.select(refSVG.current)\n        let tableHD = d3.select(refHDTable.current).attr(\"transform\",\n            `translate(${margin.left},${margin.top})`)\n\n        // scatter2.select(\".scatter2X\")\n        //     .attr(\"transform\", \"translate(0,\" + height + \")\")\n        //     .call(\n        //         d3\n        //             .axisBottom(X_Linear)\n        //             .tickValues(classes)\n        //             .tickPadding(11)\n        //     )\n        //     .selectAll('text')\n        //     .transition()\n        //     .duration(1000)\n        //     .attr('fill', (d) => {\n        //         if (d <= props.boundary1) {\n        //             return 'lime'\n        //         } else {\n        //             return 'orange'\n        //         }\n        //     })\n\n        // scatter2.select(\".scatter2Y\")\n        //     .call(\n        //         d3\n        //             .axisLeft(Y_Linear)\n        //             .tickValues((class1))\n        //             .tickPadding(11)\n        //     )\n        //     .selectAll('text')\n        //     .text((d) => d.toFixed(0))\n        //     .text((d) => {\n        //         console.log(\"text d: \", d)\n        //         return dec2bin(10, d)\n        //     })\n\n\n        //var groupedData = d3.group(data, (d) => d.b12)\n        var groupedArrayedData = Array.from(d3.group(data, (d) => d.b1))\n\n        tableHD.selectAll(\"tr\")\n            .data(groupedArrayedData)\n            .join(\n                enter => enter.append('tr'),\n                update => update.attr(\"class\", \"update\"),\n                exit => exit.remove()\n            )\n            .selectAll('td')\n            //.data(d => d)\n            .data((d) => {\n                return d[1]\n            })\n            .join(\n                enter => enter.append('td').attr(\"class\", \"cell\"),\n                update => update.attr(\"class\", \"cellUp\"),\n                exit => exit.remove()\n            )\n            // .attr(\"width\", 45)\n            // .attr(\"height\", 20)\n            // .text((d, i) => {\n            //     return d\n            // })\n            //.html(\"whattt\")\n            .html((d) => {\n                console.log(\"d cell: \", d)\n\n                return d.g1\n            })\n            //.attr(\"stroke-width\", 1)\n            .attr(\"stroke\", \"#fff\")\n            .attr(\"stroke-width\", 1)\n            .attr(\"fill\", \"#ddd\")\n            .attr(\"color\", \"cyan\")\n            .attr(\"opacity\", .8);\n\n\n\n        // tableHD.on('mouseover', (e, d) => {\n        //     //e.target.style.opacity = 1\n        //     console.log(e.target)\n        //     console.log(\"d: \", d)\n        // })\n\n\n        // .on('mouseout', (e, d) => {\n        //     e.target.style.opacity = .7\n        // })\n        // ;\n\n\n\n        // scatter2\n        //     .selectAll(\"circle\")\n        //     .data(data)\n        //     .join(\n        //         enter => enter.append('circle').attr(\"class\", \"new\"),\n        //         update => update.attr(\"class\", \"update\"),\n        //         exit => exit.remove().transition()\n        //             .duration(1500)\n\n        //     )\n        //     .transition()\n        //     .duration(1000)\n        //     .attr(\"cx\", (d) => X_Linear(d.b12))\n        //     .attr(\"cy\", (d) => Y_Linear(d.b1))\n        //     .attr(\"r\", (d) => Z_Linear(d.hd))\n        //     .attr(\"stroke-width\", 1)\n        //     .attr(\"fill\", \"#ddd\")\n        //     .attr(\"stroke\", \"cyan\")\n        //     .attr(\"stroke-width\", 1)\n        //     .attr(\"opacity\", .4);\n\n\n    }, [data]);\n\n\n\n\n\n\n    return (\n\n        <>\n\n            <div\n                id=\"divScatter2\"\n                style={{\n                    position: \"relative\",\n                    marginTop: \"10px\",\n                    width: \"550px\",\n                    border: \"1px solid teal\"\n                }}\n            >\n                <label>{class1.toString().replaceAll(',', ', ')}</label>\n\n                <label>{classes.slice(3).toString().replaceAll(',', ', ')}</label>\n\n                {/* <svg id=\"svgScatter2\" ref={refSVG} >\n                    < g ref={refScatter2}>\n                        <g className=\"scatter2X\"></g>\n\n                        <g className=\"scatter2Y\"></g>\n                    </g>\n                </svg> */}\n\n                <table >\n                    <tbody ref={refHDTable}>\n\n\n                    </tbody>\n                </table>\n\n            </div >\n\n\n            {/* <div\n                id=\"divScatter2\"\n                style={{\n                    position: \"relative\",\n                    marginTop: \"10px\",\n                }}\n            >\n                <table ref={refHDTable}></table>\n            </div > */}\n\n        </>\n\n    )\n}\n\n\nexport default HammingCodTable;\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HammingDistances.js",["437","438","439","440","441","442","443"],"import \"./hamming_style.sass\";\nimport \"./phenotypes.sass\";\n\n//import parse from \"html-react-parser\"\nimport * as d3 from \"d3\";\nimport { dec2bin, hdSelf, hdOther } from \"./hammingFunctions\";\n\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\nimport { useState } from \"react\";\n\nimport { hdValues } from \"./hdValues\";\n\n\nfunction HammingDistances(props) {\n    const refHammingDistances = useRef()\n\n    const [data, setData] = useState(hdValues)\n    const [class1, setClass1] = useState([])\n    const [classes, setClasses] = useState([])\n    const [class2, setClass2] = useState([]) // just for hd-cod;\n\n\n    useEffect(() => {\n        let size = 3\n        let boundary2 = props.boundary1 + 1\n        let class1 = d3.range(props.boundary1 - size, props.boundary1 + 1)\n        let classes = d3.range(props.boundary1 - size, boundary2 + 1 + size)\n        let class2 = d3.range(props.boundary1 + 1, boundary2 + 1 + size)\n\n        let myData = []\n\n        class1.forEach((b1) => {\n            let g1 = dec2bin(10, b1)\n            classes.forEach((b12) => {\n                let g12 = dec2bin(10, b12)\n                let hd = 0\n                for (let i = 0; i < g12.length; i++) {\n                    if (g1[i] !== g12[i]) {\n                        hd = hd + 1\n                    }\n                }\n                myData.push(\n                    { b1: b1, b12: b12, hd: hd, g1: g1, g12: g12 }\n                )\n            })\n        })\n        // console.log(\"HammingDistances:\")\n        // console.log(myData)\n\n        //setData(myData)\n        setClass1(class1)\n        setClasses(classes)\n        setClass2(class2)\n\n    }, [props])\n\n\n    useEffect(() => {\n        let margin = { top: 20, right: 20, bottom: 100, left: 40, }\n        let svgWidth = 550\n        let svgHeight = 250\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n        let X_Band = d3.scaleBand()\n            .range([0, width])\n            .domain(\n                data.map((d) => {\n                    return d.hdNext.hdLabel\n                }))\n            .padding(0.0);\n\n        let Y_Linear = d3.scaleLinear().range([height, 0]).domain([1, 10]);\n\n        let HammingChart = d3.select(refHammingDistances.current).attr(\"transform\",\n            `translate(${margin.left},${margin.top})`);\n\n        HammingChart.select(\".hammingX\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(\n                d3.axisBottom(X_Band)\n                    .tickSize(0)\n            )\n            .selectAll(\"text\").remove()\n\n        HammingChart.select(\".hammingY\")\n            .call(\n                d3.axisLeft(Y_Linear)\n                    .tickPadding(10)\n            )\n\n\n        HammingChart.select(\".hammingBarPhens\")\n            .selectAll(\"rect\")\n            .data(data)\n            .join(\n                enter => enter.append('rect').attr(\"class\", \"new\"),\n                update => update.attr(\"class\", \"update\"),\n                exit => exit.remove().transition()\n                    .duration(1000)\n            )\n            .attr(\"x\", (d) => X_Band(d.hdNext.hdLabel))\n            .attr(\"y\", (d) => Y_Linear(d.hdNext.hd))\n            .attr(\"width\", X_Band.bandwidth())\n            .attr(\"height\", (d) => height - Y_Linear(d.hdNext.hd))\n            .attr(\"stroke-width\", 1)\n\n\n\n    }, []);\n\n\n\n\n\n    useEffect(() => {\n\n        var updateColors = () => {\n            let hammingBins = d3.select(\".hammingBarPhens\").selectAll(\"rect\")\n\n            hammingBins.attr(\"fill\", (d) => {\n                if (d.phenotype >= props.limit1 & d.phenotype <= props.boundary1) {\n                    return 'rgb(28, 255, 28)'\n                } else if (d.phenotype >= props.boundary2 & d.phenotype <= props.limit2) {\n                    return 'rgb(255, 128, 49)'\n\n                } else {\n                    return '#fff'\n                }\n            })\n            hammingBins.attr(\"stroke\", (d) => {\n                if (d.phenotype >= props.limit1 & d.phenotype <= props.boundary1) {\n                    return 'rgb(28, 255, 28)'\n                } else if (d.phenotype >= props.boundary2 & d.phenotype <= props.limit2) {\n                    return 'rgb(255, 128, 49)'\n                } else {\n                    return 'none'\n                }\n            })\n        }\n\n        updateColors()\n\n\n    }, [props.limit1, props.boundary1, props.limit2, props.boundary2]\n    );\n\n\n\n\n    useEffect(() => {\n        let HammingChart = d3.select(refHammingDistances.current)\n\n        HammingChart.append(\"rect\")\n\n    })\n\n\n\n\n\n\n    return (\n\n        <>\n            <div\n                id=\"divHammingChart\"\n                style={{\n                    backgroundColor: \"#446b58\",\n                    position: \"relative\",\n                    marginTop: \"10px\",\n                }}\n            >\n                <svg id=\"svgHammingChart\">\n\n                    <g ref={refHammingDistances}>\n                        <g className=\"hammingX\"></g>\n                        <g className=\"hammingY\"></g>\n                        <g className=\"chartInfo\"></g>\n                        <g className=\"hammingBarPhens\"></g>\n                    </g>\n\n                </svg>\n\n                {/* <div id=\"ttPhenotypes\"></div> */}\n\n            </div >\n\n        </>\n\n    )\n}\n\n\nexport default HammingDistances;\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_input/InputRange.js",["444","445","446","447","448","449","450","451","452","453","454"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/MathematicalModels.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/D3ScatterRatios.js",["455"],"\n\nimport * as d3 from \"d3\";\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\n\n\n\nexport default function D3ScatterRatios(props) {\n\n    //const refSVG = useRef()\n    const refScatterRatios = useRef()\n    const refPredictedRatios = useRef()\n\n\n\n    useEffect(() => {\n\n        let margin = { top: 50, left: 120, bottom: 100, right: 20 }\n\n        let svgWidth = document.getElementById(\"svgScatterRatios\").clientWidth\n        let svgHeight = document.getElementById(\"svgScatterRatios\").clientHeight\n\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n\n        //    ---------------   POSITION  ------------------------\n\n        let scatter2 = d3.select(refScatterRatios.current)\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n        let scatter222 = d3.select(refPredictedRatios.current)\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n\n        //    ---------------   SCALES  ------------------------\n\n\n        // The chart must be square, so the SMALLEST dimension\n        //  becomes the range for both axes: \n        let rangeX = [0, d3.min([width, height])]\n        let rangeY = [d3.min([width, height]), 0]\n\n        //let dataX = Array.from(new Set(props.data.map(d => d.scheduleData.r1 / d.scheduleData.r2)))\n        //let dataY = Array.from(new Set(props.data.map(d => d.scheduleData.b1 / d.scheduleData.b2)))\n        let dataX = Array.from(props.data.map(d => d.scheduleData.r1 / d.scheduleData.r2))\n        let dataY = Array.from(props.data.map(d => d.scheduleData.b1 / d.scheduleData.b2))\n\n\n        // keep it square, using the HIGHEST value:\n        let highestValue = d3.max([d3.max(dataX), d3.max(dataY)])\n\n        let domainX = [0, highestValue]\n        let domainY = [0, highestValue]\n\n        let X_Linear = d3.scaleLinear().range(rangeX).domain(domainX)\n        let Y_Linear = d3.scaleLinear().range(rangeY).domain(domainY)\n\n\n\n        //    ---------------   TITLES  ------------------------\n\n        scatter2.selectAll(\".axisLabel\").remove();\n\n        scatter2\n            .append('text').attr(\"class\", \"axisLabel\")\n            .text(\"y\")\n            .attr(\"x\", -margin.left * 0.5)\n            .attr(\"y\", height * 0.55)\n            .attr(\"fill\", \"#ccc\")\n            .attr(\"font-family\", \"Times New Roman\")\n            .attr(\"font-size\", \"18px\")\n\n        scatter2\n            .append('text').attr(\"class\", \"axisLabel\")\n            .text(\"x\")\n            .attr(\"x\", width * 0.30)\n            .attr(\"y\", height * 1.30)\n            .attr(\"fill\", \"#ccc\")\n            .attr(\"font-family\", \"Times New Roman\")\n            .attr(\"font-size\", \"18px\")\n\n\n\n        //    ---------------   AXES  ------------------------\n\n        scatter2.select(\".scatterRatiosX\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(\n                d3\n                    .axisBottom(X_Linear)\n                    .tickPadding(10)\n                    //.tickValues(tickValuesX)\n                    .ticks(12)\n                    .tickSize(-d3.min([height, width]))\n            )\n\n        scatter2.select(\".scatterRatiosY\")\n            .call(\n                d3\n                    .axisLeft(Y_Linear)\n                    .tickPadding(10)\n                    //.tickValues(tickValuesY)\n                    .tickSize(-d3.min([height, width]))\n                    .ticks(12)\n            )\n\n        //    ---------------   HOVER  ------------------------\n\n        let onHover = (e, d) => {\n            let tgt = e.explicitOriginalTarget\n            let circleId = tgt.attributes[1].value\n\n            let bb = props.data.filter((item) => {\n                return circleId === `Schedule${item.schedule}`\n            })\n\n            let bbb1 = (bb[0].scheduleData.b1 / bb[0].scheduleData.b2).toFixed(1)\n            let bbb2 = (bb[0].scheduleData.r1 / bb[0].scheduleData.r2).toFixed(1)\n\n            let xx = parseInt(tgt.attributes[2].value)\n            let yy = parseInt(tgt.attributes[3].value)\n\n            e.target.style.stroke = \"cyan\"\n            e.target.style.fill = \"cyan\"\n\n            scatter2.append(\"text\")\n                .attr(\"x\", xx - 50)\n                .attr(\"y\", yy - 25)\n                .text(`${bbb2}, ${bbb1}`)\n                .attr(\"class\", \"d3tooltip\")\n                .style(\"fill\", \"white\")\n                .attr(\"font-size\", \"14px\")\n                .attr(\"font-family\", \"Courier New\");\n        };\n\n\n        let hoverOver = (e, d) => {\n            d3.selectAll(\".d3tooltip\").remove()\n            e.target.style.stroke = \"white\"\n            e.target.style.fill = \"#ffffff89\"\n        };\n\n\n        //   -----------------------   PERFECT MATCHING   ------------------------\n        // plot line from 0 to max of dataX and dataY, maxRatio:\n\n        let maxRatio = (d3.max([d3.max(dataX), d3.max(dataY)])).toFixed(1)\n        scatter2.append(\"line\")\n            .attr(\"x1\", X_Linear(0))\n            .attr(\"y1\", Y_Linear(0))\n            .attr(\"x2\", X_Linear(maxRatio))\n            .attr(\"y2\", Y_Linear(maxRatio))\n            .attr(\"class\", \"perfectMatching\")\n            .attr(\"stroke\", \"#aaa\")\n            .attr(\"stroke-width\", 1)\n            .attr(\"stroke-dasharray\", 2)\n\n\n        //   -----------------------   DATA POINTS   ------------------------\n\n        scatter2\n            .selectAll(\"circle\")\n            .data(props.data)\n            .join(\n                enter => enter.append('circle').attr(\"class\", \"new\")\n                    .on(\"mouseover\", onHover)\n                    .on('mouseout', hoverOver),\n                update => update.attr(\"class\", \"update\"),\n                exit => exit.remove()\n            )\n            // .transition()\n            // .duration(1000)\n            .on(\"mouseover\", d => {\n                onHover(d)\n            })\n            .on('mouseout', hoverOver)\n            .attr(\"id\", (d) => `Schedule${d.schedule}`)\n            .attr(\"cx\", (d) => X_Linear(d.scheduleData.r1 / d.scheduleData.r2))\n            .attr(\"cy\", (d) => Y_Linear(d.scheduleData.b1 / d.scheduleData.b2))\n            .attr(\"r\", 5)\n            .attr(\"stroke-width\", 1)\n            .attr(\"fill\", \"#ffffff75\")\n            .attr(\"stroke\", \"white\")\n\n\n        //   -----------------------   PREDICTED VALUES  ------------------------\n\n        console.log(\"bias: \", 10 ** (-0.06))\n        let xRange = d3.range(0, 2.2, 0.1)\n        let yPrimeList = []\n        xRange.forEach(val => yPrimeList.push(\n            [X_Linear(val), Y_Linear(0.87 * val ** 0.85)]\n        ))\n\n        var myLine222 = d3.line().curve(d3.curveCardinal)\n        var myPath = myLine222(yPrimeList)\n\n        scatter2.append(\"path\").attr(\"id\", \"muie\")\n            .attr(\"d\", myPath)\n            .style(\"stroke\", \"red\")\n            .style(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .style(\"stroke-dasharray\", 0);\n\n\n\n    }, [props.data]);\n\n\n\n\n\n\n    return (\n\n        <div id=\"divScatterRatios\">\n\n            <svg id=\"svgScatterRatios\">\n\n                <g ref={refScatterRatios}>\n\n                    <g className=\"scatterRatiosX\"></g>\n\n                    <g className=\"scatterRatiosY\"></g>\n\n                    <path id=\"muieMami\"></path>\n                </g>\n\n\n            </svg>\n\n        </div>\n    )\n}\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/BasicSummaryTable.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/D3ScatterLogs.js",["456"],"\n\nimport * as d3 from \"d3\";\n\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\n//import { useState } from \"react\";\n\n//import regression from \"regression\";\nconst regression = window.regression;\n\n\nexport default function D3ScatterLogs(props) {\n\n    const refScatterLogs = useRef()\n\n\n\n    useEffect(() => {\n\n        let margin = { top: 75, left: 75, bottom: 75, right: 75 }\n\n        let svgWidth = document.getElementById(\"svgScatterLogs\").clientWidth\n        let svgHeight = document.getElementById(\"svgScatterLogs\").clientHeight\n\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n\n        //    ---------------   POSITION  ------------------------\n\n        let scatterLogs = d3.select(refScatterLogs.current)\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n\n\n\n        //    ---------------   DATA PREP  ------------------------\n        props.data.forEach((sch) => {\n            sch.ratioB = (sch.scheduleData.b1 / sch.scheduleData.b2).toFixed(2)\n            sch.ratioR = (sch.scheduleData.r1 / sch.scheduleData.r2).toFixed(2)\n            sch.logB = Math.log10(sch.scheduleData.b1 / sch.scheduleData.b2).toFixed(2)\n            sch.logR = Math.log10(sch.scheduleData.r1 / sch.scheduleData.r2).toFixed(2)\n        })\n\n        //let dataX = Array.from(new Set(props.data.map(d => d.logR)))\n        //let dataY = Array.from(new Set(props.data.map(d => d.logB)))\n\n\n        // console.log(\"dataX: \", dataX)\n        // console.log(\"dataY: \", dataY)\n\n        //    ---------------   SCALES  ------------------------\n\n\n        // The chart must be square, so the smallest dimension\n        //  becomes the range for both axes: \n        let rangeX = [0, d3.min([width, height])]\n        let rangeY = [d3.min([width, height]), 0]\n\n        let tickValuesX = [-2, 0, 2]\n        let tickValuesY = [-2, 0, 2]\n        let myTickValues = d3.range(d3.min(tickValuesX), d3.max(tickValuesX), 0.5)\n\n        // let tickValuesX = [-.5, 0, .5]\n        // let tickValuesY = [-.5, 0, .5]\n\n        // let tickValuesX = [-.10, 0, .10]\n        // let tickValuesY = [-.10, 0, .10]\n        // let myTickValues = d3.range(d3.min(tickValuesX), d3.max(tickValuesX), 0.05)\n\n        myTickValues.push(d3.max(tickValuesX))\n\n        let domainX = [d3.min(tickValuesX), d3.max(tickValuesX)]\n        let domainY = [d3.min(tickValuesY), d3.max(tickValuesY)]\n\n        let X_Linear = d3.scaleLinear().range(rangeX).domain(domainX)\n        let Y_Linear = d3.scaleLinear().range(rangeY).domain(domainY)\n\n\n\n        //    ---------------   TITLES  ------------------------\n\n        // scatter2.selectAll(\".axisLabel\").remove();\n\n        // scatter2\n        //     .append('text').attr(\"class\", \"axisLabel\")\n        //     .text(\"Log(B1/B2)\")\n        //     .attr(\"x\", -margin.left * 0.8)\n        //     .attr(\"y\", height * 0.55)\n        //     .attr(\"fill\", \"#ccc\")\n        //     .attr(\"font-family\", \"Courier New\")\n        //     .attr(\"font-size\", \"14px\")\n\n        // scatter2\n        //     .append('text').attr(\"class\", \"axisLabel\")\n        //     .text(\"Log(r1/r2)\")\n        //     .attr(\"x\", width * 0.12)\n        //     .attr(\"y\", height * 1.30)\n        //     .attr(\"fill\", \"#ccc\")\n        //     .attr(\"font-family\", \"Courier New\")\n        //     .attr(\"font-size\", \"14px\")\n\n\n\n        //    ---------------   AXES  ------------------------\n\n        scatterLogs.select(\".scatterLogsX\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(\n                d3\n                    .axisBottom(X_Linear)\n                    .tickPadding(10)\n                    //.tickValues([0])\n                    //.tickValues(tickValuesX)\n                    .tickValues(myTickValues)\n                    .tickSize(-d3.min([height, width]))\n            )\n            .selectAll(\"path\").remove()\n            .selectAll(\"text\").style(\"font-size\", \"10px\")\n\n\n        scatterLogs.select(\".scatterLogsY\")\n            .call(\n                d3\n                    .axisLeft(Y_Linear)\n                    .tickPadding(10)\n                    //.tickValues([0])\n                    //.tickValues(tickValuesY)\n                    .tickValues(myTickValues)\n                    .tickSize(-d3.min([height, width]))\n            )\n            .selectAll(\"path\").remove()\n\n        //    ---------------   HOVER  ------------------------\n\n        let onHover = (e, d) => {\n            let tgt = e.explicitOriginalTarget\n            let circleId = tgt.attributes[1].value\n\n            let bb = props.data.filter((item) => {\n                return circleId === `Schedule${item.schedule}`\n            })\n\n            //let bbb1 = (bb[0].scheduleData.b1 / bb[0].scheduleData.b2).toFixed(1)\n            //let bbb2 = (bb[0].scheduleData.r1 / bb[0].scheduleData.r2).toFixed(1)\n\n            let xx = parseInt(tgt.attributes[2].value)\n            let yy = parseInt(tgt.attributes[3].value)\n\n            e.target.style.stroke = \"cyan\"\n            e.target.style.fill = \"cyan\"\n\n            scatterLogs.append(\"text\")\n                .attr(\"x\", xx - 50)\n                .attr(\"y\", yy - 25)\n                //.text(`${bbb1}, ${bbb2}`)\n                .text(circleId)\n                .attr(\"class\", \"d3tooltip\")\n                .style(\"fill\", \"white\")\n                .attr(\"font-size\", \"14px\")\n                .attr(\"font-family\", \"Courier New\");\n        };\n\n\n        let hoverOver = (e, d) => {\n            d3.selectAll(\".d3tooltip\").remove()\n            e.target.style.stroke = \"white\"\n            e.target.style.fill = \"#ffffff89\"\n        };\n\n\n        //   -----------------------   DATA POINTS   ------------------------\n\n        scatterLogs\n            .selectAll(\"circle\")\n            .data(props.data)\n            .join(\n                enter => enter.append('circle').attr(\"class\", \"new\")\n                    .on(\"mouseover\", onHover)\n                    .on('mouseout', hoverOver),\n                update => update.attr(\"class\", \"update\"),\n                exit => exit.remove()\n            )\n            // .transition()\n            // .duration(1000)\n            .on(\"mouseover\", d => {\n                onHover(d)\n            })\n            .on('mouseout', hoverOver)\n            .attr(\"id\", (d) => `Schedule${d.schedule}`)\n            .attr(\"cx\", (d) => X_Linear(d.logR))\n            .attr(\"cy\", (d) => Y_Linear(d.logB))\n\n            .attr(\"r\", 5)\n            .attr(\"stroke-width\", 1)\n            .attr(\"fill\", \"#ffffff89\")\n            .attr(\"stroke\", \"white\");\n\n\n\n        //  -----------------------    REGRESSION     --------------------\n\n\n        let regData = [];\n        props.data.forEach((item) => {\n            regData.push(\n                [parseFloat(item.logR), parseFloat(item.logB)]\n            )\n        })\n\n        const result = regression.linear(regData)\n        const gradient = result.equation[0];\n        const yIntercept = result.equation[1];\n        const predictedB = result.predict;\n\n        // console.log(\"regression: \", result)\n        // console.log(\"gradient: \", gradient)\n        // console.log(\"yIntercept: \", yIntercept)\n        // console.log(\"10^INTERCEPT: \", 10 ** yIntercept)\n        // console.log(\"result.string: \", result.string)\n        // console.log(\"predictedB: \", predictedB)\n        // console.log(\"predictedB: \", predictedB(-1))\n        // console.log(\"predictedB: \", predictedB(1))\n\n\n        //const regLine = d3.line().data(regData)\n        //scatterLogs.append(\"path\").attr(\"datum\", regLine)\n\n        scatterLogs.selectAll(\".fittedLine\").remove()\n        scatterLogs.selectAll(\".parameters\").remove()\n\n        // scatterLogs.append(\"line\").attr(\"class\", \"fittedLine\")\n        //     .attr(\"x1\", X_Linear(d3.min(tickValuesX) * gradient + yIntercept))\n        //     .attr(\"y1\", Y_Linear(d3.min(tickValuesY) * gradient + yIntercept))\n        //     .attr(\"x2\", X_Linear(d3.max(tickValuesX) * gradient + yIntercept))\n        //     .attr(\"y2\", Y_Linear(d3.max(tickValuesY) * gradient + yIntercept))\n        //     .attr(\"stroke\", \"red\")\n        //     .attr(\"stroke-width\", 2)\n\n\n        scatterLogs.append(\"line\").attr(\"class\", \"fittedLine\")\n            .attr(\"x1\", X_Linear(predictedB(d3.min(tickValuesX))[0]))\n            .attr(\"y1\", Y_Linear(predictedB(d3.min(tickValuesX))[1]))\n            .attr(\"x2\", X_Linear(predictedB(d3.max(tickValuesX))[0]))\n            .attr(\"y2\", Y_Linear(predictedB(d3.max(tickValuesX))[1]))\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 2)\n\n\n        scatterLogs.append(\"line\").attr(\"class\", \"perfectMatching\")\n            .attr(\"x1\", X_Linear(d3.min(tickValuesX) * 1.00 + 0.00))\n            .attr(\"y1\", Y_Linear(d3.min(tickValuesY) * 1.00 + 0.00))\n            .attr(\"x2\", X_Linear(d3.max(tickValuesX) * 1.00 + 0.00))\n            .attr(\"y2\", Y_Linear(d3.max(tickValuesY) * 1.00 + 0.00))\n            .attr(\"stroke\", \"#bbb\")\n            .attr(\"stroke-width\", 1)\n            .attr(\"stroke-dasharray\", 0)\n\n        scatterLogs.append(\"text\").attr(\"class\", \"parameters\").attr(\"x\", -50).attr(\"y\", -50).text(`slope(a): ${gradient}; intercept: ${yIntercept};`).attr(\"fill\", \"#fff\")\n\n    }, [props.data]);\n\n\n\n\n\n\n    return (\n\n        <div id=\"divScatterLogs\">\n\n            <svg id=\"svgScatterLogs\">\n\n                <g ref={refScatterLogs}>\n\n                    <g className=\"scatterLogsX\"></g>\n\n                    <g className=\"scatterLogsY\"></g>\n\n                </g>\n\n            </svg>\n\n        </div>\n    )\n}\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/MatchingEquations.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/EtbdEmergence.js",["457","458","459","460"],"import \"../sensitivity/mathematical_models.sass\";\nimport { nanoid } from \"nanoid\";\n\n// import \"../etbd_selection/selection.sass\";\nimport { useState, useEffect } from \"react\";\n\nimport ReadMore from \"./ReadMore\";\nimport CollapseHook from \"./CollapseHook\"\n\n//import DrawEtbdInteractive from \"../etbd_emergence/DrawEtbdInteractive\"\n\n//import EmergenceDemo from \"../etbd_emergence/EmergenceDemo\";\nimport EmergenceMain from \"../emergence/EmergenceMain\";\n\n\nexport default function EtbdEmergence(props) {\n\n    var [population, updatePopulation] = useState()\n\n\n    return (\n        <div\n            className=\"item\"\n            content1={props.qualDate}\n            key={nanoid()}\n            id={props.date}\n\n            style={{\n                fontFamily: props.fontFam,\n                marginTop: \"3rem\",\n                marginBottom: \"3rem\"\n            }}\n        >\n            <div key={nanoid()} className=\"itemContent\">\n\n\n                {/* -------------------      EMERGENCE demo      ---------------------- */}\n\n\n                <div key={nanoid()} className=\"projectColumnLeft\" >\n\n                    <span key={nanoid()} className=\"title\">{props.title}</span>\n\n                    <ReadMore maxChars={1000} overview={props.description} />\n\n                    <CollapseHook\n                        collapsedTitle={\"Relevant work\"}\n                        collapsedText={\n                            <div key={nanoid()} className=\"divRefs\">  {props.references}  </div>\n                        }\n                    />\n                    <div key={nanoid()} className=\"links\" >  {props.links}  </div>\n                </div>\n\n\n\n\n                <div key={nanoid()} className=\"demo_emergence\">\n                    {/* <EmergenceDemo /> */}\n                    <EmergenceMain />\n                </div>\n\n\n            </div>\n        </div>\n    )\n}\n\n{/* <div className=\"infoCarousel\">\n                                <p>The text changes, guiding the user through the simulation.</p>\n                            </div> */}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_emergence/DrawEtbdInteractive.js",["461","462","463","464","465","466","467","468","469","470"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/EmergenceMain.js",["471","472","473","474","475","476","477","478"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/AgentHistory.js",["479","480"],"import React from \"react\"\nimport { nanoid } from \"nanoid\"\nimport * as d3 from \"d3\"\n\n\nexport default class AgentHistory extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n    }\n\n\n    render() {\n\n        let xxx = this.props.data.slice(0, this.props.data.length - 1)\n\n\n        // fitness gradient goes black to orange:\n        let color1 = '#000'\n        let color2 = '#ff6200'\n\n        var fitness_gradient = d3.scaleLinear()\n            .domain([1, 99])\n            .range([color1, color2])\n\n\n\n        return (\n\n            <div\n                id=\"divAgentHistory\"\n                style={{\n                    height: \"auto\",\n                    width: \"100%\",\n                    margin: \"auto\",\n                    border: \"0px\",\n                }}\n                key={nanoid()}\n            >\n\n                {\n                    xxx.map((gn) => {\n                        return (\n                            <div>\n                                {\n                                    gn.population.map((item, i) => {\n                                        let cellId = `phenotype_${i + 1}`\n                                        return (\n\n\n                                            <button\n                                                key={nanoid()}\n                                                title={item.status}\n                                                value={item.phenotype}\n                                                id={cellId}\n                                                className=\"btn_history\"\n                                            // style={{\n                                            //     background: fitness_gradient(i * 10),\n                                            //     border: `1px solid ${fitness_gradient(i * 10)}`\n                                            // }}\n                                            >\n                                                {item.phenotype}\n                                            </button>\n\n\n                                        )\n                                    })\n                                }\n                            </div>\n\n                        )\n                    })\n                }\n\n\n\n                {/* <table className=\"table_history\" key={nanoid()}>\n                    <tbody>\n\n\n                        {\n                            this.props.data.map((generation) => {\n\n                                return (\n\n                                    <tr className=\"generation\" key={nanoid()} >\n\n                                        <th className=\"cell_tn\" key={nanoid()} >\n                                            t <sub> {generation.tn} </sub>\n                                        </th>\n\n\n                                        {\n                                            generation.population.map((phenotype) => {\n\n                                                return (\n\n                                                    <td key={nanoid()} >\n                                                        {phenotype}\n                                                    </td>\n                                                )\n                                            })\n                                        }\n\n\n                                        <td key={nanoid()}  >\n                                            {generation.emission}\n                                        </td>\n\n\n                                        <td key={nanoid()} >\n                                            {generation.reinforced}\n                                        </td>\n\n                                    </tr>\n                                )\n                            })\n                        }\n\n                    </tbody>\n                </table > */}\n\n\n            </div >\n        )\n    }\n\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/ButtonNext.jsx",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/mutation/MutationDemo.jsx",["481","482","483","484","485","486"],"import \"./checkbox_mutation.sass\"\nimport React from \"react\"\nimport CheckProps from \"./CheckProps\"\nimport { nanoid } from \"nanoid\"\n//import ButtonNext from \"../ButtonNext\"\nimport { Button } from \"react-bootstrap\"\n\n\nexport default class MutationDemo extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.onChange = this.onChange.bind(this)\n    }\n\n\n\n    onChange = (e) => {\n        let a = this.state[[e.target.name]][0]\n        let b = this.state[[e.target.name]][1]\n        let b1 = Math.abs(1 - b)\n        let absVal = this.state[[e.target.name]][2]\n\n        this.setState({\n            [e.target.name]: [e.target.checked, b1, absVal]\n        })\n    }\n\n\n\n\n    createStates = () => {\n\n        let bits = this.props.nrBits\n        let defaultGenotype = []\n\n        let x\n\n        if (this.props.genotype === []) {\n            x = Array.length(bits).fill(\"\")\n            console.log(\"mutation genotype: \", x)\n        } else {\n            x = this.props.genotype\n        }\n\n        x.map((item, i) => {\n            let power = x.length - 1 - i\n            let cellName = `bit${power}`\n            this.setState({ [cellName]: [false, item, 2 ** power] })\n        })\n    }\n\n\n\n    componentWillMount() {\n        this.createStates()\n    }\n\n\n    computePhenotype = () => {\n        let mtn = 0\n        Object.entries(this.state).map((entry) => {\n            let info = entry[1]\n            mtn += info[1] * info[2]\n        })\n\n        return mtn\n    }\n\n\n\n    submitMutantPhenotype = (e) => {\n        let xxx = this.computePhenotype()\n        this.props.addToNext(xxx)\n    }\n\n\n\n    render() {\n\n        const Checkboxes = Object.entries(this.state).map((entry) => {\n            let cellName = entry[0]\n\n            return (\n                <CheckProps\n                    mutant={this.state[[cellName]][0]}\n                    bitState={this.state[[cellName]][1]}\n                    cellValue={this.state[[cellName]][2]}\n                    bitName={cellName}\n                    onChange={this.onChange}\n                />\n            )\n        })\n\n\n        // const myPhenotype = this.computePhenotype()\n        let myPhenotype = this.computePhenotype()\n\n\n        // let section_opacity = 0.5\n        // if (this.props.demoState === \"mutation\") {\n        //     section_opacity = 1\n        // }\n\n\n        return (\n\n            <div\n                //className=\"div_cbx\" \n                style={{\n                    //border: \"1px solid blue\",\n                    width: \"100%\",\n                    // margin: \"0px 0px 0px 20px\",\n\n                    margin: \"auto\",\n                    //textAlign: \"center\",\n                    //padding: \"0px\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n\n                }}\n                key={nanoid()}\n            >\n\n\n\n                <div\n                    style={{\n                        //border: \"1px solid red\",\n                        width: \"60px\",\n                        //padding: \"5px\",\n                        height: \"60px\",\n                        marginBottom: \"10px\",\n                        verticalAlign: \"middle\",\n\n                        borderRadius: \"10px\",\n\n                        //marginLeft: \"15px\",\n                        //textAlign: \"center\",\n                        //padding: \"0px\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        webkitBoxShadow: \"inset 2px -2px 2px 0px #111, -1px -1px 1px 1px #fec5e577\",\n                        cursor: \"pointer\",\n\n                    }}\n                    key={nanoid()}\n                    onClick={this.submitMutantPhenotype}\n                    title={\"click to replace the original phenotype\"}\n                >\n\n\n\n                    {/* <label className=\"radio_bit1\"\n                        style={{\n                            //margin: \"5px auto\",\n                            borderRadius: \"0px\",\n                            width: \"60px\",\n                            textAlign: \"left\",\n                            height: \"20px\",\n\n                            //webkitBoxShadow: \"inset 2px -2px 2px 0px #111, -1px -1px 1px 1px #4496487b\",\n                            //boxShadow: \"inset 2px -2px 2px 0px #111, -1px -1px 1px 1px #4496487b\",\n\n                        }}\n                    >\n                        <div\n                            className=\"radio_text1\"\n                            style={{\n                                color: \"#5ee478\",\n                                //color: \"#0062cc\",\n                                color: \"#03A062\",\n                                fontSize: \"11px\",\n                                width: \"60px\",\n                                textAlign: \"left\",\n                                height: \"20px\",\n                                //marginBottom: \"0px\",\n                            }}\n                        >\n                            {this.props.childPhenotype}\n                        </div>\n                    </label> */}\n\n\n\n                    <span\n                        style={{\n                            //color: \"#5ee478\",\n                            //color: \"#0062cc\",\n                            //color: \"#03A062\",\n                            fontSize: \"12px\",\n                            //width: \"60px\",\n                            //textAlign: \"left\",\n                            //height: \"20px\",\n                            // marginBottom: \"0px\",\n                            color: \"#03A062\",\n                            margin: \"4px auto auto 6px\",\n\n                        }}\n                    >\n                        {this.props.childPhenotype}\n\n                    </span>\n\n\n\n\n                    <label className=\"radio_bit1\"\n                        style={{\n                            borderRadius: \"0px\",\n                            width: \"60px\",\n                            margin: \"auto auto 15px auto\",\n                        }}\n                    >\n                        <div\n                            className=\"radio_text1\"\n                            style={{\n                                color: \"#5ee478\",\n                                height: \"20px\",\n                                fontSize: \"14px\",\n                                width: \"60px\",\n                                margin: \"auto\",\n                                paddingLeft: \"15px\",\n                                color: this.props.childPhenotype === myPhenotype ? \"#5ee478\" : \"tomato\"\n                            }}\n                        >\n                            {myPhenotype}\n                        </div>\n                    </label>\n\n\n                    {/* <Button\n                        onClick={this.submitMutantPhenotype}\n                        variant=\"outline-success\"\n                        style={{\n                            width: \"60px\",\n                            height: \"30px\",\n                            fontSize: \"10px\",\n                            margin: \"auto\",\n                            position: \"absolute\",\n                            marginLeft: \"80px\",\n                            marginTop: \"30px\",\n                        }}\n                    >\n                        replace\n\n                    </Button> */}\n\n                </div>\n\n\n\n                <div className=\"div_cbx\" key={nanoid()}>\n                    {Checkboxes}\n                </div>\n\n            </div>\n\n        )\n    }\n}\n\n\n\n\n\n\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/mutation/CheckProps.js",["487"],"import React from \"react\"\nimport { nanoid } from \"nanoid\"\nimport parse from \"html-react-parser\"\n\nexport default class CheckProps extends React.Component {\n\n    render() {\n        return (\n\n            <React.Fragment>\n\n\n                <label\n                    className=\"cbx_mutation\"\n                    key={nanoid()}\n                    style={{\n                        textAlign: \"center\",\n                        fontSize: \"13px\",\n                        fontWeight: 300,\n                        //height: \"40px\",\n                        //border: \"1px solid red\"\n\n                    }}\n                    title={2 ** this.props.bitName[this.props.bitName.length - 1]}\n\n                    data-power2={this.props.power2}\n\n                >\n\n                    2<sup>{this.props.bitName[this.props.bitName.length - 1]}</sup>\n\n\n                    <input\n                        key={nanoid()}\n                        className=\"cbx_input\"\n                        type=\"checkbox\"\n                        //type=\"radio\"\n                        checked={this.props.mutant}\n                        value={this.props.bitState}\n                        name={this.props.bitName}\n                        onChange={this.props.onChange}\n                    />\n\n\n                    <div\n                        value={this.props.bitState}\n\n                        class=\"cbx_text\"\n                        key={nanoid()}\n                    >\n                        {this.props.bitState}\n                    </div>\n\n                </label>\n\n            </React.Fragment>\n\n        )\n    }\n}\n\n\n\n\n\n\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/HammingDistances.js",["488"],"import React, { Component } from \"react\"\n//import parse from \"html-react-parser\"\nimport ReadMore from \"./ReadMore\"\n//import ImagesCarousel from \"./ImagesCarousel\";\nimport CollapseHook from \"./CollapseHook\"\n\nimport HammingDemo from \"../etbd_hamming/HammingDemo\"\nimport { nanoid } from \"nanoid\"\n\n\nexport default class HammingDistances extends Component {\n\n\n\n    render() {\n\n        return (\n            <div\n                className=\"item\"\n                content1={this.props.qualDate}\n                key={this.props.date + this.props.title}\n                id={this.props.date}\n\n                style={{\n                    fontFamily: this.props.fontFam,\n                    marginTop: \"3rem\",\n                    marginBottom: \"3rem\"\n                }}\n            >\n                <div className=\"itemContent\">\n\n\n\n\n                    {/* -------------------       Hamming Demo      ---------------------- */}\n\n\n\n                    <div className=\"projectColumnLeft\">\n\n                        <span className=\"title\">{this.props.title}</span>\n\n                        <ReadMore maxChars={1000} overview={this.props.description} />\n\n                        {/* <p className=\"p-left\">\n                            To verify ETBD predictions, I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side. This was my first study as a principal investigator.\n                        </p> */}\n\n                        <CollapseHook\n                            collapsedTitle={\"Relevant work\"}\n\n                            collapsedText={\n                                <div className=\"divRefs\">  {this.props.references}  </div>\n                            }\n                        />\n\n                        <div className=\"links\" >  {this.props.links}  </div>\n\n                        {/* <div className=\"divTech\">  {Technologies}  </div> */}\n\n                    </div>\n\n\n                    <div\n                        className=\"chapterCol\"\n                        style={{ marginTop: \"20px\" }}\n                    >\n\n                        {/* <h1\n                            className=\"chapter-sub-title\"\n                            style={{\n                                fontSize: \"18px\",\n                                textAlign: \"center\",\n                            }}\n\n                        >Dissertation project</h1>\n\n                        <p\n                            className=\"p-left\"\n                            style={{ color: \"#02aab0\", }}\n                        >In part 1, I explored the interaction between mutation rate, reinforcement rate and magnitude, and COD in ETBD.<br /></p>\n */}\n\n\n                        <HammingDemo />\n\n\n\n                        {/* <p className=\"p-left\" style={{ color: 'rgb(255, 128, 49)', }}>Then, I explored human behavior under different COD requirements and I compared it with the ETBD. <br /><br /></p>\n\n\n                        <p className=\"p-left\" style={{ color: 'rgb(255, 128, 49)', }}>Finally, I used traditional instruments to measure ADHD symptoms in the same participants and I compared the scores with measures of choice behavior.</p> */}\n\n                        {/* <p className=\"p-left\"\n                            style={{\n                                marginTop: \"2rem\",\n                                border: \"1px solid #888\",\n                                borderRadius: \"10px\",\n                                padding: \"0.5rem\",\n                                // backgroundColor: \"#fdff9f\",\n                                // backgroundColor: \"rgb(20, 33, 61)\",\n                                // backgroundColor: \"rgb(20, 33, 61)\",\n                                backgroundColor: \"rgba(5, 75, 87, 0.5)\",\n\n\n                                width: \"90%\",\n                                color: \"#fff\",\n                                opacity: \"0.8\",\n                                fontSize: \".9rem\",\n                                lineHeight: \"1.5rem\",\n                            }}\n\n                        ><b>Fast Matching.</b> To accomplish two and three I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side. This was my first study as a principal investigator.</p> */}\n                    </div>\n\n\n                </div>\n            </div>\n        );\n    }\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/recombination/RecombinationDemo.jsx",["489","490","491","492"],"import \"./radio_bit.sass\"\n\n\nimport React from \"react\"\n\nimport { nanoid } from \"nanoid\"\n//import ButtonNext from \"../ButtonNext\"\n\nimport RadioBit from \"./RadioBit\"\nimport { dec2binList } from \"../../etbd_hamming/hammingFunctions\";\nimport { Button } from \"react-bootstrap\"\n\nexport default class RecombinationDemo extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.onChange = this.onChange.bind(this)\n    }\n\n\n    onChange = (e) => {\n\n        console.log(\"Recombination on change, props demoState =  \", this.state.demoState)\n\n\n        let a = this.state[[e.target.name]]\n        console.log(\"recombination, on change, a: \", a)\n        this.setState({\n            [e.target.name]: [a[0], a[1], parseInt(e.target.value), a[3]]\n        })\n    }\n\n\n\n\n\n\n    createStates = () => {\n\n        let nrBits = this.props.nrBits\n        let p1, p2, x1, x2\n\n        if (!this.props.parents) {\n            p1 = this.props.low\n            p2 = this.props.high\n            x1 = dec2binList(nrBits, p1)\n            x2 = dec2binList(nrBits, p2)\n        } else {\n            p1 = this.props.parent1\n            p2 = this.props.parent2\n            x1 = this.props.genotype1\n            x2 = this.props.genotype2\n\n        }\n\n\n        x1.map((item, i) => {\n            let power = x1.length - 1 - i\n            let cellName = `myChildBit${power}`\n            let outcome = \"\"\n            let rnd = Math.random()\n            if (rnd < .5) {\n                outcome = x1[i]\n            } else {\n                outcome = x2[i]\n            }\n\n            this.setState({ [cellName]: [x1[i], x2[i], outcome, 2 ** power] })\n        })\n    }\n\n\n\n\n\n\n    componentWillMount() {\n        this.createStates()\n    }\n\n\n    // componentDidUpdate() {\n    //     this.createStates()\n    // }\n\n\n    computeChildPhenotype = () => {\n        let child = 0\n        let emptyBits = 0\n        Object.entries(this.state).map((entry) => {\n            let bitState = entry[1][2]\n            let slotValue = entry[1][3]\n            child += bitState * slotValue\n\n            if (bitState === \"?\" | bitState === \"\") {\n                emptyBits += 1\n            }\n        })\n\n        if (emptyBits > 0) {\n            return \"\"\n        } else {\n            return child\n        }\n    }\n\n\n    submitChildPhenotype = (e) => {\n        let cp = this.computeChildPhenotype()\n        //this.props.goToMutation(xxx)\n        this.props.addChildItem(cp)\n    }\n\n\n\n    render() {\n\n\n\n        let MyGenotypes = Object.entries(this.state).map((entry) => {\n\n            let cellName = entry[0]\n            let sameThing = false\n\n            if (this.state[[cellName]][0] === this.state[[cellName]][1]) {\n                sameThing = true\n            }\n            return (\n                <RadioBit\n                    bitName={cellName}\n                    bitState1={this.state[[cellName]][0]}\n                    bitState2={this.state[[cellName]][1]}\n                    chosenBit={this.state[[cellName]][2]}\n                    equal={sameThing}\n                    onChange={this.onChange}\n\n                />\n            )\n        })\n\n\n        let ChildPhenotype = this.computeChildPhenotype()\n\n        let section_opacity = 0.7\n        if (this.props.demoState === \"recombination\") {\n            section_opacity = 1\n        }\n\n\n        if (this.props.demoState !== \"start\") {\n            return null\n        } else {\n            return (\n                <div\n\n                    className=\"div_genotypes\"\n                // style={{\n                //     opacity: section_opacity,\n                //     transition: \"opacity 2s\",\n                // }}\n                >\n\n\n                    <div className=\"div_radio_bit div_labels\">\n\n                        <label\n                            className=\"radio_bit\"\n                            style={{\n                                border: \"1px solid #0062cc\",\n                                borderBottom: \"0px solid #0062cc\",\n                            }}\n                        >\n                            <div\n                                value={this.props.parent1}\n                                className=\"radio_text\"\n                                style={{\n                                    color: \"#ddd\",\n                                    fontSize: \"14px\",\n                                }}\n                            >\n                                {this.props.parent1}\n\n                            </div>\n                        </label>\n\n\n                        <label\n                            className=\"radio_bit\"\n                            style={{\n                                border: \"1px solid #0062cc\",\n                                borderTop: \"none\",\n\n                            }}\n                        >\n                            <div\n                                value={this.props.parent2}\n                                className=\"radio_text\"\n                                style={{\n                                    color: \"#ddd\",\n                                    fontSize: \"14px\",\n                                }}\n                            >\n                                {this.props.parent2}\n                            </div>\n                        </label>\n\n\n\n                        <label className=\"radio_bit\"\n                            style={{\n                                marginTop: \"5px\"\n\n                            }}\n                        >\n                            <div className=\"radio_text\"\n                                style={{\n                                    color: \"#5ee478\",\n                                    height: \"30px\",\n                                    fontSize: \"14px\",\n                                    transition: \"color 1s\",\n\n                                }}\n                            >  {ChildPhenotype}  </div>\n                        </label>\n\n                    </div>\n\n\n                    {MyGenotypes}\n\n\n                    <Button\n                        onClick={this.submitChildPhenotype}\n                        variant=\"outline-info\"\n                        style={{\n                            height: \"30px\", fontSize: \"10px\", margin: \"auto\",\n                        }}\n                    >\n                        next\n\n                    </Button>\n\n                </div>\n            )\n        }\n\n\n    }\n}\n\n\n\n\n\n\n\n",["493","494"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/recombination/RadioBit.jsx",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/NeonsFunctionality.js",["495","496","497","498","499","500","501"],"import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Fade } from \"react-reveal\"\n\n\n\nexport function NeonStart(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"start\") {\n            return \"light_on_orange\"\n        } else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div key={nanoid()}\n            className=\"darwinian_cycle\"\n            style={{\n                margin: \"auto\",\n                marginBottom: \"20px\",\n                marginTop: \"10px\",\n\n\n            }}\n        >\n\n\n            <h2\n                key={nanoid()}\n                className={neonClass}\n                style={{\n                    fontSize: \"20px\", textAlign: \"center\",\n                }}\n                onClick={props.randomPopulation}\n            >\n                Click to play\n            </h2>\n\n        </div>\n\n    )\n};\n\n\n\n\nexport function NeonEmission(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"emission\") {\n            return \"light_on_white\"\n        } else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div\n            key={nanoid()}\n            className=\"darwinian_cycle\"\n            style={{ margin: \"30px auto 0px auto\" }}\n        >\n\n            <h2\n                key={nanoid()}\n                className={neonClass}\n                style={{\n                    fontSize: \"16px\", textAlign: \"center\",\n                }}\n            >\n\n                <i>Emit</i> a response</h2>\n\n        </div>\n    )\n};\n\n\n// export function NeonReinforcement(props) {\n//     var [neonClass, setNeonClass] = useState(() => {\n//         if (props.demoState === \"emission\") {\n//             //return \"light_on_orange\"\n//             return \"light_on_white\"\n//         } else {\n//             return \"light_off\"\n//         }\n//     })\n\n\n//     return (\n//         <div\n//             key={nanoid()}\n//             className=\"darwinian_cycle\"\n//         >\n//             <h2\n//                 key={nanoid()}\n//                 className={neonClass}\n//             >\n\n//                 <i>Emit</i> a response</h2>\n//         </div>\n//     )\n// };\n\n\n\nexport function NeonCreateNewPopulation(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"selection\" | props.demoState === \"recombination\" | props.demoState === \"mutation\") {\n            return \"light_on_neon\"\n        } else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div\n            key={nanoid()}\n            className=\"darwinian_cycle\"\n        >\n            <h2\n                key={nanoid()}\n                className={neonClass}\n            >\n\n                Create new generation</h2>\n        </div>\n    )\n};\n\n\nexport function NeonSelection(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"selection\" && props.reinforced === true) {\n            return \"light_on_yellow\"\n        }\n        else if (props.demoState === \"selection\" && props.reinforced === false) {\n            return \"light_on_white\"\n        }\n        else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div\n            key={nanoid()}\n            className=\"darwinian_cycle\"\n        >\n            <h2\n                key={nanoid()}\n                className={neonClass}\n            >\n                Select parents\n            </h2>\n        </div>\n    )\n};\n\n\n\nexport function NeonRecombination(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"recombination\") {\n            //return \"light_on_green\"\n            return \"light_on_white\"\n\n        } else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div\n            key={nanoid()}\n            className=\"darwinian_cycle\"\n        >\n            <h2\n                key={nanoid()}\n                className={neonClass}\n            >\n                Recombination\n\n\n            </h2>\n        </div>\n    )\n};\n\n\nexport function NeonMutation(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"mutation\") {\n            return \"light_on_pink\"\n        } else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div\n            key={nanoid()}\n            className=\"darwinian_cycle\"\n        >\n            <h2\n                key={nanoid()}\n                className={neonClass}\n            >\n                Mutation\n            </h2>\n\n        </div>\n    )\n};","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/emission/Emission.jsx",["502","503","504"],"import \"../emergence22.sass\"\nimport React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { nanoid } from \"nanoid\"\nimport { Fade } from \"react-reveal\"\n\nexport default function Emission(props) {\n    //const [emission, setEmission] = useState(\"\")\n\n    function handleClick(event) {\n        props.doSomething(event.target.value)\n    }\n\n    return (\n        <>\n            <div\n                key={nanoid()}\n                style={{\n                    //border: \"1px solid #ff0000\",\n                    height: \"30px\",\n                    margin: \"auto\",\n                    display: \"inline-flex\",\n                    //backgroundColor: \"transparent\"\n                }}\n            >\n                {/* {\n                    props.population.map((item, i) => {\n                        let cellId = `phenotype_${i + 1}`\n                        return (\n                            <button\n                                title={\"emited\"}\n                                value={item}\n                                id={cellId}\n                                onClick={handleClick}\n                                className=\"btn_ems\"\n                                style={{\n                                    color: \"dark grey\",\n                                    width: \"30px\",\n                                    height: \"30px\",\n                                    margin: \"auto\",\n                                    //background: \"gradient fitness\",\n                                    color: \"#ff00ff\",\n\n                                }}\n\n                            >\n                                {item}\n                            </button>\n                        )\n                    })\n                } */}\n\n\n                {\n                    props.population.map((item, i) => {\n                        let cellId = `phenotype_${i + 1}`\n                        return (\n\n\n                            <button\n                                key={nanoid()}\n                                title={item.status}\n                                value={item.phenotype}\n                                id={cellId}\n                                onClick={handleClick}\n                                className=\"btn_ems\"\n                            >\n                                {item.phenotype}\n                            </button>\n\n                        )\n                    })\n                }\n\n\n            </div>\n        </>\n\n    )\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/selection/ToggleReinforcement.jsx",["505"],"import { useState, useEffect } from \"react\"\nimport { nanoid } from \"nanoid\"\nimport \"./toggle_reinforcement.sass\"\n\n\nexport default function ToggleReinforcement(props) {\n    const [reinforced, setReinforced] = useState(false)\n    const [btnText, setBtnText] = useState(\"not reinforced\")\n\n    const myText = [\"not reinforced\", \"reinforced\"]\n\n    function handleChange(e) {\n        if (e.target.checked === false) {\n            setReinforced(!reinforced)\n            setBtnText(myText[1])\n        }\n        if (e.target.checked === true) {\n            setReinforced(!reinforced)\n            setBtnText(myText[0])\n        }\n\n    }\n\n    return (\n        <label\n            className=\"toggle_reinforcement\"\n\n            style={{\n                width: \"50px\",\n                //height: \"0px\",\n            }}\n            key={nanoid()}\n        >\n            {btnText}\n\n            <input\n                checked={reinforced}\n                value={reinforced}\n                onChange={handleChange}\n                type=\"checkbox\"\n                style={{\n                    width: \"0px\",\n                    height: \"0px\",\n                    opacity: 0,\n                }}\n                key={nanoid()}\n            >\n            </input>\n        </label>\n    )\n}",["506","507"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/selection/Selection.js",["508","509"],"import \"../emergence22.sass\"\nimport React from \"react\"\n//import { useState, useEffect } from \"react\"\nimport { nanoid } from \"nanoid\"\nimport { Fade } from \"react-reveal\"\nimport { Button } from \"react-bootstrap\"\n\nexport default class Selection extends React.Component {\n\n    // constructor(props) {\n    //     super(props)\n\n    //     this.selectParent = this.selectParent.bind(this)\n    // }\n\n\n    // selectParent = (event) => {\n\n    //     this.props.doSomethingSelect(event.target.value)\n    // }\n\n\n\n    render() {\n\n        let ParentPopulation\n\n        if (this.props.population) {\n            ParentPopulation = this.props.population.map((item, i) => {\n                let cellId = `phenotype_${i + 1}`\n                let parent\n\n                if (item) {\n                    parent = item\n                } else {\n                    parent = { phenotype: \"\", genotype: \"\", status: \"\" }\n                }\n\n                return (\n\n                    <button\n                        dataParent={false}\n                        key={nanoid()}\n                        title={parent.status}\n                        value={parent.phenotype}\n                        id={cellId}\n                        onClick={this.props.doSomethingSelect}\n                        className=\"btn-selection\"\n                    >\n                        {parent.phenotype}\n\n                    </button>\n                )\n            })\n        }\n\n\n\n        return (\n            <div className=\"parents-wrapper\" key={nanoid()}  >\n                {ParentPopulation}\n            </div>\n        )\n    }\n}\n\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/EmergenceSettings.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/rechooks/Rec2.js",["510"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/rechooks/RadioHook.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/SvgRecord.js",["511"],"import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nexport default function SvgRecord(props) {\n\n    return (\n        <svg key={nanoid()} className=\"svg_record\"></svg>\n    )\n}",{"ruleId":"512","replacedBy":"513"},{"ruleId":"514","replacedBy":"515"},{"ruleId":"516","severity":1,"message":"517","line":2,"column":8,"nodeType":"518","messageId":"519","endLine":2,"endColumn":13},{"ruleId":"512","replacedBy":"520"},{"ruleId":"514","replacedBy":"521"},{"ruleId":"516","severity":1,"message":"517","line":2,"column":8,"nodeType":"518","messageId":"519","endLine":2,"endColumn":13},{"ruleId":"516","severity":1,"message":"517","line":5,"column":8,"nodeType":"518","messageId":"519","endLine":5,"endColumn":13},{"ruleId":"516","severity":1,"message":"522","line":238,"column":13,"nodeType":"518","messageId":"519","endLine":238,"endColumn":24},{"ruleId":"516","severity":1,"message":"523","line":280,"column":17,"nodeType":"518","messageId":"519","endLine":280,"endColumn":22},{"ruleId":"516","severity":1,"message":"524","line":281,"column":17,"nodeType":"518","messageId":"519","endLine":281,"endColumn":22},{"ruleId":"516","severity":1,"message":"525","line":444,"column":29,"nodeType":"518","messageId":"519","endLine":444,"endColumn":31},{"ruleId":"516","severity":1,"message":"525","line":465,"column":29,"nodeType":"518","messageId":"519","endLine":465,"endColumn":31},{"ruleId":"516","severity":1,"message":"526","line":532,"column":29,"nodeType":"518","messageId":"519","endLine":532,"endColumn":31},{"ruleId":"516","severity":1,"message":"526","line":551,"column":29,"nodeType":"518","messageId":"519","endLine":551,"endColumn":31},{"ruleId":"527","severity":1,"message":"528","line":988,"column":37,"nodeType":"529","messageId":"530","endLine":988,"endColumn":42},{"ruleId":"531","severity":1,"message":"532","line":103,"column":52,"nodeType":"533","messageId":"534","endLine":103,"endColumn":53},{"ruleId":"535","severity":1,"message":"536","line":132,"column":50,"nodeType":"537","messageId":"538","endLine":132,"endColumn":52},{"ruleId":"512","replacedBy":"539"},{"ruleId":"514","replacedBy":"540"},{"ruleId":"527","severity":1,"message":"528","line":79,"column":90,"nodeType":"529","messageId":"530","endLine":79,"endColumn":95},{"ruleId":"527","severity":1,"message":"528","line":89,"column":90,"nodeType":"529","messageId":"530","endLine":89,"endColumn":95},{"ruleId":"535","severity":1,"message":"541","line":10,"column":39,"nodeType":"537","messageId":"538","endLine":10,"endColumn":41},{"ruleId":"516","severity":1,"message":"523","line":110,"column":13,"nodeType":"518","messageId":"519","endLine":110,"endColumn":18},{"ruleId":"516","severity":1,"message":"524","line":111,"column":13,"nodeType":"518","messageId":"519","endLine":111,"endColumn":18},{"ruleId":"516","severity":1,"message":"542","line":145,"column":13,"nodeType":"518","messageId":"519","endLine":145,"endColumn":15},{"ruleId":"516","severity":1,"message":"525","line":234,"column":29,"nodeType":"518","messageId":"519","endLine":234,"endColumn":31},{"ruleId":"516","severity":1,"message":"525","line":255,"column":29,"nodeType":"518","messageId":"519","endLine":255,"endColumn":31},{"ruleId":"516","severity":1,"message":"526","line":323,"column":29,"nodeType":"518","messageId":"519","endLine":323,"endColumn":31},{"ruleId":"516","severity":1,"message":"526","line":342,"column":29,"nodeType":"518","messageId":"519","endLine":342,"endColumn":31},{"ruleId":"516","severity":1,"message":"543","line":380,"column":17,"nodeType":"518","messageId":"519","endLine":380,"endColumn":24},{"ruleId":"516","severity":1,"message":"544","line":4,"column":8,"nodeType":"518","messageId":"519","endLine":4,"endColumn":16},{"ruleId":"516","severity":1,"message":"523","line":172,"column":13,"nodeType":"518","messageId":"519","endLine":172,"endColumn":18},{"ruleId":"516","severity":1,"message":"524","line":173,"column":13,"nodeType":"518","messageId":"519","endLine":173,"endColumn":18},{"ruleId":"516","severity":1,"message":"545","line":239,"column":13,"nodeType":"518","messageId":"519","endLine":239,"endColumn":27},{"ruleId":"516","severity":1,"message":"542","line":259,"column":13,"nodeType":"518","messageId":"519","endLine":259,"endColumn":15},{"ruleId":"516","severity":1,"message":"543","line":408,"column":17,"nodeType":"518","messageId":"519","endLine":408,"endColumn":24},{"ruleId":"546","severity":1,"message":"547","line":582,"column":43,"nodeType":"537","messageId":"548","endLine":585,"endColumn":22},{"ruleId":"549","severity":1,"message":"550","line":6,"column":5,"nodeType":"551","messageId":"552","endLine":8,"endColumn":6},{"ruleId":"553","severity":1,"message":"554","line":22,"column":13,"nodeType":"518","messageId":"555","endLine":22,"endColumn":20},{"ruleId":"516","severity":1,"message":"556","line":1,"column":8,"nodeType":"518","messageId":"519","endLine":1,"endColumn":13},{"ruleId":"516","severity":1,"message":"557","line":2,"column":10,"nodeType":"518","messageId":"519","endLine":2,"endColumn":18},{"ruleId":"516","severity":1,"message":"558","line":2,"column":31,"nodeType":"518","messageId":"519","endLine":2,"endColumn":37},{"ruleId":"559","severity":1,"message":"560","line":57,"column":8,"nodeType":"561","endLine":57,"endColumn":10,"suggestions":"562"},{"ruleId":"512","replacedBy":"563"},{"ruleId":"514","replacedBy":"564"},{"ruleId":"516","severity":1,"message":"565","line":16,"column":8,"nodeType":"518","messageId":"519","endLine":16,"endColumn":15},{"ruleId":"535","severity":1,"message":"566","line":104,"column":17,"nodeType":"567","messageId":"568","endLine":104,"endColumn":23},{"ruleId":"516","severity":1,"message":"569","line":2,"column":8,"nodeType":"518","messageId":"519","endLine":2,"endColumn":18},{"ruleId":"516","severity":1,"message":"570","line":3,"column":8,"nodeType":"518","messageId":"519","endLine":3,"endColumn":19},{"ruleId":"535","severity":1,"message":"566","line":44,"column":17,"nodeType":"567","messageId":"568","endLine":44,"endColumn":23},{"ruleId":"512","replacedBy":"571"},{"ruleId":"514","replacedBy":"572"},{"ruleId":"559","severity":1,"message":"573","line":126,"column":8,"nodeType":"561","endLine":126,"endColumn":10,"suggestions":"574"},{"ruleId":"512","replacedBy":"575"},{"ruleId":"514","replacedBy":"576"},{"ruleId":"516","severity":1,"message":"577","line":26,"column":12,"nodeType":"518","messageId":"519","endLine":26,"endColumn":18},{"ruleId":"516","severity":1,"message":"578","line":27,"column":12,"nodeType":"518","messageId":"519","endLine":27,"endColumn":19},{"ruleId":"516","severity":1,"message":"579","line":28,"column":12,"nodeType":"518","messageId":"519","endLine":28,"endColumn":18},{"ruleId":"516","severity":1,"message":"580","line":35,"column":21,"nodeType":"518","messageId":"519","endLine":35,"endColumn":31},{"ruleId":"559","severity":1,"message":"581","line":294,"column":8,"nodeType":"561","endLine":294,"endColumn":14,"suggestions":"582"},{"ruleId":"516","severity":1,"message":"583","line":316,"column":13,"nodeType":"518","messageId":"519","endLine":316,"endColumn":18},{"ruleId":"559","severity":1,"message":"584","line":419,"column":8,"nodeType":"561","endLine":419,"endColumn":14,"suggestions":"585"},{"ruleId":"516","severity":1,"message":"558","line":2,"column":10,"nodeType":"518","messageId":"519","endLine":2,"endColumn":16},{"ruleId":"516","severity":1,"message":"583","line":62,"column":13,"nodeType":"518","messageId":"519","endLine":62,"endColumn":18},{"ruleId":"516","severity":1,"message":"586","line":63,"column":13,"nodeType":"518","messageId":"519","endLine":63,"endColumn":19},{"ruleId":"516","severity":1,"message":"587","line":6,"column":19,"nodeType":"518","messageId":"519","endLine":6,"endColumn":25},{"ruleId":"516","severity":1,"message":"588","line":6,"column":27,"nodeType":"518","messageId":"519","endLine":6,"endColumn":34},{"ruleId":"516","severity":1,"message":"589","line":18,"column":18,"nodeType":"518","messageId":"519","endLine":18,"endColumn":25},{"ruleId":"516","severity":1,"message":"577","line":19,"column":12,"nodeType":"518","messageId":"519","endLine":19,"endColumn":18},{"ruleId":"516","severity":1,"message":"578","line":20,"column":12,"nodeType":"518","messageId":"519","endLine":20,"endColumn":19},{"ruleId":"516","severity":1,"message":"579","line":21,"column":12,"nodeType":"518","messageId":"519","endLine":21,"endColumn":18},{"ruleId":"559","severity":1,"message":"560","line":111,"column":8,"nodeType":"561","endLine":111,"endColumn":10,"suggestions":"590"},{"ruleId":"516","severity":1,"message":"587","line":6,"column":19,"nodeType":"518","messageId":"519","endLine":6,"endColumn":25},{"ruleId":"516","severity":1,"message":"588","line":6,"column":27,"nodeType":"518","messageId":"519","endLine":6,"endColumn":34},{"ruleId":"516","severity":1,"message":"589","line":18,"column":18,"nodeType":"518","messageId":"519","endLine":18,"endColumn":25},{"ruleId":"516","severity":1,"message":"577","line":19,"column":12,"nodeType":"518","messageId":"519","endLine":19,"endColumn":18},{"ruleId":"516","severity":1,"message":"578","line":20,"column":12,"nodeType":"518","messageId":"519","endLine":20,"endColumn":19},{"ruleId":"516","severity":1,"message":"579","line":21,"column":12,"nodeType":"518","messageId":"519","endLine":21,"endColumn":18},{"ruleId":"591","severity":2,"message":"592","line":112,"column":31,"nodeType":"518","messageId":"593","endLine":112,"endColumn":37},{"ruleId":"591","severity":2,"message":"594","line":113,"column":31,"nodeType":"518","messageId":"593","endLine":113,"endColumn":39},{"ruleId":"591","severity":2,"message":"592","line":114,"column":28,"nodeType":"518","messageId":"593","endLine":114,"endColumn":34},{"ruleId":"591","severity":2,"message":"594","line":115,"column":45,"nodeType":"518","messageId":"593","endLine":115,"endColumn":53},{"ruleId":"559","severity":1,"message":"560","line":120,"column":8,"nodeType":"561","endLine":120,"endColumn":10,"suggestions":"595"},{"ruleId":"516","severity":1,"message":"596","line":33,"column":13,"nodeType":"518","messageId":"519","endLine":33,"endColumn":23},{"ruleId":"516","severity":1,"message":"597","line":141,"column":17,"nodeType":"518","messageId":"519","endLine":141,"endColumn":19},{"ruleId":"516","severity":1,"message":"598","line":5,"column":20,"nodeType":"518","messageId":"519","endLine":5,"endColumn":29},{"ruleId":"516","severity":1,"message":"599","line":18,"column":10,"nodeType":"518","messageId":"519","endLine":18,"endColumn":20},{"ruleId":"516","severity":1,"message":"600","line":18,"column":22,"nodeType":"518","messageId":"519","endLine":18,"endColumn":38},{"ruleId":"601","severity":1,"message":"602","line":69,"column":1,"nodeType":"603","messageId":"604","endLine":71,"endColumn":39},{"ruleId":"516","severity":1,"message":"605","line":2,"column":10,"nodeType":"518","messageId":"519","endLine":2,"endColumn":19},{"ruleId":"516","severity":1,"message":"558","line":3,"column":21,"nodeType":"518","messageId":"519","endLine":3,"endColumn":27},{"ruleId":"516","severity":1,"message":"606","line":7,"column":15,"nodeType":"518","messageId":"519","endLine":7,"endColumn":21},{"ruleId":"516","severity":1,"message":"607","line":8,"column":16,"nodeType":"518","messageId":"519","endLine":8,"endColumn":23},{"ruleId":"516","severity":1,"message":"608","line":10,"column":10,"nodeType":"518","messageId":"519","endLine":10,"endColumn":16},{"ruleId":"516","severity":1,"message":"609","line":10,"column":18,"nodeType":"518","messageId":"519","endLine":10,"endColumn":30},{"ruleId":"516","severity":1,"message":"610","line":13,"column":10,"nodeType":"518","messageId":"519","endLine":13,"endColumn":17},{"ruleId":"516","severity":1,"message":"611","line":13,"column":19,"nodeType":"518","messageId":"519","endLine":13,"endColumn":32},{"ruleId":"516","severity":1,"message":"612","line":41,"column":13,"nodeType":"518","messageId":"519","endLine":41,"endColumn":15},{"ruleId":"516","severity":1,"message":"613","line":42,"column":13,"nodeType":"518","messageId":"519","endLine":42,"endColumn":15},{"ruleId":"516","severity":1,"message":"614","line":14,"column":10,"nodeType":"518","messageId":"519","endLine":14,"endColumn":14},{"ruleId":"516","severity":1,"message":"615","line":16,"column":35,"nodeType":"518","messageId":"519","endLine":16,"endColumn":58},{"ruleId":"516","severity":1,"message":"616","line":26,"column":8,"nodeType":"518","messageId":"519","endLine":26,"endColumn":18},{"ruleId":"516","severity":1,"message":"617","line":37,"column":8,"nodeType":"518","messageId":"519","endLine":37,"endColumn":17},{"ruleId":"516","severity":1,"message":"618","line":219,"column":13,"nodeType":"518","messageId":"519","endLine":219,"endColumn":15},{"ruleId":"516","severity":1,"message":"619","line":260,"column":13,"nodeType":"518","messageId":"519","endLine":260,"endColumn":17},{"ruleId":"516","severity":1,"message":"620","line":280,"column":13,"nodeType":"518","messageId":"519","endLine":280,"endColumn":15},{"ruleId":"516","severity":1,"message":"621","line":513,"column":13,"nodeType":"518","messageId":"519","endLine":513,"endColumn":15},{"ruleId":"549","severity":1,"message":"550","line":8,"column":5,"nodeType":"551","messageId":"552","endLine":11,"endColumn":6},{"ruleId":"516","severity":1,"message":"622","line":23,"column":13,"nodeType":"518","messageId":"519","endLine":23,"endColumn":29},{"ruleId":"516","severity":1,"message":"623","line":6,"column":10,"nodeType":"518","messageId":"519","endLine":6,"endColumn":16},{"ruleId":"516","severity":1,"message":"624","line":20,"column":13,"nodeType":"518","messageId":"519","endLine":20,"endColumn":14},{"ruleId":"516","severity":1,"message":"625","line":36,"column":13,"nodeType":"518","messageId":"519","endLine":36,"endColumn":28},{"ruleId":"535","severity":1,"message":"566","line":47,"column":25,"nodeType":"537","messageId":"626","endLine":47,"endColumn":27},{"ruleId":"535","severity":1,"message":"566","line":63,"column":48,"nodeType":"537","messageId":"626","endLine":63,"endColumn":50},{"ruleId":"527","severity":1,"message":"528","line":225,"column":33,"nodeType":"529","messageId":"530","endLine":225,"endColumn":38},{"ruleId":"516","severity":1,"message":"517","line":3,"column":8,"nodeType":"518","messageId":"519","endLine":3,"endColumn":13},{"ruleId":"516","severity":1,"message":"627","line":8,"column":10,"nodeType":"518","messageId":"519","endLine":8,"endColumn":16},{"ruleId":"516","severity":1,"message":"627","line":6,"column":10,"nodeType":"518","messageId":"519","endLine":6,"endColumn":16},{"ruleId":"535","severity":1,"message":"566","line":57,"column":26,"nodeType":"537","messageId":"626","endLine":57,"endColumn":28},{"ruleId":"535","severity":1,"message":"566","line":90,"column":48,"nodeType":"537","messageId":"626","endLine":90,"endColumn":50},{"ruleId":"516","severity":1,"message":"628","line":146,"column":13,"nodeType":"518","messageId":"519","endLine":146,"endColumn":28},{"ruleId":"512","replacedBy":"629"},{"ruleId":"514","replacedBy":"630"},{"ruleId":"516","severity":1,"message":"614","line":3,"column":10,"nodeType":"518","messageId":"519","endLine":3,"endColumn":14},{"ruleId":"516","severity":1,"message":"631","line":8,"column":21,"nodeType":"518","messageId":"519","endLine":8,"endColumn":33},{"ruleId":"516","severity":1,"message":"631","line":50,"column":21,"nodeType":"518","messageId":"519","endLine":50,"endColumn":33},{"ruleId":"516","severity":1,"message":"631","line":110,"column":21,"nodeType":"518","messageId":"519","endLine":110,"endColumn":33},{"ruleId":"516","severity":1,"message":"631","line":136,"column":21,"nodeType":"518","messageId":"519","endLine":136,"endColumn":33},{"ruleId":"516","severity":1,"message":"631","line":167,"column":21,"nodeType":"518","messageId":"519","endLine":167,"endColumn":33},{"ruleId":"516","severity":1,"message":"631","line":197,"column":21,"nodeType":"518","messageId":"519","endLine":197,"endColumn":33},{"ruleId":"516","severity":1,"message":"557","line":3,"column":10,"nodeType":"518","messageId":"519","endLine":3,"endColumn":18},{"ruleId":"516","severity":1,"message":"598","line":3,"column":20,"nodeType":"518","messageId":"519","endLine":3,"endColumn":29},{"ruleId":"516","severity":1,"message":"614","line":5,"column":10,"nodeType":"518","messageId":"519","endLine":5,"endColumn":14},{"ruleId":"516","severity":1,"message":"598","line":1,"column":20,"nodeType":"518","messageId":"519","endLine":1,"endColumn":29},{"ruleId":"512","replacedBy":"632"},{"ruleId":"514","replacedBy":"633"},{"ruleId":"516","severity":1,"message":"614","line":5,"column":10,"nodeType":"518","messageId":"519","endLine":5,"endColumn":14},{"ruleId":"516","severity":1,"message":"623","line":6,"column":10,"nodeType":"518","messageId":"519","endLine":6,"endColumn":16},{"ruleId":"535","severity":1,"message":"566","line":119,"column":48,"nodeType":"537","messageId":"626","endLine":119,"endColumn":50},{"ruleId":"516","severity":1,"message":"557","line":1,"column":10,"nodeType":"518","messageId":"519","endLine":1,"endColumn":18},"no-native-reassign",["634"],"no-negated-in-lhs",["635"],"no-unused-vars","'parse' is defined but never used.","Identifier","unusedVar",["634"],["635"],"'timeElapsed' is assigned a value but never used.","'r1min' is assigned a value but never used.","'r2min' is assigned a value but never used.","'t1' is assigned a value but never used.","'t2' is assigned a value but never used.","no-dupe-keys","Duplicate key 'color'.","ObjectExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["634"],["635"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.","'Be' is assigned a value but never used.","'delta_t' is assigned a value but never used.","'ReactDOM' is defined but never used.","'allPopulations' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'randomFitness', 'relativeFitnessValues'.","unsafeRefs","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-redeclare","'X_group' is already defined.","redeclared","'React' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["636"],["634"],["635"],"'TableHD' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'InputGroup' is defined but never used.","'FormControl' is defined but never used.",["634"],["635"],"React Hook useEffect has a missing dependency: 'props.myData'. Either include it or remove the dependency array.",["637"],["634"],["635"],"'class1' is assigned a value but never used.","'classes' is assigned a value but never used.","'class2' is assigned a value but never used.","'setPlotAvg' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hd_cod', 'hd_other', 'hd_self', 'plotAvg', and 'props.boundary1'. Either include them or remove the dependency array.",["638"],"'width' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hd_cod', 'hd_other', 'hd_self', 'props.boundary1', 'props.boundary2', 'props.limit1', and 'props.limit2'. Either include them or remove the dependency array.",["639"],"'height' is assigned a value but never used.","'hdSelf' is defined but never used.","'hdOther' is defined but never used.","'setData' is assigned a value but never used.",["640"],"no-undef","'X_Band' is not defined.","undef","'Y_Linear' is not defined.",["641"],"'scatter222' is assigned a value but never used.","'bb' is assigned a value but never used.","'useEffect' is defined but never used.","'population' is assigned a value but never used.","'updatePopulation' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'scaleBand' is defined but never used.","'setLow' is assigned a value but never used.","'setHigh' is assigned a value but never used.","'genOne' is assigned a value but never used.","'updateGenOne' is assigned a value but never used.","'myRange' is assigned a value but never used.","'updateMyRange' is assigned a value but never used.","'c1' is assigned a value but never used.","'c2' is assigned a value but never used.","'Fade' is defined but never used.","'NeonCreateNewPopulation' is defined but never used.","'ButtonNext' is defined but never used.","'SvgRecord' is defined but never used.","'gn' is assigned a value but never used.","'bits' is assigned a value but never used.","'x0' is assigned a value but never used.","'tn' is assigned a value but never used.","'fitness_gradient' is assigned a value but never used.","'Button' is defined but never used.","'a' is assigned a value but never used.","'defaultGenotype' is assigned a value but never used.","expectedInside","'nanoid' is defined but never used.","'section_opacity' is assigned a value but never used.",["634"],["635"],"'setNeonClass' is assigned a value but never used.",["634"],["635"],"no-global-assign","no-unsafe-negation",{"desc":"642","fix":"643"},{"desc":"644","fix":"645"},{"desc":"646","fix":"647"},{"desc":"648","fix":"649"},{"desc":"642","fix":"650"},{"desc":"642","fix":"651"},"Update the dependencies array to be: [data]",{"range":"652","text":"653"},"Update the dependencies array to be: [props.myData]",{"range":"654","text":"655"},"Update the dependencies array to be: [data, hd_cod, hd_other, hd_self, plotAvg, props.boundary1]",{"range":"656","text":"657"},"Update the dependencies array to be: [data, hd_cod, hd_other, hd_self, props.boundary1, props.boundary2, props.limit1, props.limit2]",{"range":"658","text":"659"},{"range":"660","text":"653"},{"range":"661","text":"653"},[2083,2085],"[data]",[3661,3663],"[props.myData]",[8280,8286],"[data, hd_cod, hd_other, hd_self, plotAvg, props.boundary1]",[11883,11889],"[data, hd_cod, hd_other, hd_self, props.boundary1, props.boundary2, props.limit1, props.limit2]",[3363,3365],[3740,3742]]
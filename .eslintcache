[{"F:\\react_portfolio\\src\\index.js":"1","F:\\react_portfolio\\src\\App.js":"2","F:\\react_portfolio\\src\\COMPONENTS\\header_files\\HeaderSection.js":"3","F:\\react_portfolio\\src\\COMPONENTS\\about_files\\AboutSection.js":"4","F:\\react_portfolio\\src\\COMPONENTS\\background\\Chapter01.js":"5","F:\\react_portfolio\\src\\COMPONENTS\\recent\\RecentProjects.js":"6","F:\\react_portfolio\\src\\COMPONENTS\\background\\Chapter04.js":"7","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\MyVitae.js":"8","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\MyTimeline.js":"9","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingSection.js":"10","F:\\react_portfolio\\src\\COMPONENTS\\contact\\ContactSection.js":"11","F:\\react_portfolio\\src\\DATA\\infoTimeline.js":"12","F:\\react_portfolio\\src\\COMPONENTS\\background\\ResearchTrajectory.jsx":"13","F:\\react_portfolio\\src\\COMPONENTS\\background\\ResearchBegins.jsx":"14","F:\\react_portfolio\\src\\COMPONENTS\\matching\\MatchingDemo.js":"15","F:\\react_portfolio\\src\\COMPONENTS\\header_files\\NavMain.js":"16","F:\\react_portfolio\\src\\DATA\\myData.js":"17","F:\\react_portfolio\\src\\DATA\\infoSkills.js":"18","F:\\react_portfolio\\src\\DATA\\infoRecent.js":"19","F:\\react_portfolio\\src\\COMPONENTS\\recent\\recentProject.js":"20","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\ReadMore.js":"21","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\ImagesCarousel.js":"22","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\ResearchStudy.js":"23","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\Qual.js":"24","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\CollapseHook.js":"25","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\EtbdEmergence.js":"26","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\HammingDistances.js":"27","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\infoPublications.js":"28","F:\\react_portfolio\\src\\DATA\\infoTeaching.js":"29","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\infoConferences.js":"30","F:\\react_portfolio\\src\\DATA\\infoContact.js":"31","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\LovelyOgive.jsx":"32","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingCard.jsx":"33","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingAssistant.jsx":"34","F:\\react_portfolio\\src\\COMPONENTS\\header_files\\NavAcronyms.js":"35","F:\\react_portfolio\\src\\COMPONENTS\\matching\\dataManipulation.js":"36","F:\\react_portfolio\\src\\COMPONENTS\\matching\\matchingState.js":"37","F:\\react_portfolio\\src\\COMPONENTS\\matching\\svgMatching.js":"38","F:\\react_portfolio\\src\\DATA\\infoNav.js":"39","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\ImagesContainer.js":"40","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\ETBD.js":"41","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\HammingDemo.js":"42","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\EmergenceMain.js":"43","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\drawETBD.js":"44","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\TableHook.js":"45","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\SvgRecord.js":"46","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\HeatmapHook.js":"47","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\selection\\Selection.js":"48","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\rechooks\\Rec2.js":"49","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\ButtonNext.jsx":"50","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\emission\\Emission.jsx":"51","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\mutation\\MutationDemo.jsx":"52","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\hammingFunctions.js":"53","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\rechooks\\RadioHook.js":"54","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\mutation\\CheckProps.js":"55","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\AgentHistory.js":"56","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\NeonsFunctionality.js":"57","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\HammingDistances.js":"58","F:\\react_portfolio\\src\\COMPONENTS\\etbd_input\\InputTemplate.js":"59","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\recombineAndMutate.js":"60","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\etbdState.js":"61","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\hdValues.js":"62","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\hdCodValues.js":"63"},{"size":231,"mtime":1644424537603,"results":"64","hashOfConfig":"65"},{"size":6398,"mtime":1644445126741,"results":"66","hashOfConfig":"65"},{"size":1047,"mtime":1644424839912,"results":"67","hashOfConfig":"65"},{"size":3884,"mtime":1644424839882,"results":"68","hashOfConfig":"65"},{"size":7464,"mtime":1644424839882,"results":"69","hashOfConfig":"65"},{"size":1637,"mtime":1644424839912,"results":"70","hashOfConfig":"65"},{"size":5549,"mtime":1644424839882,"results":"71","hashOfConfig":"65"},{"size":3565,"mtime":1644424839962,"results":"72","hashOfConfig":"65"},{"size":8924,"mtime":1644424839942,"results":"73","hashOfConfig":"65"},{"size":2714,"mtime":1644424839922,"results":"74","hashOfConfig":"65"},{"size":4594,"mtime":1644424839882,"results":"75","hashOfConfig":"65"},{"size":53275,"mtime":1644424840012,"results":"76","hashOfConfig":"65"},{"size":8030,"mtime":1644424839882,"results":"77","hashOfConfig":"65"},{"size":6915,"mtime":1644424839882,"results":"78","hashOfConfig":"65"},{"size":25603,"mtime":1644424839912,"results":"79","hashOfConfig":"65"},{"size":2386,"mtime":1644424839912,"results":"80","hashOfConfig":"65"},{"size":3977,"mtime":1644424840022,"results":"81","hashOfConfig":"65"},{"size":2703,"mtime":1644424840012,"results":"82","hashOfConfig":"65"},{"size":3921,"mtime":1644424840012,"results":"83","hashOfConfig":"65"},{"size":1228,"mtime":1644424839912,"results":"84","hashOfConfig":"65"},{"size":1180,"mtime":1644424839942,"results":"85","hashOfConfig":"65"},{"size":1424,"mtime":1644424839932,"results":"86","hashOfConfig":"65"},{"size":4694,"mtime":1644424839942,"results":"87","hashOfConfig":"65"},{"size":5463,"mtime":1644424839942,"results":"88","hashOfConfig":"65"},{"size":1237,"mtime":1644424839932,"results":"89","hashOfConfig":"65"},{"size":2088,"mtime":1644424839932,"results":"90","hashOfConfig":"65"},{"size":4612,"mtime":1644424839932,"results":"91","hashOfConfig":"65"},{"size":16201,"mtime":1644424839962,"results":"92","hashOfConfig":"65"},{"size":9643,"mtime":1644424840012,"results":"93","hashOfConfig":"65"},{"size":27235,"mtime":1644424839962,"results":"94","hashOfConfig":"65"},{"size":2332,"mtime":1644424840012,"results":"95","hashOfConfig":"65"},{"size":8169,"mtime":1644424839932,"results":"96","hashOfConfig":"65"},{"size":2384,"mtime":1644424839922,"results":"97","hashOfConfig":"65"},{"size":3212,"mtime":1644424839922,"results":"98","hashOfConfig":"65"},{"size":3247,"mtime":1644424839912,"results":"99","hashOfConfig":"65"},{"size":755,"mtime":1644424839912,"results":"100","hashOfConfig":"65"},{"size":2359,"mtime":1644424839912,"results":"101","hashOfConfig":"65"},{"size":1488,"mtime":1644424839912,"results":"102","hashOfConfig":"65"},{"size":3663,"mtime":1644424840012,"results":"103","hashOfConfig":"65"},{"size":1024,"mtime":1644424839932,"results":"104","hashOfConfig":"65"},{"size":24357,"mtime":1644424839892,"results":"105","hashOfConfig":"65"},{"size":8970,"mtime":1644424839892,"results":"106","hashOfConfig":"65"},{"size":29886,"mtime":1644424839882,"results":"107","hashOfConfig":"65"},{"size":4533,"mtime":1644424839892,"results":"108","hashOfConfig":"65"},{"size":6993,"mtime":1644424839892,"results":"109","hashOfConfig":"65"},{"size":5875,"mtime":1644424839882,"results":"110","hashOfConfig":"65"},{"size":13259,"mtime":1644424839892,"results":"111","hashOfConfig":"65"},{"size":2379,"mtime":1644424839882,"results":"112","hashOfConfig":"65"},{"size":12171,"mtime":1644424839882,"results":"113","hashOfConfig":"65"},{"size":382,"mtime":1644424839882,"results":"114","hashOfConfig":"65"},{"size":2553,"mtime":1644424839882,"results":"115","hashOfConfig":"65"},{"size":3753,"mtime":1644424839882,"results":"116","hashOfConfig":"65"},{"size":2551,"mtime":1644424839892,"results":"117","hashOfConfig":"65"},{"size":1463,"mtime":1644424839882,"results":"118","hashOfConfig":"65"},{"size":1666,"mtime":1644424839882,"results":"119","hashOfConfig":"65"},{"size":4089,"mtime":1644424839882,"results":"120","hashOfConfig":"65"},{"size":5699,"mtime":1644424839882,"results":"121","hashOfConfig":"65"},{"size":5541,"mtime":1644424839892,"results":"122","hashOfConfig":"65"},{"size":736,"mtime":1644424839902,"results":"123","hashOfConfig":"65"},{"size":1242,"mtime":1644424839892,"results":"124","hashOfConfig":"65"},{"size":1248,"mtime":1644424839892,"results":"125","hashOfConfig":"65"},{"size":206498,"mtime":1644424839902,"results":"126","hashOfConfig":"65"},{"size":585109,"mtime":1644424839902,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"1tlfanq",{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"130"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"130"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"149","usedDeprecatedRules":"130"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"130"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"130"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"130"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"130"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"130"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"130"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"130"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"130"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"130"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"130"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"130"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"130"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"130"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"130"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"130"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"130"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"130"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"130"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"130"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"130"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"130"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"130"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"130"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"130"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"130"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"130"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"130"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"130"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"F:\\react_portfolio\\src\\index.js",[],["286","287"],"F:\\react_portfolio\\src\\App.js",["288","289"],"F:\\react_portfolio\\src\\COMPONENTS\\header_files\\HeaderSection.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\about_files\\AboutSection.js",["290"],"import React, { Component } from 'react'\r\nimport data from '../../DATA/myData'\r\nimport parse from 'html-react-parser'\r\n\r\nimport infoSkills from \"../../DATA/infoSkills\"\r\n\r\nimport \"./about.sass\"\r\n\r\n\r\nclass About extends Component {\r\n\r\n\r\n    render() {\r\n\r\n        var Skills = infoSkills.skills.map((item) => {\r\n            return (\r\n                <label\r\n                    style={{\r\n                        opacity: item.opacity,\r\n                        color: item.color,\r\n                    }}\r\n                    key={item.name + Math.random()}\r\n                >\r\n                    { item.name}\r\n                </label >\r\n            )\r\n        })\r\n\r\n\r\n        return (\r\n\r\n            <div\r\n                id='About'\r\n                className='fullscreen darker'\r\n                style={{\r\n                    marginBottom: \"0rem\",\r\n                    // backgroundColor: \"#233D46\",\r\n                    backgroundColor: \"#1d2731\", // ivory black\r\n\r\n                }}\r\n            >\r\n\r\n                <h1 >About me</h1>\r\n\r\n                <div className=\"AboutRow\">\r\n\r\n                    <div\r\n                        id='divProfilePic'\r\n                    //className=\"AboutColumn\"\r\n                    >\r\n\r\n                        {\r\n                            data.ShowAboutImage ?\r\n                                <img\r\n                                    src={data.aboutImage}\r\n                                    alt='Dr. Andrei Popa'\r\n                                    //height='450px'\r\n                                    style={{\r\n                                        borderRadius: \"5px\"\r\n                                    }}\r\n                                >\r\n\r\n                                </img> : null\r\n                        }\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                    <div className=\"AboutColumn\">\r\n                        {\r\n                            data.aboutText.map((item) => {\r\n                                return (\r\n                                    <p className=\"narrative\" >\r\n                                        {item}\r\n                                    </p>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n\r\n                        <div className=\"divSkills\" >\r\n                            {Skills}\r\n                        </div>\r\n\r\n                        <div className=\"wrapperEducation\">\r\n\r\n                            {/* <table\r\n                                id=\"tableEducation\"\r\n                                style={{\r\n                                    fontSize: \"12px\"\r\n                                }}\r\n                            >\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>2003</td>\r\n                                        <td>B.A. in Psychology</td>\r\n                                        <td>Alexandru Ioan Cuza University, Iasi, Romania</td>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td>2009</td>\r\n                                        <td>M.A. in Psychology</td>\r\n                                        <td>Emory University, Atlanta, GA, USA</td>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td>2013</td>\r\n                                        <td>Ph.D. in Psychology</td>\r\n                                        <td>Emory University, Atlanta, GA, USA</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table> */}\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","F:\\react_portfolio\\src\\COMPONENTS\\background\\Chapter01.js",["291","292","293","294","295"],"import \"./chapters.sass\"\r\n\r\nimport React, { Component } from \"react\";\r\nimport parse from \"html-react-parser\";\r\nimport { nanoid } from \"nanoid\"\r\n\r\nimport MatchingDemo from \"../matching/MatchingDemo.js\";\r\n//import ETBD from \"../etbd/ETBD.js\"\r\n\r\n\r\n\r\n\r\n\r\nclass Chapter01 extends Component {\r\n\r\n    render() {\r\n\r\n        var skills = [\r\n            \"Excel/VBA\",\r\n            \"syntethic data\",\r\n            \"research design\",\r\n            \"hypothesis testing\",\r\n            \"exploratory analysis\",\r\n            \"model selection\",\r\n            \"ensemble fitting\",\r\n            \"residual analysis\",\r\n            \"regression analysis\",\r\n        ];\r\n\r\n\r\n        var Skills = skills.map((s) => {\r\n            return <label key={s}>{s}</label>;\r\n        });\r\n\r\n\r\n        return (\r\n            <div\r\n                id=\"ChoiceDemo\"\r\n                className=\"chapter\"\r\n                style={{\r\n                    //backgroundColor: \"#1D2731\", \r\n                    minHeight: \"100vh\",\r\n                    //backgroundColor: \"#bdd4e7\",\r\n                    //backgroundImage: \"linear-gradient(315deg, #bdd4e7 0%, #8693ab 74%)\",\r\n                    //backgroundImage: \"linear-gradient(315deg, #0cbaba 0%, #380036 74%)\",\r\n                    //backgroundColor: \"#7f5a83\",\r\n                    //backgroundImage: \"linear-gradient(315deg, #7f5a83  0%, #0d324d 74%)\",\r\n                    backgroundColor: \"#17171b\",\r\n                    backgroundColor: \"#0d324d\",  //1d2731\r\n                    backgroundColor: \"#1d2731\",\r\n\r\n                }}\r\n            >\r\n\r\n                <div className=\"chapterRow\">\r\n                    <div className=\"chapterCol\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        <h2\r\n                            className=\"chapter-title\"\r\n                            style={{\r\n                                fontSize: \"16px\",\r\n                                margin: \"2rem 0rem 1rem 0rem\",\r\n                                fontFamily: \"Montserrat\"\r\n\r\n                            }}\r\n                        >\r\n                            Experience the magic!\r\n\r\n                        </h2>\r\n\r\n\r\n                        <p\r\n                            // id=\"ch01_p3\"\r\n                            className=\"p-left\"\r\n                            style={{\r\n                                fontSize: \"14px\",\r\n                                fontFamily: \"Montserrat\"\r\n                            }}\r\n                        >\r\n                            The demo simulates the procedure I designed to verify if synthetic data can predict human behavior (Popa, 2013; Popa & McDowell, 2016).\r\n                        </p>\r\n\r\n\r\n                        <p\r\n                            // id=\"ch01_p3\"\r\n                            className=\"p-left matching-instructions\"\r\n                            style={{\r\n                                fontSize: \"12px\",\r\n                                fontStyle: \"italic\",\r\n                                fontFamily: \"mono\",\r\n                                width: \"350px\",\r\n                                fontWeight: 500,\r\n                                padding: \"14px 20px\",\r\n                                margin: \"10px auto\",\r\n                                color: \"#333\",\r\n                                backgroundColor: \"#ccc\",\r\n                                borderRadius: \"5px\",\r\n\r\n\r\n                            }}\r\n                        >\r\n                            Clicking inside the marked regions may result in points. Obtain as many as you can. You have 15 seconds. When ready, click START.\r\n                        </p>\r\n\r\n                        <h2\r\n                            className=\"chapter-title\"\r\n                            style={{\r\n                                fontSize: \"14px\",\r\n                                margin: \"2rem 0rem 1rem 0rem\",\r\n                                fontFamily: \"Montserrat\"\r\n\r\n                            }}\r\n                        >\r\n                            Modelling behavior\r\n\r\n                        </h2>\r\n\r\n\r\n                        <p\r\n                            // id=\"ch01_p3\"\r\n                            className=\"p-left\"\r\n                            style={{\r\n                                fontSize: \"14px\",\r\n                                fontFamily: \"Montserrat\"\r\n\r\n                            }}\r\n                        >\r\n                            Computational theories implement agents, experimental environments, and theoretical principles proposed to explain their interaction.\r\n                        </p>\r\n\r\n                        <p\r\n                            // id=\"ch01_p3\"\r\n                            className=\"p-left\"\r\n                            style={{\r\n                                fontSize: \"14px\",\r\n                                fontFamily: \"Montserrat\"\r\n\r\n                            }}\r\n                        >\r\n                            The harder it is to tell the difference between synthetic and live data, the better the theory.\r\n                        </p>\r\n\r\n\r\n                        {/* <h2\r\n                            className=\"chapter-title\"\r\n                            style={{\r\n                                fontSize: \"16px\",\r\n                                margin: \"2rem 0rem 1rem 0rem\"\r\n                            }}\r\n                        >\r\n                            Computational ETBDs\r\n                        </h2> */}\r\n\r\n\r\n                        {/* <p\r\n                            id=\"ch01_p3\"\r\n                            className=\"p-left\"\r\n                            style={{\r\n                                fontSize: \"16px\"\r\n                            }}\r\n                        >\r\n                            Behavioral repertoires are represented by a range integers. Target classes are sub-ranges, equivalent to lever presses or mouse clicks. A naive agent is a population of integers chosen at random from this range.\r\n                        </p> */}\r\n\r\n\r\n\r\n\r\n                        {/* <p\r\n                            className=\"p-left\"\r\n                            style={{\r\n                                fontSize: \"16px\"\r\n                            }}\r\n                        >\r\n                            Learning is represented by a set of Darwinian rules that transform this population into a new one, again and again.\r\n\r\n                            A skinner box is a functional representation of the real world. A computational theory is a functional representation of a skinner box.\r\n\r\n                            ... ....  Behaviors are represented by a range of integers, response classes are sub-ranges, and 'agents' are populations of integers that are transformed, generation after generation, by Darwinian rules of <span style={{ color: 'yellow' }} >selection</span>, <span style={{ color: 'yellow' }} >recombination</span>, and <span style={{ color: 'yellow' }} >mutation</span>.\r\n                        </p> */}\r\n\r\n\r\n\r\n                        {/* <div className=\"chapterSkills\">{Skills}</div> */}\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                    <div className=\"chapterCol\">\r\n\r\n                        <div className=\"projectColumnImagesMatching\">\r\n\r\n                            <MatchingDemo />\r\n\r\n                            {/* <ETBD /> */}\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chapter01;\r\n","F:\\react_portfolio\\src\\COMPONENTS\\recent\\RecentProjects.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\background\\Chapter04.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\vitae\\MyVitae.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\MyTimeline.js",["296","297","298","299","300","301"],"\r\nimport \"./timeline.sass\";\r\n\r\nimport React from \"react\";\r\nimport parse from \"html-react-parser\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport infoTimeline from \"../../DATA/infoTimeline\";\r\nimport ReadMore from \"./ReadMore\";\r\nimport ImagesCarousel from \"./ImagesCarousel\";\r\nimport ResearchStudy from \"./ResearchStudy\";\r\nimport Qual from \"./Qual\";\r\nimport CollapseHook from \"./CollapseHook\"\r\n// import MathematicalModels from \"./MathematicalModels\"\r\nimport EtbdEmergence from \"./EtbdEmergence\"\r\nimport HammingDistances from \"./HammingDistances\"\r\nimport LovelyOgive from \"./LovelyOgive\"\r\n\r\n\r\nconst MyTimeline = (props) => {\r\n\r\n    // let { events, orientation, startFrom } = props;\r\n    let { events } = props;\r\n\r\n    var goToLink = (e) => {\r\n        e.preventDefault();\r\n        let destination = e.target.id;\r\n        window.open(destination, \"_blank\");\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    const eventsMappedToElements = events.map((e, i) => {\r\n\r\n        var Links = null,\r\n            //Tags = null,\r\n            Description = \"\",\r\n            //Citation = \"\",\r\n            Technologies = [];\r\n        //DisplayedDate = \"\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // LINKS\r\n        if (e.urls.length > 0) {\r\n            Links = e.urls.map((item) => (\r\n                <button\r\n                    className=\"btnLink\"\r\n                    key={item.link}\r\n                    id={item.link}\r\n                    title={item.link}\r\n                    onClick={goToLink}\r\n                >\r\n                    { item.name}\r\n                </button >\r\n            ))\r\n        }\r\n\r\n\r\n\r\n        // TECH\r\n        if (e.technologies) {\r\n            Technologies = e.technologies.map((item) =>\r\n                <label key={item}> {parse(item)} </label>\r\n            )\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // if (e.tags.length > 0) {\r\n        //     Tags = e.tags.map((item) => <label key={item}>{parse(item)}</label>);\r\n        // }\r\n\r\n        if (e.description !== \"\") {\r\n            Description = parse(e.description);\r\n        }\r\n\r\n\r\n\r\n        // if (e.date === \"in progress\") {\r\n        //     DisplayedDate = \"[\" + e.id + \"]  \" + \"in progress\"\r\n        // } else {\r\n        //     let mo = e.date.slice(0, 2);\r\n        //     DisplayedDate = \"[\" + e.id + \"]  \" + mo + \"-\" + e.date.slice(-4)\r\n\r\n        // }\r\n\r\n\r\n        var DisplayedDateTemp = \"\"\r\n\r\n        if (e.date === \"in progress\") {\r\n            DisplayedDateTemp = \"(\" + e.id + \")  \" + \"in progress\"\r\n        } else {\r\n            DisplayedDateTemp = e.date.replaceAll(\"/\", \".\")\r\n        }\r\n\r\n\r\n        // var Authors = []\r\n\r\n        // if (e.authors) {\r\n        //     Authors = e.authors.map(author => {\r\n\r\n        //         if (author) {\r\n        //             var rf = infoReferences.filter(item => item.authors === author)\r\n\r\n        //             if (rf[0]) {\r\n        //                 return (\r\n        //                     <span className=\"authors\" title={parse(rf[0].citation)} >{parse(author)}</span>\r\n        //                 )\r\n        //             } else {\r\n        //                 //console.log(\"err:\", e.title, author)\r\n        //             }\r\n        //         }\r\n        //     })\r\n        // }\r\n\r\n\r\n        var References = []\r\n\r\n        if (e.references) {\r\n            References = e.references.map((item) => {\r\n\r\n                if (item) {\r\n                    return < p\r\n                        className=\"citation-apa\"\r\n                        key={item}\r\n                    //title={parse(item)}\r\n                    >\r\n                        {parse(item)}\r\n                    </p >\r\n                }\r\n\r\n\r\n            })\r\n        }\r\n\r\n\r\n        var nickname = \"\"\r\n\r\n        if (e.nickname) {\r\n            nickname = e.nickname\r\n        } else {\r\n            nickname = e.title\r\n        }\r\n\r\n        var fontFam = e.fontFam\r\n\r\n        //var itemKey = e.date + e.description\r\n\r\n\r\n        // RESEARCH STUDY: \r\n        if (e.studyInfo) {\r\n            let studyTitle = e.title.split(\":\")\r\n\r\n            return (\r\n                <ResearchStudy\r\n                    nickname={nickname}\r\n                    key={e.studyInfo[3].irb.toString()}\r\n                    name={\"\"}\r\n                    studyInfo={e.studyInfo}\r\n                    links={Links}\r\n                    tech={Technologies}\r\n                    description={Description}\r\n                    img={e.img}\r\n                    // title={e.title}\r\n                    // title={e.title.toUpperCase()}\r\n                    title={studyTitle}\r\n                />\r\n            )\r\n        };\r\n\r\n\r\n\r\n        // SENSITIVITY demo:\r\n        // if (e.title === 'Mathematical models & computational theories') {\r\n        //     return (\r\n        //         <MathematicalModels\r\n        //             qualDate={DisplayedDateTemp}\r\n        //             key={\"sensitivity_demo_sdgffgabalaxfxfsdg\"}\r\n        //             style={{ fontFamily: fontFam }}\r\n\r\n        //             //tech={Technologies}\r\n        //             title={parse(e.title)}\r\n        //             description={Description}\r\n        //             links={Links}\r\n        //             references={References}\r\n        //         />\r\n        //     )\r\n        // };\r\n\r\n\r\n\r\n        // EMEMRGENCE demo:\r\n        if (e.custom_item === 'emergence_demo') {\r\n            return (\r\n                <EtbdEmergence\r\n                    qualDate={DisplayedDateTemp}\r\n                    key={\"emergence_demo_sdgffgabalaxfxfsdg\"}\r\n                    style={{ fontFamily: fontFam }}\r\n                    tech={Technologies}\r\n                    title={parse(e.title)}\r\n                    description={Description}\r\n                    links={Links}\r\n                    references={References}\r\n                />\r\n            )\r\n        };\r\n\r\n\r\n\r\n        HAMMING:\r\n        if (e.custom_item === 'hamming_demo') {\r\n            return (\r\n                <HammingDistances\r\n                    qualDate={DisplayedDateTemp}\r\n                    key={\"qual_item_balabalaxfxfsdg\"}\r\n                    style={{ fontFamily: fontFam }}\r\n                    //tech={Technologies}\r\n                    title={parse(e.title)}\r\n                    description={Description}\r\n                    links={Links}\r\n                    references={References}\r\n                />\r\n            )\r\n        };\r\n\r\n\r\n        // QUAL:\r\n        // if (e.nickname === 'Qual') {\r\n        //     return (\r\n        //         <Qual\r\n        //             qualDate={DisplayedDateTemp}\r\n        //             key={\"qual_item_balabalaxfxfsdg\"}\r\n        //             style={{ fontFamily: fontFam }}\r\n        //             //tech={Technologies}\r\n        //             title={parse(e.title)}\r\n        //             description={Description}\r\n        //             links={Links}\r\n        //             references={References}\r\n        //         />\r\n        //     )\r\n        // };\r\n\r\n\r\n        let navMarker = e.navMarker ? e.navMarker : e.date\r\n\r\n\r\n        // DEFAULT:\r\n        return (\r\n            <div\r\n                className=\"item\"\r\n                content1={parse(DisplayedDateTemp)}\r\n                key={e.date + e.title}\r\n                id={navMarker}\r\n\r\n                style={{ fontFamily: fontFam }}\r\n            >\r\n                <div className=\"itemContent\">\r\n\r\n\r\n                    {/* -------------------       Event A      ---------------------- */}\r\n\r\n                    <div className=\"projectColumnLeft\">\r\n\r\n                        <span className=\"title\">{parse(e.title)}</span>\r\n\r\n                        <ReadMore maxChars={1000} overview={Description} />\r\n\r\n\r\n                        <CollapseHook\r\n                            collapsedTitle={\"Relevant work\"}\r\n\r\n                            collapsedText={\r\n                                <div className=\"divRefs\">  {References}  </div>\r\n                            }\r\n                        />\r\n\r\n                        <div className=\"divTech\">  {Technologies}  </div>\r\n\r\n                        <div className=\"links\" >  {Links}  </div>\r\n\r\n                    </div>\r\n\r\n\r\n                    <div className=\"projectColumnImages\">\r\n                        <ImagesCarousel props={e.img} />\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"timeline\">\r\n            {eventsMappedToElements}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nMyTimeline.propTypes = {\r\n    events: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            //time: PropTypes.string.isRequired,\r\n            title: PropTypes.string.isRequired,\r\n            //desc: PropTypes.string.isRequired\r\n        })\r\n    ).isRequired,\r\n    orientation: PropTypes.oneOf([\"horizontal\", \"vertical\"]).isRequired,\r\n    startFrom: PropTypes.oneOf([\"first\", \"last\"]).isRequired,\r\n};\r\n\r\nMyTimeline.defaultProps = {\r\n    orientation: \"vertical\",\r\n    startFrom: \"first\",\r\n    events: infoTimeline,\r\n};\r\n\r\nexport default MyTimeline;\r\n","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingSection.js",["302"],"import React, { Component } from \"react\";\r\nimport \"./teaching.sass\";\r\n\r\nimport parse from \"html-react-parser\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nimport { instructorRoles } from \"../../DATA/infoTeaching\"\r\n\r\n//import OrderFellowship from \"./OrderFellowship\"\r\n\r\n\r\nimport { nanoid } from \"nanoid\"\r\n\r\nimport TeachingCard from \"./TeachingCard\"\r\nimport TeachingAssistant from \"./TeachingAssistant\"\r\n\r\nexport default class TeachingExperience extends Component {\r\n\r\n\r\n    state = {\r\n        teachingDetails: false,\r\n        schools: [\"emory\", \"oxford\", \"gsu\", \"agnes\"],\r\n    }\r\n\r\n\r\n    showDetails = () => {\r\n        this.state.teachingDetails === false ? this.setState({ teachingDetails: true }) : this.setState({ teachingDetails: false })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const infoTeaching = instructorRoles()\r\n        var TeachingCards = infoTeaching.map((item) => {\r\n\r\n            var muie = item.semesters\r\n\r\n            var Muie1 = muie.map((s) => {\r\n                return (\r\n                    <TeachingCard\r\n                        institution={s.institution}\r\n                        semester={s.semester}\r\n                        sectionSize={s.sectionSize}\r\n                        sections={s.sections}\r\n                        teachingDetails={this.state.teachingDetails}\r\n                        schools={this.state.schools}\r\n                        schoolCode={s.schoolCode}\r\n                        role={s.role}\r\n\r\n                    />\r\n                )\r\n            })\r\n\r\n\r\n\r\n\r\n            return (\r\n                <Card\r\n                    text={\"Dark\".toLowerCase() === 'light' ? 'dark' : 'white'}\r\n                    className=\"card\"\r\n                    key={nanoid()}\r\n                >\r\n\r\n                    <Card.Title\r\n                        className=\"title\"\r\n                        style={{\r\n                            fontFamily: 'Architects Daughter, cursive',\r\n                            // fontFamily: 'Annie Use Your Telescope, cursive',\r\n                            fontSize: \"16px\",\r\n                        }}\r\n                    >\r\n                        {parse(item.name)}\r\n\r\n                    </Card.Title>\r\n\r\n                    {Muie1}\r\n\r\n                </Card>)\r\n        }\r\n        )\r\n\r\n\r\n        return (\r\n\r\n            <div id=\"teachingSection\" >\r\n\r\n\r\n\r\n                <div className=\"teachingCards\">\r\n\r\n\r\n                    {TeachingCards}\r\n\r\n                    <button\r\n                        id='teachingDetails'\r\n                        onClick={this.showDetails}\r\n                    >\r\n                        DETAILS\r\n                        </button>\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\contact\\ContactSection.js",["303"],"import React, { Component } from \"react\";\r\n//import { Button } from \"react-bootstrap\";\r\nimport parse from \"html-react-parser\";\r\nimport infoContact from \"../../DATA/infoContact\";\r\nimport data from '../../DATA/myData'\r\n\r\nimport \"./contact.sass\";\r\n\r\n\r\nclass Contact extends Component {\r\n    goToLink = (e) => {\r\n        e.preventDefault();\r\n        let a = e.currentTarget.name;\r\n        window.open(a, \"_blank\");\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                id=\"Contact\"\r\n                className=\"fullscreen darker\"\r\n                style={{\r\n                    backgroundColor: \"#1D2731\",\r\n                    marginBottom: \"0rem\"\r\n                }}\r\n            >\r\n\r\n\r\n                <h1\r\n                    className=\"section_title\"\r\n                    style={{\r\n                        marginBottom: \"2rem\"\r\n                    }}\r\n                >\r\n                    Contact\r\n                </h1>\r\n\r\n\r\n\r\n                {/* <div\r\n                    id='divProfilePic'\r\n                    className=\"AboutColumn\"\r\n                >\r\n\r\n                    {\r\n                        data.ShowAboutImage ?\r\n                            <img\r\n                                src={data.aboutImage}\r\n                                alt='Dr. Andrei Popa'\r\n                                height='400px'\r\n                                style={{\r\n                                    borderRadius: \".5rem\"\r\n                                }}\r\n                            >\r\n\r\n                            </img> : null\r\n                    }\r\n\r\n                </div> */}\r\n\r\n\r\n\r\n                <div className=\"section_column\">\r\n                    <button\r\n                        id=\"btnEmail\"\r\n                        className=\"btnContactLink\"\r\n                        style={{\r\n                            width: \"300px\",\r\n                            //color: \"#02aab0\",\r\n                            fontSize: \"1rem\",\r\n                            fontWeight: 400,\r\n                        }}\r\n                        title={\"click to copy\"}\r\n                        onClick={() =>\r\n                            navigator.clipboard\r\n                                .writeText(\"andrei.popa.dev@gmail.com\")\r\n                                .then(() => alert(\"Copied to clipboard. Use it only for good.\"))\r\n                        }\r\n                    >\r\n                        andrei.popa.dev@gmail.com\r\n                    </button>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n                <table style={{ width: \"800px\", margin: \"1rem auto 1rem auto\" }}>\r\n                    <tbody>\r\n                        {infoContact.slice(1).map((link, index) => (\r\n                            <tr\r\n                                key={index}\r\n                            >\r\n                                <td\r\n                                    style={{\r\n                                        //border: \"1px solid red\",\r\n                                        padding: \".1rem .2rem\",\r\n                                        verticalAlign: \"top\",\r\n                                        textAlign: \"center\"\r\n                                    }}\r\n                                >\r\n                                    <button\r\n                                        className=\"btnContactLink\"\r\n                                        name={link.url}\r\n                                        title={link.url}\r\n                                        onClick={this.goToLink}\r\n                                    >\r\n                                        {link.name}\r\n                                    </button>\r\n                                </td>\r\n\r\n                                <td style={{ padding: \".1rem .5rem\" }}>\r\n                                    <p style={{ width: \"500px\", color: \"#ccc\", fontSize: \".9rem\", fontFamily: \"Roboto\" }}\r\n                                    >{parse(link.info)}</p>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n\r\n                </table>\r\n\r\n\r\n\r\n                <div\r\n                    id=\"myFooter\"\r\n                    className=\"footer\"\r\n                    fixed=\"bottom\"\r\n                //style={{ color: \"#FF652F\", color: \"#14A76C\" }}\r\n                >\r\n                    <span>\r\n                        End of site.<br />\r\n            Made with React and ❤ (but mostly React) | Andrei Popa 2020\r\n          </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;\r\n","F:\\react_portfolio\\src\\DATA\\infoTimeline.js",["304"],"\r\n\r\n\r\nimport placeholder_blank from \"../assets/placeholder_blank.png\"\r\n\r\nimport paper_wolfram_2009 from \"../assets/paper_wolfram_2009.png\"\r\nimport paper_modern_matching_2010 from \"../assets/paper_modern_matching_2010.png\"\r\nimport paper_bivariate_matching_2012 from \"../assets/paper_bivariate_matching_2012.png\"\r\nimport hamming_abs_reinf_rate from \"../assets/placeholders/hamming_abs_reinf_rate.png\";\r\nimport abai_2014_radars_originals from \"../assets/abai_2014_radars_originals.png\"\r\nimport hamming_paper_page1 from \"../assets/hamming_paper_page1.png\"\r\n\r\n// ----    OLD ONES  ---------------------\r\n\r\n\r\n\r\nimport projectAutomata1 from \"../assets/prj_img_imperfect_automata.jpg\";\r\n\r\nimport ABAI_2014_Chicago from \"../assets/abai_darwin_sqab/ABAI_2014_Chicago.png\";\r\nimport ABAI_2014_Andrei from \"../assets/abai_darwin_sqab/ABAI_2014_Andrei.png\";\r\n\r\nimport SpARC_01_Adekunle from \"../assets/sparc2016/SpARC_01_Adekunle.png\";\r\nimport SpARC_02_1_Tang from \"../assets/sparc2016/SpARC_02_1_Tang.png\";\r\nimport SpARC_06_1_Adekunle from \"../assets/sparc2016/SpARC_06_1_Adekunle.png\";\r\nimport SpARC_05_1_Forbes from \"../assets/sparc2016/SpARC_05_1_Forbes.png\";\r\nimport SpARC_07_1_Shen from \"../assets/sparc2016/SpARC_07_1_Shen.png\";\r\n\r\nimport SpARC_10_1_Adekunle from \"../assets/sparc2016/SpARC_10_1_Adekunle.png\";\r\nimport SpARC_11_1_Shen from \"../assets/sparc2016/SpARC_11_1_Shen.png\";\r\nimport SpARC_12_1_Booher from \"../assets/sparc2016/SpARC_12_1_Booher.png\";\r\nimport SpARC_14_1_Shen from \"../assets/sparc2016/SpARC_14_1_Shen.png\";\r\nimport SpARC_15_1_Waithe from \"../assets/sparc2016/SpARC_15_1_Waithe.png\";\r\n\r\nimport SpARC_16_1_Grissom from \"../assets/sparc2016/SpARC_16_1_Grissom.png\";\r\n\r\nimport ABAI_2017_5 from \"../assets/abai_darwin_sqab/ABAI_2017_5.png\";\r\nimport ABAI_2017_6 from \"../assets/abai_darwin_sqab/ABAI_2017_6.png\";\r\n\r\nimport wcalb2017_extinction08 from \"../assets/wcalb2017_extinction08.png\";\r\n\r\nimport etbd_adhd_slide_1 from \"../assets/etbd_adhd_slide_1.png\";\r\nimport phd_committee from \"../assets/stripes/phd_committee.png\";\r\n\r\nimport Pos01_1_pos from \"../assets/triangles/Pos01_1_pos.png\";\r\nimport Neg04_1_neg from \"../assets/triangles/Neg04_1_neg.png\";\r\nimport Trn04_2_pos from \"../assets/triangles/Trn04_2_pos.png\";\r\nimport Trn04_3_neg from \"../assets/triangles/Trn04_3_neg.png\";\r\nimport Trn04_4_ext from \"../assets/triangles/Trn04_4_ext.png\";\r\n\r\nimport projectCardSorting from \"../assets/prj_img_personal_values.png\";\r\n\r\n// import phd_etbd_humans_1 from \"../assets/phd_etbd_humans_1.png\";\r\n// import phd_etbd_humans_2 from \"../assets/phd_etbd_humans_2.png\";\r\nimport phd_etbd_humans_sensitivity from \"../assets/phd_etbd_humans_sensitivity.png\";\r\nimport phd_etbd_humans_bout_length from \"../assets/phd_etbd_humans_bout_length.png\";\r\n\r\nimport abai_2014_slide1 from \"../assets/abai_2014_slide1.png\";\r\nimport abai_2014_slide2 from \"../assets/abai_2014_slide2.png\";\r\n\r\nimport change_in_state_2 from \"../assets/change_in_state_2.png\";\r\n\r\n\r\n\r\n// var gDrive = \"https://drive.google.com/drive/folders/1d6QlunZ_zh-mTXB1H2u0C5DQC7Vjmq5U?usp=sharing\";\r\n\r\n\r\n\r\nvar infoTimeline = [\r\n\r\n    {\r\n        // title: 'Mathematical models & computational theories',\r\n        title: 'The matching equations',\r\n        nickname: \"Emory 2009\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"05/02/2009\",\r\n        type: 'invited talk Emory University',\r\n        role: \"invited talk\",\r\n        authors: [\"Popa & McDowell (2009)\"],\r\n        tags: [],\r\n        keywords: [\"ETBD\", \"conference\", \"Emory University\"],\r\n        // description: \"<b>Mathematical</b> models <b>describe</b> the behavior of biological agents in specific environments. <b>Computational</b> theories are essentially computer programs that implement algorithms that <b>generate</b> behavior. The algorithms implement theoretical assumptions about how learning works in biological agents. Mathematical models can be used to verify these assumptions.\",\r\n        description: \"are good benchmarks for verifying and calibrating computational theories, especially in early stages of development.\",\r\n        img: [paper_modern_matching_2010, paper_bivariate_matching_2012],\r\n        captions: [\"paper_modern_matching_2010\", \"paper_bivariate_matching_2012\"],\r\n        urls: [\r\n            //{ name: \"\", link: \"\" },\r\n        ],\r\n        // citation: \"Popa, A., & McDowell, J J. (2009). A Computational Model of Adaptive Behavior Dynamics. Emory University, Department of Psychology, Annual Research Festival. Atlanta, GA\",\r\n\r\n        references: [\r\n            // \"Popa, A., & McDowell, J J. (2009). A Computational Model of Adaptive Behavior Dynamics. Emory University, Department of Psychology, Annual Research Festival. Atlanta, GA\",\r\n            \"McDowell, J. J, & Popa, A. (2010). Toward a mechanics of adaptive behavior: Evolutionary dynamics and matching theory statics. Journal of the Experimental Analysis of Behavior, 94, 241-260.\",\r\n            \"McDowell, J, J., Popa, A., & Calvin, N. (2012). Selection Dynamics in Joint Matching to Rate and Magnitude of Reinforcement. <i>Journal of the Experimental Analysis of Behavior</i>, <i>98</i>, 199-212.\",\r\n        ],\r\n    },\r\n\r\n\r\n\r\n    {\r\n        title: 'Emergence',\r\n        custom_item: \"emergence_demo\",\r\n\r\n\r\n        fontFam: \"Roboto\",\r\n\r\n        nickname: \"Beh Proc\",\r\n\r\n        date: \"07/01/2009\",\r\n        type: \"journal article\",\r\n        authors: [\"McDowell & Popa (2009)\"],\r\n        role: \"CO-INVESTIGATOR (journal article; research, empirical)\",\r\n        tags: [\r\n            \"Excel/VBA\",\r\n            \"hypothesis testing\",\r\n            \"model selection\",\r\n            \"ensemble fitting\",\r\n            \"residual analysis\",\r\n        ],\r\n        keywords: [\"Wolfram\", \"complex systems\", \"emergence\", \"Elementary Cellular Automata\", \"cellular automaton\"],\r\n\r\n\r\n        description: \"Agreement with live data is a big deal because the rules are indifferent to past and future. They work the same way, every time, with no memory and no goals. This makes molar properties like sensitivity or bias are, therefore, natural consequences of a perpetual present, governed by Darwinian rules.\",\r\n\r\n        img: [paper_wolfram_2009],\r\n        captions: [\r\n            \"Fig. 5. Image of a section of cellular automaton output, a cumulative record, and a log IRT survivor plot for a Rule 22 (top row) and a Rule 30 (bottom row) cellular automaton. The cumulative records and log survivor plots were constructed from a column of the cellular automaton output where each black cell was taken to represent a response.\",\r\n        ],\r\n        urls: [\r\n            { name: \"Pubmed\", link: \"http://www.ncbi.nlm.nih.gov/pubmed/19429227\" },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/24414894_Beyond_continuous_mathematics_and_traditional_scientific_analysis_Understanding_and_mining_Wolfram's_A_New_Kind_of_Science\",\r\n            },\r\n        ],\r\n        // citation:\r\n        //     \"McDowell, J. J, & Popa, A. (2009). Beyond continuous mathematics and traditional scientific analysis: Understanding and mining Wolfram's A new kind of science. <i>Behavioural Processes</i>, 81, 343-352.\",\r\n\r\n        references: [\r\n\r\n            \"McDowell, J. J, & Popa, A. (2009). Beyond continuous mathematics and traditional scientific analysis: Understanding and mining Wolfram's A new kind of science. <i>Behavioural Processes</i>, 81, 343-352.\",\r\n            \"Popa, A., & McDowell, J J. (2010). Evolutionary Behavior Dynamics causally generates both molar and molecular properties of behavior. Symposium: The Molar-Molecular debate: A further discussion on the unresolved issue. Discussant: William M. Baum, Ph.D. Presented at the 36th Annual Convention of the Association for Behavior Analysis International, San Antonio, TX.\",\r\n        ],\r\n    },\r\n\r\n\r\n\r\n    {\r\n        title: 'Hamming Distances and CODs',\r\n        custom_item: \"hamming_demo\",\r\n\r\n        nickname: \"M.A.\",\r\n        date: \"12/20/2009\",\r\n        type: \"Masters's Thesis\",\r\n        role: \"Master of Arts\",\r\n        tags: [\r\n            \"Master of Arts\",\r\n            \"Behavioural Processes\",\r\n            \"journal article\",\r\n            \"changeover delay\",\r\n            \"hamming\",\r\n            \"matching\",\r\n            \"sensitivity\",\r\n            \"M.A.\",\r\n            \"Hamming Distance\",\r\n            \"education\",\r\n            \"deggree\",\r\n        ],\r\n        authors: [\"Popa (2009)\", \"Popa & McDowell (2010)\"],\r\n        committee: \"Dr. Jack McDowell (chair), Dr. Eugene Emory, Dr. Philip Wolff\",\r\n        keywords: [\"Masters Thesis\", \"ETBD\", \"Hamming Distances\", \"Changeover Delay\", \"matching\", \"sensitivity\",],\r\n        description:\r\n            \"Remeber the changeover delay you experienced above? McDowell et al (2008) suggested that it might have a computational corespondent - namely in the Hamming Distance that separates the target classes. Exploring the Hamming - COD parallel was was my first significant investigation into ETBD and its innerworkings. My work revealed that the ETBD equivalent of a COD was the overall degree of similarity between the target classes, measured in Hamming Distances (Popa, 2013; pp.19-21; figure 4, page 111).<br/><br/><b>Masters committee</b>: Dr. Jack McDowell (chair), Dr. Eugene Emory, Dr. Philip Wolff\",\r\n\r\n        img: [hamming_paper_page1],\r\n        captions: [\"hamming_paper_page1\"],\r\n\r\n        urls: [\r\n            {\r\n                name: \"Emory ETD\",\r\n                link: \"https://etd.library.emory.edu/concern/etds/8k71nj12p?locale=en\",\r\n            },\r\n\r\n            // {\r\n            //     name: \"ReshGate\",\r\n            //     link: \"https://www.researchgate.net/publication/41427297_The_effect_of_Hamming_distances_in_a_computational_model_of_selection_by_consequences\",\r\n            // },\r\n\r\n            // { name: \"Pubmed\", link: \"http://www.ncbi.nlm.nih.gov/pubmed/20152891\" },\r\n\r\n        ],\r\n        // citation:\r\n        //     \"Popa, A., & McDowell, J. J. (2010). The effect of Hamming distances in a computational model of selection by consequences. Behavioural Processes, 84, 428-434.\",\r\n\r\n        references: [\r\n            \"Popa, A., & McDowell, J J. (2009).Hamming cliffs in a computational model of selection by consequences. Poster presented at the 32nd Annual Meeting of the Society for the Quantitative Analysis of Behavior, Phoenix, AZ.\",\r\n\r\n            \"Masters thesis reference\",\r\n\r\n            \"Popa, A., & McDowell, J.J. (2010).The effect of Hamming distances in a computational model of selection by consequences.Behavioural Processes, 84, 428 - 434.\",\r\n\r\n            \"Class discriminability as COD - SQAB 2011\",\r\n\r\n            \"Popa 2013\",\r\n\r\n        ],\r\n    },\r\n\r\n\r\n\r\n    /* \r\n    {\r\n        title: \"Selection events as positive reinforcers\",\r\n\r\n        nickname: \"SQAB 2010\",\r\n\r\n        custom_item: \"emergence_demo\",\r\n\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"05/28/2010\",\r\n        type: \"SQAB poster\",\r\n        authors: [\"Popa & McDowell (2010)\"],\r\n        role: \"first author\",\r\n        keywords: [\"matching assumption\"],\r\n        tags: [\r\n            \"VBA/Excel\",\r\n            \"hypothesis testing\",\r\n            \"model selection\",\r\n            \"ensemble fitting\",\r\n            \"residual analysis\",\r\n        ],\r\n\r\n        description: \"ETBD implements a Darwinian account. The analogy between learning and evolution stands on the equivalence between selection and reinforcement.\",\r\n\r\n        // description: \"According to matching theory, B1/B2 should depend only on r1/r2, but that was not the case in ETBD: r1/r2 interacted with the <b>overall reinforcement rate</b>, <b>reinforcer magnitude</b>, <b>COD</b>, and <b>mutation rate</b>.\",\r\n\r\n        // description: \"According to matching theory, B1/B2 should depend only on r1/r2, but that was not the case in ETBD. In ETBD, B1/B2 varied noticeably with changes in <b>overall reinforcement rate</b>, <b>reinforcer magnitude</b>, <b>COD</b>, and <b>mutation rate</b>. <br/><br/> To understand how variables interact in ETBD means to figure out how they influence behavior at generation level, <i>here-and-now</i>. What emerges is the accumulation of these effects.\",\r\n\r\n\r\n        // description: \"According to matching theory, B1/B2 should depend only on r1/r2. In ETBD, B1/B2 varied noticeably with changes in <b>overall reinforcement rate</b>, <b>reinforcer magnitude</b>, <b>COD</b>, and <b>mutation rate</b>. <br/><br/> Independent variables <i>interact</i>, but what does that <i>mean</i>? Specifically, I wanted to know <b>1)</b> how do IVs influence behavior at generation level, <i>here-and-now</i>, and <b>2)</b> how these local effects become preference patterns with specific properties.\",\r\n\r\n        abstract: \"McDowell and Popa (in press) showed that when running concurrent schedules, experimental settings designed to reasonably sample the reinforcement ratio domain may not adequately sample the absolute reinforcement rate domain.  For example, a concurrent RI 10 RI 20 has a reinforcement ratio of 2:1, equal to a concurrent RI 100 RI 200; evidently, the absolute reinforcement rates differ considerably. McDowell and Popa suggested that the overall absolute reinforcement rate in a concurrent schedule might affect behavior generated by the computational model. Systematic and thorough sampling of the absolute reinforcement rate domain in a series of computational experiments confirmed this hypothesis. <b>The results</b> showed that as the overall absolute reinforcement rate increased, behavior generated by the computational model became less sensitive to changes in parameters related to reinforcer value, changeover delay, and impulsivity.\",\r\n\r\n        img: [hamming_abs_reinf_rate, paper_modern_matching_2010], //paper_mcdowell_popa_2010_fig, mcdowell_popa_2010_paper,\r\n        captions: [\"hamming_abs_reinf_rate\", \"paper_modern_matching_2010\"],\r\n\r\n        urls: [\r\n            { name: \"SQAB 2010\", link: \"https://www.sqab.org/programs/2010.pdf\" },\r\n        ],\r\n\r\n        references: [\r\n            \"McDowell, J. J, & Popa, A. (2010). Effects of overall absolute reinforcement rate in a computational model of selection by consequences. Poster presented at SQAB 2010.\",\r\n        ],\r\n    },\r\n\r\n */\r\n\r\n    {\r\n        // title: \"<i>Mutation</i>, behavior variability, and ADHD\",\r\n        title: 'Qual and dissertation proposal',\r\n\r\n        nickname: \"Qual\",\r\n        navMarker: \"QualPhdDesign\",\r\n        // fontFam: \"Diploma\",\r\n        // fontFam: \"'Press Start 2P', cursive\",\r\n        // fontFam: \"'Special Elite', cursive\",\r\n        //fontFam: \"'Yellowtail', cursive\",\r\n\r\n        date: \"04/15/2011\",\r\n        type: \"Qualifying Exam\",\r\n        role: \"Doctoral Candidate\",\r\n        authors: [], //\"Popa (2011)\"\r\n        committee: \"Dr. Robert Hampton (chair), Dr. Irwin Waldman, Dr. Philip Wolff\",\r\n        keywords: [\"candidacy\"],\r\n        tags: [],\r\n        description:\r\n            \"The Qualifying Examination was the last requirement on the way to candidacy; I passed mine in April 2011, in front of a committee composed of Dr. Robert Hampton (chair), Dr. Irwin Waldman, and Dr. Philip Wolff. <br/><br/>My dissertation proposal was accepted a few month later. For my project I explored the connection between <i>mutation</i> and ADHD and ETBD's potential to predict human behavior.\",\r\n\r\n        img: [etbd_adhd_slide_1],\r\n        captions: [\"zfsdzgfgvzd\", \"dfgsdfgbfnsf\"],\r\n\r\n        urls: [\r\n            //{ name: \"\", link: \"\" },\r\n        ],\r\n\r\n        // citation: \"\",\r\n        references: [\r\n            \"Popa, A., & McDowell, J J. (2011). A Computational Model of Selection by Consequences: Evidence that Mutation is Computationally Equivalent to Impulsivity. Paper presented at the 37th Annual Convention of the Association for Behavior Analysis International, Denver, CO.\",\r\n\r\n        ],\r\n    },\r\n\r\n\r\n\r\n    // {\r\n    //     title: \"<i>Mutation</i>, behavior variability, and ADHD\",\r\n    //     nickname: \"Qual\",\r\n    //     // fontFam: \"Diploma\",\r\n    //     // fontFam: \"'Press Start 2P', cursive\",\r\n    //     // fontFam: \"'Special Elite', cursive\",\r\n    //     //fontFam: \"'Yellowtail', cursive\",\r\n\r\n    //     date: \"04/15/2011\",\r\n    //     type: \"Qualifying Exam\",\r\n    //     role: \"Doctoral Candidate\",\r\n    //     authors: [], //\"Popa (2011)\"\r\n    //     committee: \"Dr. Robert Hampton (chair), Dr. Irwin Waldman, Dr. Philip Wolff\",\r\n    //     keywords: [\"candidacy\"],\r\n    //     tags: [],\r\n    //     // description:\r\n    //     //     \"The 'Qual' was the last requirement on the way to candidacy. I passed mine in April 2011. My dissertation project was accepted a few month later.<br/><br/>For my project I tackled the connection between <i>mutation</i> and ADHD.<br/><br/>My main goals were to verify if ETBD can simulate ADHD symptoms, treatments, and developmental trajectories, and if ETBD data is relevant to human behavior. In both cases, the answer was yes.<br/><br/><b>Qualifying Exam committee</b>: Dr. Robert Hampton (chair), Dr. Irwin Waldman, Dr. Philip Wolff\",\r\n\r\n    //     description:\r\n    //         \"The 'Qual' was the last requirement on the way to candidacy. I passed mine in April 2011. My dissertation project was accepted a few month later.<br/><br/><b>Qualifying Exam committee</b>: Dr. Robert Hampton (chair), Dr. Irwin Waldman, Dr. Philip Wolff\",\r\n\r\n    //     img: [],\r\n\r\n    //     urls: [\r\n    //         //{ name: \"\", link: \"\" },\r\n    //     ],\r\n\r\n    //     // citation: \"\",\r\n    //     references: [\r\n    //         \"Popa, A., & McDowell, J J. (2011). A Computational Model of Selection by Consequences: Evidence that Mutation is Computationally Equivalent to Impulsivity. Paper presented at the 37th Annual Convention of the Association for Behavior Analysis International, Denver, CO.\",\r\n\r\n    //     ],\r\n    // },\r\n\r\n\r\n\r\n\r\n    {\r\n        studyInfo: [\r\n\r\n            { name: \"Choice & Conditioned Reinforcement\" },\r\n            { location: \"Emory University\" },\r\n            { dates: \"2011 - 04/2013\" },\r\n            { irb: [\"eIRB0000000\", \"eIRB-AMD-00000000\"] },\r\n            { pi: [\"Andrei Popa\"] },\r\n            { ci: [\"Jack J McDowell, \", \"Nick/Olivia Calvin\"] },\r\n        ],\r\n\r\n        title: \"Fast matching: from bits to human behavior\",\r\n        nickname: \"ABAI 2012\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"05/26/2012\",\r\n        type: \"talk, ABAI 2012\",\r\n        role: \"SPEAKER (talk)\",\r\n        authors: [\"Popa & McDowell (2012)\"],\r\n        technologies: [\"VB.Net\", \"Excel/VBA\",],\r\n\r\n        keywords: [\"research\", \"thesis\", \"fast matching\"],\r\n        tags: [],\r\n\r\n        // description: \"To accomplish two and three I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side.<br/><br/>To verify ETBD predictions, I investigated human behavior under different COD requirements, as shown in the demo. The results went in the direction predicted by ETBD for all eight dependent variables (pp. phd). Parts of this work were presented at ABAI (2012).<br/><br/>< p className = 'p-left' style = {{ color: 'rgb(255, 128, 49)', }}> Then, I explored human behavior under different COD requirements and I compared it with the ETBD. < br /> <br /></p ><br/><br/><p className='p-left' style={{ color: 'rgb(255, 128, 49)', }}>Finally, I used traditional instruments to measure ADHD symptoms in the same participants and I compared the scores with measures of choice behavior.</p>\",\r\n\r\n        description: \"To accomplish two and three I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side.<br/><br/>To verify ETBD predictions, I investigated human behavior under different COD requirements, as shown in the demo. The results went in the direction predicted by ETBD for all eight dependent variables (pp. phd). < br /> <br />Finally, I used traditional instruments to measure ADHD symptoms in the same participants and I compared the scores with measures of choice behavior.\",\r\n\r\n        notes: \"This was the first time I designed and managed a research study from beginning to end. Technology-wise, I used VB.Net for the experimental interface and Excel and VBA for data analysis.\",\r\n\r\n        // img: [ABAI_2012_event, phd_etbd_humans_1, phd_etbd_humans_2,],\r\n        //img: [phd_etbd_humans_1, phd_etbd_humans_2,],\r\n        img: [phd_etbd_humans_sensitivity, phd_etbd_humans_bout_length],\r\n        captions: [\"phd_etbd_humans_1\", \"phd_etbd_humans_2\"],\r\n\r\n        urls: [\r\n            {\r\n                name: \"ABAI 2012\",\r\n                link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=17728&by=ByArea#s28_0\",\r\n            },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"yyy\",\r\n            },\r\n        ],\r\n        // citation:\r\n        //     \"Popa, A., & McDowell, J J. (2012). The Computational Theory of Behavior Dynamics Predicts Effects of COD on Behavioral Variability: Evidence from experiments with human participants. Paper presented at the 38th Annual Convention of the Association for Behavior Analysis International, Seattle, WA.\",\r\n\r\n        abstract:\r\n            \"Popa and McDowell (2010) showed that the Hamming Distance, a particular mathematical feature of McDowell’s Evolutionary Theory of Behavior Dynamics (ETBD; McDowell, 2004, 2010) is computationally equivalent to the changeover delay (COD; Findley, 1954) used in experiments with live organisms. Popa and McDowell (2011) suggested that increasing the computational COD requirement reduces behavioral variability in a virtual organism animated by the ETBD. The present paper further investigated a wide range of computational COD values and used the results to formulate predictions about the effects of COD requirements on the behavioral variability of humans in concurrent-schedules environments. As predicted by ETBD, the rate of switching between alternatives was systematically decreased by increased COD requirements. These results provide further support for the ETBD as a valid account of behavior dynamics, showing that it is not only able to produce outcomes congruent with known behavior statics (the Matching Law; McDowell & Popa, 2010), but it can also formulate predictions about the behavior of live organisms. Moreover, these findings suggest that high behavioral variability may be a natural outcome of the selection pressure exerted by unstructured environments. The implications for ADHD-symptoms are discussed within the framework provided by previous research (Neuringer, 2010; Taylor et al, 2010).\",\r\n\r\n        references:\r\n            [\r\n                \"Popa, A., & McDowell, J J. (2012). The Computational Theory of Behavior Dynamics Predicts Effects of COD on Behavioral Variability: Evidence from experiments with human participants. Paper presented at the 38th Annual Convention of the Association for Behavior Analysis International, Seattle, WA.\",\r\n            ],\r\n    },\r\n\r\n\r\n\r\n    {\r\n        title: \"The Emergence of High-Level Phenotypes\",\r\n        nickname: \"Ph.D.\",\r\n        date: \"12/24/2013\",\r\n        type: \"doctoral dissertation\",\r\n        role: \"Doctor of Philosophy\",\r\n        authors: [\"Popa (2013)\", \"Hackett (2019)\"],\r\n        keywords: [\"Doctor of Philosophy\", \"dissertation\", \"education\", \"doctoral deggree\", \"PhD\"],\r\n        tags: [\"synthetic data\", \"human data\"],\r\n\r\n        description:\r\n            \"My work showed that ETBD can simulate clinically-relevant behaviors and interventions and that ETBD data can be used to predict human behavior. As for the third goal - properties of choice behavior were compared with scores on measures of ADHD that are popular among researchers: CPT-IP, UPPS-P, SSS-V, A-ADDES, etc. The results were inconclusive, likely due to a lack of high impulsivity scores in the human sample (Popa, 2013). McDowell's lab later confirmed my hypothesis (Hackett, 2019).\",\r\n        img: [\r\n            phd_committee,\r\n            etbd_adhd_slide_1,\r\n        ],\r\n        captions: [\"phd_committee\", \"etbd_adhd_slide_1\"],\r\n\r\n        urls: [\r\n            {\r\n                name: \"Popa (2013)\",\r\n                link: \"https://etd.library.emory.edu/concern/etds/9880vr10s?locale=en\",\r\n            },\r\n            { name: \"Hackett (2019)\", link: \"https://etd.library.emory.edu/concern/etds/rr171z32k?locale=en\" },\r\n            { name: \"Study info\", link: \"gDrive\" },\r\n        ],\r\n\r\n        // citation:\r\n        //     \"Popa (2013). An Evolutionary Theory of Behavior Dynamics - Complexity, Darwinism, and the Emergence of High-Level Phenotypes. Doctoral Dissertation. Retrieved: https://etd.library.emory.edu/concern/etds/9880vr10s?locale=en. ISBNxxxxxxxxxxxxxxx\",\r\n\r\n        abstract: \"The main purpose of this project was to explore the effects of mutation and the environment's value and conduciveness on various dimensions of behavioral variability, in continuous choice environments. Secondly, qualitative predictions made by the Evolutionary Theory about the effects of changeover delays (COD) on behavior variability were verified against the behavior of college students in equivalent environments. The continuous choice behavior of college students was correctly predicted on eight out of eight behavioral dimensions. Thirdly, low-level characteristics of students' continuous choice behavior were compared with traditional measures of impulsivity and sustained attention, in an effort to investigate the potential equivalence between mutation and a property of the nervous system that produces impulsivity-like symptoms. The results were inconclusive, likely due to a lack of extreme impulsivity scores in the human sample. The findings presented in this paper provided significant additional evidence for the selectionist account as a valid mechanism of behavior change. In addition, the knowledge generated by the Evolutionary Theory provided important insights about clinically-relevant phenomena, such as disordered variability (or impulsivity) and raise the possibility of using the theory as a platform for simulating the emergence of specific high-level phenotypes. These implications appear even more fascinating considering that a connection with mental health was not explicitly sought, nor can it be traced to the inner-workings of the theory. This challenges our current understanding of mental illness and provides a new way of thinking about the evolution of behavioral repertoires and their emergent high-level characteristics.\",\r\n\r\n\r\n        references: [\r\n            \"Popa (2013). An Evolutionary Theory of Behavior Dynamics - Complexity, Darwinism, and the Emergence of High-Level Phenotypes. Doctoral Dissertation. Retrieved: https://etd.library.emory.edu/concern/etds/9880vr10s?locale=en. ISBNxxxxxxxxxxxxxxx\",\r\n        ],\r\n\r\n    },\r\n\r\n\r\n    {\r\n        title: \"Multifinality and equifinality, step by step\",\r\n        nickname: \"ABAI 2014\",\r\n        fontFam: \"Roboto\",\r\n        date: \"05/24/2014\",\r\n        type: \"talk, ABAI 2014\",\r\n        role: \"SPEAKER (talk, ABAI 2014)\",\r\n        authors: [\"Popa, Calvin, & McDowell (2014)\"],\r\n        keywords: [\"ABAI 2014\", \"causation\", \"complexity\", \"mechanisms\",],\r\n        tags: [],\r\n        description: \"In ETBD, ADHD-like symptoms emerged from many combinations of variables, impossible to deduce by examining the overall descriptors, or symptoms. <br/><br/> Examining how these variable work at generation level I noticed that they were acting in ways that reduced the probability <i>to respond again in the same class</i>. In other words, they led to ADHD-like symptoms by preventing the formation of bouts.\",\r\n        img: [\r\n            abai_2014_radars_originals,\r\n            abai_2014_slide1,\r\n            ABAI_2014_Chicago,\r\n            ABAI_2014_Andrei,\r\n            abai_2014_slide2,\r\n        ],\r\n        captions: [\"abai_2014_radars_originals\",\r\n            \"abai_2014_slide1\",\r\n            \"ABAI_2014_Chicago\",\r\n            \"ABAI_2014_Andrei\",\r\n            \"abai_2014_slide2\",],\r\n\r\n        urls: [\r\n            {\r\n                name: \"ABAI 2014\",\r\n                link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=40586&by=ByArea#s30_0\",\r\n            },\r\n        ],\r\n        // citation:\r\n        //     \"Popa, A., Calvin, N., & McDowell, J J. (2014). Multifinality and Equifinality in an Evolutionary Theory of Behavior Dynamics. Paper presented at the 40th Annual Convention of the Association for Behavior Analysis International, Chicago, IL.\",\r\n\r\n        abstract:\r\n            \"Skinner (1981) suggested that natural selection operates not only at the biological level, but is also responsible for the evolution of behavioral repertoires throughout an organism’s lifetime. McDowell (2004) implemented the selectionist account in a computational theory of behavior dynamics. The theory causes a population of behaviors to evolve through time under the selection pressure exerted by the environment. It has been tested under a variety of conditions and the emergent outcomes were repeatedly  shown to be qualitatively and quantitatively indistinguishable from those displayed by live organisms (McDowell, in press). The present project investigated the effects of various environmental variables (e.g. reward magnitude) on the behavior variability of virtual organisms characterized by various mutation rates. High mutation rates produced behavioral constellations similar to those displayed by ADHD-diagnosed children. These effects were counteracted by arranging richer or more structured environments (higher changeover delay). Interestingly, arranging low-value environments caused organisms characterized by low mutation rates to display abnormally high levels of variability. These findings suggest that similar high-level phenotypes such ADHD may be caused by various combinations of organismic and environmental features (equifinality), during a dynamic process governed by Darwinian forces.\",\r\n\r\n        references: [\r\n            \"Popa, A., Calvin, N., & McDowell, J J. (2014). Multifinality and Equifinality in an Evolutionary Theory of Behavior Dynamics. Paper presented at the 40th Annual Convention of the Association for Behavior Analysis International, Chicago, IL.\",\r\n        ],\r\n    },\r\n\r\n\r\n\r\n    {\r\n        title: \"Mutation rate, ADHD, and DMN activation\",\r\n        nickname: \"JEAB 2016\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"03/01/2016\",\r\n        type: \"journal article\",\r\n        role: \"PRINCIPAL INVESTIGATOR (part of my thesis turned journal article)\",\r\n        authors: [\"Popa & McDowell (2016)\"],\r\n\r\n        keywords: [\"Popa & McDowell, 2016\", \"DMN\"],\r\n        tags: [],\r\n        description:\r\n            \"The brain's Default Mode Network, or DMN, is a plausible equivalent for mutation. This - and much more - can be investigated experimentally. By syncronizing fast matching with other technologies - EEG, Eye Trackers, etc. - we can investigate real-time changes in behavior, attention, and brain activity <i>simoultaneously</i>.\",\r\n        img: [\r\n            // paper_popa_mcdowell_2016_end,\r\n            // paper_popa_mcdowell_2016_etbd_humans,\r\n            // paper_popa_mcdowell_2016_fig9,\r\n            placeholder_blank\r\n        ],\r\n        captions: [\"placeholder_blank_blankkk\"],\r\n\r\n        urls: [\r\n            {\r\n                name: \"JEAB\",\r\n                link: \"http://onlinelibrary.wiley.com/doi/10.1002/jeab.199/abstract\",\r\n            },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/299382923_Behavioral_variability_in_an_evolutionary_theory_of_behavior_dynamics\",\r\n            },\r\n        ],\r\n        // citation:\r\n        //     \"Popa, A., & McDowell, J, J. (2016). Behavioral Variability in an Evolutionary Theory of Behavior Dynamics. The Journal of the Experimental Analysis of Behavior, 105 (2), 270-290.\",\r\n\r\n        abstract:\r\n            \"A plausible biological counterpart for mutation is the activity of the DMN - Default Mode Network, with high mutation rates coresponding to high levels of DMN activation. <br/><br/>These Fast matching procedures can be used in conjunction with  <br/><br/> \",\r\n\r\n        references: [\r\n            \"Popa, A., & McDowell, J, J. (2016). Behavioral Variability in an Evolutionary Theory of Behavior Dynamics. The Journal of the Experimental Analysis of Behavior, 105 (2), 270-290.\",\r\n        ],\r\n    },\r\n\r\n\r\n    {\r\n        title: \"The other side of learning\",\r\n\r\n        studyInfo: [\r\n\r\n            { name: \"ASC study name\" },\r\n            { location: \"Agnes Scott University\" },\r\n            { dates: \"10/2015 - 05/2016\" },\r\n            { irb: [\"ASC IRB xxxxxxxxx\", \"xxxxxx\"] },\r\n            { pi: [\"Dr. Andrei Popa\"] },\r\n            { ci: [\"\"] },\r\n        ],\r\n\r\n        nickname: \"SpARC 2016\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"04/01/2016\",\r\n        type: \"research study, human choice\",\r\n        time: \"04/01/2016\",\r\n        role: \"STUDY COORDINATOR\",\r\n        authors: [\r\n            \"<sup>U</sup>Adekunle & Popa (2016)\",\r\n            \"<sup>U</sup>Booher & Popa (2016)\",\r\n            \"<sup>U</sup>Forbes & Popa (2016)\",\r\n            \"<sup>U</sup>Grissom & Popa (2016)\",\r\n            \"<sup>U</sup>Shen & Popa (2016)\",\r\n            \"<sup>U</sup>Tang & Popa (2016)\",\r\n            \"<sup>U</sup>Waithe & Popa (2016)\",\r\n            \"Popa & Grissom (2017)\",\r\n        ],\r\n        technologies: [\"VB.Net\", \"Excel/VBA\",],\r\n\r\n        keywords: [\"Agnes Scott College\", \"fdtyghjh\"],\r\n        tags: [\"VB.Net\"],\r\n        description: \"The goal of this study was to learn more about aversive conditioning and stimulus control in humans. And learned we did.\",\r\n\r\n        // \"During my appointment at Agnes Scott (2015-2016) my mentees and I explored concurrent schedules of reinforcement and punishment, escape behavior, extinction-induced phenomena, invisible target classes of different dimensions, etc.\"\r\n\r\n        img: [\r\n            SpARC_01_Adekunle,\r\n            SpARC_02_1_Tang,\r\n            SpARC_06_1_Adekunle,\r\n            SpARC_05_1_Forbes,\r\n            SpARC_07_1_Shen,\r\n            SpARC_10_1_Adekunle,\r\n            SpARC_11_1_Shen,\r\n            SpARC_12_1_Booher,\r\n            SpARC_14_1_Shen,\r\n            SpARC_15_1_Waithe,\r\n            SpARC_16_1_Grissom,\r\n            wcalb2017_extinction08,\r\n        ],\r\n\r\n        captions: [\"SpARC_01_Adekunle\",\r\n            \"SpARC_02_1_Tang\",\r\n            \"SpARC_06_1_Adekunle\",\r\n            \"SpARC_05_1_Forbes\",\r\n            \"SpARC_07_1_Shen\",\r\n            \"SpARC_10_1_Adekunle\",\r\n            \"SpARC_11_1_Shen\",\r\n            \"SpARC_12_1_Booher\",\r\n            \"SpARC_14_1_Shen\",\r\n            \"SpARC_15_1_Waithe\",\r\n            \"SpARC_16_1_Grissom\",\r\n            \"wcalb2017_extinction08\",],\r\n\r\n        urls: [\r\n            { name: \"SpARC\", link: \"https://www.agnesscott.edu/sparc/index.html\" },\r\n            { name: \"SpARC INDEX\", link: \"https://www.agnesscott.edu/sparc/\" },\r\n            {\r\n                name: \"WCALB 2017\",\r\n                link: \"https://static1.squarespace.com/static/57b732f259cc68697145ea01/t/5b7dbd231ae6cf8700f3d604/1534967075831/Past+Programs+2017.pdf\",\r\n            },\r\n        ],\r\n\r\n        // citation:\r\n        //     \"The Spring Annual Research Conference is held at Agnes Scott each April to provide students and faculty with an opportunity to present their work to the campus community. As an interdisciplinary conference, SpARC fosters essential connections across academic disciplines and encourages an ongoing dialogue between the liberal arts and sciences.\",\r\n\r\n        abstract: \"The Spring Annual Research Conference is held at Agnes Scott each April to provide students and faculty with an opportunity to present their work to the campus community.As an interdisciplinary conference, SpARC fosters essential connections across academic disciplines and encourages an ongoing dialogue between the liberal arts and sciences. My mentees (bold font) and I contributed five (5) posters and three (3) talks, counting towards ~15% of all research projects presented at SpARC 2016. Note that all eight were novel contributions to the field. I would like to take this opportunity to thank my former students and research assistants, AlessandraXi Zhangand Olivia Zivot. Without their contribution, managing this enterprise would have been challenging at best.\",\r\n        // citations:\r\n        //     \"Adekunle, O. & Popa, A. (2016). Higher Payoff or More Options? Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA. <br/> Booher, C. & Popa, A. (2016). Choice Behavior in Unsignaled Environments With and Without Immediate Negative Feedback. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Forbes, V., & Popa, A. (2016). Human Choice Behaviors Before and After Extinction. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Grissom, M. K., & Popa, A. (2016). Effects of Extinction on Human Escape Behavior. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Shen, R. & Popa, A. (2016). Is Competition Sufficient to Increase the Motivation to “Do Well”? Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Tang, X., & Popa, A. (2016). Choice Behavior in Low Discriminability Conditions: Effects of the Operant Class Size. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Waithe, O. Y., & Popa, A. (2016). The Effects of Imagery on Psychological Discomfort. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n\r\n        references: [\r\n            \"Popa, A. & Grissom, M. K. (2017). Extinction-Induced Variability on Negatively Reinforced Human Behavior. Paper presented at the Winter Conference on Animal Learning & Behavior, Park City, UT.\",\r\n            \"Adekunle, O. & Popa, A. (2016). Higher Payoff or More Options? Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n            \"Booher, C. & Popa, A. (2016). Choice Behavior in Unsignaled Environments With and Without Immediate Negative Feedback. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n            \"Forbes, V., & Popa, A. (2016). Human Choice Behaviors Before and After Extinction. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n            \"Grissom, M. K., & Popa, A. (2016). Effects of Extinction on Human Escape Behavior. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n            \"Shen, R. & Popa, A. (2016). Is Competition Sufficient to Increase the Motivation to “Do Well”? Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n            \"Tang, X., & Popa, A. (2016). Choice Behavior in Low Discriminability Conditions: Effects of the Operant Class Size. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n            \"Waithe, O. Y., & Popa, A. (2016). The Effects of Imagery on Psychological Discomfort. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        ],\r\n    },\r\n\r\n\r\n    {\r\n        title: \"Development, step by step\",\r\n        nickname: \"ABAI 2017\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"05/28/2017\",\r\n        type: \"talk, ABAI 2017\",\r\n        time: \"05/28/2017\",\r\n        role: \"PRINCIPAL INVESTIGATOR (talk, ABAI 2017)\",\r\n        authors: [\"Popa (2017)\"],\r\n\r\n        keywords: [\"ABAI 2017\", \"talk\", \"conference\", \"yes, dicks\"],\r\n        tags: [],\r\n        description: \"The framework described in Popa (2019), in the context of psychology.   <br/><br/>  <br/><br/>\",\r\n        // img: [ABAI_2017_1, ABAI_2017_2, ABAI_2017_3, ABAI_2017_4, ABAI_2017_5, ABAI_2017_6, ABAI_2017_7, ABAI_2017_8, ABAI_2017_9, ABAI_2017_10],\r\n        img: [ABAI_2017_5, ABAI_2017_6],\r\n        captions: [\"ABAI_2017_5\", \"ABAI_2017_6\"],\r\n\r\n        urls: [\r\n            {\r\n                name: \"ABAI 2017\",\r\n                link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=53139&by=ByArea#s196_0\",\r\n            },\r\n            {\r\n                name: \"Conference schedule\",\r\n                link: \"https://www.abainternational.org/events/annual-2017.aspx\",\r\n            },\r\n        ],\r\n        // citation:\r\n        //     \"Popa, A., (2017). Towards a Dynamic Account of Human Development. Paper presented at the 43rd Annual Convention of the Association for Behavior Analysis International, Denver, CO.\",\r\n\r\n        abstract:\r\n            \"The biopsychosocial model acknowledges that high-level phenotypes (e.g., impulsivity, good at math, etc.) are multiply-caused by a plethora of contributing, interacting factors, such as specific genetic configurations, socio-economic status, culture, ethnicity, gender, and so on.  However, the model does not explain how these variables interact with each other or how, exactly, they contribute to a specific outcome. I submit to the reader a potential explanation. Drawing on theoretical advancements from the field of complex systems and on computational research on the dynamics of behavioral repertoires (McDowell, 2013; Popa, 2013; Popa & McDowell, 2016), the theory discussed here proposes that the interaction between agents and their environment consists of a continuous-choice process during which agents adapt to environmental changes. This process molds an individual’s context (e.g., income, culture, etc.) into robust collections of cognitive, emotional, and behavioral manifestations like “impulsivity”, “authoritative parent”, etc. The factors typically associated with impulsivity (for example) contribute to its emergence indirectly, by altering the relative value of existing options, and, by extension, the moment-to-moment probability of choosing one course of action over another. High-level phenotypes, therefore, cannot be directly explained by the contributing factors themselves, but by the moment-to-moment changes said factors produce in cognition and action.\",\r\n\r\n        references: [\r\n            \"Popa, A., Calvin, N., & McDowell, J J. (2013). Complexity, Emergence, and the Behavior of Organisms. Paper presented at the 39th Annual Convention of the Association for Behavior Analysis International, Minneapolis, MN.\",\r\n\r\n            // \"Popa, A., Calvin, N., & McDowell, J J. (2013). Complexity, Emergence, and the Behavior of Organisms. Paper presented at the 39th Annual Convention of the Association for Behavior Analysis International, Minneapolis, MN.\",\r\n\r\n            \"Popa, A. (2015). Towards an Evolutionary Account for the Dynamics of Cognizant Systems. Darwin Day Lecture Series, Georgia State University, Atlanta, GA.\",\r\n\r\n            \"Popa, A. (2016). Population Thinking, Psychodiversity, and Human Development. Darwin Day Lecture Series, Georgia State University, Atlanta, GA.\",\r\n\r\n            \"Popa, A., (2017). Towards a Dynamic Account of Human Development. Paper presented at the 43rd Annual Convention of the Association for Behavior Analysis International, Denver, CO.\",\r\n        ],\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        title: \"Triangles!\",\r\n\r\n        studyInfo: [\r\n\r\n            { name: \"name??\" },\r\n            { location: \"Emory University, Oxford campus\" },\r\n            { dates: \"10/2017 - 05/2018\" },\r\n            { irb: [\"e IRB xxxxxxxxx\", \"xxxxxx\"] },\r\n            { pi: [\"Dr. Keneth Carter\", \"Dr. Andrei Popa (<i>de facto</i>)\"] },\r\n            { ci: [\"\"] },\r\n        ],\r\n\r\n        nickname: \"Emory 2018\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"05/01/2018\",\r\n        type: \"empirical research\",\r\n        role: \"PRINCIPAL INVESTIGATOR (<i>de facto</i>)\",\r\n        authors: [\"Popa & Carter (2018)\"],\r\n        technologies: [\"VB.Net\", \"Excel/VBA\",],\r\n\r\n        keywords: [\"fgchgbjk\"],\r\n        tags: [\"VB.NET\", \"Python\", \"Pandas\", \"SciPy\", \"Matplotlib\"],\r\n        description:\r\n            \"Here we compared positively reinforced behavior and avoidance behavior in symmetrical environments (Popa & Carter, 2018). Participants discovered abstract rules twice as fast when correct responses acquired points (positive reinforcement) then when they prevented the loss of points (negative reinforcement). <br/><br/>\",\r\n\r\n\r\n        img: [Pos01_1_pos, Neg04_1_neg, Trn04_2_pos, Trn04_3_neg, Trn04_4_ext],\r\n        captions: [\"Pos01_1_pos\", \"Neg04_1_neg\", \"Trn04_2_pos\", \"Trn04_3_neg\", \"Trn04_4_ext\"],\r\n\r\n        urls: [{ name: \"gDrive\", link: \"gDrive\" }],\r\n\r\n        // citation: \"Emory University, Oxford College, IRB00101193, AM1_IRB00101193\",\r\n\r\n        references: [\"gnsgnghmgjm\", \"fgnfhnb\"],\r\n    },\r\n\r\n\r\n\r\n\r\n    {\r\n        title: \"ETBD.py\",\r\n        nickname: \"Python\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"09/01/2018\",\r\n        type: \"(research, computational modelling)\",\r\n        role: \"PRINCIPAL INVESTIGATOR\",\r\n        technologies: [\"Python\", \"Tkinter\", \"Postgress\"],\r\n\r\n        keywords: [\"buyhbvjhb\"],\r\n        authors: [],\r\n\r\n        tags: [\"Python\", \"SciPy\", \"SQLite\", \"Postgres\"],\r\n        description:\r\n            \"In ETBD, reinforcers trigger selection events: phenotypes closer to the reinforced one are assigned a higher probability to become parents. <br/><br/>[...] <i>a random value is obtained from an exponential distribution, say 5. The program checks the population for a phenotype that is 5 integers away from the reinforced one. If the reinforced one was 100, it looks for 95 or 105. When it doesn't find a match, it goes back to the distribution, gets a new random value, and so on until it finds a match.<br/><br/>Here I explored a next-best-thing approach: obtain a random value from the distribution and search for a match; if one is not found, the phenotype closest to the required value becomes parent.\",\r\n        img: [placeholder_blank],\r\n        captions: [\"placeholder_blank\"],\r\n\r\n        urls: [\r\n            //{name: \"xxx\", link:\"xxx\"},\r\n            //{name: \"GitHub\", link: \"xxx\"}\r\n        ],\r\n        // citation: \"\",\r\n\r\n        references: [\"zxvxv\", \"mcvhncv\"],\r\n    },\r\n\r\n\r\n\r\n    {\r\n        title: \"The Shape of Will\",\r\n        nickname: \"PsyArXiv\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"09/08/2019\",\r\n        type: \"preprint\",\r\n        time: \"09/08/2019\",\r\n        role: \"PRINCIPAL INVESTIGATOR\",\r\n        authors: [\"Popa (2019a)\"],\r\n        keywords: [\"hguhjbjkn\"],\r\n        tags: [\"Problem Solving\"],\r\n        // description:\r\n        //     \"Close as it comes to the brain without being brain, per se. Causally speaking, changes in neuronal activation states begin after physicochemical changes, and before psychological phenomena, like cognitive, behavioral, emotional reactions. Fast and sensitive enough • to react to any immediate experience, no matter how subtle or short - lived(e.g., 'a look',subtle voice inflections, etc.) and • to be proximate cause for every form of expression(e.g., implicit cognition, thinking, carrying a conversation, ruminating, etc.). Complex and versatile enough to represent(i.e., 'encode') the richness of psychological dimensions and phenomena. Domain independent; common, binary - based representation for all psychological phenomena.Amenable to scientific investigation: Structures that can be described in terms of nodes and edges - like neurons and synapses - are called graphs. The transition between any two consecutive configurations of active neurons is equivalent to morphing one graph into another, again and again. These structures can be described mathematically and the transformations can be represented computationally.\",\r\n\r\n        description:\r\n            \"Neurons are located in a confined, 3-dimensional space. A neuron can be in one of two states: 1 or 0.<br/><br/> The neurons that 'fire' in a given window of time describe a shape, a configuration with measurable properties. The configuration keeps changing, as action potentials travel from cell to cell. <br/><br/> The streams of activation states is the material counterpart of all forms of experience and expression:  an agent that feels, notices, thinks, does - in real time.\",\r\n\r\n        // description:\r\n        //     \"The transformations that occur in the brain must occur in real time and must accomodate any form of experience and expression.<br/><br/><br/>Structures that can be described in terms of nodes and edges - like neurons and synapses - are called graphs. The transition between any two consecutive configurations of active neurons is equivalent to morphing one graph into another, again and again. These structures can be described mathematically and the transformations can be represented computationally.\",\r\n\r\n        /* \r\n\r\n        Neurons are located in a confined, 3-dimensional space. A neuron can be in one of two states: 1 or 0.<br/><br/> The neurons that \"fire\" in a given window of time describe a shape, a configuration with measurable properties. The configuration keeps changing, as action potentials travel from cell to cell. <br/><br/> The streams of activation states is the material counterpart of all forms of experience and expression:  an agent that feels, notices, thinks, does - in real time.\r\n        */\r\n\r\n\r\n        //caption: \"Fig. 1. The transition between two configurations of active neurons is         equivalent to transforming on graph(t n ; left) into another(t n+ 1 ; right panel).\",\r\n        img: [change_in_state_2],\r\n        captions: [\"change_in_state_2\"],\r\n\r\n        urls: [\r\n            { name: \"PsyArXiv\", link: \"https://psyarxiv.com/m87an/\" },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/335688963_Psychology_20_The_Emergence_of_Individuality\",\r\n            },\r\n        ],\r\n        citation:\r\n            \"Popa, Andrei. 2019. “Psychology 2.0: The Emergence of Individuality.” PsyArXiv. September 8. doi:10.31234/osf.io/m87an.\",\r\n\r\n        references: [\r\n            \"Popa, Andrei. 2019. “Psychology 2.0: The Emergence of Individuality.” PsyArXiv. September 8. doi:10.31234/osf.io/m87an.\",\r\n        ],\r\n    },\r\n\r\n\r\n\r\n\r\n    {\r\n        title: \"Imperfect Automata\",\r\n        nickname: \"PsyArXiv\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"09/30/2019\",\r\n        type: \"preprint\",\r\n        role: \"\",\r\n        authors: [\"Popa (2019b)\"],\r\n\r\n        keywords: [\"hjhjbjn\"],\r\n        tags: [\"Python\", \"Tkinter\"],\r\n        description:\r\n            \"Novelty requires error. Automata are deterministic systems, governed by precise rules. The question examined here was: what if every new cell has a small probability to be written incorrectly, i.e. to mutate from 0 to 1 or viceversa. ... Low mutation probabilities facilitated the emergence of new patterns and structures, disconnected from the initial conditions. <br/><br/><br/><br/>\",\r\n        img: [projectAutomata1],\r\n        captions: [\"projectAutomata1\"],\r\n        urls: [\r\n            { name: \"PsyArXiv\", link: \"https://psyarxiv.com/wgp4e/\" },\r\n            { name: \"GitHub\", link: \"https://github.com/ap-dev1/automata/\" },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/336143797_Imperfect_Automata_Effects_of_mutation_on_the_evolution_of_automaton_01101110_Rule_110\",\r\n            },\r\n        ],\r\n        // citation:\r\n        //     \"Popa, Andrei. 2019. “Imperfect Automata: Effects of “mutation” on the Evolution of Automaton 01101110 (rule 110)” PsyArXiv. September 30. doi:10.31234/osf.io/wgp4e.\",\r\n\r\n        references: [\r\n            \"Popa, Andrei. 2019. “Imperfect Automata: Effects of “mutation” on the Evolution of Automaton 01101110 (rule 110)” PsyArXiv. September 30. doi:10.31234/osf.io/wgp4e.\"\r\n        ],\r\n    },\r\n\r\n\r\n\r\n    {\r\n        title: \"Hello web world!\",\r\n        nickname: \"JS / MERN\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"11/01/2020\",\r\n        type: \"MERN project\",\r\n        time: \"10/05/2020\",\r\n        role: \"\",\r\n        technologies: [\"mongoDB\", \"Express\", \"React\", \"Node\"],\r\n\r\n        keywords: [\"fghvhjb n\"],\r\n        authors: [],\r\n\r\n        tags: [\r\n            \"React\",\r\n            \"Node/Express\",\r\n            \"MongoDB/Atlas\",\r\n            \"DynamoDB\",\r\n            \"RDS/Postgres\",\r\n        ],\r\n        description:\r\n            \"My first MERN project was a simple card sorting activity: choose five cards from a deck of 80. It implements user registration and authentication, the activity itself, storing results, and redirecting the user to an updated home page. \",\r\n        // +\r\n        // \"The first version was deployed with AWS and used DynamoDB for authentication data and RDS/Postgres for session data. The second version was deployed on Heroku and used MongoDB/Atlas for all app data. <br/><br/><br/><br/>\",\r\n\r\n        img: [projectCardSorting],\r\n        captions: [\"projectCardSorting\"],\r\n\r\n        urls: [\r\n            { name: \"GitHub\", link: \"https://github.com/ap-dev1/personal_values\" },\r\n        ],\r\n        citation: \"\",\r\n\r\n        references: [\"cZDCx\", \"vzxv\"],\r\n    },\r\n\r\n\r\n\r\n];\r\n\r\nexport default infoTimeline;\r\n","F:\\react_portfolio\\src\\COMPONENTS\\background\\ResearchTrajectory.jsx",["305","306","307","308","309","310","311","312"],"// import './chapters.sass'\r\n\r\nimport { nanoid } from \"nanoid\"\r\nimport data from '../../DATA/myData'\r\nimport parse from \"html-react-parser\"\r\n\r\n\r\nexport default function ResearchTrajectory() {\r\n\r\n\r\n    // const phenList = ['behavior acquisition, extinction,', 'extinction bursts, spontaneous recovery,', 'escape, avoidance, behavior suppression,', 'conditioned reinforcement, stimulus control, ...']\r\n\r\n    // behavior acquisition, extinction,, extinction bursts, spontaneous recovery,, escape, avoidance, behavior suppression,, conditioned reinforcement, stimulus control, ...\r\n\r\n    // const phenList = ['behavior acquisition and extinction,', 'escape and avoidance,', 'conditioned reinforcement and stimulus control, ...']\r\n\r\n\r\n    return (\r\n\r\n        <div\r\n            id='researchTrajectory'\r\n            key={nanoid()}\r\n            style={{\r\n                backgroundColor: '#274235',  //  green timeline\r\n                backgroundColor: '#FF6347',  //  tomato\r\n\r\n                backgroundColor: '#FF6347',  //  tomato\r\n                backgroundColor: '#FF6347',  //  tomato\r\n                backgroundColor: '#F0FFFF',  //  azure\r\n                //backgroundColor: '#FAFAD2',  //  tomato\r\n                backgroundColor: '#ccc',\r\n\r\n\r\n\r\n                width: '100%',\r\n                minHeight: '100vh'\r\n\r\n            }}\r\n        >\r\n\r\n\r\n\r\n\r\n            {/* <div className=\"carved-text\" key={nanoid()}>\r\n\r\n                <span id=\"span1\" key={nanoid()}>RESEARCH</span>\r\n\r\n\r\n                <span id=\"span2\" >  2007 - ____ </span>\r\n\r\n                <span className=\"span_shaddow\" key={nanoid()}>I study computational theories of behavior dynamics. That's where I started, anyway.</span>\r\n\r\n            </div> */}\r\n\r\n\r\n\r\n            <div className=\"div-row\" key={nanoid()}  >\r\n\r\n\r\n\r\n                <div className=\"col1\" key={nanoid()} >\r\n\r\n                    <div\r\n                        className='txt-inset-dark'\r\n                        key={nanoid()}\r\n                    >\r\n\r\n                        {/* <p className=\"paragraph-story\" key={nanoid()} >\r\n                            Every moment is an opportunity to <i>stop</i> and <i>do something else</i>. A fork in the road, if you will.\r\n                        </p>\r\n\r\n\r\n                        <p className=\"paragraph-story\" key={nanoid()} >\r\n                            The probability to \"go\" one way or another depends on experience.\r\n                        </p> */}\r\n\r\n\r\n                        {/* <p className=\"paragraph-story\" key={nanoid()} >\r\n                            The probability to choose a course of action depends on how it went in the past and the context in which it happened.\r\n                        </p> */}\r\n\r\n                        <p\r\n                            className=\"paragraph-story\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                fontSize: '14px',\r\n                                fontWeight: 800,\r\n                                width: \"450px\",\r\n                            }}\r\n                        >\r\n                            <b>We know </b> that all behavioral phenomena examined in the lab emerge - <span>trial</span> after <span>trial</span> after <span>trial</span> - from some combinations of reinforcers, punishers, and contextual cues.\r\n\r\n                            <br /><br />\r\n                            What we don't know is how it happens.\r\n                        </p>\r\n\r\n                        <p\r\n                            className=\"paragraph-story\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                fontSize: '16px',\r\n                                fontWeight: 900,\r\n                                //fontFamily: 'Courier New',\r\n                                // fontFamily: 'Architects Daughter, cursive',\r\n                                fontFamily: 'Roboto Mono, monospace',\r\n\r\n                                width: \"400px\",\r\n                                fontWeight: \"900px\",\r\n                                margin: \"20px auto\",\r\n                                fontVariantCaps: 'all-petite-caps',\r\n\r\n                            }}\r\n                        >\r\n                            <ol>\r\n                                <li>behavior acquisition & extinction</li>\r\n                                <li>undermatching</li>\r\n                                <li>escape and avoidance</li>\r\n                                <li>conditioned reinforcement</li>\r\n                                <li>stimulus control</li>\r\n                                <li>...</li>\r\n\r\n                            </ol>\r\n                        </p>\r\n\r\n\r\n\r\n\r\n\r\n                        {/* <p\r\n                            className=\"paragraph-story\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                fontSize: '14px',\r\n                                fontWeight: 900,\r\n                                width: \"450px\",\r\n\r\n\r\n                            }}\r\n                        >\r\n                            What we don't know is how it happens.\r\n                        </p> */}\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n                    {/* <div className=\"txt-inset-green\" key={nanoid()}\r\n                        style={{\r\n                            margin: \"20px auto 20px auto\",\r\n                            padding: \"20px\",\r\n                            fontSize: \"16px\",\r\n                            border: \"1px solid #777\",\r\n                        }}>\r\n\r\n\r\n                        <p\r\n                            className=\"paragraph-story\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                width: \"400px\",\r\n                                margin: \"auto\",\r\n                            }}\r\n                            key={nanoid()}\r\n\r\n                        >\r\n                            A good theory would recreate known phenomena, fill in gaps, reconcile inconsistencies, and connect the dynamics of behavior with brain function, cognition, and development.\r\n\r\n                        </p>\r\n                    </div> */}\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n                {/* The probability to choose one course of action over another varies with experience.\r\n\r\n                    Choices produce preference patterns that can be analyzed on many dimensions.\r\n\r\n                    Learning theories propose causal mechanisms for how this happen.\r\n                    \r\n                    For the past fifteen years I verifyed, tested and built  computational theories of learning, or behavior dynamics.\r\n\r\n                    //------------------------------------------\r\n\r\n                    A complete theory of learning should recreate what we know, fill in the gaps, reconcile contradictory findings, and connect this body of knowledge with those from other fields (Popa, 2019)\r\n                    //------------------------------------------\r\n\r\n                    \r\n                    */}\r\n\r\n\r\n                {/* \r\n                {\r\n                    data.researchText.map((item) => {\r\n                        return (\r\n                            <p\r\n                                className=\"p-left\"\r\n                                style={{\r\n                                    border: \"1px solid #fff\",\r\n                                    padding: \"0px\",\r\n                                    margin: \"100px auto 10px auto\",\r\n                                    width: \"550px\",\r\n                                    fontSize: \"14px\",\r\n                                }}\r\n                            >\r\n                                {\r\n                                    parse(item)\r\n                                }\r\n\r\n                            </p>\r\n                        )\r\n                    })\r\n                }\r\n\r\n */}\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\background\\ResearchBegins.jsx",["313","314","315","316","317"],"// import \"./chapters.sass\"\r\n\r\nimport { nanoid } from \"nanoid\"\r\nimport data from '../../DATA/myData'\r\nimport parse from \"html-react-parser\"\r\nimport * as d3 from \"d3\"\r\nimport { useEffect } from \"react\"\r\n\r\n\r\nexport default function ResearchBegins() {\r\n\r\n    const phenString = 'behavior acquisition and extinction; extinction bursts and spontaneous recovery; escape, avoidance, and behavior suppression; conditioned reinforcement and stimulus control, ...'\r\n\r\n    /* \r\n        const phenomenaCircles = [\r\n            { 'cx': 50, 'cy': 200 },\r\n            { 'cx': 100, 'cy': 200 },\r\n            { 'cx': 175, 'cy': 125 },\r\n            { 'cx': 200, 'cy': 125 },\r\n            { 'cx': 225, 'cy': 125 },\r\n            { 'cx': 250, 'cy': 125 },\r\n            { 'cx': 275, 'cy': 70 },\r\n            { 'cx': 375, 'cy': 200 },\r\n            { 'cx': 415, 'cy': 200 },\r\n            { 'cx': 450, 'cy': 200 },\r\n            { 'cx': 475, 'cy': 150 },\r\n            { 'cx': 500, 'cy': 200 },\r\n            { 'cx': 520, 'cy': 200 },\r\n        ]\r\n    \r\n        const phenomenaAxes = [\r\n            { 'x1': 50, 'y1': 200, 'x2': 500, 'y2': 200 },\r\n        ]\r\n    \r\n        const crCurve = d3.line()\r\n            .x(d => d.cx)\r\n            .y(d => d.cy)\r\n            .curve(d3.curveCatmullRom)\r\n    \r\n        useEffect(() => {\r\n            let svg = d3.select('#svgBehaviorPhenomena')\r\n                .attr(\"width\", '600px')\r\n                .attr(\"height\", '300px')\r\n                .attr(\"margin\", '20px auto')\r\n    \r\n            let gTexts = svg.append('g')\r\n            let gCircles = svg.append('g')\r\n            let gAxes = svg.append('g')\r\n    \r\n            let gBehaviorPath = svg.append('g')\r\n    \r\n            gBehaviorPath\r\n                .append(\"path\")\r\n                .attr(\"d\", crCurve(phenomenaCircles))\r\n                .style(\"stroke\", \"#aaa\")\r\n                .style(\"stroke-width\", 3)\r\n                .attr(\"fill\", \"none\")\r\n    \r\n    \r\n            gAxes.selectAll('line').data(phenomenaAxes).join('line')\r\n                .attr('x1', d => d.x1)\r\n                .attr('y1', d => d.y1)\r\n                .attr('x2', d => d.x2)\r\n                .attr('y2', d => d.y2)\r\n                .attr('stroke', '#aaa')\r\n                .attr('stroke-width', 1)\r\n                .attr('stroke-dasharray', 3)\r\n    \r\n    \r\n            gTexts.append('text').text('BEHAVIOR').attr(\"x\", 240).attr(\"y\", 50)\r\n                .attr('class', 'txt-phenomena')\r\n                .style('font-size', '16px')\r\n                .style('stroke', '#aaa')\r\n    \r\n    \r\n            gTexts.append('text').text('acquisition').attr(\"x\", 160).attr(\"y\", 165).attr('class', 'txt-phenomena').style('stroke', '#A9A9A9')\r\n    \r\n    \r\n            gTexts.append('text').text('extinction').attr(\"x\", 350).attr(\"y\", 230).attr('class', 'txt-phenomena').style('stroke', '#A9A9A9')\r\n            gTexts.append('text').text('spontaneous').attr(\"x\", 450).attr(\"y\", 100).attr('class', 'txt-phenomena').style('stroke', '#A9A9A9')\r\n            gTexts.append('text').text('recovery').attr(\"x\", 450).attr(\"y\", 120).attr('class', 'txt-phenomena').style('stroke', '#A9A9A9')\r\n    \r\n    \r\n            svg.append('rect').attr('fill', '#fff')\r\n                .attr('x', 240)\r\n                .attr('y', 60)\r\n                .attr('width', 70)\r\n                .attr('height', 220)\r\n                .attr('stroke', 'tomato')\r\n                .attr('stroke-width', 0)\r\n    \r\n    \r\n            gAxes.selectAll('circle').data(phenomenaCircles).join('circle')\r\n                .attr('cx', d => d.cx)\r\n                .attr('cy', d => d.cy)\r\n                .attr('r', 1)\r\n                .attr('stroke', 'lightgrey')\r\n                .attr('stroke-width', 1)\r\n                .attr('fill', '#aaa')\r\n        }, [])\r\n    \r\n     */\r\n    return (\r\n\r\n        <div\r\n            id='researchBegins'\r\n            key={nanoid()}\r\n            style={{\r\n                width: '100%',\r\n                minHeight: '100vh'\r\n            }}\r\n        >\r\n\r\n\r\n\r\n\r\n            <div className=\"carved-text\" key={nanoid()}\r\n\r\n            >\r\n\r\n                <span className=\"span-title\" key={nanoid()}>RESEARCH</span>\r\n\r\n\r\n                <span className=\"span-year\" >  2007 - ____ </span>\r\n\r\n\r\n                <span className=\"span-intro\" key={nanoid()}>\r\n                    I study computational theories of <i>learning</i>, or behavior dynamics.\r\n                </span>\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n            <div\r\n                key={nanoid()}\r\n                style={{\r\n                    border: \"1px solid red\",\r\n                    margin: \"auto\",\r\n                    //padding: \"0px\",\r\n                    //margin: \"100px auto 10px auto\",\r\n                    //width: \"550px\",\r\n                    //fontSize: \"14px\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                }}\r\n            >\r\n\r\n                {/* <svg id='svgBehaviorPhenomena' key={nanoid()}>\r\n\r\n                </svg> */}\r\n\r\n\r\n                {/* <LearningNetwork /> */}\r\n\r\n\r\n                {/* <div\r\n                    style={{\r\n                        width: \"150px\",\r\n                        height: \"200px\",\r\n                        border: \"0px solid #aaa\",\r\n                        backgroundColor: \"transparent\",\r\n                        margin: \"auto\",\r\n                        color: \"#778899\",\r\n                        color: \"#A9A9A9\",\r\n                        fontFamily: \"Montserrat\",\r\n                        fontWeight: 700,\r\n                        fontSize: \"16px\",\r\n                        padding: \"10px\",\r\n                    }}\r\n                    key={nanoid()}\r\n                >\r\n                    <p>\r\n                        reinforcers<br />\r\n                        punishers<br />\r\n                        context<br />\r\n\r\n                    </p>\r\n                </div> */}\r\n\r\n\r\n                {/* <div\r\n                    style={{\r\n                        //border: \"1px solid lime\",\r\n                        width: \"500px\",\r\n                        height: \"200px\",\r\n                        border: \"0px solid #aaa\",\r\n                        backgroundColor: \"transparent\",\r\n                        margin: \"auto\",\r\n                        color: \"#778899\",\r\n                        color: \"#A9A9A9\",\r\n                        fontFamily: \"Montserrat\",\r\n                        fontWeight: 700,\r\n                        fontSize: \"16px\",\r\n                        lineHeight: \"26px\",\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        flexWrap: \"wrap\",\r\n                        padding: \"10px 14px\",\r\n                    }}\r\n                    key={nanoid()}\r\n\r\n                >\r\n\r\n\r\n\r\n                    <p>\r\n                        {phenString}\r\n                    </p>\r\n\r\n\r\n\r\n                </div> */}\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\matching\\MatchingDemo.js",["318","319","320","321","322","323","324","325"],"\r\n// More elegant version than FastMatchingDemo;\r\n\r\nimport React, { Component } from \"react\";\r\nimport * as d3 from \"d3\";\r\n//import parse from \"html-react-parser\";\r\nimport \"./matching.sass\";\r\n\r\nimport { findLastTarget } from \"./dataManipulation\";\r\nimport { setMatchingState } from \"./matchingState\";\r\nimport { createSVG_Matching } from \"./svgMatching\";\r\n\r\nimport ETBD from \"../etbd/ETBD\"\r\nimport { nanoid } from \"nanoid\";\r\n\r\n\r\n\r\nexport default class MatchingDemo extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        let myState = setMatchingState();\r\n        this.state = myState;\r\n    };\r\n\r\n\r\n\r\n    beginSession = () => {\r\n\r\n        d3.select(\"#svgMatching\").on(\"click\", this.evaluateResponse);\r\n\r\n\r\n        let thisEvent = {\r\n            timestamp: performance.now(),\r\n            x: 0,\r\n            y: 0,\r\n            class: \"\",\r\n            co: 0,\r\n            points: 0,\r\n        }\r\n\r\n        var myEvents = [thisEvent]\r\n\r\n        this.setState({\r\n            timeStart: performance.now(),\r\n            events: myEvents,\r\n        })\r\n\r\n\r\n        d3.selectAll(\".introTexts\").remove()\r\n\r\n        let scaleTime = d3\r\n            .scaleLinear()\r\n            .domain([0, this.state.timeLimit])\r\n            .range([0, 350]);\r\n\r\n        let scaleResponses = d3\r\n            .scaleLinear()\r\n            .domain([0, this.state.recordHeight])\r\n            .range([0, 250]);\r\n\r\n        let recordHeight = this.state.recordHeight\r\n\r\n\r\n\r\n        let overallInterval = d3.interval((te) => {\r\n\r\n            let x1 = 35 + scaleTime((te - 250) / 1000)\r\n            let x2 = 35 + scaleTime(te / 1000)\r\n            let B1 = this.state.B1\r\n            let B2 = this.state.B2\r\n\r\n            let y = scaleResponses(\r\n                recordHeight - ((B1 + B2) % recordHeight)\r\n            );\r\n\r\n            d3.select('#svgRecord').append(\"line\")\r\n                .attr(\"class\", \"dataLine\")\r\n                .attr(\"x1\", x1)\r\n                .attr(\"y1\", y)\r\n                .attr(\"x2\", x2)\r\n                .attr(\"y2\", y)\r\n                .attr(\"stroke\", this.state.responseColor)\r\n                .attr(\"stroke-width\", 1)\r\n\r\n\r\n            this.setState({ progress: te })\r\n\r\n            if (te > this.state.timeLimit * 1000) {\r\n\r\n                let svgMatching = d3.select(\"#svgMatching\")\r\n                svgMatching.on(\"click\", null);\r\n                overallInterval.stop()\r\n            }\r\n        }, 250);\r\n\r\n\r\n        // The first two Random Intervals, between 1000 and 5000 ms, from an exponential with mean 1/RI mean. I use integers here to remove the microseconds. When the timers exceed the intervals, reinforcement becomes available.\r\n\r\n        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\r\n        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\r\n        d3.timeout((elapsed1) => {\r\n            this.setState({ r1ready: 1 });\r\n        }, int1);\r\n        d3.timeout((elapsed2) => {\r\n            this.setState({ r2ready: 1 });\r\n        }, int2);\r\n\r\n\r\n        // EVENTS PER SESSION (15s):\r\n        let r1min = `${1 / this.state.RI1 * this.state.timeLimit}`\r\n        let r2min = `${1 / this.state.RI2 * this.state.timeLimit}`\r\n\r\n    };\r\n\r\n\r\n\r\n    evaluateResponse = (e) => {\r\n        var timeStart = this.state.timeStart;\r\n        var eventTimeStamp = performance.now()\r\n        var events = this.state.events;\r\n\r\n        this.setState({\r\n            timeElapsed: eventTimeStamp - timeStart\r\n        });\r\n\r\n\r\n        // DEFAULT VALUES FOR THE NEW EVENT:\r\n        var respClass = \"be\",\r\n            co = 0,\r\n            // b1 = 0,\r\n            // b2 = 0,\r\n            // points1 = 0,\r\n            // points2 = 0,\r\n            newID = 0,\r\n            reinforced = false;\r\n\r\n\r\n        // PE: \r\n        var pe = events[events.length - 1]\r\n        newID = pe.id + 1\r\n\r\n        // CUMULATIVE FREQUENCIES:\r\n        var B1 = this.state.B1;\r\n        var B2 = this.state.B2;\r\n        var Be = this.state.Be;\r\n        var Points1 = this.state.Points1;\r\n        var Points2 = this.state.Points2;\r\n        //var Points3 = this.state.Points2;\r\n        var CO = this.state.CO;\r\n\r\n        // VARIABLES RELATED TO CHANGEOVER DELAYS:\r\n        var cod1_duration = this.state.cod1_duration\r\n        var cod1_status = this.state.cod1_status\r\n        var cod2_duration = this.state.cod2_duration\r\n        var cod2_status = this.state.cod2_status\r\n\r\n\r\n        // EVENT COORDINATES:\r\n        var x = e.offsetX;\r\n        var y = e.offsetY;\r\n\r\n\r\n\r\n\r\n\r\n        //                            EVALUATE EVENT CLASS: B1, B2, Be\r\n\r\n\r\n\r\n\r\n        // --------------------------------------------------------------   B1\r\n\r\n        if (d3.polygonContains(this.state.class1, [x, y])) {\r\n\r\n            respClass = \"b1\";\r\n            //b1 = events[events.length - 1].b1 + 1;\r\n            //b2 = events[events.length - 1].b2 + 0;\r\n\r\n            this.setState({\r\n                B1: B1 + 1,\r\n                //B2: B2,\r\n                //Be: Be,\r\n                responseColor: this.state.color1\r\n            })\r\n\r\n\r\n            // CHANGEOVER? \r\n            if (pe.class === \"b2\") {\r\n                co = 1;\r\n                // CO = CO + 1\r\n                this.setState({\r\n                    CO: CO + 1,\r\n                    responseColor: this.state.colorCO\r\n                })\r\n\r\n\r\n                // CODE ENABLED? \r\n                if (cod1_duration > 0) {\r\n                    cod2_status = \"off\"\r\n                    cod1_status = \"on\"\r\n                    reinforced = false\r\n                    this.setState({ cod1_status: \"on\", cod2_status: \"off\", codColor: \"#61DAFB\" })\r\n\r\n                    // START TIMER FOR COD 1\r\n                    let cod1 = d3.timeout((elapsedCOD1) => {\r\n                        cod1_status = \"off\"\r\n\r\n                        this.setState({ cod1_status: \"off\" })\r\n\r\n                        if (this.state.cod2_status === \"off\") {\r\n                            this.setState({ codColor: \"#282c34\" })\r\n                        }\r\n\r\n                        cod1.stop()\r\n\r\n                    }, cod1_duration);\r\n\r\n\r\n                    // IF NO COD IN EFFECT, CHECK FOR REINFORCEMENT: \r\n                } else {\r\n\r\n                    if (this.state.r1ready !== 0) {\r\n                        reinforced = true\r\n\r\n                        this.setState({\r\n                            Points1: Points1 + this.state.r1ready,\r\n                            Points2: Points2\r\n                        })\r\n\r\n                        this.setState({ r1ready: 0 });\r\n\r\n                        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\r\n\r\n                        let t1 = d3.timeout((elapsed1) => {\r\n                            this.setState({ r1ready: 1 });\r\n                        }, int1);\r\n                    }\r\n                }\r\n\r\n\r\n                // IF NOT CHANGEOVER, CHECK IF COD IS ON:\r\n            } else {\r\n\r\n                if (cod1_status === \"off\" & this.state.cod1_status === \"off\") {\r\n                    if (this.state.r1ready !== 0) {\r\n                        reinforced = true\r\n                        this.setState({\r\n                            Points1: Points1 + this.state.r1ready,\r\n                            Points2: Points2\r\n                        })\r\n                        this.setState({ r1ready: 0 });\r\n\r\n                        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\r\n\r\n                        let t1 = d3.timeout((elapsed1) => {\r\n                            this.setState({ r1ready: 1 });\r\n                        }, int1);\r\n                    }\r\n                } else {\r\n                    reinforced = false\r\n                    this.setState({\r\n                        Points1: Points1,\r\n                        Points2: Points2\r\n                    })\r\n                }\r\n            }\r\n        };  // _____ END of B1 ________\r\n\r\n\r\n\r\n        // --------------------------------------------------------------   B2\r\n        if (d3.polygonContains(this.state.class2, [x, y])) {\r\n            respClass = \"b2\";\r\n            //b1 = events[events.length - 1].b1 + 0;\r\n            //b2 = events[events.length - 1].b2 + 1;\r\n\r\n            this.setState({\r\n                //B1: B1,\r\n                B2: B2 + 1,\r\n                //Be: Be,\r\n                responseColor: this.state.color2\r\n            })\r\n\r\n\r\n            if (pe.class === \"b1\") {\r\n                co = 1;\r\n                CO += 1\r\n\r\n                this.setState({\r\n                    CO: CO,\r\n                    responseColor: this.state.colorCO\r\n                })\r\n\r\n                if (cod2_duration > 0) {\r\n                    cod1_status = \"off\"\r\n                    cod2_status = \"on\"\r\n                    reinforced = false\r\n                    this.setState({ cod1_status: \"off\", cod2_status: \"on\", codColor: \"#61DAFB\" })\r\n\r\n                    let cod2 = d3.timeout((elapsedCOD2) => {\r\n                        cod2_status = \"off\"\r\n                        this.setState({ cod2_status: \"off\" })\r\n\r\n                        if (this.state.cod1_status === \"off\") {\r\n                            this.setState({ codColor: \"#282c34\" })\r\n                        }\r\n\r\n                        cod2.stop()\r\n\r\n                    }, cod2_duration);\r\n\r\n                } else {\r\n\r\n                    if (this.state.r2ready !== 0) {\r\n                        reinforced = true\r\n                        this.setState({\r\n                            Points1: Points1,\r\n                            Points2: Points2 + this.state.r2ready\r\n                        })\r\n                        this.setState({ r2ready: 0 });\r\n\r\n                        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\r\n                        let t2 = d3.timeout((elapsed2) => {\r\n                            this.setState({ r2ready: 1 });\r\n                        }, int2);\r\n                    }\r\n                };\r\n\r\n\r\n            } else {\r\n\r\n                if (cod2_status === \"off\" & this.state.cod2_status === \"off\") {\r\n                    if (this.state.r2ready !== 0) {\r\n                        reinforced = true\r\n                        this.setState({\r\n                            Points1: Points1,\r\n                            Points2: Points2 + this.state.r2ready\r\n                        })\r\n                        this.setState({ r2ready: 0 });\r\n\r\n                        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\r\n                        let t2 = d3.timeout((elapsed2) => {\r\n                            this.setState({ r2ready: 1 });\r\n                        }, int2);\r\n                    }\r\n                } else {\r\n                    reinforced = false\r\n                    this.setState({\r\n                        Points1: Points1 + this.state.r1ready,\r\n                        Points2: Points2\r\n                    })\r\n                }\r\n            }\r\n        }  // _____ END of B2 ________\r\n\r\n\r\n\r\n        // DRAW ONLY IF TARGET RESPONSE: -----------------------------------\r\n\r\n        if (respClass === \"b1\" | respClass === \"b2\") {\r\n\r\n            // CUMULATIVE RECORD:  SVG, SCALES ---------------------------- \r\n            let svgRecord = d3.select(\"#svgRecord\");\r\n\r\n            let scaleTime = d3\r\n                .scaleLinear()\r\n                .domain([0, this.state.timeLimit])\r\n                .range([0, 350]);\r\n\r\n            let scaleResponses = d3\r\n                .scaleLinear()\r\n                .domain([0, this.state.recordHeight])\r\n                .range([0, 250]);\r\n\r\n\r\n\r\n            // LINE COORDINATES:\r\n\r\n            let LTR = findLastTarget(events)  // Last Target Response\r\n            let delta_t = LTR.timestamp - this.state.timeStart\r\n\r\n            //console.log(\"LTR: \", LTR)\r\n            //console.log(\"LTR.delta_t: \", delta_t / 1000)\r\n            // console.log(\"this.state.timeElapsed: \", this.state.timeElapsed / 1000)\r\n            // console.log(\"--------------------------------------------\")\r\n\r\n            //let px = 35 + scaleTime(timeElapsed / 1000);\r\n\r\n            //let px = 35 + scaleTime(delta_t / 1000)\r\n\r\n            //let px1 = 35 + scaleTime(this.state.timeElapsed / 1000);\r\n            let px = 35 + scaleTime(this.state.progress / 1000);\r\n\r\n            // let myBehavior = this.state.B1\r\n            // let myColor = this.state.color1\r\n\r\n            // if (respClass === \"b2\") {\r\n            //     myBehavior = this.state.B2\r\n            //     myColor = this.state.color2\r\n\r\n            // }\r\n\r\n            let myBehavior = this.state.B1 + this.state.B2\r\n            let py = scaleResponses(\r\n                this.state.recordHeight - ((myBehavior - 1) % this.state.recordHeight)\r\n            );\r\n\r\n            let py1 = scaleResponses(\r\n                this.state.recordHeight - ((myBehavior) % this.state.recordHeight)\r\n            );\r\n\r\n\r\n            // if (respClass === \"b2\") {\r\n            //     py = scaleResponses(\r\n            //         this.state.recordHeight - ((B2) % this.state.recordHeight)\r\n            //     );\r\n\r\n            //     py1 = scaleResponses(\r\n            //         this.state.recordHeight - ((B2 + 1) % this.state.recordHeight)\r\n            //     );\r\n            // }\r\n\r\n            // let py = scaleResponses(\r\n            //     this.state.recordHeight - ((B1 + B2) % this.state.recordHeight)\r\n            // );\r\n\r\n            // let py1 = scaleResponses(\r\n            //     this.state.recordHeight - ((B1 + B2 + 1) % this.state.recordHeight)\r\n            // );\r\n\r\n\r\n            // DRAW LINE     (but not if the needle needs reset):\r\n            if ((B1 + B2 + 1) % this.state.recordHeight !== 0) {\r\n\r\n                //if ((myBehavior + 1) % this.state.recordHeight !== 0) {\r\n                // simple line:\r\n                // svgRecord.append(\"line\").attr(\"class\", \"dataLine\")\r\n                //     .attr(\"x1\", px)\r\n                //     .attr(\"y1\", py)\r\n                //     .attr(\"x2\", px1)\r\n                //     .attr(\"y2\", py1)\r\n                //     .attr(\"stroke\", this.state.responseColor)\r\n                //     .attr(\"stroke-width\", 1)\r\n\r\n                svgRecord.append(\"line\").attr(\"class\", \"dataLine\")\r\n                    .attr(\"x1\", px)\r\n                    .attr(\"y1\", py)\r\n                    .attr(\"x2\", px)\r\n                    .attr(\"y2\", py1)\r\n                    .attr(\"stroke\", this.state.responseColor)\r\n                    .attr(\"stroke-width\", 1)\r\n            }\r\n\r\n\r\n\r\n            // DRAW CIRCLE:\r\n            svgRecord\r\n                .append(\"circle\").attr(\"class\", \"dataCircle\")\r\n                //.attr(\"cx\", 35 + scaleTime(this.state.timeElapsed / 1000))\r\n                .attr(\"cx\", 35 + scaleTime(this.state.progress / 1000))\r\n                .attr(\r\n                    \"cy\",\r\n                    scaleResponses(\r\n                        this.state.recordHeight - ((B1 + B2 + 1) % this.state.recordHeight)\r\n                    )\r\n                )\r\n                .attr(\"stroke\", this.state.responseColor)\r\n                .attr(\"stroke-width\", 1)\r\n                .attr(\"r\", () => {\r\n                    if (reinforced === false) {\r\n                        return 1\r\n                    } else {\r\n                        return 3\r\n                    }\r\n                })\r\n                .attr(\"fill\", () => {\r\n                    if (reinforced === false) {\r\n                        return '#282c34'\r\n                    } else {\r\n                        return this.state.responseColor\r\n                    }\r\n                })\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        //  PUSH NEW RESPONSE:  -----------------------------------\r\n        let newResponse = {\r\n            id: newID,\r\n            timestamp: eventTimeStamp,\r\n            delta_t: eventTimeStamp - timeStart,\r\n            class: respClass,\r\n            x: x,\r\n            y: y,\r\n            co: co,\r\n        };\r\n        events.push(newResponse);\r\n        this.setState({ events: events });\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n    resetDemo = () => {\r\n\r\n        // RESET ALL TIMERS: \r\n\r\n\r\n        // CLEAR CUMULATIVE RECORD:\r\n        let svgRecord = d3.select(\"#svgRecord\");\r\n        svgRecord.selectAll(\".dataLine\").remove();\r\n        svgRecord.selectAll(\".dataCircle\").remove();\r\n\r\n\r\n        // CLEAR SKINNER BOX :)\r\n        let svgMatching = d3.select(\"#svgMatching\");\r\n        svgMatching\r\n            .append(\"text\")\r\n            .attr(\"class\", \"introTexts\")\r\n            .attr(\"x\", 220)\r\n            .attr(\"y\", 70)\r\n            .attr(\"fill\", 'rgb(50, 50, 50)')\r\n            .attr(\"font-size\", \".9rem\")\r\n            .attr(\"font-family\", 'Montserrat')\r\n            .text(\"When ready, click START.\");\r\n\r\n\r\n        // RESET STATE: \r\n        let myState = setMatchingState();\r\n        this.setState(myState)\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        let recMargin = { top: 40, right: 40, bottom: 40, left: 40 }\r\n        let svgWidth = document.getElementById('svgRecord').clientWidth\r\n        let svgHeight = document.getElementById('svgRecord').clientHeight\r\n\r\n\r\n        var recWidth = svgWidth - recMargin.left - recMargin.right\r\n        var recHeight = svgHeight - recMargin.top - recMargin.bottom\r\n\r\n\r\n        let svgRecord = d3.select('#svgRecord');\r\n\r\n        let gRec = svgRecord.append('g')\r\n            .attr(\"transform\", `translate(${recMargin.left}, ${recMargin.top})`)\r\n            .style(\"font\", \"12px sans-serif\")\r\n\r\n\r\n        let scaleTime = d3\r\n            .scaleLinear()\r\n            .domain([0, this.state.timeLimit])\r\n            .range([0, recWidth]);\r\n\r\n        let scaleResponses = d3\r\n            .scaleLinear()\r\n            .domain([this.state.recordHeight, 0])\r\n            .range([recHeight, 0]);\r\n\r\n\r\n        let axisTime = d3.axisBottom(scaleTime)\r\n        axisTime.ticks(3)\r\n        axisTime.tickValues([5, 10, 15])\r\n\r\n        let axisResponses = d3.axisLeft(scaleResponses)\r\n\r\n        gRec.call(axisTime)\r\n        gRec.call(axisResponses)\r\n\r\n        // let gTime = svgRecord\r\n        //     .append(\"g\")\r\n        //     .style(\"font\", \"12px sans-serif\")\r\n        // .attr(\"transform\", `translate(${recMargin.left}, ${recMargin.top})`)\r\n\r\n\r\n\r\n        // let gResponses = svgRecord\r\n        //     .append(\"g\")\r\n        //     .attr(\"transform\", `translate(35, 10)`);\r\n\r\n        //================================\r\n\r\n        svgRecord.append(\"text\").text(\"responses\")\r\n            .attr(\"x\", 50).attr(\"y\", 20).attr(\"font-size\", \"1rem\").attr(\"fill\", 'rgb(200, 200, 200').attr(\"font-weight\", 300)\r\n\r\n        svgRecord.append(\"text\").text(\"time (s)\")\r\n            .attr(\"x\", 350).attr(\"y\", 250).attr(\"font-size\", \"1rem\").attr(\"fill\", 'rgb(200, 200, 200').attr(\"font-weight\", 300)\r\n\r\n\r\n        // svgRecord.append(\"text\").text(\"responses\")\r\n        //     .attr(\"x\", 50).attr(\"y\", 20).attr(\"font-size\", \"1rem\").attr(\"fill\", 'rgb(200, 200, 200').attr(\"font-weight\", 300)\r\n\r\n        // svgRecord.append(\"text\").text(\"time (s)\")\r\n        //     .attr(\"x\", 350).attr(\"y\", 250).attr(\"font-size\", \"1rem\").attr(\"fill\", 'rgb(200, 200, 200').attr(\"font-weight\", 300)\r\n\r\n\r\n\r\n        let svgMatching = createSVG_Matching()\r\n\r\n        // svgMatching\r\n        //     .append(\"rect\").attr(\"class\", \"lever\").attr(\"id\", 'lever1')\r\n        //     .attr(\"x\", this.state.lever1[0])\r\n        //     .attr(\"y\", this.state.lever1[1])\r\n        //     .attr(\"width\", this.state.lever1[2])\r\n        //     .attr(\"height\", this.state.lever1[3])\r\n        //     .attr(\"fill\", \"rgb(121, 47, 0)\")\r\n\r\n        // svgMatching\r\n        //     .append(\"rect\").attr(\"class\", \"lever\").attr(\"id\", 'lever2')\r\n        //     .attr(\"x\", this.state.lever2[0])\r\n        //     .attr(\"y\", this.state.lever2[1])\r\n        //     .attr(\"width\", this.state.lever2[2])\r\n        //     .attr(\"height\", this.state.lever2[3])\r\n        //     .attr(\"fill\", \"rgb(6, 45, 6)\")\r\n\r\n\r\n        // var circle = svg.append('polygon')\r\n        //     .attr('points', \"50,50 200,50 250,100 250,150 20,50\")\r\n        //     .attr('stroke', '#f00')\r\n        //     .attr('fill', 'none');\r\n\r\n\r\n        svgMatching\r\n            .append('polygon')\r\n            .attr(\"class\", \"lever\")\r\n            .attr(\"id\", 'lever1')\r\n            .attr('points', this.state.polygon1)\r\n            .attr(\"stroke\", \"rgb(121, 47, 0)\")\r\n            .attr(\"fill\", \"rgb(121, 47, 0)\")\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke-width\", 5)\r\n\r\n\r\n        svgMatching\r\n            .append('polygon')\r\n            .attr(\"class\", \"lever\")\r\n            .attr(\"id\", 'lever2')\r\n            .attr('points', this.state.polygon2)\r\n            .attr(\"stroke\", \"rgb(6, 45, 6)\")\r\n            .attr(\"fill\", \"rgb(6, 45, 6)\")\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke-width\", 5)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    sliderChange = (e) => {\r\n        this.setState({ cod1_duration: e.currentTarget.value * 1000 })\r\n        this.setState({ cod2_duration: e.currentTarget.value * 1000 })\r\n\r\n        var p0sec = document.getElementById(\"p0sec\")\r\n        var p2sec = document.getElementById(\"p2sec\")\r\n\r\n        if (e.currentTarget.value > 0) {\r\n            p0sec.classList.remove(\"inEffect\")\r\n            p0sec.classList.add(\"notInEffect\")\r\n            p2sec.classList.remove(\"notInEffect\")\r\n            p2sec.classList.add(\"inEffect\")\r\n        } else {\r\n            p2sec.classList.remove(\"inEffect\")\r\n            p2sec.classList.add(\"notInEffect\")\r\n            p0sec.classList.add(\"inEffect\")\r\n            p0sec.classList.remove(\"notInEffect\")\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"matchingMetaWrapper\">\r\n\r\n                <div id=\"FastMatchingDemo\" className=\"matchingWrapper\">\r\n\r\n                    <div className=\"top\">\r\n\r\n\r\n                        <div className=\"matching-results\" id=\"charts\">\r\n                            <svg\r\n                                id='svgRecord'\r\n                                style={{\r\n                                    width: \"100%\",\r\n                                    height: \"100%\",\r\n                                    backgroundColor: \"#282c34\",\r\n                                    color: \"rgb(179,179,179)\",\r\n                                    fontSize: \"22px\",\r\n                                }}\r\n                            >\r\n                            </svg>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n                    <div className=\"bottom\">\r\n                        <div id='demo'></div>\r\n                    </div>\r\n\r\n\r\n                    <div\r\n                        className=\"top-parameters\"\r\n                        style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            width: \"100%\",\r\n                            margin: \"auto\",\r\n                            border: \"0px solid #ff0000\",\r\n                            backgroundColor: 'transparent',\r\n                            justifyContent: 'space-between',\r\n                            justifyItems: 'space-between',\r\n\r\n\r\n                        }}\r\n                    >\r\n\r\n\r\n\r\n\r\n                        {/* <button\r\n                                id=\"btnCOD\"\r\n                                style={{\r\n                                    backgroundColor: this.state.codColor\r\n                                }}\r\n                            >\r\n                                COD\r\n                            </button>\r\n\r\n\r\n                            <div className=\"divSlider\">\r\n\r\n                                <p\r\n                                    className=\"inEffect\"\r\n                                    id=\"p0sec\"\r\n                                    title=\"No changeover delay\"\r\n                                >\r\n                                    0s\r\n                                </p>\r\n\r\n\r\n                                <input\r\n                                    type=\"range\"\r\n                                    id=\"codSlider\"\r\n                                    title=\"COD duration\"\r\n                                    min=\"0\"\r\n                                    max=\"2\"\r\n                                    step=\"2\"\r\n                                    value={this.state.cod1_duration}\r\n                                    list=\"codSliderList\"\r\n                                    onInput={this.sliderChange}\r\n                                >\r\n                                    {this.value}\r\n                                </input>\r\n\r\n                                <p\r\n                                    className=\"notInEffect\"\r\n                                    id=\"p2sec\"\r\n                                >\r\n                                    2s\r\n                                </p>\r\n\r\n                            </div> */}\r\n\r\n\r\n\r\n                        <div className='divStartReset'>\r\n                            <button\r\n                                id='btnStartMatching'\r\n                                onClick={this.beginSession}\r\n                                key={nanoid()}\r\n                            >\r\n                                START\r\n                                </button>\r\n                            <button\r\n                                id='btnResetMatching'\r\n                                onClick={this.resetDemo}\r\n                                key={nanoid()}\r\n                            >\r\n                                CLR\r\n                                </button>\r\n                        </div>\r\n\r\n\r\n                        <ETBD />\r\n\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n","F:\\react_portfolio\\src\\COMPONENTS\\header_files\\NavMain.js",[],"F:\\react_portfolio\\src\\DATA\\myData.js",[],"F:\\react_portfolio\\src\\DATA\\infoSkills.js",[],"F:\\react_portfolio\\src\\DATA\\infoRecent.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\recent\\recentProject.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\ReadMore.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\ImagesCarousel.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\ResearchStudy.js",["326"],"import React, { Component } from \"react\"\r\n//import parse from \"html-react-parser\"\r\nimport ReadMore from \"./ReadMore\";\r\nimport \"./study.sass\"\r\nimport { nanoid } from \"nanoid\"\r\n\r\nimport ImagesContainer from \"./ImagesContainer\";\r\n\r\n\r\nexport default class ResearchStudy extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div\r\n                className=\"item\"\r\n                content1={this.props.nickname}\r\n                key={Date.now() + Math.random()}\r\n                id={this.props.date}\r\n            >\r\n                <div className=\"itemContent item_study\" key={Math.random()}>\r\n\r\n                    {/* -------------------       RESEARCH STUDY      ---------------------- */}\r\n\r\n                    <div className=\"outer_column\" key={Date.now() + Math.random()}>\r\n\r\n                        <div className=\"row\" key={Math.random() + Date.now()}>\r\n\r\n                            <div className=\"study_info\" key={Math.random()}>\r\n\r\n                                <div className=\"titles\" key={Math.random()} >\r\n                                    <h1 className=\"title\" key={Math.random()}>\r\n                                        {this.props.title[0].toUpperCase()}\r\n\r\n                                    </h1>\r\n                                    <h2 className=\"subtitle\" key={Math.random()}>\r\n                                        {this.props.title[1]}\r\n                                    </h2>\r\n                                </div>\r\n\r\n\r\n                                <div className=\"summary\" key={Math.random()}  >\r\n                                    {this.props.description}\r\n                                </div>\r\n\r\n                                {/* <div className=\"divTech tech\" key={Math.random()} >  {this.props.tech}  </div> */}\r\n\r\n                            </div>\r\n\r\n\r\n                            <div className=\"study_info\" key={nanoid()}>\r\n\r\n                                <div className=\"irb\" key={nanoid()}>\r\n                                    <table key={nanoid()}>\r\n                                        <tbody>\r\n\r\n                                            {\r\n                                                this.props.studyInfo.map((item) =>\r\n\r\n                                                    < tr key={nanoid()}>\r\n                                                        <th key={nanoid()}>{Object.entries(item)[0][0]}:</th>\r\n                                                        <td key={nanoid()}>{Object.entries(item)[0][1]}</td>\r\n                                                    </tr>\r\n                                                )\r\n                                            }\r\n\r\n                                            < tr\r\n                                                key={nanoid()}\r\n\r\n                                            >\r\n                                                <th\r\n                                                    style={{ color: \"#fcbf6a\" }}\r\n                                                    key={nanoid()}\r\n                                                >\r\n                                                    <i>Tech:</i>\r\n                                                </th>\r\n\r\n                                                <td\r\n                                                    style={{ color: \"#fcbf6a\" }}\r\n                                                    key={nanoid()}\r\n                                                >\r\n                                                    <i>VB.Net, Excel/VBA</i>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n\r\n\r\n                                <div\r\n                                    style={{ display: \"flex\", flexDirection: \"row\" }}\r\n                                >\r\n                                    {/* <div className=\"divTech tech\" key={Math.random()} >  {this.props.tech}  </div> */}\r\n\r\n                                    <div className=\"links_col\" key={nanoid()} >  {this.props.links}</div>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className=\"rowImages\" key={nanoid()}>\r\n                            <div className=\"rowImages\" key={nanoid()}>\r\n                                <ImagesContainer props={this.props.img} />\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\Qual.js",["327"],"import React, { Component } from \"react\";\r\n//import parse from \"html-react-parser\"\r\nimport ReadMore from \"./ReadMore\";\r\n//import ImagesCarousel from \"./ImagesCarousel\";\r\nimport CollapseHook from \"./CollapseHook\"\r\n\r\n// import HammingDemo from \"../etbd_hamming/HammingDemo\"\r\n\r\n\r\n\r\nexport default class Qual extends Component {\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div\r\n                className=\"item\"\r\n                content1={this.props.qualDate}\r\n                key={this.props.date + this.props.title}\r\n                id={\"QualPhdDesign\"}\r\n\r\n                style={{\r\n                    fontFamily: this.props.fontFam,\r\n                    marginTop: \"3rem\",\r\n                    marginBottom: \"3rem\"\r\n                }}\r\n            >\r\n                <div className=\"itemContent\">\r\n\r\n\r\n                    {/* -------------------       QUAL      ---------------------- */}\r\n\r\n                    <div className=\"projectColumnLeft\">\r\n\r\n                        <span className=\"title\">{this.props.title}</span>\r\n\r\n                        <ReadMore maxChars={1000} overview={this.props.description} />\r\n\r\n                        {/* <p className=\"p-left\">\r\n                            To verify ETBD predictions, I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side. This was my first study as a principal investigator.\r\n                        </p> */}\r\n\r\n                        <CollapseHook\r\n                            collapsedTitle={\"Relevant work\"}\r\n\r\n                            collapsedText={\r\n                                <div className=\"divRefs\">  {this.props.references}  </div>\r\n                            }\r\n                        />\r\n\r\n                        <div className=\"links\" >  {this.props.links}  </div>\r\n\r\n                        {/* <div className=\"divTech\">  {Technologies}  </div> */}\r\n\r\n                    </div>\r\n\r\n\r\n                    <div\r\n                        className=\"chapterCol\"\r\n                        style={{ marginTop: \"20px\" }}\r\n                    >\r\n\r\n                        {/* <h1\r\n                            className=\"chapter-sub-title\"\r\n                            style={{\r\n                                fontSize: \"18px\",\r\n                                textAlign: \"center\",\r\n                            }}\r\n\r\n                        >Dissertation project</h1> */}\r\n\r\n                        <h2\r\n                            className=\"chapter-sub-title\"\r\n                            style={{\r\n                                fontSize: \"14px\",\r\n                                textAlign: \"left\",\r\n                                fontWeight: 600,\r\n                                fontVariant: \"normal\",\r\n                                color: \"cyan\",\r\n                                opacity: .8\r\n                            }}\r\n\r\n                        >\r\n                            Dissertation, Part One: Computational ADHD\r\n                        </h2>\r\n\r\n                        <p\r\n                            className=\"p-left\"\r\n                            style={{ color: \"#02aab0\", color: \"#ccc\" }}\r\n                        >\r\n                            I explored the effects of mutation rates from 5% to 100% on nine behavioral measures, <br /> <br />\r\n\r\n                            <ul type='square'>\r\n                                <li>at different reinforcement rates; </li>\r\n                                <li>at different reinforcement magnitudes; </li>\r\n                                <li>and under different discriminability conditions. </li>\r\n                            </ul >\r\n                        </p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        {/* <HammingDemo /> */}\r\n\r\n\r\n                        {/* <p className=\"p-left\" style={{ color: 'rgb(255, 128, 49)', }}>Then, I explored human behavior under different COD requirements and I compared it with the ETBD. <br /><br /></p>\r\n\r\n\r\n                        <p className=\"p-left\" style={{ color: 'rgb(255, 128, 49)', }}>Finally, I used traditional instruments to measure ADHD symptoms in the same participants and I compared the scores with measures of choice behavior.</p> */}\r\n\r\n                        {/* <p className=\"p-left\"\r\n                            style={{\r\n                                marginTop: \"2rem\",\r\n                                border: \"1px solid #888\",\r\n                                borderRadius: \"10px\",\r\n                                padding: \"0.5rem\",\r\n                                // backgroundColor: \"#fdff9f\",\r\n                                // backgroundColor: \"rgb(20, 33, 61)\",\r\n                                // backgroundColor: \"rgb(20, 33, 61)\",\r\n                                backgroundColor: \"rgba(5, 75, 87, 0.5)\",\r\n\r\n\r\n                                width: \"90%\",\r\n                                color: \"#fff\",\r\n                                opacity: \"0.8\",\r\n                                fontSize: \".9rem\",\r\n                                lineHeight: \"1.5rem\",\r\n                            }}\r\n\r\n                        ><b>Fast Matching.</b> To accomplish two and three I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side. This was my first study as a principal investigator.</p> */}\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\CollapseHook.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\EtbdEmergence.js",["328","329","330","331"],"import \"../sensitivity/mathematical_models.sass\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n// import \"../etbd_selection/selection.sass\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport ReadMore from \"./ReadMore\";\r\nimport CollapseHook from \"./CollapseHook\"\r\n\r\n//import DrawEtbdInteractive from \"../etbd_emergence/DrawEtbdInteractive\"\r\n\r\n//import EmergenceDemo from \"../etbd_emergence/EmergenceDemo\";\r\nimport EmergenceMain from \"../emergence/EmergenceMain\";\r\n\r\n\r\nexport default function EtbdEmergence(props) {\r\n\r\n    var [population, updatePopulation] = useState()\r\n\r\n\r\n    return (\r\n        <div\r\n            className=\"item\"\r\n            content1={props.qualDate}\r\n            key={nanoid()}\r\n            id={props.date}\r\n\r\n            style={{\r\n                fontFamily: props.fontFam,\r\n                marginTop: \"3rem\",\r\n                marginBottom: \"3rem\"\r\n            }}\r\n        >\r\n            <div key={nanoid()} className=\"itemContent\">\r\n\r\n\r\n                {/* -------------------      EMERGENCE demo      ---------------------- */}\r\n\r\n\r\n                <div key={nanoid()} className=\"projectColumnLeft\" >\r\n\r\n                    <span key={nanoid()} className=\"title\">{props.title}</span>\r\n\r\n                    <ReadMore maxChars={1000} overview={props.description} />\r\n\r\n                    <CollapseHook\r\n                        collapsedTitle={\"Relevant work\"}\r\n                        collapsedText={\r\n                            <div key={nanoid()} className=\"divRefs\">  {props.references}  </div>\r\n                        }\r\n                    />\r\n                    <div key={nanoid()} className=\"links\" >  {props.links}  </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n                <div key={nanoid()} className=\"demo_emergence\">\r\n                    {/* <EmergenceDemo /> */}\r\n                    <EmergenceMain />\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n{/* <div className=\"infoCarousel\">\r\n                                <p>The text changes, guiding the user through the simulation.</p>\r\n                            </div> */}","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\HammingDistances.js",["332","333"],"import React, { Component } from \"react\"\r\n//import parse from \"html-react-parser\"\r\nimport ReadMore from \"./ReadMore\"\r\n//import ImagesCarousel from \"./ImagesCarousel\";\r\nimport CollapseHook from \"./CollapseHook\"\r\n\r\nimport HammingDemo from \"../etbd_hamming/HammingDemo\"\r\nimport { nanoid } from \"nanoid\"\r\nimport LovelyOgive from \"./LovelyOgive\"\r\n\r\n\r\nexport default class HammingDistances extends Component {\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div\r\n                className=\"item\"\r\n                content1={this.props.qualDate}\r\n                key={this.props.date + this.props.title}\r\n                id={this.props.date}\r\n\r\n                style={{\r\n                    fontFamily: this.props.fontFam,\r\n                    marginTop: \"3rem\",\r\n                    marginBottom: \"3rem\"\r\n                }}\r\n            >\r\n                <div className=\"itemContent\">\r\n\r\n\r\n\r\n\r\n                    {/* -------------------       Hamming Demo      ---------------------- */}\r\n\r\n\r\n\r\n                    <div className=\"projectColumnLeft\">\r\n\r\n                        <span className=\"title\">{this.props.title}</span>\r\n\r\n                        <ReadMore maxChars={1000} overview={this.props.description} />\r\n\r\n                        {/* <p className=\"p-left\">\r\n                            To verify ETBD predictions, I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side. This was my first study as a principal investigator.\r\n                        </p> */}\r\n\r\n                        <CollapseHook\r\n                            collapsedTitle={\"Relevant work\"}\r\n\r\n                            collapsedText={\r\n                                <div className=\"divRefs\">  {this.props.references}  </div>\r\n                            }\r\n                        />\r\n\r\n                        <div className=\"links\" >  {this.props.links}  </div>\r\n\r\n                        {/* <div className=\"divTech\">  {Technologies}  </div> */}\r\n\r\n                    </div>\r\n\r\n\r\n                    <div\r\n                        className=\"chapterCol\"\r\n                        style={{ marginTop: \"20px\" }}\r\n                    >\r\n\r\n                        {/* <h1\r\n                            className=\"chapter-sub-title\"\r\n                            style={{\r\n                                fontSize: \"18px\",\r\n                                textAlign: \"center\",\r\n                            }}\r\n\r\n                        >Dissertation project</h1>\r\n\r\n                        <p\r\n                            className=\"p-left\"\r\n                            style={{ color: \"#02aab0\", }}\r\n                        >In part 1, I explored the interaction between mutation rate, reinforcement rate and magnitude, and COD in ETBD.<br /></p>\r\n */}\r\n\r\n\r\n                        {/* <HammingDemo /> */}\r\n\r\n                        <LovelyOgive />\r\n\r\n\r\n                        {/* <p className=\"p-left\" style={{ color: 'rgb(255, 128, 49)', }}>Then, I explored human behavior under different COD requirements and I compared it with the ETBD. <br /><br /></p>\r\n\r\n\r\n                        <p className=\"p-left\" style={{ color: 'rgb(255, 128, 49)', }}>Finally, I used traditional instruments to measure ADHD symptoms in the same participants and I compared the scores with measures of choice behavior.</p> */}\r\n\r\n                        {/* <p className=\"p-left\"\r\n                            style={{\r\n                                marginTop: \"2rem\",\r\n                                border: \"1px solid #888\",\r\n                                borderRadius: \"10px\",\r\n                                padding: \"0.5rem\",\r\n                                // backgroundColor: \"#fdff9f\",\r\n                                // backgroundColor: \"rgb(20, 33, 61)\",\r\n                                // backgroundColor: \"rgb(20, 33, 61)\",\r\n                                backgroundColor: \"rgba(5, 75, 87, 0.5)\",\r\n\r\n\r\n                                width: \"90%\",\r\n                                color: \"#fff\",\r\n                                opacity: \"0.8\",\r\n                                fontSize: \".9rem\",\r\n                                lineHeight: \"1.5rem\",\r\n                            }}\r\n\r\n                        ><b>Fast Matching.</b> To accomplish two and three I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side. This was my first study as a principal investigator.</p> */}\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\infoPublications.js",[],"F:\\react_portfolio\\src\\DATA\\infoTeaching.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\vitae\\infoConferences.js",[],"F:\\react_portfolio\\src\\DATA\\infoContact.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\LovelyOgive.jsx",["334","335"],"\r\n\r\nimport * as d3 from \"d3\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useRef } from \"react\";\r\n\r\n\r\n\r\nexport default function D3ScatterLogs(props) {\r\n\r\n    const refOgiveGroup = useRef()\r\n\r\n    useEffect(() => {\r\n\r\n        let margin = { top: 75, left: 75, bottom: 125, right: 75 }\r\n\r\n        let svgWidth = document.getElementById('svgScatterOgive').clientWidth\r\n        let svgHeight = document.getElementById('svgScatterOgive').clientHeight\r\n\r\n        let width = svgWidth - margin.left - margin.right\r\n        let height = svgHeight - margin.top - margin.bottom\r\n\r\n\r\n        //    ---------------   POSITION  ------------------------\r\n\r\n        let gOgive = d3.select(refOgiveGroup.current)\r\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`)\r\n\r\n\r\n\r\n\r\n        //    ---------------   DATA  ------------------------\r\n\r\n        // the data will come from props eventually:\r\n        let myData = [\r\n            { hdCod: 0.3, sensitivity: .1, coFrequency: 115 },\r\n            { hdCod: 1.3, sensitivity: .2, coFrequency: 80 },\r\n            { hdCod: 2.3, sensitivity: .5, coFrequency: 50 },\r\n            { hdCod: 3.3, sensitivity: .7, coFrequency: 30 },\r\n            { hdCod: 4.3, sensitivity: .83, coFrequency: 10 },\r\n            { hdCod: 5.3, sensitivity: .85, coFrequency: 5 },\r\n            { hdCod: 6.3, sensitivity: .9, coFrequency: 1 },\r\n            { hdCod: 7, sensitivity: .9, coFrequency: .1 },\r\n        ]\r\n\r\n\r\n        let rangeX = [0, width]\r\n        let rangeY = [height, 0]\r\n        let rangeY2 = [height, 0]\r\n\r\n        let X = d3.scaleLinear()\r\n            .range(rangeX)\r\n            .domain([0, 7])\r\n\r\n        let Y = d3.scaleLinear()\r\n            .range(rangeY)\r\n            .domain([0, 1.2])\r\n\r\n        let Y2 = d3.scaleLinear()\r\n            .range(rangeY2)\r\n            .domain([0, 120])\r\n\r\n\r\n\r\n        //    ---------------   AXES  ------------------------\r\n\r\n        gOgive.select(\".scatterX\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(\r\n                d3\r\n                    .axisBottom(X)\r\n                    .tickPadding(10)\r\n                    .tickValues([0, 1, 2, 3, 4, 5, 6, 7])\r\n            )\r\n            .selectAll(\"text\").style(\"font-size\", \"10px\")\r\n\r\n\r\n        gOgive.select(\".scatterY\")\r\n            .call(\r\n                d3\r\n                    .axisLeft(Y)\r\n                    .tickPadding(10)\r\n                    .tickValues([0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2])\r\n            )\r\n\r\n        gOgive.select(\".scatterY2\")\r\n            .attr('transform', `translate(${width}, 0)`)\r\n            .call(\r\n                d3\r\n                    .axisRight(Y2)\r\n                    .tickPadding(10)\r\n                    .tickValues([0, 20, 40, 60, 80, 100, 120])\r\n            )\r\n\r\n\r\n        //    ---------------   HOVER  ------------------------\r\n\r\n        // let onHover = (e, d) => {\r\n        //     let tgt = e.explicitOriginalTarget\r\n        //     let circleId = tgt.attributes[1].value\r\n\r\n        //     let bb = props.data.filter((item) => {\r\n        //         return circleId === `Schedule${item.schedule}`\r\n        //     })\r\n\r\n        //     let xx = parseInt(tgt.attributes[2].value)\r\n        //     let yy = parseInt(tgt.attributes[3].value)\r\n\r\n        //     e.target.style.stroke = \"cyan\"\r\n        //     e.target.style.fill = \"cyan\"\r\n\r\n        //     gOgive.append(\"text\")\r\n        //         .attr(\"x\", xx - 50)\r\n        //         .attr(\"y\", yy - 25)\r\n        //         //.text(`${bbb1}, ${bbb2}`)\r\n        //         .text(circleId)\r\n        //         .attr(\"class\", \"d3tooltip\")\r\n        //         .style(\"fill\", \"white\")\r\n        //         .attr(\"font-size\", \"14px\")\r\n        //         .attr(\"font-family\", \"Courier New\");\r\n        // };\r\n\r\n\r\n        // let hoverOver = (e, d) => {\r\n        //     d3.selectAll(\".d3tooltip\").remove()\r\n        //     e.target.style.stroke = \"white\"\r\n        //     e.target.style.fill = \"#ffffff89\"\r\n        // };\r\n\r\n\r\n        //   -----------------------   DATA POINTS   ------------------------\r\n\r\n        gOgive\r\n            .selectAll(\"circle\")\r\n            .data(myData)\r\n            .join(\r\n                enter => enter.append('circle').attr(\"class\", \"new\"),\r\n                // .on('mouseover', onHover),\r\n                // .on('mouseout', hoverOver),\r\n                update => update.attr(\"class\", \"update\"),\r\n                exit => exit.remove()\r\n            )\r\n            .transition()\r\n            .duration(1000)\r\n            // .on('mouseover', d => {\r\n            //     onHover(d)\r\n            // })\r\n            // .on('mouseout', hoverOver)\r\n            //.attr(\"id\", (d) => `Schedule${d.schedule}`)\r\n            .attr(\"cx\", (d) => X(d.hdCod))\r\n            .attr(\"cy\", (d) => Y(d.sensitivity))\r\n            .attr(\"r\", 3)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"fill\", \"#ffffff89\")\r\n            .attr(\"stroke\", \"white\");\r\n\r\n        gOgive\r\n            .selectAll(\"rect\")\r\n            .data(myData)\r\n            .join(\r\n                enter => enter.append('rect').attr(\"class\", \"newRect\"),\r\n                // .on('mouseover', onHover),\r\n                // .on('mouseout', hoverOver),\r\n                update => update.attr(\"class\", \"updateRect\"),\r\n                exit => exit.remove()\r\n            )\r\n            .transition()\r\n            .duration(1000)\r\n            // .on('mouseover', d => {\r\n            //     onHover(d)\r\n            // })\r\n            // .on('mouseout', hoverOver)\r\n            //.attr(\"id\", (d) => `Schedule${d.schedule}`)\r\n            .attr(\"x\", (d) => X(d.hdCod))\r\n            .attr(\"y\", (d) => Y2(d.coFrequency))\r\n            .attr(\"width\", 3)\r\n            .attr(\"height\", 3)\r\n\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"fill\", \"#ffffff89\")\r\n            .attr(\"stroke\", \"white\");\r\n\r\n\r\n        gOgive.append('text').text('Sensitivity')\r\n            .attr('x', -50)\r\n            .attr('y', -30)\r\n            .attr(\"fill\", \"#ffffff89\")\r\n\r\n        gOgive.append('text').text('Changeovers')\r\n            .attr('x', width - 50)\r\n            .attr('y', -30)\r\n            .attr(\"fill\", \"#ffffff89\")\r\n\r\n        gOgive.append('text').text('Class discriminability')\r\n            .attr('x', 50)\r\n            .attr('y', height + 60)\r\n            .attr(\"fill\", \"#ffffff89\")\r\n\r\n\r\n        gOgive.append('text').text('HD_same - HD_other')\r\n            .attr('x', 50)\r\n            .attr('y', height + 100)\r\n            .attr(\"fill\", \"#ffffff89\")\r\n\r\n\r\n            .selectAll(\"text\")\r\n            .data(myData)\r\n            .join(\r\n                enter => enter.append('rect').attr(\"class\", \"newRect\"),\r\n                // .on('mouseover', onHover),\r\n                // .on('mouseout', hoverOver),\r\n                update => update.attr(\"class\", \"updateRect\"),\r\n                exit => exit.remove()\r\n            )\r\n            .transition()\r\n            .duration(1000)\r\n            // .on('mouseover', d => {\r\n            //     onHover(d)\r\n            // })\r\n            // .on('mouseout', hoverOver)\r\n            //.attr(\"id\", (d) => `Schedule${d.schedule}`)\r\n            .attr(\"x\", (d) => X(d.hdCod))\r\n            .attr(\"y\", (d) => Y2(d.coFrequency))\r\n            .attr(\"width\", 3)\r\n            .attr(\"height\", 3)\r\n\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"fill\", \"#ffffff89\")\r\n            .attr(\"stroke\", \"white\");\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div\r\n            style={{\r\n                margin: \"auto\",\r\n                border: \"1px solid green\"\r\n            }}\r\n        >\r\n\r\n            <svg id='svgScatterOgive'\r\n                style={{\r\n                    margin: \"auto\",\r\n                    border: \"1px solid tomato\",\r\n                    width: \"400px\",\r\n                    height: \"400px\",\r\n                    margin: \"auto\",\r\n                    border: \"1px solid blue\",\r\n                }}\r\n            >\r\n\r\n                <g ref={refOgiveGroup}>\r\n\r\n                    <g className=\"scatterX\"></g>\r\n\r\n                    <g className=\"scatterY\"></g>\r\n                    <g className=\"scatterY2\"></g>\r\n\r\n                </g>\r\n\r\n            </svg>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingCard.jsx",["336","337","338"],"import { nanoid } from \"nanoid\"\r\nimport React from \"react\"\r\nimport { Fade } from \"react-reveal\"\r\n\r\n\r\nexport default class TeachingCard extends React.Component {\r\n    render() {\r\n        let fontClr = \"\"\r\n\r\n        if (this.props.schoolCode === \"agnes\") {\r\n            fontClr = \"fcb3ff\"\r\n        }\r\n        if (this.props.schoolCode === \"emory\" || this.props.schoolCode === \"oxford\") {\r\n            fontClr = \"edfd36\"\r\n        }\r\n        if (this.props.schoolCode === \"georgia\") {\r\n            fontClr = \"71b6ff\"\r\n        }\r\n\r\n\r\n        // if (!this.props.schools.includes(this.props.schoolCode)) {\r\n        //     return null\r\n        // }\r\n        if (this.props.teachingDetails === false) {\r\n            return null\r\n        }\r\n        else {\r\n            return (\r\n                <div\r\n                    className='divDetails'\r\n                // style={{ margin: \"0px\", fontSize: \"12px\", display: \"flex\", flexDirection: \"column\", textAlign: \"left\", width: \"100%\", padding: \"0px 5px \", color: \"#19f8e2\" }}\r\n                >\r\n\r\n                    <span\r\n                        style={{\r\n                            margin: \"1px\",\r\n                            textAlign: \"left\",\r\n                            width: \"100%\",\r\n                            color: \"#eee\",\r\n                            color: `#${fontClr}`\r\n                        }}\r\n                    >\r\n                        {this.props.institution}\r\n                    </span>\r\n\r\n\r\n\r\n\r\n\r\n                    <span\r\n                        style={{\r\n                            margin: \"1px\",\r\n                            textAlign: \"left\",\r\n                            width: \"100%\",\r\n                            color: \"#ddd\",\r\n                        }}\r\n                    >\r\n                        {this.props.semester}  {this.props.sections > 1 ? ` , ${this.props.sections} sections` : null}\r\n                    </span>\r\n\r\n\r\n\r\n                    <span\r\n                        style={{\r\n                            margin: \"1px\",\r\n                            textAlign: \"left\",\r\n                            width: \"100%\",\r\n                            color: \"#ddd\",\r\n                        }}\r\n                    >\r\n                        {this.props.role === \"Instructor\" ? null : this.props.role}\r\n                    </span>\r\n\r\n                </div >\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingAssistant.jsx",["339","340","341"],"import { nanoid } from \"nanoid\"\r\nimport React from \"react\"\r\nimport { Fade } from \"react-reveal\"\r\nimport { assistantRoles } from \"../../DATA/infoTeaching\"\r\nimport { Card } from \"react-bootstrap\"\r\n\r\n\r\n\r\nexport default class TeachingAssistant extends React.Component {\r\n    render() {\r\n\r\n        const infoTA = assistantRoles()\r\n\r\n        const TARoles = infoTA.map((item) => {\r\n            return (\r\n                <tr>\r\n                    <th\r\n                        style={{\r\n                            padding: \"5px\",\r\n                            width: \"220px\",\r\n\r\n                        }}\r\n                    >\r\n                        {item.name}\r\n                    </th>\r\n\r\n                    <td\r\n                        style={{\r\n                            padding: \"5px\",\r\n                            width: \"150px\",\r\n                        }}\r\n                    >\r\n                        {item.semester}\r\n                    </td>\r\n\r\n                    <td\r\n                        style={{\r\n                            padding: \"5px\",\r\n                            width: \"150px\",\r\n                        }}\r\n                    >\r\n                        for {item.instructor}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div\r\n\r\n                style={{\r\n                    width: \"100%\",\r\n                    margin: \"auto\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    //padding: \"0px\",\r\n                    //color: \"#19f8e2\", \r\n                }}\r\n            >\r\n\r\n                <div className='divDetails'>\r\n\r\n                    <table>\r\n                        {TARoles}\r\n\r\n                    </table>\r\n\r\n\r\n\r\n                </div >\r\n\r\n\r\n\r\n\r\n\r\n                {/* \r\n                <Card\r\n                    className=\"card\"\r\n                    key={nanoid()}\r\n                    style={{\r\n                        width: \"180px\",\r\n                        backgroundColor: \"transparent\",\r\n                        opacity: 1,\r\n                        boxShadow: \"1px 1px 4px #042e23\",\r\n                        border: \"0px solid #31D1B3\",\r\n                    }}\r\n                >\r\n\r\n                    <Card.Title\r\n                        style={{\r\n                            fontSize: \"12px\",\r\n                            textAlign: \"center\",\r\n                            //color: \"#31D1B3\",\r\n                            color: \"#bbb\",\r\n                            marginTop: \"10px\"\r\n                        }}\r\n                    >\r\n                        Teaching Assistant\r\n\r\n                    </Card.Title>\r\n\r\n                    <Card.Subtitle\r\n                        style={{\r\n                            fontSize: \"12px\",\r\n                            textAlign: \"center\",\r\n                            marginBottom: \"15px\",\r\n                            color: \"#bbb\"\r\n                        }}\r\n                    >\r\n                        Emory University <br />2007 - 2013\r\n\r\n                    </Card.Subtitle>\r\n\r\n\r\n                    {TARoles}\r\n\r\n                </Card>\r\n\r\n */}\r\n            </div >\r\n        )\r\n    }\r\n\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\header_files\\NavAcronyms.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\matching\\dataManipulation.js",["342"],"//import * as d3 from \"d3\"\r\n\r\nexport function findLastTarget(array1) {\r\n\r\n\r\n    // This works fine, use it after fixing the events.\r\n    // for now, it starts with one empty event, so this \r\n    // needs addressed. \r\n\r\n    let array2 = array1.filter((item) => {\r\n        if (item.class === \"b1\" | item.class === \"b2\") {\r\n            return item\r\n        }\r\n    })\r\n\r\n\r\n    //console.log(\"original: \", array1)\r\n    //console.log(\"filtered: \", array2)\r\n\r\n    if (array2.length === 0) {\r\n\r\n        //console.log(\"return original: \", array1[(array1.length - 1)])\r\n\r\n        return array1[(array1.length - 1)]\r\n\r\n    } else {\r\n\r\n        //console.log(\"return filtered: \", array2[(array2.length - 1)])\r\n\r\n        return array2[(array2.length - 1)]\r\n    }\r\n\r\n\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\matching\\matchingState.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\matching\\svgMatching.js",[],"F:\\react_portfolio\\src\\DATA\\infoNav.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\ImagesContainer.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd\\ETBD.js",["343","344","345","346","347","348"],"import React, { Component } from \"react\";\r\nimport * as d3 from \"d3\";\r\n//import { axisBottom, range, svg } from \"d3\";\r\nimport { recombineAndMutate } from \"./recombineAndMutate.js\"\r\n//import DrawChartPhenotypes from \"./ChartPhenotypes\"\r\nimport etbdState from \"./etbdState\"\r\nimport \"./etbd.sass\";\r\n\r\nimport { findLastTarget } from \"../matching/dataManipulation\"\r\n\r\nimport { drawETBD, addData } from \"./drawETBD\";\r\n//import { HistogramETBD } from \"./HistogramETBD\";\r\n\r\nexport default class ETBD extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = etbdState\r\n    }\r\n\r\n\r\n    showETBD = () => {\r\n        d3.selectAll(\".introTexts\").remove()\r\n\r\n        drawETBD(this.state.population);\r\n        //HistogramETBD(this.state.population);\r\n\r\n        d3.selectAll(\".lever\").style(\"opacity\", .15)\r\n\r\n\r\n        //  button to run ETBD:\r\n\r\n        let btnRunETBD = d3.select(\"#svgMatching\").append('g').attr(\"id\", \"btnRunETBD\")\r\n\r\n        btnRunETBD.append('text').text(\"run ETBD\")\r\n            .attr(\"x\", 505)\r\n            .attr(\"y\", 35)\r\n            .attr(\"width\", 100)\r\n            .attr(\"height\", 40)\r\n            .attr(\"color\", \"#222\")\r\n\r\n        btnRunETBD.append('rect').on(\"click\", this.beginSimulation)\r\n            .attr(\"x\", 480)\r\n            .attr(\"y\", 10)\r\n            .attr(\"width\", 120)\r\n            .attr(\"height\", 40)\r\n            .attr(\"fill\", \"#ccc\")\r\n            .attr(\"stroke\", \"#111\")\r\n            .attr(\"stroke-width\", 2)\r\n            .style(\"cursor\", \"pointer\")\r\n            .style(\"opacity\", .3)\r\n            .style(\"font-family\", 'Iceland')\r\n            .style(\"border\", '1 px solid #111')\r\n\r\n        // d3.select(\"#svgMatching\").append('text').text(\"run ETBD\")\r\n        //     .attr(\"x\", 505)\r\n        //     .attr(\"y\", 35)\r\n        //     .attr(\"width\", 100)\r\n        //     .attr(\"height\", 40)\r\n        //     .attr(\"color\", \"#222\")\r\n\r\n        // d3.select(\"#svgMatching\").append('rect').on(\"click\", this.beginSimulation)\r\n        //     .attr(\"x\", 480)\r\n        //     .attr(\"y\", 10)\r\n        //     .attr(\"width\", 120)\r\n        //     .attr(\"height\", 40)\r\n        //     .attr(\"fill\", \"#ccc\")\r\n        //     .attr(\"stroke\", \"#222\")\r\n        //     .attr(\"stroke-width\", 1)\r\n        //     .style(\"cursor\", \"pointer\")\r\n        //     .style(\"opacity\", .3)\r\n        //     .style(\"font-family\", 'Iceland')\r\n\r\n\r\n        // // display responses and reinforcers:\r\n\r\n        // // B1, r1\r\n        // d3.select(\"#svgMatching\").append('text').text(`${this.state.B1}`)\r\n        //     .attr(\"x\", 200)\r\n        //     .attr(\"y\", 100)\r\n        //     .attr(\"fill\", 'rgb(255, 128, 49)')\r\n\r\n        // d3.select(\"#svgMatching\").append('text').text(() => this.state.Points1)\r\n        //     .attr(\"x\", 200)\r\n        //     .attr(\"y\", 130)\r\n        //     .attr(\"stroke\", 'rgb(255, 128, 49)')\r\n\r\n        // // B2, r2\r\n        // d3.select(\"#svgMatching\").append('text').text(`${this.state.B2}`)\r\n        //     .attr(\"x\", 350)\r\n        //     .attr(\"y\", 100)\r\n        //     .attr(\"fill\", '#0c6e0c')\r\n\r\n        // d3.select(\"#svgMatching\").append('text').text(`${this.state.Points2}`)\r\n        //     .attr(\"x\", 350)\r\n        //     .attr(\"y\", 130)\r\n        //     .attr(\"stroke\", '#0c6e0c')\r\n\r\n\r\n    };\r\n\r\n\r\n    hideETBD = () => {\r\n        //d3.selectAll(\".axisLine\").remove()\r\n        d3.select(\"#groupHistogram\").remove()\r\n        d3.select(\"#btnRunETBD\").remove()\r\n        d3.selectAll(\".lever\").style(\"opacity\", .5)\r\n\r\n        d3.select(\"#svgMatching\").append(\"text\").text(\"When ready, click START.\")\r\n            .attr(\"class\", \"introTexts\")\r\n            .attr(\"x\", 220)\r\n            .attr(\"y\", 230)\r\n            .attr(\"fill\", 'rgb(50, 50, 50)')\r\n            .attr(\"font-size\", \".9rem\")\r\n            .attr(\"font-family\", 'Montserrat')\r\n\r\n    };\r\n\r\n\r\n    beginSimulation = () => {\r\n\r\n        //d3.select(\"#svgMatching\").on(\"click\", this.evaluateResponse);\r\n\r\n        let thisEvent = {\r\n            timestamp: performance.now(),\r\n            //population: genZero,\r\n            emission: 0,\r\n            class: \"\",\r\n            co: 0,\r\n            points: 0,\r\n        }\r\n\r\n        var myEvents = [thisEvent]\r\n\r\n        this.setState({\r\n            timeStart: performance.now(),\r\n            events: myEvents,\r\n        })\r\n\r\n\r\n        d3.selectAll(\".introTexts\").remove()\r\n\r\n        let scaleTime = d3\r\n            .scaleLinear()\r\n            .domain([0, this.state.timeLimit])\r\n            .range([0, 350]);\r\n\r\n        let scaleResponses = d3\r\n            .scaleLinear()\r\n            .domain([0, this.state.recordHeight])\r\n            .range([0, 250]);\r\n\r\n        let recordHeight = this.state.recordHeight\r\n\r\n\r\n\r\n\r\n        // The first two Random Intervals, between 1000 and 5000 ms, from an exponential with mean 1/RI mean. I use integers here to remove the microseconds. When the timers exceed the intervals, reinforcement becomes available.\r\n\r\n        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\r\n        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\r\n        d3.timeout((elapsed1) => {\r\n            this.setState({ r1ready: 1 });\r\n        }, int1);\r\n        d3.timeout((elapsed2) => {\r\n            this.setState({ r2ready: 1 });\r\n        }, int2);\r\n\r\n\r\n        // EVENTS PER SESSION (15s):\r\n        let r1min = `${1 / this.state.RI1 * this.state.timeLimit}`\r\n        let r2min = `${1 / this.state.RI2 * this.state.timeLimit}`\r\n\r\n\r\n\r\n        let overallInterval = d3.interval((te) => {\r\n\r\n            //addData(this.state.allPopulations);\r\n            //addData(this.state.population);\r\n\r\n            let x1 = 35 + scaleTime((te - this.state.irt) / 1000)\r\n            let x2 = 35 + scaleTime(te / 1000)\r\n            let B1 = this.state.B1\r\n            let B2 = this.state.B2\r\n\r\n            let y = scaleResponses(\r\n                recordHeight - ((B1 + B2) % recordHeight)\r\n            );\r\n\r\n            d3.select('#svgRecord').append(\"line\")\r\n                .attr(\"class\", \"dataLine\")\r\n                .attr(\"x1\", x1)\r\n                .attr(\"y1\", y)\r\n                .attr(\"x2\", x2)\r\n                .attr(\"y2\", y)\r\n                .attr(\"stroke\", this.state.responseColor)\r\n                .attr(\"stroke-width\", 1)\r\n\r\n\r\n            this.setState({ progress: te })\r\n\r\n\r\n            if (te > this.state.timeLimit * 1000) {\r\n                //let svgMatching = d3.select(\"#svgMatching\")\r\n                //svgMatching.on(\"click\", null);\r\n                overallInterval.stop()\r\n                console.log(\"etbd_state = \", this.state)\r\n\r\n            } else {\r\n\r\n                this.runETBD();\r\n\r\n            }\r\n\r\n        }, this.state.irt);\r\n\r\n\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n    //-----------------------________________________\r\n    runETBD = () => {\r\n        var timeStart = this.state.timeStart;\r\n        var eventTimeStamp = performance.now()\r\n        var events = this.state.events;\r\n\r\n        this.setState({\r\n            timeElapsed: eventTimeStamp - timeStart\r\n        });\r\n\r\n\r\n        // RANDOM EMISSION:\r\n        var population = this.state.population;\r\n        var allPopulations = this.state.allPopulations;\r\n\r\n        var randomEmission = 0;\r\n        let idx = d3.randomInt(0, 9)()\r\n        randomEmission = population[idx]\r\n\r\n        var respClass = \"be\";\r\n        var co = 0;\r\n        var newID = 0;\r\n        var reinforced = false;\r\n        //gen = this.state.gen;\r\n\r\n\r\n        // PE: \r\n        var pe = events[events.length - 1]\r\n        newID = pe.id + 1\r\n\r\n        // CUMULATIVE FREQUENCIES:\r\n        var B1 = this.state.B1;\r\n        var B2 = this.state.B2;\r\n        var Be = this.state.Be;\r\n        var Points1 = this.state.Points1;\r\n        var Points2 = this.state.Points2;\r\n        var CO = this.state.CO;\r\n\r\n        var class1 = this.state.class1;\r\n        var class2 = this.state.class2;\r\n\r\n\r\n        //                             EMISSION CLASS: B1, B2, Be\r\n\r\n        // -------------------------------------------------------------- Class 1\r\n\r\n        //if (randomEmission >= class1[0] & randomEmission <= class1[-1]) {\r\n        if (class1.includes(randomEmission)) {\r\n\r\n            let svgMatching = d3.select(\"#svgMatching\")\r\n            let lv1 = svgMatching.select(\"#lever1\")\r\n\r\n            lv1\r\n                .style(\"opacity\", .9)\r\n                .attr(\"transform\", \"scale(0.98)\")\r\n                .attr(\"transform\", \"translate(2, 2)\")\r\n                .attr(\"box-shadow\", \"3px 2px 22px 1px rgba(0, 0, 0, 0.24)\")\r\n\r\n\r\n\r\n            respClass = \"b1\";\r\n            this.setState({\r\n                B1: B1 + 1,\r\n                responseColor: this.state.color1\r\n            })\r\n\r\n            // CHANGEOVER? \r\n            if (pe.class === \"b2\") {\r\n                co = 1;\r\n                this.setState({\r\n                    CO: CO + 1,\r\n                    responseColor: this.state.colorCO\r\n                })\r\n            }\r\n\r\n            // CHECK FOR REINFORCEMENT: \r\n            if (this.state.r1ready !== 0) {\r\n                reinforced = true\r\n\r\n                this.setState({\r\n                    Points1: Points1 + this.state.r1ready,\r\n                    r1ready: 0,\r\n                });\r\n\r\n                let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\r\n\r\n                d3.timeout((elapsed1) => {\r\n                    this.setState({ r1ready: 1 });\r\n                }, int1);\r\n            };\r\n\r\n\r\n\r\n            lv1\r\n                .transition().duration(300).style(\"opacity\", .5)\r\n                .attr(\"transform\", \"scale(1)\")\r\n                .attr(\"transform\", \"translate(-2, -2)\")\r\n                .attr(\"box-shadow\", \"none\")\r\n\r\n        };\r\n\r\n\r\n\r\n\r\n        // -------------------------------------------------------------- Class 2\r\n\r\n        if (class2.includes(randomEmission)) {\r\n\r\n            let svgMatching = d3.select(\"#svgMatching\")\r\n            let lv2 = svgMatching.select(\"#lever2\")\r\n\r\n            lv2\r\n                .style(\"opacity\", .9)\r\n                .attr(\"transform\", \"scale(0.98)\")\r\n                .attr(\"transform\", \"translate(2, 2)\")\r\n                .attr(\"box-shadow\", \"3px 2px 22px 1px rgba(0, 0, 0, 0.24)\")\r\n\r\n\r\n            respClass = \"b2\";\r\n            this.setState({\r\n                B2: B2 + 1,\r\n                responseColor: this.state.color2\r\n            });\r\n\r\n            // CHANGEOVER? \r\n            if (pe.class === \"b1\") {\r\n                co = 1;\r\n                this.setState({\r\n                    CO: CO + 1,\r\n                    responseColor: this.state.colorCO\r\n                });\r\n            }\r\n\r\n            // CHECK FOR REINFORCEMENT: \r\n            if (this.state.r2ready !== 0) {\r\n                reinforced = true\r\n\r\n                this.setState({\r\n                    Points2: Points2 + this.state.r2ready,\r\n                    r2ready: 0,\r\n                });\r\n\r\n                let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\r\n\r\n                d3.timeout((elapsed2) => {\r\n                    this.setState({ r2ready: 1 });\r\n                }, int2);\r\n            };\r\n\r\n            lv2\r\n                .transition().duration(300).style(\"opacity\", .5)\r\n                .attr(\"transform\", \"scale(1)\")\r\n                .attr(\"transform\", \"translate(-2, -2)\")\r\n                .attr(\"box-shadow\", \"none\")\r\n        };\r\n\r\n\r\n\r\n        //    ----------------   CUMULATIVE RECORD  ----------------\r\n\r\n\r\n\r\n\r\n        if (respClass === \"b1\" | respClass === \"b2\") {\r\n\r\n\r\n            // SVG CUMULATIVE RECORD:\r\n            let svgRecord = d3.select(\"#svgRecord\");\r\n\r\n            let scaleTime = d3\r\n                .scaleLinear()\r\n                .domain([0, this.state.timeLimit])\r\n                .range([0, 350]);\r\n\r\n            let scaleResponses = d3\r\n                .scaleLinear()\r\n                .domain([0, this.state.recordHeight])\r\n                .range([0, 250]);\r\n\r\n            // LINE COORDINATES:\r\n\r\n            let LTR = findLastTarget(events)  // Last Target Response\r\n            let delta_t = LTR.timestamp - this.state.timeStart\r\n\r\n            let px = 35 + scaleTime(this.state.progress / 1000);\r\n\r\n            let myBehavior = this.state.B1 + this.state.B2\r\n\r\n            let py = scaleResponses(\r\n                this.state.recordHeight - ((myBehavior - 1) % this.state.recordHeight)\r\n            );\r\n\r\n            let py1 = scaleResponses(\r\n                this.state.recordHeight - ((myBehavior) % this.state.recordHeight)\r\n            );\r\n\r\n\r\n            // DRAW LINE     (but not if the needle needs reset):\r\n            if ((B1 + B2 + 1) % this.state.recordHeight !== 0) {\r\n                svgRecord.append(\"line\").attr(\"class\", \"dataLine\")\r\n                    .attr(\"x1\", px)\r\n                    .attr(\"y1\", py)\r\n                    .attr(\"x2\", px)\r\n                    .attr(\"y2\", py1)\r\n                    .attr(\"stroke\", this.state.responseColor)\r\n                    .attr(\"stroke-width\", 1)\r\n            }\r\n\r\n\r\n            // DRAW CIRCLE:\r\n            svgRecord\r\n                .append(\"circle\").attr(\"class\", \"dataCircle\")\r\n                //.attr(\"cx\", 35 + scaleTime(this.state.timeElapsed / 1000))\r\n                .attr(\"cx\", 35 + scaleTime(this.state.progress / 1000))\r\n                .attr(\r\n                    \"cy\",\r\n                    scaleResponses(\r\n                        this.state.recordHeight - ((B1 + B2 + 1) % this.state.recordHeight)\r\n                    )\r\n                )\r\n                .attr(\"stroke\", this.state.responseColor)\r\n                .attr(\"stroke-width\", 1)\r\n                .attr(\"r\", () => {\r\n                    if (reinforced === false) {\r\n                        return 1\r\n                    } else {\r\n                        return 3\r\n                    }\r\n                })\r\n                .attr(\"fill\", () => {\r\n                    if (reinforced === false) {\r\n                        return '#282c34'\r\n                    } else {\r\n                        return this.state.responseColor\r\n                    }\r\n                })\r\n\r\n\r\n            // SVG MATCHING:\r\n\r\n            //console.log(randomEmission)\r\n\r\n            //let svgMatching = d3.select(\"#svgMatching\")\r\n\r\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\r\n            //     .attr(\"x\", 180).attr(\"y\", 90).attr(\"font-size\", \".7rem\")\r\n\r\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\r\n            //     .attr(\"x\", 205).attr(\"y\", 90).attr(\"font-size\", \".7rem\")\r\n\r\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\r\n            //     .attr(\"x\", 180).attr(\"y\", 105).attr(\"font-size\", \".7rem\")\r\n\r\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\r\n            //     .attr(\"x\", 205).attr(\"y\", 105).attr(\"font-size\", \".8rem\")\r\n\r\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\r\n            //     .attr(\"x\", 230).attr(\"y\", 90).attr(\"font-size\", \".8rem\")\r\n\r\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\r\n            //     .attr(\"x\", 230).attr(\"y\", 105).attr(\"font-size\", \".8rem\")\r\n\r\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\r\n            //     .attr(\"x\", 255).attr(\"y\", 90).attr(\"font-size\", \".7rem\")\r\n\r\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\r\n            //     .attr(\"x\", 255).attr(\"y\", 105).attr(\"font-size\", \".7rem\")\r\n\r\n        };\r\n\r\n\r\n\r\n        //  RECORD THIS EVENT:\r\n        let newResponse = {\r\n            id: newID,\r\n            timestamp: eventTimeStamp,\r\n            class: respClass,\r\n            emission: randomEmission,\r\n            reinforced: reinforced,\r\n            population: population,\r\n            co: co,\r\n            // points1: points1,\r\n            // points2: points2,\r\n        };\r\n\r\n        events.push(newResponse);\r\n        this.setState({ events: events });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //               CREATE NEW_POPULATION:\r\n\r\n\r\n\r\n\r\n        var next_population = []\r\n\r\n        if (reinforced === false) {\r\n\r\n            for (let j = 0; j < population.length; j++) {\r\n\r\n                let idx1 = d3.randomInt(9)()\r\n                let p1 = population[idx1]\r\n                let idx2 = d3.randomInt(population.length)()\r\n                let p2 = population[idx2]\r\n\r\n                var phenRandom = recombineAndMutate(p1, p2, this.state.mutation_rate)\r\n\r\n                if (this.state.repertoire.includes(phenRandom)) {\r\n                    next_population.push(phenRandom)\r\n                } else {\r\n                    next_population.push(phenRandom % this.state.repertoire.length)\r\n                }\r\n\r\n            }\r\n\r\n            addData(next_population)\r\n            this.setState({ population: next_population })\r\n\r\n            // next_population.forEach(item => {\r\n            //     allPopulations.push(item)\r\n            // })\r\n\r\n            //this.setState({ allPopulations: allPopulations })\r\n\r\n            //this.setState({ responseColor: \"grey\" });\r\n\r\n\r\n        } else if (reinforced === true) {\r\n\r\n            var fitnessValues = []\r\n\r\n            population.forEach(phenotype => {\r\n                let phen_dif = Math.abs(phenotype - randomEmission)\r\n                fitnessValues.push(phen_dif)\r\n            })\r\n\r\n\r\n            // for each behavior in the population:\r\n            for (let j = 0; j < population.length; j++) {\r\n\r\n\r\n                // Get two parents:\r\n\r\n                var parents = []\r\n\r\n                while (parents.length < 2) {\r\n                    var randomFitness = parseInt(d3.randomExponential(1, 300)(this.state.Miu1) * 100);\r\n                    var relativeFitnessValues = []\r\n\r\n                    fitnessValues.forEach(fitness => {\r\n                        let fitness_dif = Math.abs(fitness - randomFitness)\r\n                        relativeFitnessValues.push(fitness_dif)\r\n                    })\r\n\r\n\r\n                    var closestIndex = d3.minIndex(relativeFitnessValues)\r\n                    var closestPhen = population[closestIndex]\r\n\r\n                    if (!parents.includes(closestPhen)) {\r\n                        parents.push(closestPhen)\r\n                    }\r\n                }\r\n\r\n\r\n                // CHILD BEHAVIOR:\r\n                //var phenFitness = recombineAndMutate(p1, p2, 0.50)\r\n                var child = recombineAndMutate(parents[0], parents[1], this.state.mutation_rate)\r\n\r\n                //console.log(\"emission: \", randomEmission, \"; parents: \", parents, \" --> \", child)\r\n\r\n\r\n                // IS THIS TO WRAP THE REPERTOIRE ... ?? \r\n                if (this.state.repertoire.includes(child)) {\r\n                    next_population.push(child)\r\n                } else {\r\n                    next_population.push(child % this.state.repertoire.length)\r\n                }\r\n\r\n                /* console.log(\"population: \", population, \"; \", randomEmission)\r\n                console.log(\"fitnessValues: \", fitnessValues)\r\n                console.log(\"randomFitness: \", randomFitness)\r\n                console.log(\"relFitnessVals: \", relativeFitnessValues)\r\n                console.log(\"closestPhen: \", closestPhen, \"; index: \", closestIndex, \"; parent: \", closestPhen)\r\n                console.log(\"-----------------------------\") */\r\n\r\n\r\n                // let idx1 = d3.randomInt(9)()\r\n                // let p1 = population[idx1]\r\n                // let idx2 = d3.randomInt(population.length)()\r\n                // let p2 = population[idx2]\r\n\r\n                //var phenFitness = recombineAndMutate(p1, p2, 0.50)\r\n\r\n                // if (this.state.repertoire.includes(phenFitness)) {\r\n                //     next_population.push(phenFitness)\r\n                // } else {\r\n                //     next_population.push(phenFitness % this.state.repertoire.length)\r\n                // }\r\n\r\n\r\n            };\r\n\r\n            addData(next_population)\r\n            this.setState({ population: next_population })\r\n\r\n            // next_population.forEach(item => {\r\n            //     allPopulations.push(item)\r\n            // })\r\n\r\n            // this.setState({ allPopulations: allPopulations })\r\n\r\n            //this.setState({ responseColor: \"grey\" });\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //}\r\n\r\n        //}, this.state.irt); // END OF TIMER\r\n\r\n    } // END OF FUNCTION runETBD()\r\n\r\n\r\n\r\n\r\n    resetETBD = () => {\r\n\r\n        // RESET ALL TIMERS: \r\n\r\n\r\n        // CLEAR CUMULATIVE RECORD:\r\n        let svgRecord = d3.select(\"#svgRecord\");\r\n        svgRecord.selectAll(\".dataLine\").remove();\r\n        svgRecord.selectAll(\".dataCircle\").remove();\r\n\r\n        let svgMatching = d3.select(\"#svgMatching\")\r\n        svgMatching.selectAll(\".histRect\").remove()\r\n\r\n\r\n        // CLEAR SKINNER BOX :)\r\n        //let svgMatching = d3.select(\"#svgMatching\");\r\n\r\n        // svgMatching\r\n        //     .append(\"text\")\r\n        //     .attr(\"class\", \"introTexts\")\r\n        //     .attr(\"x\", 220)\r\n        //     .attr(\"y\", 70)\r\n        //     .attr(\"fill\", 'rgb(50, 50, 50)')\r\n        //     .attr(\"font-size\", \".9rem\")\r\n        //     .attr(\"font-family\", 'Montserrat')\r\n        //     .text(\"When ready, click START.\");\r\n\r\n\r\n        // RESET STATE: \r\n        this.setState(etbdState)\r\n\r\n        let genZero = []\r\n        let n = this.state.N\r\n        for (let i = 0; i < n; i++) {\r\n            let b = d3.randomInt(1000)()\r\n            genZero.push(b)\r\n        }\r\n        this.setState({ population: genZero })\r\n        this.setState({ allPopulations: genZero })\r\n    };\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        // CREATE RANDOM POPULATION\r\n        let genZero = []\r\n        let n = this.state.N\r\n        for (let i = 0; i < n; i++) {\r\n            let b = d3.randomInt(1000)()\r\n            genZero.push(b)\r\n        }\r\n        this.setState({ population: genZero })\r\n        this.setState({ allPopulations: genZero })\r\n\r\n        d3.select(\"#btnStartETBD\").on(\"click\", this.beginSimulation)\r\n        d3.select(\"#btnResetETBD\").on(\"click\", this.resetETBD)\r\n    };\r\n\r\n\r\n\r\n\r\n    // BAR CHART REPERTOIRE ======================================      REPERTOIRE BAR CHART: \r\n\r\n\r\n\r\n    // var myPhens = phensTest.filter(item => item.present.length > 0)\r\n    // DrawChartPhenotypes(myPhens, [d3.min(this.state.repertoire), d3.max(this.state.repertoire)])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // svgMatching: ===========================================================  svgMatching\r\n    // var svg = d3\r\n    //     .select(\"#demo\")\r\n    //     .append(\"svg\")\r\n    //     .attr(\"id\", \"svgMatching\")\r\n    //     .attr(\"width\", \"100%\")\r\n    //     .attr(\"height\", \"100%\");\r\n\r\n    // svg.on(\"click\", this.runETBD);\r\n\r\n    // var svgETBD = d3\r\n    //     .select(\"#demoETBD\")\r\n    //     .append(\"svg\")\r\n    //     .attr(\"id\", \"svgETBD\")\r\n    //     .attr(\"width\", \"100%\")\r\n    //     .attr(\"height\", \"100%\");\r\n\r\n    // svgETBD.on(\"click\", this.runETBD);\r\n    //}\r\n\r\n\r\n    // sliderChange = (e) => {\r\n    //     this.setState({ cod1_duration: e.currentTarget.value * 1000 })\r\n    //     this.setState({ cod2_duration: e.currentTarget.value * 1000 })\r\n    // }\r\n\r\n    // dummyFunc = () => {\r\n\r\n    //     d3.select(\"#svgMatching\").append('text').text(`${this.state.B1}`)\r\n    //         .attr(\"x\", 200)\r\n    //         .attr(\"y\", 100)\r\n    //         .attr(\"fill\", 'rgb(255, 128, 49)')\r\n\r\n    //     d3.select(\"#svgMatching\").append('text').text(`${this.state.Points1}`)\r\n    //         .attr(\"x\", 200)\r\n    //         .attr(\"y\", 130)\r\n    //         .attr(\"stroke\", 'rgb(255, 128, 49)')\r\n\r\n    //     // B2, r2\r\n    //     d3.select(\"#svgMatching\").append('text').text(`${this.state.B2}`)\r\n    //         .attr(\"x\", 350)\r\n    //         .attr(\"y\", 100)\r\n    //         .attr(\"fill\", '#0c6e0c')\r\n\r\n    //     d3.select(\"#svgMatching\").append('text').text(`${this.state.Points2}`)\r\n    //         .attr(\"x\", 350)\r\n    //         .attr(\"y\", 130)\r\n    //         .attr(\"stroke\", '#0c6e0c')\r\n    // }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n\r\n            <>\r\n                {/* <div className=\"divShowHideETBD\">\r\n                    <button id=\"btnShowETBD\" onClick={this.showETBD}>Show ETBD</button>\r\n                    <button id=\"btnClearETBD\" onClick={this.hideETBD}>Hide</button>\r\n                </div> */}\r\n\r\n                <div className=\"divStartResetETBD\">\r\n                    <button id=\"btnStartETBD\" onClick={this.beginSimulation}>run ETBD</button>\r\n                    <button id=\"btnResetETBD\" onClick={this.resetETBD}>reset</button>\r\n                </div>\r\n\r\n            </>\r\n\r\n\r\n\r\n        );\r\n    };\r\n}\r\n//}\r\n","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\HammingDemo.js",["349","350"],"import \"./hamming_style.sass\";\r\nimport '../etbd_input/input_styles.sass'\r\n\r\nimport React from \"react\";\r\n//import parse from \"html-react-parser\"\r\n\r\nimport { hdValues } from \"./hdValues\";\r\nimport { hdCodValues } from \"./hdCodValues\";\r\n\r\n\r\n// import DrawPhenotypes from \"./drawPhenotypes\";\r\nimport HammingDistances from \"./HammingDistances\"\r\n\r\nimport InputTemplate from \"../etbd_input/InputTemplate\";\r\nimport HeatMapHook from \"./HeatmapHook\";\r\nimport TableHD from \"./TableHook\"\r\n\r\n\r\nexport default class HammingDemo extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            range1: 0,\r\n            limit1: 471,\r\n            boundary1: 511,\r\n            boundary2: 512,\r\n            limit2: 552,\r\n            range2: 1023,\r\n            hdValues: hdValues,\r\n            hdCodValues: hdCodValues,\r\n            lim1: 471,\r\n            lim2: 512,\r\n            lim3: 553,\r\n            hdSame: 0,\r\n            hdOther: 0\r\n        };\r\n\r\n\r\n\r\n        this.updateValue = this.updateValue.bind(this)\r\n        // this.decreaseValue = this.decreaseValue.bind(this)\r\n        // this.increaseValue = this.increaseValue.bind(this)\r\n\r\n        //this.handleFieldChange = this.handleFieldChange.bind(this)\r\n    };\r\n\r\n\r\n    updateValue = (e) => {\r\n        e.preventDefault();\r\n        let a22 = e.target.name\r\n        let b22 = e.target.value\r\n        this.setState({ [a22]: parseInt(b22) })\r\n        console.log(\"target name & value: \", a22, b22)\r\n    };\r\n\r\n\r\n    // handleFieldChange = (e) => {\r\n    //     //e.preventDefault();\r\n    //     let a22 = e.target.name\r\n    //     let b22 = e.target.value\r\n    //     this.setState({ [a22]: parseInt(b22) })\r\n    //     console.log(\"target name & value: \", a22, b22)\r\n    // };\r\n\r\n\r\n    decreaseValue = (e) => {\r\n        //e.preventDefault();\r\n        let a22 = e.target.name\r\n        let b22 = e.target.value\r\n        this.setState({ [a22]: parseInt(b22) })\r\n    };\r\n\r\n    increaseValue = (e) => {\r\n        //e.preventDefault();\r\n        let a22 = e.target.name\r\n        let b22 = e.target.value\r\n        this.setState({ [a22]: parseInt(b22) })\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        // let c1 = d3.range(471, 512)\r\n        // let c11 = d3.range(471, 553)\r\n        // let hdScatter = loadHammingDataOriginal(c11, c1)\r\n        // this.setState({ scatterData: hdScatter })\r\n        // console.log(this.state.lim1)\r\n    };\r\n\r\n\r\n    componentDidUpdate() {\r\n        //console.log(\"HammingDemo did update\")\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        var formFields = Object.entries(this.state).map((key, value) => {\r\n\r\n            let exceptions = ['hdValues', 'range1', 'range2', 'hdCodValues', \"lim1\", \"lim2\", \"lim3\", 'hdSame', 'hdOther', \"\"];\r\n\r\n            if (exceptions.includes(key[0]) === true) {\r\n                return\r\n            } else {\r\n                return (\r\n                    <InputTemplate\r\n                        key={key[0]}\r\n                        name={key[0]}\r\n                        value={key[1]}\r\n                        updateValue={this.updateValue}\r\n                    >\r\n                    </InputTemplate>\r\n                )\r\n            }\r\n        })\r\n\r\n        // var hdScatter = this.state.hdCodValues.filter(\r\n        //     item => item.variable > this.state.boundary1 - 3\r\n        //         & item.variable <= this.state.boundary1\r\n        //         & item.group > this.state.boundary1 - 3\r\n        //         & item.group < this.state.boundary2 + 3\r\n        // )\r\n        //console.log(hdScatter)\r\n\r\n\r\n\r\n        return (\r\n\r\n            <>\r\n                <div id=\"divHamming\">\r\n\r\n                    {/* <div\r\n                        style={{display: \"flex\", flexDirection: \"row\",}}>\r\n                        <svg id=\"svgHamming\"></svg>\r\n                    </div> */}\r\n\r\n\r\n\r\n                    {/* <Scatter2\r\n                        limit1={this.state.limit1}\r\n                        limit2={this.state.limit2}\r\n                        boundary1={this.state.boundary1}\r\n                        boundary2={this.state.boundary2}\r\n                    /> */}\r\n\r\n\r\n\r\n\r\n                    <HeatMapHook\r\n                        //myData={hdScatter}\r\n                        limit1={this.state.limit1}\r\n                        limit2={this.state.limit2}\r\n                        boundary1={this.state.boundary1}\r\n                        boundary2={this.state.boundary2}\r\n                    />\r\n\r\n\r\n\r\n                    {/* <TableHD\r\n                        limit1={this.state.limit1}\r\n                        limit2={this.state.limit2}\r\n                        boundary1={this.state.boundary1}\r\n                        boundary2={this.state.boundary2}\r\n                    /> */}\r\n\r\n                    <HammingDistances\r\n                        myData={this.state.hdValues}\r\n                        limit1={this.state.limit1}\r\n                        limit2={this.state.limit2}\r\n                        boundary1={this.state.boundary1}\r\n                        boundary2={this.state.boundary2}\r\n                    />\r\n\r\n\r\n                    {/* <DrawPhenotypes\r\n                        myData={this.state.hdValues}\r\n                        limit1={this.state.limit1}\r\n                        limit2={this.state.limit2}\r\n                        boundary1={this.state.boundary1}\r\n                        boundary2={this.state.boundary2}\r\n                    /> */}\r\n\r\n\r\n\r\n\r\n                    <div className=\"divButtons\">\r\n                        {formFields}\r\n                    </div>\r\n\r\n\r\n                    <div className=\"divButtons\">\r\n\r\n                        <button\r\n                            name=\"reset\"\r\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    limit1: 303,\r\n                                    boundary1: 343,\r\n                                    boundary2: 344,\r\n                                    limit2: 384,\r\n                                })\r\n                            }}\r\n                        >???</button>\r\n\r\n\r\n                        <button\r\n                            name=\"reset\"\r\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    limit1: 407,\r\n                                    boundary1: 447,\r\n                                    boundary2: 448,\r\n                                    limit2: 488,\r\n                                })\r\n                            }}\r\n                        >1.4</button>\r\n\r\n\r\n                        <button\r\n                            name=\"reset\"\r\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    limit1: 215,\r\n                                    boundary1: 255,\r\n                                    boundary2: 256,\r\n                                    limit2: 296,\r\n                                })\r\n                            }}\r\n                        >3.4</button>\r\n\r\n\r\n                        <button\r\n                            name=\"reset\"\r\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    limit1: 471,\r\n                                    boundary1: 511,\r\n                                    boundary2: 512,\r\n                                    limit2: 552,\r\n                                })\r\n                            }}\r\n                        >4.4</button>\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                    {/* <div\r\n                        id=\"divHeatMap\"\r\n                        style={{\r\n                            //backgroundColor: \"#446b58\",\r\n\r\n                        }}\r\n                    >\r\n                        <svg id=\"svgHeatMap\"></svg>\r\n\r\n                        <div id=\"ttHeatMap\"></div>\r\n                    </div > */}\r\n\r\n\r\n                    {/* {drawHeatMap(\r\n                        // this.state.hdCodValues.filter(\r\n                        //     item => item.variable > 506\r\n                        //         & item.variable <= 511\r\n                        //         & item.group > 506\r\n                        //         & item.group < 517\r\n                        // ),\r\n                        hdScatter,\r\n                        [],\r\n                        //this.state.tick_values_heat,\r\n                        [this.state.limit1, this.state.boundary1],\r\n                    )\r\n                    } */}\r\n\r\n\r\n                </div>\r\n            </>\r\n\r\n        )\r\n    }\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\EmergenceMain.js",["351","352","353","354","355","356","357","358","359","360","361","362","363"],"import \"./fade_effects.sass\"\r\n\r\nimport \"../sensitivity/mathematical_models.sass\";\r\nimport \"../etbd_emergence/emergence.sass\";\r\nimport \"./emergence22.sass\";\r\n\r\nimport \"./selection/toggle_reinforcement.sass\"\r\n\r\nimport React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { dec2binList } from \"../etbd_hamming/hammingFunctions\";\r\nimport * as d3 from \"d3\";\r\n\r\nimport { Fade } from \"react-reveal\"\r\n\r\nimport { NeonStart, NeonEmission, NeonEmissionV2, NeonCreateNewPopulation, NeonSelection, NeonRecombination, NeonMutation } from \"./NeonsFunctionality\";\r\n\r\n\r\n// import ToggleReinforcement from \"./selection/ToggleReinforcement\"\r\n// import EmergenceSettings from \"./EmergenceSettings\"\r\n// import { ToggleButtonGroup, ToggleButton, Button } from \"react-bootstrap\"\r\n\r\n\r\nimport AgentHistory from \"./AgentHistory\"\r\n\r\nimport ButtonNext from \"./ButtonNext\"\r\n\r\n//import RecombinationDemo from \"./recombination/RecombinationDemo\"\r\nimport MutationDemo from \"./mutation/MutationDemo\"\r\n\r\nimport Emission from \"./emission/Emission\"\r\nimport Selection from \"./selection/Selection\"\r\nimport { Button } from \"react-bootstrap\"\r\n\r\nimport Rec2 from \"./rechooks/Rec2\"\r\n\r\nimport { MyD3Component } from \"./SvgRecord\"\r\n\r\n\r\nlet defaultGeneration = []\r\n\r\nfor (let i = 0; i < 5; i++) {\r\n\r\n    defaultGeneration.push(\r\n        {\r\n            phenotype: \"\",\r\n            genotype: \"\",\r\n            status: \"\",      // emited, reinforced, or empty; used in emergence22.sass for styling;\r\n            fitness: 0,\r\n            mutant: false\r\n        }\r\n    )\r\n}\r\n\r\n\r\nexport default class EmergenceMain extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            agentHistory: [{ tn: -2, population: defaultGeneration }, { tn: -1, population: defaultGeneration }],\r\n\r\n            popSize: 5,\r\n            nrBits: \"\",\r\n\r\n            demoState: \"start\",\r\n            low: 0,\r\n            high: 63,\r\n\r\n            ems: \"?\",\r\n            reinforced: false,\r\n            rnfMessage: \"not reinforced\",\r\n            rnfColor: \"#555\",\r\n\r\n            parents: [],\r\n            genotype1: [0, 0, 0, 0, 0, 0],\r\n            genotype2: [1, 1, 1, 1, 1, 1],\r\n\r\n            childPhenotype: 57,\r\n            childGenotype: [0, 1, 0, 1, 1, 1, 1],\r\n\r\n            mutatedPhenotype: \"?\",\r\n            mutatedGenotype: [\"?\", \"?\", \"?\", \"?\"],\r\n\r\n            fitnessZero: \"\",\r\n            allParents: [],\r\n            allChildren: [],\r\n\r\n            fitness_colors: [\"#000\", \"#ff6200\"],\r\n            responses: 0,\r\n\r\n            miu1: 15\r\n        }\r\n\r\n        this.initializeAgent = this.initializeAgent.bind(this)\r\n        this.doSomething = this.doSomething.bind(this)\r\n        this.recombinePair = this.recombinePair.bind(this)\r\n        this.addChildItem = this.addChildItem.bind(this)\r\n        this.automateRecombination = this.automateRecombination.bind(this)\r\n    }\r\n\r\n\r\n    componentWillMount() {\r\n        console.log(\"EmergenceMain willMount; get rid of it.\")\r\n        let binaryHigh = this.state.high.toString(2)\r\n        this.setState({ nrBits: binaryHigh.length })\r\n        let cg = Array.apply(null, Array(binaryHigh.length)).map(function (x, i) { return \"\"; })\r\n        this.setState({ childGenotype: cg })\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.initializeAgent()\r\n    }\r\n\r\n    initializeAgent = () => {\r\n\r\n        this.setState({ demoState: \"emission\" })\r\n\r\n        let bits = this.state.nrBits\r\n\r\n        let population = []\r\n        let generation = []\r\n        let n = this.state.popSize\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let x = d3.randomInt(this.state.low, this.state.high)()\r\n            population.push(x)\r\n        }\r\n\r\n        population.sort((a, b) => a > b)\r\n\r\n        this.setState({ parentPopulation: population })\r\n        this.setState({ population: population })\r\n\r\n        // AGENT HISTORY:\r\n        let history = this.state.agentHistory\r\n\r\n        population.forEach((item) => {\r\n            let bitString = dec2binList(bits, parseInt(item))\r\n            generation.push({\r\n                phenotype: parseInt(item),\r\n                genotype: bitString,\r\n                status: \"\"\r\n            })\r\n        })\r\n\r\n        history.push({\r\n            tn: 0,\r\n            population: generation\r\n        })\r\n\r\n        this.setState({ agentHistory: history })\r\n    }\r\n\r\n\r\n\r\n    // EMIT A RESPONSE\r\n\r\n    doSomething = (value) => {\r\n        let history = this.state.agentHistory\r\n        let gen = history[history.length - 1]\r\n        let pop = gen.population\r\n\r\n        let individual = pop.filter(item => item.phenotype === parseInt(value))\r\n\r\n        individual[0].status = \"emited\"\r\n\r\n        this.setState({ ems: parseInt(value) })\r\n        this.setState({ agentHistory: history })\r\n        this.setState({ demoState: \"selection\" })\r\n    }\r\n\r\n\r\n\r\n\r\n    reinforceResponse = () => {\r\n\r\n        let ah = this.state.agentHistory\r\n        let gn = ah[ah.length - 1]\r\n\r\n        if (this.state.reinforced === false) {\r\n            let ems = gn.population.filter(item => item.status === \"emited\")[0]\r\n            ems.status = \"reinforced\"\r\n\r\n            this.setState({ fitnessZero: ems.phenotype })\r\n\r\n            gn.population.forEach((item) => {\r\n                // let rf = Math.abs(item.phenotype - ems.phenotype)\r\n                // item.fitness = rf\r\n\r\n                let rd = Math.abs(item.phenotype - ems.phenotype)\r\n                let a = 1 / this.state.miu1\r\n                let rf = a * Math.E ** (-a * item.phenotype)\r\n                let rf1 = 1 - Math.E ** (-a * item.phenotype)\r\n\r\n\r\n                item.fitness = rf.toFixed(3)\r\n\r\n                // console.log('-------------')                \r\n                // console.log(\"rd: \", rd)\r\n                // console.log(\"miu1: \", this.state.miu1)\r\n                // console.log(\"a: \", a)\r\n                // console.log(\"rf: \", rf)\r\n            })\r\n\r\n            let chosenFitness = d3.randomExponential(1 / this.state.miu1)(this.state.low, this.state.high)\r\n\r\n\r\n            console.log(\"chosenFitness: \", parseInt(chosenFitness))\r\n            // let myVals = []\r\n            // for (let i = 0; i < 1000000; i++) {\r\n            //     // let chosenFitness = d3.randomExponential(1, 5)(this.state.miu1)\r\n            //     let chosenFitness = d3.randomExponential(1 / this.state.miu1)(this.state.low, this.state.high)\r\n\r\n            //     let cf = parseInt(chosenFitness)\r\n            //     myVals.push(1 / chosenFitness)\r\n            // }\r\n\r\n            // console.log(\"miu = 5, (1, 5): \", d3.mean(myVals), d3.median(myVals))\r\n\r\n            // let chosenFitness = d3.randomExponential(1, 5)(this.state.miu1) * 1000\r\n            // let cf = parseInt(chosenFitness)\r\n\r\n\r\n\r\n\r\n        } else {\r\n            let ems = gn.population.filter(item => item.status === \"reinforced\")[0]\r\n            ems.status = \"emited\"\r\n        }\r\n\r\n\r\n        this.setState({ agentHistory: ah })\r\n\r\n        if (this.state.reinforced === false) {\r\n            this.setState({\r\n                reinforced: true,\r\n                rnfMessage: \"reinforced\",\r\n                rnfColor: \"yellow\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                reinforced: false,\r\n                rnfMessage: \"not reinforced\",\r\n                rnfColor: \"#555\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //  SELECT PARENTS:\r\n\r\n    doSomethingSelect = (event) => {\r\n        let value = event.currentTarget.value\r\n        let bits = this.state.nrBits\r\n        let gn = dec2binList(bits, parseInt(value))\r\n        let ppp = this.state.parents\r\n        let allP = this.state.allParents\r\n\r\n        ppp.push(parseInt(value))\r\n\r\n        if (ppp.length === 1) {\r\n            this.setState({ parents: ppp })\r\n            allP.unshift(ppp)\r\n        }\r\n\r\n        if (ppp.length === 2) {\r\n            ppp.sort((a, b) => a > b)\r\n            allP[0] = ppp\r\n            this.setState({ allParents: allP, parents: [] })\r\n        }\r\n\r\n        if (allP.length >= this.state.popSize && ppp.length === 2) {\r\n            let pair = allP[0]\r\n            let idx = 0\r\n\r\n            let p1 = parseInt(pair[0])\r\n            let p2 = parseInt(pair[1])\r\n            let g1 = dec2binList(this.state.nrBits, p1)\r\n            let g2 = dec2binList(this.state.nrBits, p2)\r\n\r\n            allP[idx] = []\r\n\r\n            this.setState({\r\n                parents: [p1, p2],\r\n                genotype1: g1,\r\n                genotype2: g2,\r\n                allParents: allP,\r\n                demoState: \"recombination\"\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n\r\n    twoFitParents = () => {\r\n        let parents = []\r\n\r\n        let miu = 15\r\n        let fitnessZero = this.state.ems\r\n        let range = [this.state.low, this.state.high]\r\n\r\n        let parentPopulation = this.state.agentHistory[this.state.agentHistory.length - 1].population\r\n        let population = []\r\n\r\n        parentPopulation.forEach((item) => {\r\n            population.push(item.phenotype)\r\n        })\r\n\r\n        while (parents.length < 2) {\r\n            let randomFitness = parseInt(d3.randomExponential(1 / miu)(range[0], range[1]))\r\n            let phen1 = fitnessZero - randomFitness\r\n            let phen2 = fitnessZero + randomFitness\r\n\r\n            if (population.includes(phen1) && !parents.includes(phen1) && parents.length < 2) {\r\n                parents.push(phen1)\r\n            }\r\n\r\n            if (population.includes(phen2) && !parents.includes(phen2) && parents.length < 2) {\r\n                parents.push(phen2)\r\n            }\r\n        }\r\n\r\n        return parents\r\n    }\r\n\r\n\r\n\r\n\r\n    automateSelection = () => {\r\n        let parentPopulation = this.state.agentHistory[this.state.agentHistory.length - 1].population\r\n        let bits = this.state.nrBits\r\n        let allP = this.state.allParents\r\n        let i = 0\r\n\r\n\r\n        for (i; i < this.state.popSize; i++) {\r\n\r\n            let pair = []\r\n\r\n            if (this.state.reinforced === true) {\r\n                pair = this.twoFitParents()\r\n            } else {\r\n                let p1 = parentPopulation[Math.floor(Math.random() * parentPopulation.length)]\r\n                let p2 = parentPopulation[Math.floor(Math.random() * parentPopulation.length)]\r\n                pair = [p1.phenotype, p2.phenotype]\r\n            }\r\n\r\n            pair.sort((a, b) => a > b)\r\n            allP.unshift(pair)\r\n        }\r\n\r\n        this.setState({\r\n            allParents: allP,\r\n            demoState: \"recombination\"\r\n        })\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    recombinePair = (event) => {\r\n        let x0 = event.currentTarget.id\r\n        let x = event.currentTarget.id.split(\"_\")\r\n        let idx = parseInt(x[1]) - 1\r\n        let allPairs = this.state.allParents\r\n\r\n        allPairs[idx] = []\r\n\r\n        let v = event.currentTarget.value.split(\",\")\r\n        let p1 = parseInt(v[0])\r\n        let p2 = parseInt(v[1])\r\n        let g1 = dec2binList(this.state.nrBits, p1)\r\n        let g2 = dec2binList(this.state.nrBits, p2)\r\n\r\n        this.setState({\r\n            parents: [p1, p2],\r\n            genotype1: g1,\r\n            genotype2: g2,\r\n            allParents: allPairs\r\n        })\r\n    };\r\n\r\n\r\n\r\n    automateRecombination = () => {\r\n        let bits = this.state.nrBits\r\n        let allP = this.state.allParents\r\n        let allC = []\r\n\r\n        allP.forEach(pair => {\r\n            let p1 = pair[0]\r\n            let p2 = pair[1]\r\n            let g1 = dec2binList(bits, p1)\r\n            let g2 = dec2binList(bits, p2)\r\n\r\n            let cg = []\r\n            let cp = 0\r\n\r\n            for (let i = 0; i < g1.length; i++) {\r\n                let gene = \"\"\r\n                let power = g1.length - i - 1\r\n\r\n\r\n                let rnd = Math.random()\r\n                if (rnd < .5) {\r\n                    gene = parseInt(g1[i])\r\n                } else {\r\n                    gene = parseInt(g2[i])\r\n                }\r\n\r\n                cg.push(gene)\r\n                let slotValue = gene * 2 ** power\r\n                cp = cp + slotValue\r\n            }\r\n\r\n\r\n            let childItem = this.createChildItem(cp)\r\n            allC.push(childItem)\r\n        })\r\n\r\n\r\n        this.setState({\r\n            allChildren: allC,\r\n            demoState: \"mutation\"\r\n        })\r\n    };\r\n\r\n\r\n\r\n\r\n    createChildItem = (value) => {\r\n        let a = parseInt(value)\r\n        let b = dec2binList(this.state.nrBits, a)\r\n        let rf = Math.abs(a - this.state.fitnessZero)\r\n        return (\r\n            {\r\n                phenotype: a,\r\n                genotype: b,\r\n                fitness: rf,\r\n                mutant: false,\r\n                status: \"\"\r\n            }\r\n        )\r\n    };\r\n\r\n    addChildItem = (newChild) => {\r\n        let childItem = this.createChildItem(newChild)\r\n        let ac = this.state.allChildren\r\n        ac.push(childItem)\r\n\r\n        if (ac.length >= this.state.popSize) {\r\n            this.setState({\r\n                parents: [],\r\n                allChildren: ac,\r\n                demoState: \"mutation\"\r\n            })\r\n        }\r\n\r\n        let allPairs = this.state.allParents\r\n        let pair = allPairs.find(item => item.length === 2)\r\n\r\n        if (pair) {\r\n            let idx = allPairs.indexOf(pair)\r\n            let p1 = parseInt(pair[0])\r\n            let p2 = parseInt(pair[1])\r\n            let g1 = dec2binList(this.state.nrBits, p1)\r\n            let g2 = dec2binList(this.state.nrBits, p2)\r\n\r\n            allPairs[idx] = []\r\n\r\n            this.setState({ parents: [p1, p2], genotype1: g1, genotype2: g2, allParents: allPairs, allChildren: ac })\r\n        }\r\n    };\r\n\r\n    mutateChild = (event) => {\r\n        let x = event.currentTarget.id.split(\"_\")\r\n        let idx = parseInt(x[1]) - 1\r\n        let childItem = this.state.allChildren[idx]\r\n\r\n        this.setState({ childPhenotype: childItem.phenotype })\r\n        this.setState({ childGenotype: childItem.genotype })\r\n        this.setState({ mutatedGenotype: childItem.genotype })\r\n        this.setState({ mutantIndex: idx })\r\n    }\r\n\r\n\r\n    mutateChildAutomatic = (event) => {\r\n        let x = event.currentTarget.id.split(\"_\")\r\n        let idx = parseInt(x[1]) - 1\r\n        let childItem = this.state.allChildren[idx]\r\n\r\n        this.setState({ childPhenotype: childItem.phenotype })\r\n        this.setState({ childGenotype: childItem.genotype })\r\n        this.setState({ mutatedGenotype: childItem.genotype })\r\n        this.setState({ mutantIndex: idx })\r\n    }\r\n\r\n\r\n    replaceOriginal = (mutatedChild) => {\r\n        let ac = this.state.allChildren\r\n\r\n        let p = parseInt(mutatedChild)\r\n        let g = dec2binList(this.state.nrBits, p)\r\n        let childIndex = this.state.mutantIndex\r\n\r\n        ac[childIndex].phenotype = p\r\n        ac[childIndex].genotype = g\r\n        ac[childIndex].mutant = true\r\n        ac[childIndex].status = \"mutant\"\r\n\r\n        this.setState({ allChildren: ac })\r\n    }\r\n\r\n\r\n\r\n    automateMutation = () => {\r\n        let ac = this.state.allChildren\r\n        let idx1 = Math.floor(Math.random() * this.state.popSize)\r\n        let idx2 = Math.floor(Math.random() * this.state.nrBits)\r\n\r\n        this.setState({ mutantIndex: idx1 })\r\n\r\n        let child = ac[idx1]\r\n\r\n        let childP = child.phenotype\r\n        let childG = child.genotype\r\n\r\n        this.setState({\r\n            childPhenotype: childP,\r\n            childGenotype: childG,\r\n            //mutantGenotype: child.genotype,\r\n        })\r\n\r\n        let mg = []\r\n        let mutant = 0\r\n\r\n        // Re-create the original genotype; when it reaches the bit\r\n        //  with index === idx2, flip it; results in a mutated genotype. \r\n        child.genotype.forEach((bit, i) => {\r\n            if (i !== idx2) {\r\n                mg.push(bit)\r\n            } else {\r\n                mg.push(Math.abs(1 - bit))\r\n            }\r\n        })\r\n\r\n\r\n        // Compute the mutated phenotype:\r\n        mg.forEach((bit, i) => {\r\n            let power = mg.length - 1 - i\r\n            let slotValue = bit * 2 ** power\r\n            mutant += slotValue\r\n        })\r\n\r\n        child.genotype = mg\r\n        child.phenotype = mutant\r\n        child.status = \"mutant\"\r\n        this.setState({\r\n            allChildren: ac,\r\n        })\r\n    };\r\n\r\n\r\n    swapPopulations = () => {\r\n        let ah = this.state.agentHistory\r\n        let ac = this.state.allChildren\r\n        let tn = ah[ah.length - 1].tn\r\n\r\n        let newPopulation = {\r\n            tn: tn + 1,\r\n            population: ac\r\n        }\r\n\r\n        ah.push(newPopulation)\r\n\r\n        // if (tn > 0) {\r\n        //     ah = ah,slice(1)\r\n        // }\r\n\r\n        this.setState({\r\n            agentHistory: ah,\r\n            allParents: [],\r\n            allChildren: [],\r\n            ems: \"\",\r\n            reinforced: false,\r\n            demoState: \"emission\",\r\n        })\r\n    };\r\n\r\n\r\n\r\n    automateOneGeneration = () => {\r\n        let ah = this.state.agentHistory\r\n        let gn = ah[ah.length - 1]\r\n        let tn = gn.tn\r\n\r\n        // RANDOM EMISSION:\r\n        let myEms = gn.population[Math.floor(Math.random() * gn.population.length)]\r\n        myEms.status = \"emited\"\r\n        this.setState({ ems: myEms.phenotype })\r\n        this.setState({ demoState: \"selection\" })\r\n\r\n        // SELECT PARENTS:\r\n        this.automateSelection()\r\n\r\n        // RECOMBINE:\r\n        this.automateRecombination()\r\n\r\n        // MUTATE ONE GENOTYPE:\r\n        setTimeout(() => {\r\n            this.automateMutation()\r\n            this.swapPopulations()\r\n        }, 1000)\r\n    };\r\n\r\n\r\n\r\n    automateMultiple = () => {\r\n        let x = 5\r\n        for (let i = 0; i < x; i++) {\r\n            setTimeout(this.automateOneGeneration())\r\n        }\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        let AllTheParents = []\r\n        let AllTheChildren = []\r\n        // let fitness_gradient = d3.scaleLinear()\r\n        //     .domain([1, 99])\r\n        //     .range([this.state.fitness_colors[0], this.state.fitness_colors[1]])\r\n\r\n\r\n        if (this.state.allParents) {\r\n            for (let i = 0; i < this.state.popSize; i++) {\r\n                let pairId = `pair_${i + 1}`\r\n                let pair = this.state.allParents[i] ? this.state.allParents[i] : [\"\", \"\"]\r\n\r\n                // let pair = [\"\", \"\"]\r\n                // if (this.state.allParents[i]) {\r\n                //     pair = this.state.allParents[i]\r\n                // }\r\n\r\n                AllTheParents.push(\r\n\r\n                    <button\r\n                        disabled={false}\r\n                        id={pairId}\r\n                        value={pair}\r\n                        key={nanoid()}\r\n                        className=\"btn-pair\"\r\n                        onClick={this.recombinePair}\r\n                    >\r\n                        <span>{pair[0]}</span>\r\n                        <span>{pair[1]}</span>\r\n\r\n                    </button>\r\n                )\r\n            }\r\n        };\r\n\r\n\r\n\r\n        if (this.state.allChildren) {\r\n            for (let i = 0; i < this.state.popSize; i++) {\r\n                let childId = `child_${i + 1}`\r\n                let childPhen = this.state.allChildren[i] ? this.state.allChildren[i].phenotype : \"\"\r\n                let childStatus = this.state.allChildren[i] ? this.state.allChildren[i].status : \"\"\r\n\r\n                // let childPhen = \"\"\r\n                // let childStatus = \"\"\r\n\r\n                // if (this.state.allChildren[i]) {\r\n                //     childPhen = this.state.allChildren[i].phenotype\r\n                //     childStatus = this.state.allChildren[i].status\r\n                // }\r\n\r\n                AllTheChildren.push(\r\n                    <button\r\n                        title={childStatus}\r\n                        id={childId}\r\n                        value={childPhen}\r\n                        key={nanoid()}\r\n                        className=\"btn-child\"\r\n                        onClick={this.mutateChild}\r\n                    // style={{\r\n                    //     background: fitness_gradient(i * 10),\r\n                    //     border: `1px solid ${fitness_gradient(i * 10)}`\r\n                    // }}\r\n\r\n                    >\r\n                        {childPhen}\r\n                    </button>\r\n                )\r\n            }\r\n        };\r\n\r\n\r\n\r\n        return (\r\n\r\n\r\n            <div key={nanoid()} className=\"row_emergence\">\r\n\r\n\r\n\r\n                <div key={nanoid()} className='columnA' >\r\n\r\n                    {/* <NeonStart\r\n                        demoState={this.state.demoState}\r\n                        randomPopulation={this.initializeAgent}\r\n                    /> */}\r\n\r\n\r\n\r\n                    {/* <div className=\"div_col\" key={nanoid()}>\r\n                        <MyD3Component\r\n                            // data={[10, 4, 12]}\r\n                            data={this.state.agentHistory}\r\n                        />\r\n                    </div> */}\r\n\r\n\r\n                    {/* <div className=\"div_col\" key={nanoid()}>\r\n                        <AgentHistory\r\n                            data={this.state.agentHistory.slice(1)}\r\n                        />\r\n                    </div> */}\r\n\r\n\r\n                    <div className=\"div_col\" key={nanoid()}>\r\n\r\n                        {/* <div className=\"div_row\">\r\n                            <NeonEmission demoState={this.state.demoState} />\r\n                        </div> */}\r\n\r\n\r\n                        <div className=\"div_row\">\r\n                            <NeonEmissionV2 demoState={this.state.demoState} />\r\n                        </div>\r\n\r\n\r\n                        <div\r\n                            style={{\r\n                                width: \"90%\",\r\n                                height: \"50px\",\r\n                                margin: \"10px auto\",\r\n                                padding: \"0\",\r\n                                justifyContent: \"space-between\",\r\n                                boxShadow: this.state.demoState === \"emission\" ? '0 0 10px #fff' : \"0 0 0px\"\r\n\r\n                            }}\r\n                            className=\"div_row\"\r\n                            key={nanoid()}\r\n                        >\r\n\r\n                            <Emission\r\n                                population={this.state.agentHistory[this.state.agentHistory.length - 1].population}\r\n                                doSomething={this.doSomething}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"div_row\">\r\n\r\n                            <Button\r\n                                variant={\r\n                                    this.state.reinforced === false ? \"outline-info\" : \"warning\"\r\n                                }\r\n\r\n                                disabled={\r\n                                    this.state.demoState === \"selection\" ? false : true\r\n                                }\r\n\r\n                                title=\"Click to reinforce it\"\r\n                                id=\"btnReinforce\"\r\n                                className=\"toggle_reinforcement\"\r\n                                onClick={this.reinforceResponse}\r\n                            // style={{\r\n                            //     color: this.state.rnfColor,\r\n                            // }}\r\n                            >\r\n                                {this.state.rnfMessage}\r\n                            </Button>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <div className='columnB' key={nanoid()} >\r\n\r\n\r\n\r\n\r\n                    <div\r\n                        style={{\r\n                            width: \"90%\",\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            margin: \"auto\",\r\n                            padding: \"10px\",\r\n                            boxShadow: \"-2px -2px 10px 1px #222\",\r\n\r\n                        }}\r\n                        key={nanoid()}\r\n                    >\r\n\r\n\r\n\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                flexDirection: \"row\",\r\n                                width: \"100%\",\r\n                                margin: \"auto\",\r\n                            }}\r\n                        >\r\n\r\n                            <NeonSelection\r\n                                demoState={this.state.demoState}\r\n                                reinforced={this.state.reinforced}\r\n                                allParents={this.state.allParents}\r\n                                popSize={this.state.popSize}\r\n                            />\r\n\r\n                            <button\r\n                                className=\"btn-automate\"\r\n                                onClick={this.automateSelection}\r\n                                key={nanoid()}\r\n                                title=\"automate it\"\r\n\r\n                            >\r\n                            </button>\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                        <Selection\r\n                            demoState={this.state.demoState}\r\n                            population={this.state.agentHistory[this.state.agentHistory.length - 1].population}\r\n                            doSomethingSelect={this.doSomethingSelect}\r\n                            reinforced={this.state.reinforced}\r\n                        />\r\n\r\n                        <div className=\"parents-wrapper\" key={nanoid()}>\r\n                            {AllTheParents}\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    <div\r\n                        key={nanoid()}\r\n                        style={{\r\n                            width: \"90%\",\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            margin: \"20px auto\",\r\n                            padding: \"10px\",\r\n                            boxShadow: \"-2px -2px 10px 1px #222\",\r\n\r\n                        }}\r\n                    >\r\n\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                flexDirection: \"row\",\r\n                                width: \"100%\",\r\n                                margin: \"auto auto 15px auto\",\r\n                            }}\r\n                        >\r\n\r\n                            < NeonRecombination demoState={this.state.demoState} />\r\n\r\n                            <button\r\n                                className=\"btn-automate\"\r\n                                onClick={this.automateRecombination}\r\n                                key={nanoid()}\r\n                                title=\"automate it\"\r\n                            >\r\n                            </button>\r\n\r\n                        </div>\r\n\r\n\r\n                        <Rec2\r\n                            nrBits={this.state.nrBits}\r\n                            demoState={this.state.demoState}\r\n                            low={this.state.low}\r\n                            high={this.state.high}\r\n                            addChildItem={this.addChildItem}\r\n                            parent1={this.state.parents[0]}\r\n                            parent2={this.state.parents[1]}\r\n                            g1={this.state.genotype1}\r\n                            g2={this.state.genotype2}\r\n                        />\r\n                    </div>\r\n\r\n\r\n\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            width: \"90%\",\r\n                            padding: \"0px\",\r\n                            margin: \"auto\",\r\n                            boxShadow: \"-2px -2px 10px 1px #222\",\r\n\r\n                        }}\r\n                    >\r\n\r\n\r\n\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                flexDirection: \"row\",\r\n                                width: \"100%\",\r\n                                height: \"fit-content\",\r\n                                margin: \"auto\",\r\n                                padding: \"10px\",\r\n                            }}\r\n                        >\r\n\r\n                            <NeonMutation demoState={this.state.demoState} />\r\n\r\n\r\n\r\n\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className=\"children-wrapper\" key={nanoid()}  >\r\n                            {AllTheChildren}\r\n\r\n                            <button\r\n                                className=\"btn-swap\"\r\n                                onClick={this.swapPopulations}\r\n                                key={nanoid()}\r\n                                title=\"Replace parents with children and start again.\"\r\n                            >\r\n                            </button>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n                        <div\r\n                            className=\"div_row\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                width: \"90%\",\r\n                                height: \"fit-content\",\r\n                                margin: \"15px auto auto auto\",\r\n                                padding: \"0\",\r\n                                justifyContent: \"space-between\"\r\n\r\n                            }}\r\n                        >\r\n\r\n\r\n                            <MutationDemo\r\n                                genotype={this.state.childGenotype}\r\n                                addToNext={this.replaceOriginal}\r\n                                demoState={this.state.demoState}\r\n                                nrBits={this.state.nrBits}\r\n                                childPhenotype={this.state.childPhenotype}\r\n                            />\r\n\r\n\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n            </div >\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\drawETBD.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\TableHook.js",["364","365"],"import \"./hamming_style.sass\";\r\nimport \"./phenotypes.sass\";\r\n//import \"./scatter.sass\";\r\n\r\n\r\n//import parse from \"html-react-parser\"\r\nimport * as d3 from \"d3\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nimport { dec2bin } from \"./hammingFunctions\";\r\n\r\n\r\n\r\n\r\nfunction HammingCodTable(props) {\r\n\r\n    const refHDTable = useRef()\r\n\r\n    const [data, setData] = useState([])\r\n    const [class1, setclass1] = useState([])\r\n    const [classes, setClasses] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        let size = 2\r\n        let boundary2 = props.boundary1 + 1\r\n        let class1 = d3.range(props.boundary1 - size, boundary2)\r\n        let classes = d3.range(props.boundary1 - size, boundary2 + 1 + size)\r\n\r\n\r\n        let myData = []\r\n        class1.forEach((b1) => {\r\n            let g1 = dec2bin(5, b1)\r\n            classes.forEach((b12) => {\r\n                let g12 = dec2bin(5, b12)\r\n                let hd = 0\r\n                for (let i = 0; i < g12.length; i++) {\r\n                    if (g1[i] !== g12[i]) {\r\n                        hd = hd + 1\r\n                    }\r\n                }\r\n                myData.push(\r\n                    { b1: b1, b12: b12, hd: hd, g1: g1, g12: g12 }\r\n                )\r\n            })\r\n        })\r\n        console.log(myData)\r\n        setData(myData)\r\n        setclass1(class1)\r\n        setClasses(classes)\r\n\r\n    }, [props])\r\n\r\n\r\n    useEffect(() => {\r\n        let margin = { top: 50, left: 100, bottom: 50, right: 50 }\r\n        let svgWidth = 550\r\n        let svgHeight = 250\r\n        let width = svgWidth - margin.left - margin.right\r\n        let height = svgHeight - margin.top - margin.bottom\r\n\r\n        // let X_Linear = d3.scaleLinear()\r\n        //     .range([0, width])\r\n        //     .domain([d3.min(classes) - 1, d3.max(classes) + 1])\r\n\r\n        // let Y_Linear = d3.scaleLinear()\r\n        //     .range([height, 0])\r\n        //     .domain([d3.max(class1) + 1, d3.min(class1) - 1])\r\n\r\n        // let Z_Linear = d3.scaleLinear()\r\n        //     .range([2, 12])\r\n        //     .domain([0, 10])\r\n\r\n\r\n        //let svg = d3.select(refSVG.current)\r\n        let tableHD = d3.select(refHDTable.current).attr(\"transform\",\r\n            `translate(${margin.left},${margin.top})`)\r\n\r\n        // scatter2.select(\".scatter2X\")\r\n        //     .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        //     .call(\r\n        //         d3\r\n        //             .axisBottom(X_Linear)\r\n        //             .tickValues(classes)\r\n        //             .tickPadding(11)\r\n        //     )\r\n        //     .selectAll('text')\r\n        //     .transition()\r\n        //     .duration(1000)\r\n        //     .attr('fill', (d) => {\r\n        //         if (d <= props.boundary1) {\r\n        //             return 'lime'\r\n        //         } else {\r\n        //             return 'orange'\r\n        //         }\r\n        //     })\r\n\r\n        // scatter2.select(\".scatter2Y\")\r\n        //     .call(\r\n        //         d3\r\n        //             .axisLeft(Y_Linear)\r\n        //             .tickValues((class1))\r\n        //             .tickPadding(11)\r\n        //     )\r\n        //     .selectAll('text')\r\n        //     .text((d) => d.toFixed(0))\r\n        //     .text((d) => {\r\n        //         console.log(\"text d: \", d)\r\n        //         return dec2bin(10, d)\r\n        //     })\r\n\r\n\r\n        //var groupedData = d3.group(data, (d) => d.b12)\r\n        var groupedArrayedData = Array.from(d3.group(data, (d) => d.b1))\r\n\r\n        tableHD.selectAll(\"tr\")\r\n            .data(groupedArrayedData)\r\n            .join(\r\n                enter => enter.append('tr'),\r\n                update => update.attr(\"class\", \"update\"),\r\n                exit => exit.remove()\r\n            )\r\n            .selectAll('td')\r\n            //.data(d => d)\r\n            .data((d) => {\r\n                return d[1]\r\n            })\r\n            .join(\r\n                enter => enter.append('td').attr(\"class\", \"cell\"),\r\n                update => update.attr(\"class\", \"cellUp\"),\r\n                exit => exit.remove()\r\n            )\r\n            // .attr(\"width\", 45)\r\n            // .attr(\"height\", 20)\r\n            // .text((d, i) => {\r\n            //     return d\r\n            // })\r\n            //.html(\"whattt\")\r\n            .html((d) => {\r\n                console.log(\"d cell: \", d)\r\n\r\n                return d.g1\r\n            })\r\n            //.attr(\"stroke-width\", 1)\r\n            .attr(\"stroke\", \"#fff\")\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"fill\", \"#ddd\")\r\n            .attr(\"color\", \"cyan\")\r\n            .attr(\"opacity\", .8);\r\n\r\n\r\n\r\n        // tableHD.on('mouseover', (e, d) => {\r\n        //     //e.target.style.opacity = 1\r\n        //     console.log(e.target)\r\n        //     console.log(\"d: \", d)\r\n        // })\r\n\r\n\r\n        // .on('mouseout', (e, d) => {\r\n        //     e.target.style.opacity = .7\r\n        // })\r\n        // ;\r\n\r\n\r\n\r\n        // scatter2\r\n        //     .selectAll(\"circle\")\r\n        //     .data(data)\r\n        //     .join(\r\n        //         enter => enter.append('circle').attr(\"class\", \"new\"),\r\n        //         update => update.attr(\"class\", \"update\"),\r\n        //         exit => exit.remove().transition()\r\n        //             .duration(1500)\r\n\r\n        //     )\r\n        //     .transition()\r\n        //     .duration(1000)\r\n        //     .attr(\"cx\", (d) => X_Linear(d.b12))\r\n        //     .attr(\"cy\", (d) => Y_Linear(d.b1))\r\n        //     .attr(\"r\", (d) => Z_Linear(d.hd))\r\n        //     .attr(\"stroke-width\", 1)\r\n        //     .attr(\"fill\", \"#ddd\")\r\n        //     .attr(\"stroke\", \"cyan\")\r\n        //     .attr(\"stroke-width\", 1)\r\n        //     .attr(\"opacity\", .4);\r\n\r\n\r\n    }, [data]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <div\r\n                id=\"divScatter2\"\r\n                style={{\r\n                    position: \"relative\",\r\n                    marginTop: \"10px\",\r\n                    width: \"550px\",\r\n                    border: \"1px solid teal\"\r\n                }}\r\n            >\r\n                <label>{class1.toString().replaceAll(',', ', ')}</label>\r\n\r\n                <label>{classes.slice(3).toString().replaceAll(',', ', ')}</label>\r\n\r\n                {/* <svg id=\"svgScatter2\" ref={refSVG} >\r\n                    < g ref={refScatter2}>\r\n                        <g className=\"scatter2X\"></g>\r\n\r\n                        <g className=\"scatter2Y\"></g>\r\n                    </g>\r\n                </svg> */}\r\n\r\n                <table >\r\n                    <tbody ref={refHDTable}>\r\n\r\n\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div >\r\n\r\n\r\n            {/* <div\r\n                id=\"divScatter2\"\r\n                style={{\r\n                    position: \"relative\",\r\n                    marginTop: \"10px\",\r\n                }}\r\n            >\r\n                <table ref={refHDTable}></table>\r\n            </div > */}\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default HammingCodTable;\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\SvgRecord.js",["366","367"],"import { useState, useEffect, useRef } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport * as d3 from \"d3\"\r\n\r\n\r\nexport const MyD3Component = (props) => {\r\n\r\n    const d3Container = useRef(null)\r\n\r\n    useEffect(\r\n        () => {\r\n            if (props.data && d3Container.current) {\r\n                // const svg = d3.select(d3Container.current)\r\n                // const update = svg.append('g').selectAll('text').data(props.data)\r\n                // update.enter()\r\n                //     .append('text')\r\n                //     .attr('x', (d, i) => (i + 1) * 50)\r\n                //     .attr('y', 150)\r\n                //     .attr(\"font-size\", 14)\r\n                //     .attr(\"fill\", '#fff')\r\n                //     .text((d) => d)\r\n                // update.exit().remove()\r\n\r\n                const svg = d3.select(d3Container.current)\r\n                svg.append('text').attr('x', 100).attr('y', 140).text('generations').attr('fill', '#ccc').attr('font-size', '12px')\r\n                svg.append('text').attr('x', 15).attr('y', 70).text('B').attr('fill', '#ccc').attr('font-size', '16px')\r\n\r\n                svg.append('line')\r\n                    .attr('x1', 50).attr('y1', 125)\r\n                    .attr('x2', 50).attr('y2', 25)\r\n                    .attr('stroke', '#ccc')\r\n                    .attr('stroke-width', 1)\r\n\r\n                svg.append('line')\r\n                    .attr('x1', 50).attr('y1', 125)\r\n                    .attr('x2', 200).attr('y2', 125)\r\n                    .attr('stroke', '#ccc')\r\n                    .attr('stroke-width', 1)\r\n\r\n\r\n                const X = d3\r\n                    .scaleLinear()\r\n                    .domain([0, 10])\r\n                    .range([0, 200]);\r\n\r\n                const Y = d3\r\n                    .scaleLinear()\r\n                    .domain([10, 0])\r\n                    .range([0, 100]);\r\n\r\n                //let axisTime = svg.axisBottom(scaleTime);\r\n\r\n\r\n                const gTime = svg\r\n                    .append(\"g\")\r\n                    .attr(\"transform\", `translate(100, ${-15})`)\r\n\r\n                //gTime.call(axisTime);\r\n\r\n\r\n                // const update = svg.append('g').selectAll('circle').data(props.data)\r\n                // const update = gTime.selectAll('circle').data(props.data)\r\n\r\n                // update.enter()\r\n                //     .append('circle')\r\n                //     .attr('cx', (d) => X(d.tn))\r\n                //     .attr('cy', (d) => Y(d.tn))\r\n                //     .attr(\"r\", 3)\r\n                //     .attr(\"stroke\", '#ccc')\r\n                //     .attr(\"stroke-width\", 1)\r\n                //     .attr(\"fill\", '#555')\r\n\r\n                // update.exit().remove()\r\n\r\n                const update1 = gTime.selectAll('text').data(props.data.slice(2))\r\n\r\n                update1.enter()\r\n                    .append('text')\r\n                    .attr('x', (d) => X(d.tn))\r\n                    .attr('y', (d) => Y(d.tn))\r\n                    // .attr(\"stroke\", '#ccc')\r\n                    // .attr(\"stroke-width\", 1)\r\n\r\n                    .attr('font-size', '10px')\r\n\r\n                    .attr('fill', (d) => {\r\n                        let item = d.population.filter(entry => entry.status === \"emited\")\r\n                        if (item[0]) {\r\n                            return '#eee'\r\n                        } else {\r\n                            return \"#555\"\r\n                        }\r\n\r\n                    })\r\n                    .text((d) => {\r\n                        let item = d.population.filter(entry => entry.status === \"emited\")\r\n                        if (item[0]) {\r\n                            return item[0].phenotype\r\n                        } else {\r\n                            console.log(\"item: \", item)\r\n                            return \"NaN\"\r\n                        }\r\n\r\n                    })\r\n\r\n                update1.exit().remove()\r\n            }\r\n        },\r\n        [props.data, d3Container.current]\r\n    )\r\n\r\n\r\n\r\n    // svg1.append('circle').attr('cx', 150).attr('cy', 80).attr('r', 30).attr('fill', 'red')\r\n\r\n    // d3.select('#emergenceSvgRec').append('circle').attr('cx', 150).attr('cy', 80).attr('r', 30).attr('fill', 'red')\r\n    //console.log(\"svg record: \", svg1)\r\n\r\n    // let scaleTime = d3\r\n    //     .scaleLinear()\r\n    //     .domain([0, 20])\r\n    //     .range([0, 150]);\r\n\r\n    // let axisTime = d3.axisBottom(scaleTime);\r\n\r\n    // axisTime.ticks(10)\r\n    // axisTime.tickValues([5, 10, 15])\r\n\r\n    // let gTime = svg1\r\n    //     .append(\"g\")\r\n    //     .style(\"font\", \"12px sans-serif\")\r\n    //     .attr(\"transform\", `translate(25, ${120})`);\r\n\r\n    // gTime.call(axisTime);\r\n\r\n\r\n    // let scaleResponses = d3\r\n    //     .scaleLinear()\r\n    //     .domain([100, 0])\r\n    //     .range([0, 150]);\r\n\r\n    // let axisResponses = d3.axisLeft(scaleResponses);\r\n\r\n    // let gResponses = svg1\r\n    //     .append(\"g\")\r\n    //     .attr(\"stroke\", '#fff')\r\n    //     .attr(\"transform\", `translate(35, 10)`);\r\n\r\n    // gResponses.call(axisResponses);\r\n\r\n    // svg1.append(\"text\").text('responses')\r\n    //     .attr('x', 50)\r\n    //     .attr('y', 20)\r\n    //     .attr(\"font-size\", \"10px\")\r\n    //     .attr(\"fill\", \"rgb(50, 200, 100\")\r\n    //     .attr(\"stroke\", \"#ff0000\")\r\n\r\n    //     .attr(\"font-weight\", 300)\r\n    //     .style(\"color\", \"#fff\")\r\n\r\n    // svg1.append(\"text\").text('generations')\r\n    //     .attr('x', 10)\r\n    //     .attr('y', 50)\r\n    //     .attr(\"font-size\", \"1rem\")\r\n    //     .attr(\"fill\", \"rgb(50, 200, 100\")\r\n    //     .attr(\"font-weight\", 300)\r\n\r\n\r\n    return (\r\n        <svg ref={d3Container} key={nanoid()} className=\"svg-emergence-record\">\r\n\r\n            {/* <circle fill=\"red\" cx={10} cy={30} r={10} fill=\"lime\" id=\"testCircle\"></circle>\r\n            <rect fill=\"green\" x={20} y={50} width={100} height={25} id=\"testRect\"></rect>*/}\r\n\r\n        </svg>\r\n    )\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\HeatmapHook.js",["368","369","370","371","372","373","374"],"// /* \r\n// d3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/heatmap_data.csv\").then(function (data) {\r\n\r\n//  */\r\n\r\n\r\n//import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport \"./hamming_style.sass\";\r\n\r\nimport { dec2bin, hdSelf, hdOther } from \"./hammingFunctions\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\n// import parse from \"html-react-parser\"\r\n\r\nfunction HeatMapHook(props) {\r\n\r\n    const refHeatMap = useRef()\r\n    const refHeatMapSmall = useRef()\r\n\r\n\r\n    const [data, setData] = useState([])\r\n    const [class1, setClass1] = useState([])\r\n    const [classes, setClasses] = useState([])\r\n    const [class2, setClass2] = useState([]) // just for hd-cod;\r\n\r\n    const [hd_self, setSelf] = useState(0)\r\n    const [hd_other, setOther] = useState(0)\r\n    const [hd_cod, setCod] = useState(0)\r\n\r\n    //const [plotAvg, setPlotAvg] = useState(true)\r\n    const [plotAvg, setPlotAvg] = useState(false)\r\n\r\n\r\n\r\n    // Creates the data and sets it as state; \r\n    // uses limits, supplied as props. \r\n\r\n\r\n    useEffect(() => {\r\n        // let size = 41\r\n        // let boundary2 = props.boundary1 + 1\r\n        // let class1 = d3.range(props.boundary1 - size, props.boundary1 + 1)\r\n        // let classes = d3.range(props.boundary1 - size, boundary2 + 1 + size)\r\n        // let class2 = d3.range(props.boundary1 + 1, boundary2 + 1 + size)\r\n\r\n        let class1 = d3.range(props.limit1, props.boundary1 + 1)\r\n        let classes = d3.range(props.limit1, props.limit2 + 1)\r\n        let class2 = d3.range(props.boundary2, props.limit2 + 1)\r\n\r\n        let myData = []\r\n        class1.forEach((b1) => {\r\n            let g1 = dec2bin(10, b1)\r\n            classes.forEach((b12) => {\r\n                let g12 = dec2bin(10, b12)\r\n                let hd = 0\r\n                for (let i = 0; i < g12.length; i++) {\r\n                    if (g1[i] !== g12[i]) {\r\n                        hd = hd + 1\r\n                    }\r\n                }\r\n                myData.push(\r\n                    { b1: b1, b12: b12, hd: hd, g1: g1, g12: g12 }\r\n                )\r\n            })\r\n        })\r\n\r\n\r\n        // HD self, other, cod\r\n        let hd1, hd2, hd3;\r\n        if (classes.length > 0) {\r\n            hd1 = hdSelf(class1)\r\n            hd2 = hdOther(class1, class2)\r\n            hd3 = Math.abs(hd1 - hd2)\r\n        } else {\r\n            hd1 = 0\r\n            hd2 = 0\r\n            hd3 = Math.abs(hd1 - hd2)\r\n        }\r\n\r\n\r\n        setData(myData)\r\n        setClass1(class1)\r\n        setClasses(classes)\r\n        setClass2(class2)\r\n\r\n        setSelf(hd1)\r\n        setOther(hd2)\r\n        setCod(hd3.toFixed(1))\r\n\r\n    }, [props])\r\n\r\n\r\n\r\n    // ===============================================\r\n\r\n    useEffect(() => {\r\n        let margin = { top: 60, left: 150, bottom: 50, right: 110 }\r\n        //let margin = { top: 80, left: 100, bottom: 100, right: 325 }\r\n\r\n        let colorGreen = 'rgb(28, 255, 28)'\r\n        let colorOrange = 'rgb(255, 128, 49)'\r\n\r\n        var greenOrange = d3.scaleLinear()\r\n            .domain([1, 10])\r\n            .range([colorGreen, colorOrange])\r\n\r\n        let svgWidth\r\n        let svgHeight\r\n\r\n        if (document.getElementById(\"svgHeatMapHook\")) {\r\n            svgWidth = document.getElementById(\"svgHeatMapHook\").clientWidth\r\n            svgHeight = document.getElementById(\"svgHeatMapHook\").clientHeight\r\n        } else {\r\n            svgWidth = 550\r\n            svgHeight = 250\r\n        }\r\n\r\n        let width = svgWidth - margin.left - margin.right\r\n        let height = svgHeight - margin.top - margin.bottom\r\n\r\n\r\n        // SCALES:\r\n        let myGroups = Array.from(new Set(data.map(d => d.b1)))\r\n        let myVars = Array.from(new Set(data.map(d => d.b12)))\r\n\r\n        let X_Band = d3.scaleBand().range([0, width]).domain(myVars)\r\n        let Y_band = d3.scaleBand().range([height, 0]).domain(myGroups)\r\n\r\n\r\n        let chartHeatMap = d3.select(refHeatMap.current).attr(\"transform\",\r\n            `translate(${margin.left},${margin.top})`);\r\n\r\n\r\n\r\n\r\n\r\n        // CHART INFO:\r\n        let chartInfo = chartHeatMap.select(\".chartInfo\")\r\n            .attr(\"transform\", `translate(${0},${0})`)\r\n\r\n        chartInfo.selectAll(\"text\").remove()\r\n\r\n        // TITLE:\r\n        chartInfo\r\n            .append('text')\r\n            .text(\"HeatmapHook.js\")\r\n            .attr(\"id\", \"chartTitle1\")\r\n            .attr(\"x\", -130)\r\n            .attr(\"y\", -40)\r\n            .attr(\"fill\", \"yellow\")\r\n            .attr(\"font-size\", '16px')\r\n\r\n\r\n        // HD SELF:\r\n        chartInfo.append(\"text\").attr(\"fill\", \"lime\")\r\n            .attr(\"font-size\", \"14px\")\r\n            .attr(\"x\", 50)\r\n            .attr(\"y\", 160)\r\n            .text(hd_self)\r\n\r\n        // HD OTHER:\r\n        chartInfo.append(\"text\").attr(\"fill\", \"orange\")\r\n            .attr(\"font-size\", \"14px\")\r\n            .attr(\"x\", 200)\r\n            .attr(\"y\", 160)\r\n            .text(hd_other)\r\n\r\n        // COMBINED:\r\n        chartInfo.append(\"text\").attr(\"fill\", \"cyan\")\r\n            .attr(\"font-size\", \"14px\")\r\n            .attr(\"x\", 120)\r\n            .attr(\"y\", 180)\r\n            .text(() => {\r\n                // return `HDcod = | ${hd_self} - ${hd_other} | = ${hd_cod}`\r\n                return hd_cod\r\n            })\r\n\r\n\r\n\r\n\r\n        // X-axis:\r\n        chartHeatMap.select(\".heatmapX\")\r\n            .attr(\"transform\", `translate(0, ${height})`)\r\n            .call(\r\n                d3.axisBottom(X_Band)\r\n                    .tickValues([])\r\n                // .tickValues(classes)\r\n                // .tickPadding(11)\r\n            )\r\n            .selectAll(\"text\").remove()\r\n        // .style(\"color\", (d) => {\r\n        //     if (d <= d3.max(myGroups)) {\r\n        //         return 'lime'\r\n        //     } else {\r\n        //         return 'orange'\r\n        //     }\r\n        // })\r\n\r\n\r\n        // Y-axis:\r\n        chartHeatMap.select(\".heatmapY\")\r\n            .call(\r\n                d3.axisLeft(Y_band)\r\n                    .tickValues([])\r\n                // .tickValues((class1))\r\n                // .tickPadding(11)\r\n            )\r\n            .selectAll(\"text\").remove()\r\n        // .text(\r\n        //     (d) => {\r\n        //         return `${d}: ${dec2bin(10, d)}`\r\n        //     }\r\n        // )\r\n\r\n\r\n        // TOOLTIP:\r\n        const ttHeatMap = d3.select(\"#ttHeatMap\")\r\n            .style(\"opacity\", 0)\r\n            .style(\"class\", \"tooltip\")\r\n            .style(\"background-color\", \"white\")\r\n            .style(\"border\", \"solid\")\r\n            .style(\"border-width\", \"1px\")\r\n            .style(\"border-radius\", \"5px\")\r\n            .style(\"padding\", \"5px\")\r\n            .style(\"font-size\", \"11px\")\r\n            .attr(\"z-index\", 0)\r\n\r\n\r\n        // MOUSE OVER, MOVE, LEAVE:\r\n        const mouseover = function (event, d) {\r\n            //console.log(event)\r\n            ttHeatMap\r\n                .style(\"opacity\", 0.8)\r\n\r\n        }\r\n\r\n        const mousemove = function (event, d) {\r\n            //console.log(d)\r\n            ttHeatMap\r\n                .style(\"opacity\", 0.8)\r\n                .html(d.description)\r\n                .style(\"left\", (event.layerX - 30) + \"px\")\r\n                .style(\"top\", (event.layerY - 15) + \"px\")\r\n                .style(\"position\", \"absolute\")\r\n        }\r\n\r\n        const mouseleave = function (event, d) {\r\n            ttHeatMap\r\n                .style(\"opacity\", 0)\r\n        }\r\n\r\n\r\n        // DATA:\r\n        chartHeatMap\r\n            .selectAll(\"rect\")\r\n            .data(data)\r\n            .join(\r\n                enter => enter.append('rect').attr(\"class\", \"new\"),\r\n                update => update.attr(\"class\", \"update\"),\r\n                exit => exit.remove().transition()\r\n                    .duration(1000)\r\n            )\r\n            .attr(\"x\", function (d) { return X_Band(d.b12) })\r\n            .attr(\"y\", function (d) { return Y_band(d.b1) })\r\n            .attr(\"width\", X_Band.bandwidth())\r\n            .attr(\"height\", Y_band.bandwidth())\r\n            .on(\"mouseover\", mouseover)\r\n            .on(\"mousemove\", mousemove)\r\n            .on(\"mouseleave\", mouseleave)\r\n            .transition()\r\n            .duration(1000)\r\n            .style(\"fill\", function (d) {\r\n\r\n                if (plotAvg === true) {\r\n                    if (d.b12 <= props.boundary1) {\r\n                        return greenOrange(hd_self)\r\n                    } else {\r\n                        return greenOrange(hd_other)\r\n                    }\r\n                } else {\r\n                    return greenOrange(d.hd)\r\n                }\r\n\r\n\r\n            })\r\n\r\n\r\n\r\n\r\n    }, [data]);\r\n\r\n\r\n\r\n\r\n\r\n    // SMALL VERSION, ONLY AVERAGES of HD SELF - OTHER\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let margin = { top: 60, left: 30, bottom: 150, right: 450 }\r\n\r\n        let colorGreen = 'rgb(28, 255, 28)'\r\n        let colorOrange = 'rgb(255, 128, 49)'\r\n\r\n        var greenOrange = d3.scaleLinear()\r\n            .domain([1, 10])\r\n            .range([colorGreen, colorOrange])\r\n\r\n        let svgWidth = 550\r\n        let svgHeight = 250\r\n        let width = svgWidth - margin.left - margin.right\r\n        let height = svgHeight - margin.top - margin.bottom\r\n\r\n\r\n\r\n\r\n        let smallData = [\r\n            {\r\n                b1: 1, b12: 1, hd: hd_self,\r\n                class: `${props.limit1} - ${props.boundary1}`, g1: \"0111010111\", g12: \"0111010111\"\r\n            },\r\n            {\r\n                b1: 1, b12: 2, hd: hd_other,\r\n                class: `${props.boundary2} - ${props.limit2}`, g1: \"0111010111\", g12: \"0111010111\"\r\n            }]\r\n\r\n        // SCALES:\r\n        let mySmallGroups = Array.from(new Set(smallData.map(d => d.b1)))\r\n        let mySmallVars = Array.from(new Set(smallData.map(d => d.b12)))\r\n\r\n        let X_Band = d3.scaleBand().range([0, 100]).domain(mySmallVars)\r\n        let Y_band = d3.scaleBand().range([50, 0]).domain(mySmallGroups)\r\n\r\n        let chartHeatMap = d3.select(refHeatMapSmall.current).attr(\"transform\",\r\n            `translate(${margin.left},${margin.top})`);\r\n\r\n        chartHeatMap.select(\".smallInfo\").selectAll(\"text\").remove()\r\n        chartHeatMap.select(\".smallInfo\").append(\"text\")\r\n            .text(hd_cod)\r\n            .attr(\"font-size\", \"14px\")\r\n            .attr(\"x\", 35)\r\n            .attr(\"y\", -10)\r\n            .attr(\"fill\", \"cyan\")\r\n        //.attr(\"font-family\", \"Arial\")\r\n\r\n\r\n        // X-axis:\r\n        chartHeatMap.select(\".smallX\")\r\n            .attr(\"transform\", `translate(0, ${height})`)\r\n            .call(\r\n                d3.axisBottom(X_Band)\r\n                    .tickSize(0)\r\n                    .tickPadding(20)\r\n\r\n            )\r\n            .selectAll(\"text\")\r\n            .style(\"color\", (d) => {\r\n                if (d <= d3.max(mySmallGroups)) {\r\n                    return 'lime'\r\n                } else {\r\n                    return 'orange'\r\n                }\r\n            })\r\n            .text((d) => {\r\n                if (d === 1) {\r\n                    return hd_self\r\n                } else {\r\n                    return hd_other\r\n                }\r\n            })\r\n            .attr(\"font-size\", \"12px\")\r\n\r\n\r\n        // Y-axis:\r\n        chartHeatMap.select(\".smallY\")\r\n            .call(\r\n                d3.axisLeft(Y_band)\r\n                    .tickValues([])\r\n                    .tickSize(0)\r\n            )\r\n\r\n\r\n        // SMALL DATA:\r\n        chartHeatMap\r\n            .selectAll(\"rect\")\r\n            .data(smallData)\r\n            .join(\r\n                enter => enter.append('rect').attr(\"class\", \"new\"),\r\n                update => update.attr(\"class\", \"update\"),\r\n                exit => exit.remove().transition()\r\n                    .duration(1000)\r\n            )\r\n            .attr(\"x\", function (d) { return X_Band(d.b12) })\r\n            .attr(\"y\", function (d) { return Y_band(d.b1) })\r\n            .attr(\"width\", X_Band.bandwidth())\r\n            .attr(\"height\", Y_band.bandwidth())\r\n            .transition()\r\n            .duration(1000)\r\n            .style(\"fill\", function (d) {\r\n                // console.log(\"d: \", parseFloat(d.hd) + 1)\r\n                return greenOrange(parseFloat(d.hd))\r\n\r\n\r\n            })\r\n\r\n\r\n        // chartHeatMap\r\n        //     .selectAll(\"rect\").on(\"mouseover\", mouseover)\r\n        //     .on(\"mousemove\", mousemove)\r\n        //     .on(\"mouseleave\", mouseleave)\r\n\r\n\r\n\r\n    }, [data]);\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <div\r\n                id=\"divHeatMapHook\"\r\n                style={{\r\n                    position: \"relative\",\r\n                    marginTop: \"10px\",\r\n                    border: \"1px solid red\"\r\n                }}\r\n            >\r\n                <svg id=\"svgHeatMapHook\">\r\n\r\n                    <g ref={refHeatMap}>\r\n                        <g className=\"heatmapX\"></g>\r\n                        <g className=\"heatmapY\"></g>\r\n                        <g className=\"chartInfo\"></g>\r\n                    </g>\r\n\r\n\r\n                    <g ref={refHeatMapSmall}>\r\n                        <g className=\"smallX\"></g>\r\n                        <g className=\"smallY\"></g>\r\n                        <g className=\"smallInfo\"></g>\r\n                    </g>\r\n\r\n\r\n\r\n                </svg>\r\n\r\n                <div id=\"ttHeatMap\"></div>\r\n\r\n            </div >\r\n\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default HeatMapHook;\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\selection\\Selection.js",["375","376"],"import \"../emergence22.sass\"\r\nimport React from \"react\"\r\n//import { useState, useEffect } from \"react\"\r\nimport { nanoid } from \"nanoid\"\r\nimport { Fade } from \"react-reveal\"\r\nimport { Button } from \"react-bootstrap\"\r\nimport * as d3 from \"d3\"\r\n\r\nexport default class Selection extends React.Component {\r\n\r\n    // constructor(props) {\r\n    //     super(props)\r\n\r\n    //     this.selectParent = this.selectParent.bind(this)\r\n    // }\r\n\r\n\r\n    // selectParent = (event) => {\r\n\r\n    //     this.props.doSomethingSelect(event.target.value)\r\n    // }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        // fitness gradient goes black to orange:\r\n        // let color1 = '#000'\r\n        // let color2 = '#ff6200'\r\n\r\n        let color1 = 'yellow'\r\n        let color2 = '#274235'\r\n\r\n\r\n        var fitness_gradient = d3.scaleLinear()\r\n            .domain([0, 0.1])\r\n            .range([color2, color1])\r\n\r\n\r\n        let ParentPopulation\r\n\r\n        if (this.props.population) {\r\n            ParentPopulation = this.props.population.map((item, i) => {\r\n                let cellId = `phenotype_${i + 1}`\r\n                let parent\r\n\r\n                if (item) {\r\n                    parent = item\r\n                } else {\r\n                    parent = { phenotype: \"\", genotype: \"\", status: \"\" }\r\n                }\r\n\r\n                return (\r\n\r\n                    <button\r\n                        dataParent={false}\r\n                        key={nanoid()}\r\n                        title={parent.status}\r\n                        value={parent.phenotype}\r\n                        id={cellId}\r\n                        onClick={this.props.doSomethingSelect}\r\n                        className=\"btn-selection\"\r\n\r\n                        style={{\r\n                            background: this.props.reinforced === true ? fitness_gradient(parseFloat(item.fitness)) : \"transparent\",\r\n                            border: this.props.reinforced === true ? `1px solid ${fitness_gradient(parseFloat(item.fitness))}` : `0px solid ${fitness_gradient(parseFloat(item.fitness))}`\r\n                        }}\r\n\r\n                    >\r\n                        {parent.phenotype}\r\n\r\n                    </button>\r\n                )\r\n            })\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"parents-wrapper\" key={nanoid()}  >\r\n                {ParentPopulation}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\rechooks\\Rec2.js",["377"],"//import {useState, useEffect} from \"react\"\r\n// import { Form, ButtonToolbar, Button, ButtonGroup, InputGroup, FormControl } from \"react-bootstrap\"\r\n\r\nimport React from \"react\"\r\nimport RadioHook from \"./RadioHook\"\r\nimport { Button } from \"react-bootstrap\"\r\n\r\nimport { dec2binList } from \"../../etbd_hamming/hammingFunctions\";\r\nimport { nanoid } from \"nanoid\"\r\n\r\nexport default class Rec2 extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.onChange = this.onChange.bind(this)\r\n    }\r\n\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n\r\n    createStates = () => {\r\n\r\n        let nrBits = this.props.nrBits\r\n        let p1, p2, x1, x2\r\n\r\n        if (!this.props.parents) {\r\n            p1 = this.props.low\r\n            p2 = this.props.high\r\n\r\n        } else {\r\n            p1 = this.props.parent1\r\n            p2 = this.props.parent2\r\n        }\r\n\r\n\r\n        x1 = dec2binList(nrBits, p1)\r\n        x2 = dec2binList(nrBits, p2)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // console.log(\"x1, x2: \", x1, x2)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        for (let i = 0; i < nrBits; i++) {\r\n\r\n            let power = x1.length - 1 - i\r\n            let cellName = `childBit_${power}`\r\n\r\n            let outcome = \"\"\r\n            let bit1 = parseInt(x1[i])\r\n            let bit2 = parseInt(x2[i])\r\n\r\n\r\n            if (bit1 === bit2) {\r\n                outcome = parseInt(bit1)\r\n            } else {\r\n                // let rnd = Math.random()\r\n                // if (rnd < .5) {\r\n                //     outcome = bit1\r\n                // } else {\r\n                //     outcome = bit2\r\n                // }\r\n            }\r\n\r\n\r\n            this.setState({ [cellName]: outcome })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentWillMount() {\r\n        this.createStates()\r\n    }\r\n\r\n\r\n    computeChildPhenotype = () => {\r\n        let child = 0\r\n\r\n        Object.entries(this.state).map((entry) => {\r\n\r\n            let cellName = entry[0]\r\n            let power = cellName[cellName.length - 1]\r\n\r\n\r\n            let bitState = this.state[[cellName]]\r\n            let slotValue = 2 ** power\r\n\r\n            // 2 ** props.bitName[props.bitName.length - 1]\r\n\r\n\r\n\r\n            child += bitState * slotValue\r\n        })\r\n        return child\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    submitChildPhenotype = (e) => {\r\n        let cp = this.computeChildPhenotype()\r\n        this.props.addChildItem(cp)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let MyGenotypes = Object.entries(this.state).map((entry, i) => {\r\n            let cellName = entry[0]\r\n            let sameThing = false\r\n\r\n            if (this.props.g1[i] === this.props.g2[i]) {\r\n                sameThing = true\r\n            }\r\n\r\n            return (\r\n                <RadioHook\r\n                    bitName={cellName}\r\n                    bit1={this.props.g1[i]}\r\n                    bit2={this.props.g2[i]}\r\n                    chosenBit={this.state[[cellName]]}\r\n                    equal={sameThing}\r\n                    onChange={this.onChange}\r\n\r\n                />\r\n            )\r\n        })\r\n\r\n\r\n\r\n        let ChildPhenotype = this.computeChildPhenotype()\r\n\r\n\r\n        return (\r\n\r\n            <div\r\n                key={nanoid()}\r\n                style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    width: \"100%\",\r\n                    margn: \"auto\",\r\n                }}\r\n            >\r\n\r\n                {/* <button\r\n                    disabled={false}\r\n                    //id={pairId}\r\n                    //value={pair}\r\n                    key={nanoid()}\r\n                    className=\"btn-pair\"\r\n                //onClick={this.recombinePair}\r\n                >\r\n                    <span\r\n                        key={nanoid()}\r\n                        value={this.props.parent1}\r\n                    // style={{\r\n                    //     margin: \"auto\",\r\n                    //     width: \"70px\"\r\n                    // }}\r\n                    >\r\n                        {this.props.parent1 ? this.props.parent1 : this.props.low}\r\n                    </span>\r\n\r\n                    <span\r\n                        key={nanoid()}\r\n                        value={this.props.parent2}\r\n                    // style={{\r\n                    //     margin: \"auto\",\r\n                    //     width: \"70px\"\r\n                    // }}\r\n                    >\r\n                        {this.props.parent2 ? this.props.parent2 : this.props.high}\r\n                    </span>\r\n\r\n                </button>\r\n\r\n\r\n                <button\r\n                    value={ChildPhenotype}\r\n                    key={nanoid()}\r\n                    className=\"btn-child\"\r\n                >\r\n                    {ChildPhenotype}\r\n\r\n                </button>\r\n\r\n\r\n\r\n                <div\r\n                    key={nanoid()}\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        //border: \"1px solid blue\",\r\n                        //width: \"100%\", \r\n                        margin: \"auto\",\r\n                    }}>\r\n\r\n\r\n                    <div\r\n                        key={nanoid()}\r\n                        style={{\r\n                            textAlign: \"left\",\r\n                            display: \"inline-flex\",\r\n                            margin: \"0px auto 10px auto\",\r\n                            //width: \"100%\",\r\n                            //border: \"1px solid orange\"\r\n\r\n                        }}\r\n                    >\r\n                        {MyGenotypes}\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                    <div\r\n                        key={nanoid()}\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"row\",\r\n                            width: \"100%\",\r\n                            justifyContent: \"space-beteen\",\r\n                            margin: \"10px auto auto auto\",\r\n                            height: \"fit-content\",\r\n                            //border: \"1px solid lime\"\r\n\r\n                        }}\r\n                    >\r\n\r\n\r\n                        <Button\r\n                            onClick={this.submitChildPhenotype}\r\n                            variant=\"outline-success\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                width: \"70px\",\r\n                                height: \"30px\",\r\n                                fontSize: \"10px\",\r\n                                margin: \"auto\",\r\n                                padding: \"2px\",\r\n                                marginLeft: \"0px\",\r\n                            }}\r\n                        >\r\n                            next pair\r\n\r\n                        </Button>\r\n\r\n\r\n\r\n                    </div>\r\n\r\n                </div> */}\r\n\r\n                <div\r\n                    className=\"div_radio_bit1 div_labels1\"\r\n                    key={nanoid()}\r\n                    style={{\r\n                        margin: \"auto\",\r\n                        width: \"60px\",\r\n                        color: \"#ddd\",\r\n\r\n                    }}\r\n                >\r\n\r\n                    <label\r\n                        className=\"radio_bit1\"\r\n                        key={nanoid()}\r\n                        style={{\r\n                            backgroundColor: '#0063cc2f',\r\n                            marginBottom: \"0px\",\r\n                        }}\r\n                    >\r\n                        <div\r\n                            value={this.props.parent1}\r\n                            className=\"radio_text1\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                color: \"#ddd\",\r\n                                fontSize: \"14px\",\r\n                            }}\r\n                        >\r\n                            {this.props.parent1}\r\n\r\n                        </div>\r\n                    </label>\r\n\r\n\r\n                    <label\r\n                        className=\"radio_bit1\"\r\n                        key={nanoid()}\r\n                        style={{\r\n                            borderTop: \"0px solid #0063cc2f\",\r\n                            backgroundColor: '#0063cc2f',\r\n                            marginTop: \"0px\",\r\n                        }}\r\n                    >\r\n                        <div\r\n                            value={this.props.parent2}\r\n                            className=\"radio_text1\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                color: \"#ddd\",\r\n                                fontSize: \"14px\",\r\n                            }}\r\n                        >\r\n                            {this.props.parent2}\r\n                        </div>\r\n                    </label>\r\n\r\n\r\n\r\n\r\n                    <label\r\n                        //className=\"radio_bit1\"\r\n                        key={nanoid()}\r\n                        style={{\r\n                            marginTop: \"20px\",\r\n                            width: \"60px\",\r\n                            borderRadius: \"0px\",\r\n                        }}\r\n                    >\r\n                        <div\r\n                            //className=\"radio_text1\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                border: \"1px solid #0063cc90\",\r\n                                //color: \"#ddd\",\r\n                                textAlign: \"center\",\r\n                                height: \"100%\",\r\n                                fontSize: \"14px\",\r\n                                width: \"100%\",\r\n                                padding: \"2px\"\r\n                            }}\r\n                        >\r\n                            {ChildPhenotype}\r\n                        </div>\r\n                    </label>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <div\r\n                    key={nanoid()}\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        //border: \"1px solid blue\",\r\n                        //width: \"100%\", \r\n                        margin: \"auto\",\r\n                    }}>\r\n\r\n\r\n                    <div\r\n                        key={nanoid()}\r\n                        style={{\r\n                            textAlign: \"left\",\r\n                            display: \"inline-flex\",\r\n                            margin: \"0px auto 10px auto\",\r\n                            //width: \"100%\",\r\n                            //border: \"1px solid orange\"\r\n\r\n                        }}\r\n                    >\r\n                        {MyGenotypes}\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                    <div\r\n                        key={nanoid()}\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"row\",\r\n                            width: \"100%\",\r\n                            justifyContent: \"space-beteen\",\r\n                            margin: \"10px auto auto auto\",\r\n                            height: \"fit-content\",\r\n                            //border: \"1px solid lime\"\r\n\r\n                        }}\r\n                    >\r\n\r\n\r\n                        <Button\r\n                            onClick={this.submitChildPhenotype}\r\n                            variant=\"outline-success\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                width: \"70px\",\r\n                                height: \"30px\",\r\n                                fontSize: \"10px\",\r\n                                margin: \"auto\",\r\n                                padding: \"2px\",\r\n                                marginLeft: \"0px\",\r\n                            }}\r\n                        >\r\n                            next pair\r\n\r\n                        </Button>\r\n\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\ButtonNext.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\emergence\\emission\\Emission.jsx",["378","379","380"],"import \"../emergence22.sass\"\r\nimport React from \"react\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { nanoid } from \"nanoid\"\r\nimport { Fade } from \"react-reveal\"\r\n\r\nexport default function Emission(props) {\r\n    //const [emission, setEmission] = useState(\"\")\r\n\r\n    function handleClick(event) {\r\n        props.doSomething(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                key={nanoid()}\r\n                style={{\r\n                    //border: \"1px solid #ff0000\",\r\n                    height: \"30px\",\r\n                    margin: \"auto\",\r\n                    display: \"inline-flex\",\r\n                    //backgroundColor: \"transparent\"\r\n                }}\r\n            >\r\n                {/* {\r\n                    props.population.map((item, i) => {\r\n                        let cellId = `phenotype_${i + 1}`\r\n                        return (\r\n                            <button\r\n                                title={\"emited\"}\r\n                                value={item}\r\n                                id={cellId}\r\n                                onClick={handleClick}\r\n                                className=\"btn_ems\"\r\n                                style={{\r\n                                    color: \"dark grey\",\r\n                                    width: \"30px\",\r\n                                    height: \"30px\",\r\n                                    margin: \"auto\",\r\n                                    //background: \"gradient fitness\",\r\n                                    color: \"#ff00ff\",\r\n\r\n                                }}\r\n\r\n                            >\r\n                                {item}\r\n                            </button>\r\n                        )\r\n                    })\r\n                } */}\r\n\r\n\r\n                {\r\n                    props.population.map((item, i) => {\r\n                        let cellId = `phenotype_${i + 1}`\r\n                        return (\r\n\r\n\r\n                            <button\r\n                                key={nanoid()}\r\n                                title={item.status}\r\n                                value={item.phenotype}\r\n                                id={cellId}\r\n                                onClick={handleClick}\r\n                                className=\"btn_ems\"\r\n                            >\r\n                                {item.phenotype}\r\n                            </button>\r\n\r\n                        )\r\n                    })\r\n                }\r\n\r\n\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\mutation\\MutationDemo.jsx",["381","382","383","384","385"],"import \"./checkbox_mutation.sass\"\r\nimport React from \"react\"\r\nimport CheckProps from \"./CheckProps\"\r\nimport { nanoid } from \"nanoid\"\r\n//import ButtonNext from \"../ButtonNext\"\r\nimport { Button } from \"react-bootstrap\"\r\n\r\n\r\nexport default class MutationDemo extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.onChange = this.onChange.bind(this)\r\n    }\r\n\r\n\r\n\r\n    onChange = (e) => {\r\n        let a = this.state[[e.target.name]][0]\r\n        let b = this.state[[e.target.name]][1]\r\n        let b1 = Math.abs(1 - b)\r\n        let absVal = this.state[[e.target.name]][2]\r\n\r\n        this.setState({\r\n            [e.target.name]: [e.target.checked, b1, absVal]\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    createStates = () => {\r\n\r\n        let bits = this.props.nrBits\r\n        let defaultGenotype = []\r\n\r\n        let x\r\n\r\n        if (this.props.genotype === []) {\r\n            x = Array.length(bits).fill(\"\")\r\n            console.log(\"mutation genotype: \", x)\r\n        } else {\r\n            x = this.props.genotype\r\n        }\r\n\r\n        x.map((item, i) => {\r\n            let power = x.length - 1 - i\r\n            let cellName = `bit${power}`\r\n            this.setState({ [cellName]: [false, item, 2 ** power] })\r\n        })\r\n    }\r\n\r\n\r\n\r\n    componentWillMount() {\r\n        this.createStates()\r\n    }\r\n\r\n\r\n    computePhenotype = () => {\r\n        let mtn = 0\r\n        Object.entries(this.state).map((entry) => {\r\n            let info = entry[1]\r\n            mtn += info[1] * info[2]\r\n        })\r\n\r\n        return mtn\r\n    }\r\n\r\n\r\n\r\n    submitMutantPhenotype = (e) => {\r\n        let xxx = this.computePhenotype()\r\n        this.props.addToNext(xxx)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const Checkboxes = Object.entries(this.state).map((entry) => {\r\n            let cellName = entry[0]\r\n\r\n            return (\r\n                <CheckProps\r\n                    mutant={this.state[[cellName]][0]}\r\n                    bitState={this.state[[cellName]][1]}\r\n                    cellValue={this.state[[cellName]][2]}\r\n                    bitName={cellName}\r\n                    onChange={this.onChange}\r\n                />\r\n            )\r\n        })\r\n\r\n\r\n        // const myPhenotype = this.computePhenotype()\r\n        let myPhenotype = this.computePhenotype()\r\n\r\n\r\n        // let section_opacity = 0.5\r\n        // if (this.props.demoState === \"mutation\") {\r\n        //     section_opacity = 1\r\n        // }\r\n\r\n\r\n        return (\r\n\r\n            <div\r\n                //className=\"div_cbx\" \r\n                style={{\r\n                    width: \"100%\",\r\n                    margin: \"auto\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                }}\r\n                key={nanoid()}\r\n            >\r\n\r\n                <div className=\"div_cbx\" key={nanoid()}>\r\n                    {Checkboxes}\r\n                </div>\r\n\r\n                <div\r\n                    id='divReplaceOriginal'\r\n                    key={nanoid()}\r\n                    onClick={this.submitMutantPhenotype}\r\n                    title={\"click to replace the original phenotype\"}\r\n                >\r\n\r\n                    <span id=\"spanOriginal\" >\r\n                        {this.props.childPhenotype}\r\n                    </span>\r\n\r\n\r\n                    <label id=\"lblMutant\" >\r\n                        <div id=\"divMutantText\"\r\n                            style={{\r\n                                color: this.props.childPhenotype === myPhenotype ? \"#5ee478\" : \"tomato\",\r\n                            }}\r\n                        >\r\n                            {myPhenotype}\r\n                        </div>\r\n                    </label>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\hammingFunctions.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\emergence\\rechooks\\RadioHook.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\emergence\\mutation\\CheckProps.js",["386"],"import React from \"react\"\r\nimport { nanoid } from \"nanoid\"\r\nimport parse from \"html-react-parser\"\r\n\r\nexport default class CheckProps extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n\r\n            <React.Fragment>\r\n\r\n\r\n                <label\r\n                    className=\"cbx_mutation\"\r\n                    key={nanoid()}\r\n                    style={{\r\n                        textAlign: \"center\",\r\n                        fontSize: \"13px\",\r\n                        fontWeight: 300,\r\n                        //height: \"40px\",\r\n                        //border: \"1px solid red\"\r\n\r\n                    }}\r\n                    title={2 ** this.props.bitName[this.props.bitName.length - 1]}\r\n\r\n                    data-power2={this.props.power2}\r\n\r\n                >\r\n\r\n                    2<sup>{this.props.bitName[this.props.bitName.length - 1]}</sup>\r\n\r\n\r\n                    <input\r\n                        key={nanoid()}\r\n                        className=\"cbx_input\"\r\n                        type=\"checkbox\"\r\n                        //type=\"radio\"\r\n                        checked={this.props.mutant}\r\n                        value={this.props.bitState}\r\n                        name={this.props.bitName}\r\n                        onChange={this.props.onChange}\r\n                    />\r\n\r\n\r\n                    <div\r\n                        value={this.props.bitState}\r\n\r\n                        class=\"cbx_text\"\r\n                        key={nanoid()}\r\n                    >\r\n                        {this.props.bitState}\r\n                    </div>\r\n\r\n                </label>\r\n\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\AgentHistory.js",["387"],"import React from \"react\"\r\nimport { nanoid } from \"nanoid\"\r\nimport * as d3 from \"d3\"\r\n\r\n\r\nexport default class AgentHistory extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let xxx = this.props.data.slice(0, this.props.data.length - 1)\r\n\r\n\r\n        // fitness gradient goes black to orange:\r\n        let color1 = '#000'\r\n        let color2 = '#ff6200'\r\n\r\n        var fitness_gradient = d3.scaleLinear()\r\n            .domain([0, 0.1])\r\n            .range([color1, color2])\r\n\r\n\r\n\r\n        return (\r\n\r\n            <div\r\n                id=\"divAgentHistory\"\r\n                style={{\r\n                    height: \"auto\",\r\n                    width: \"100%\",\r\n                    margin: \"auto\",\r\n                    border: \"0px\",\r\n                    backgroundColor: \"#282c34\"\r\n                }}\r\n                key={nanoid()}\r\n            >\r\n\r\n                {\r\n                    xxx.map((gn) => {\r\n                        return (\r\n                            <div>\r\n                                {\r\n                                    gn.population.map((item, i) => {\r\n                                        let cellId = `phenotype_${i + 1}`\r\n                                        return (\r\n\r\n\r\n                                            <button\r\n                                                key={nanoid()}\r\n                                                title={item.status}\r\n                                                value={item.phenotype}\r\n                                                id={cellId}\r\n                                                className=\"btn_history\"\r\n                                                style={{\r\n                                                    background: fitness_gradient(parseFloat(item.fitness)),\r\n                                                    border: `1px solid ${fitness_gradient(parseFloat(item.fitness))}`\r\n                                                }}\r\n                                            >\r\n                                                {item.phenotype}\r\n                                            </button>\r\n\r\n\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n\r\n                        )\r\n                    })\r\n                }\r\n\r\n\r\n\r\n                {/* <table className=\"table_history\" key={nanoid()}>\r\n                    <tbody>\r\n\r\n\r\n                        {\r\n                            this.props.data.map((generation) => {\r\n\r\n                                return (\r\n\r\n                                    <tr className=\"generation\" key={nanoid()} >\r\n\r\n                                        <th className=\"cell_tn\" key={nanoid()} >\r\n                                            t <sub> {generation.tn} </sub>\r\n                                        </th>\r\n\r\n\r\n                                        {\r\n                                            generation.population.map((phenotype) => {\r\n\r\n                                                return (\r\n\r\n                                                    <td key={nanoid()} >\r\n                                                        {phenotype}\r\n                                                    </td>\r\n                                                )\r\n                                            })\r\n                                        }\r\n\r\n\r\n                                        <td key={nanoid()}  >\r\n                                            {generation.emission}\r\n                                        </td>\r\n\r\n\r\n                                        <td key={nanoid()} >\r\n                                            {generation.reinforced}\r\n                                        </td>\r\n\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </tbody>\r\n                </table > */}\r\n\r\n\r\n            </div >\r\n        )\r\n    }\r\n\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\emergence\\NeonsFunctionality.js",["388","389","390","391","392","393","394","395"],"import { useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Fade } from \"react-reveal\"\r\n\r\n\r\n\r\nexport function NeonStart(props) {\r\n    var [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"start\") {\r\n            return \"light_on_orange\"\r\n        } else {\r\n            return \"light_off\"\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div key={nanoid()}\r\n            className=\"darwinian_cycle\"\r\n            style={{\r\n                margin: \"auto\",\r\n                marginBottom: \"20px\",\r\n                marginTop: \"10px\",\r\n\r\n\r\n            }}\r\n        >\r\n\r\n\r\n            <h2\r\n                key={nanoid()}\r\n                className={neonClass}\r\n                style={{\r\n                    fontSize: \"20px\", textAlign: \"center\", fontFamily: \"monospace\"\r\n                }}\r\n                onClick={props.randomPopulation}\r\n            >\r\n                Click to play\r\n            </h2>\r\n\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\n\r\n\r\n\r\nexport function NeonEmission(props) {\r\n    var [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"emission\") {\r\n            return \"light_on_white\"\r\n        } else {\r\n            return \"light_off\"\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            key={nanoid()}\r\n            className=\"darwinian_cycle\"\r\n            // style={{ margin: \"30px auto 0px auto\", }}\r\n            style={{ margin: \"auto\", }}\r\n\r\n        >\r\n\r\n            <h2\r\n                key={nanoid()}\r\n                className={neonClass}\r\n                style={{\r\n                    fontSize: \"16px\", textAlign: \"center\", fontFamily: \"monospace\"\r\n                }}\r\n            >\r\n\r\n                <i>Emit</i> a response</h2>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n\r\nexport function NeonEmissionV2(props) {\r\n    var [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"emission\") {\r\n            // return \"light_on_white_v2\"\r\n            return \"light_on_blue\"\r\n        } else {\r\n            return \"light_off\"\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            key={nanoid()}\r\n            className=\"darwinian_cycle\"\r\n            style={{\r\n                margin: \"auto\",\r\n            }}\r\n        >\r\n\r\n            <h2\r\n                key={nanoid()}\r\n                className={neonClass}\r\n                style={{\r\n                    fontSize: \"16px\", textAlign: \"center\", fontFamily: \"monospace\"\r\n                }}\r\n            >\r\n\r\n                <i>Emit</i> a response</h2>\r\n\r\n        </div>\r\n    )\r\n};\r\n// export function NeonReinforcement(props) {\r\n//     var [neonClass, setNeonClass] = useState(() => {\r\n//         if (props.demoState === \"emission\") {\r\n//             //return \"light_on_orange\"\r\n//             return \"light_on_white\"\r\n//         } else {\r\n//             return \"light_off\"\r\n//         }\r\n//     })\r\n\r\n\r\n//     return (\r\n//         <div\r\n//             key={nanoid()}\r\n//             className=\"darwinian_cycle\"\r\n//         >\r\n//             <h2\r\n//                 key={nanoid()}\r\n//                 className={neonClass}\r\n//             >\r\n\r\n//                 <i>Emit</i> a response</h2>\r\n//         </div>\r\n//     )\r\n// };\r\n\r\n\r\n\r\nexport function NeonCreateNewPopulation(props) {\r\n    var [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"selection\" | props.demoState === \"recombination\" | props.demoState === \"mutation\") {\r\n            return \"light_on_neon\"\r\n        } else {\r\n            return \"light_off\"\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            key={nanoid()}\r\n            className=\"darwinian_cycle\"\r\n        >\r\n            <h2\r\n                key={nanoid()}\r\n                className={neonClass}\r\n            >\r\n\r\n                Create new generation</h2>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport function NeonSelection(props) {\r\n    var [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"selection\" && props.reinforced === true) {\r\n            return \"light_on_yellow\"\r\n        }\r\n        else if (props.demoState === \"selection\" && props.reinforced === false) {\r\n            return \"light_on_white\"\r\n        }\r\n        else {\r\n            return \"light_off\"\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            key={nanoid()}\r\n            className=\"darwinian_cycle\"\r\n        >\r\n            <h2\r\n                key={nanoid()}\r\n                className={neonClass}\r\n            >\r\n                Select parents\r\n            </h2>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\nexport function NeonRecombination(props) {\r\n    var [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"recombination\") {\r\n            //return \"light_on_green\"\r\n            return \"light_on_white\"\r\n\r\n        } else {\r\n            return \"light_off\"\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            key={nanoid()}\r\n            className=\"darwinian_cycle\"\r\n        >\r\n            <h2\r\n                key={nanoid()}\r\n                className={neonClass}\r\n            >\r\n                Recombination\r\n\r\n\r\n            </h2>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport function NeonMutation(props) {\r\n    var [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"mutation\") {\r\n            //return \"light_on_pink\"\r\n            return \"light_on_white\"\r\n\r\n        } else {\r\n            return \"light_off\"\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            key={nanoid()}\r\n            className=\"darwinian_cycle\"\r\n        >\r\n            <h2\r\n                key={nanoid()}\r\n                className={neonClass}\r\n            >\r\n                Mutation\r\n            </h2>\r\n\r\n        </div>\r\n    )\r\n};","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\HammingDistances.js",["396","397","398","399","400","401","402"],"import \"./hamming_style.sass\";\r\nimport \"./phenotypes.sass\";\r\n\r\n//import parse from \"html-react-parser\"\r\nimport * as d3 from \"d3\";\r\nimport { dec2bin, hdSelf, hdOther } from \"./hammingFunctions\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nimport { hdValues } from \"./hdValues\";\r\n\r\n\r\nfunction HammingDistances(props) {\r\n    const refHammingDistances = useRef()\r\n\r\n    const [data, setData] = useState(hdValues)\r\n    const [class1, setClass1] = useState([])\r\n    const [classes, setClasses] = useState([])\r\n    const [class2, setClass2] = useState([]) // just for hd-cod;\r\n\r\n\r\n    useEffect(() => {\r\n        let size = 3\r\n        let boundary2 = props.boundary1 + 1\r\n        let class1 = d3.range(props.boundary1 - size, props.boundary1 + 1)\r\n        let classes = d3.range(props.boundary1 - size, boundary2 + 1 + size)\r\n        let class2 = d3.range(props.boundary1 + 1, boundary2 + 1 + size)\r\n\r\n        let myData = []\r\n\r\n        class1.forEach((b1) => {\r\n            let g1 = dec2bin(10, b1)\r\n            classes.forEach((b12) => {\r\n                let g12 = dec2bin(10, b12)\r\n                let hd = 0\r\n                for (let i = 0; i < g12.length; i++) {\r\n                    if (g1[i] !== g12[i]) {\r\n                        hd = hd + 1\r\n                    }\r\n                }\r\n                myData.push(\r\n                    { b1: b1, b12: b12, hd: hd, g1: g1, g12: g12 }\r\n                )\r\n            })\r\n        })\r\n        // console.log(\"HammingDistances:\")\r\n        // console.log(myData)\r\n\r\n        //setData(myData)\r\n        setClass1(class1)\r\n        setClasses(classes)\r\n        setClass2(class2)\r\n\r\n    }, [props])\r\n\r\n\r\n    useEffect(() => {\r\n        let margin = { top: 20, right: 20, bottom: 100, left: 40, }\r\n        let svgWidth = 550\r\n        let svgHeight = 250\r\n        let width = svgWidth - margin.left - margin.right\r\n        let height = svgHeight - margin.top - margin.bottom\r\n\r\n        let X_Band = d3.scaleBand()\r\n            .range([0, width])\r\n            .domain(\r\n                data.map((d) => {\r\n                    return d.hdNext.hdLabel\r\n                }))\r\n            .padding(0.0);\r\n\r\n        let Y_Linear = d3.scaleLinear().range([height, 0]).domain([1, 10]);\r\n\r\n        let HammingChart = d3.select(refHammingDistances.current).attr(\"transform\",\r\n            `translate(${margin.left},${margin.top})`);\r\n\r\n        HammingChart.select(\".hammingX\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(\r\n                d3.axisBottom(X_Band)\r\n                    .tickSize(0)\r\n            )\r\n            .selectAll(\"text\").remove()\r\n\r\n        HammingChart.select(\".hammingY\")\r\n            .call(\r\n                d3.axisLeft(Y_Linear)\r\n                    .tickPadding(10)\r\n            )\r\n\r\n\r\n        HammingChart.select(\".hammingBarPhens\")\r\n            .selectAll(\"rect\")\r\n            .data(data)\r\n            .join(\r\n                enter => enter.append('rect').attr(\"class\", \"new\"),\r\n                update => update.attr(\"class\", \"update\"),\r\n                exit => exit.remove().transition()\r\n                    .duration(1000)\r\n            )\r\n            .attr(\"x\", (d) => X_Band(d.hdNext.hdLabel))\r\n            .attr(\"y\", (d) => Y_Linear(d.hdNext.hd))\r\n            .attr(\"width\", X_Band.bandwidth())\r\n            .attr(\"height\", (d) => height - Y_Linear(d.hdNext.hd))\r\n            .attr(\"stroke-width\", 1)\r\n\r\n\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        var updateColors = () => {\r\n            let hammingBins = d3.select(\".hammingBarPhens\").selectAll(\"rect\")\r\n\r\n            hammingBins.attr(\"fill\", (d) => {\r\n                if (d.phenotype >= props.limit1 & d.phenotype <= props.boundary1) {\r\n                    return 'rgb(28, 255, 28)'\r\n                } else if (d.phenotype >= props.boundary2 & d.phenotype <= props.limit2) {\r\n                    return 'rgb(255, 128, 49)'\r\n\r\n                } else {\r\n                    return '#fff'\r\n                }\r\n            })\r\n            hammingBins.attr(\"stroke\", (d) => {\r\n                if (d.phenotype >= props.limit1 & d.phenotype <= props.boundary1) {\r\n                    return 'rgb(28, 255, 28)'\r\n                } else if (d.phenotype >= props.boundary2 & d.phenotype <= props.limit2) {\r\n                    return 'rgb(255, 128, 49)'\r\n                } else {\r\n                    return 'none'\r\n                }\r\n            })\r\n        }\r\n\r\n        updateColors()\r\n\r\n\r\n    }, [props.limit1, props.boundary1, props.limit2, props.boundary2]\r\n    );\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let HammingChart = d3.select(refHammingDistances.current)\r\n\r\n        HammingChart.append(\"rect\")\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <div\r\n                id=\"divHammingChart\"\r\n                style={{\r\n                    backgroundColor: \"#446b58\",\r\n                    position: \"relative\",\r\n                    marginTop: \"10px\",\r\n                }}\r\n            >\r\n                <svg id=\"svgHammingChart\">\r\n\r\n                    <g ref={refHammingDistances}>\r\n                        <g className=\"hammingX\"></g>\r\n                        <g className=\"hammingY\"></g>\r\n                        <g className=\"chartInfo\"></g>\r\n                        <g className=\"hammingBarPhens\"></g>\r\n                    </g>\r\n\r\n                </svg>\r\n\r\n                {/* <div id=\"ttPhenotypes\"></div> */}\r\n\r\n            </div >\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default HammingDistances;\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\etbd_input\\InputTemplate.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd\\recombineAndMutate.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd\\etbdState.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\hdValues.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\hdCodValues.js",[],{"ruleId":"403","replacedBy":"404"},{"ruleId":"405","replacedBy":"406"},{"ruleId":"407","severity":1,"message":"408","line":2,"column":10,"nodeType":"409","messageId":"410","endLine":2,"endColumn":16},{"ruleId":"407","severity":1,"message":"411","line":10,"column":8,"nodeType":"409","messageId":"410","endLine":10,"endColumn":17},{"ruleId":"407","severity":1,"message":"412","line":3,"column":8,"nodeType":"409","messageId":"410","endLine":3,"endColumn":13},{"ruleId":"407","severity":1,"message":"412","line":4,"column":8,"nodeType":"409","messageId":"410","endLine":4,"endColumn":13},{"ruleId":"407","severity":1,"message":"408","line":5,"column":10,"nodeType":"409","messageId":"410","endLine":5,"endColumn":16},{"ruleId":"407","severity":1,"message":"413","line":31,"column":13,"nodeType":"409","messageId":"410","endLine":31,"endColumn":19},{"ruleId":"414","severity":1,"message":"415","line":49,"column":21,"nodeType":"416","messageId":"417","endLine":49,"endColumn":36},{"ruleId":"414","severity":1,"message":"415","line":50,"column":21,"nodeType":"416","messageId":"417","endLine":50,"endColumn":36},{"ruleId":"407","severity":1,"message":"418","line":12,"column":8,"nodeType":"409","messageId":"410","endLine":12,"endColumn":12},{"ruleId":"407","severity":1,"message":"419","line":17,"column":8,"nodeType":"409","messageId":"410","endLine":17,"endColumn":19},{"ruleId":"420","severity":1,"message":"421","line":100,"column":52,"nodeType":"422","messageId":"423","endLine":100,"endColumn":53},{"ruleId":"424","severity":1,"message":"425","line":129,"column":50,"nodeType":"426","messageId":"427","endLine":129,"endColumn":52},{"ruleId":"428","severity":1,"message":"429","line":219,"column":9,"nodeType":"430","messageId":"431","endLine":233,"endColumn":10},{"ruleId":"432","severity":1,"message":"433","line":219,"column":9,"nodeType":"409","messageId":"434","endLine":219,"endColumn":16,"fix":"435"},{"ruleId":"407","severity":1,"message":"436","line":15,"column":8,"nodeType":"409","messageId":"410","endLine":15,"endColumn":25},{"ruleId":"407","severity":1,"message":"437","line":5,"column":8,"nodeType":"409","messageId":"410","endLine":5,"endColumn":12},{"ruleId":"407","severity":1,"message":"438","line":9,"column":8,"nodeType":"409","messageId":"410","endLine":9,"endColumn":30},{"ruleId":"407","severity":1,"message":"437","line":4,"column":8,"nodeType":"409","messageId":"410","endLine":4,"endColumn":12},{"ruleId":"407","severity":1,"message":"412","line":5,"column":8,"nodeType":"409","messageId":"410","endLine":5,"endColumn":13},{"ruleId":"414","severity":1,"message":"415","line":25,"column":17,"nodeType":"416","messageId":"417","endLine":25,"endColumn":32},{"ruleId":"414","severity":1,"message":"415","line":27,"column":17,"nodeType":"416","messageId":"417","endLine":27,"endColumn":32},{"ruleId":"414","severity":1,"message":"415","line":28,"column":17,"nodeType":"416","messageId":"417","endLine":28,"endColumn":32},{"ruleId":"414","severity":1,"message":"415","line":29,"column":17,"nodeType":"416","messageId":"417","endLine":29,"endColumn":32},{"ruleId":"414","severity":1,"message":"415","line":31,"column":17,"nodeType":"416","messageId":"417","endLine":31,"endColumn":32},{"ruleId":"414","severity":1,"message":"439","line":108,"column":33,"nodeType":"416","messageId":"417","endLine":108,"endColumn":43},{"ruleId":"407","severity":1,"message":"437","line":4,"column":8,"nodeType":"409","messageId":"410","endLine":4,"endColumn":12},{"ruleId":"407","severity":1,"message":"412","line":5,"column":8,"nodeType":"409","messageId":"410","endLine":5,"endColumn":13},{"ruleId":"407","severity":1,"message":"440","line":6,"column":13,"nodeType":"409","messageId":"410","endLine":6,"endColumn":15},{"ruleId":"407","severity":1,"message":"441","line":7,"column":10,"nodeType":"409","messageId":"410","endLine":7,"endColumn":19},{"ruleId":"407","severity":1,"message":"442","line":12,"column":11,"nodeType":"409","messageId":"410","endLine":12,"endColumn":21},{"ruleId":"407","severity":1,"message":"443","line":111,"column":13,"nodeType":"409","messageId":"410","endLine":111,"endColumn":18},{"ruleId":"407","severity":1,"message":"444","line":112,"column":13,"nodeType":"409","messageId":"410","endLine":112,"endColumn":18},{"ruleId":"407","severity":1,"message":"445","line":146,"column":13,"nodeType":"409","messageId":"410","endLine":146,"endColumn":15},{"ruleId":"407","severity":1,"message":"446","line":235,"column":29,"nodeType":"409","messageId":"410","endLine":235,"endColumn":31},{"ruleId":"407","severity":1,"message":"446","line":256,"column":29,"nodeType":"409","messageId":"410","endLine":256,"endColumn":31},{"ruleId":"407","severity":1,"message":"447","line":324,"column":29,"nodeType":"409","messageId":"410","endLine":324,"endColumn":31},{"ruleId":"407","severity":1,"message":"447","line":343,"column":29,"nodeType":"409","messageId":"410","endLine":343,"endColumn":31},{"ruleId":"407","severity":1,"message":"448","line":381,"column":17,"nodeType":"409","messageId":"410","endLine":381,"endColumn":24},{"ruleId":"407","severity":1,"message":"449","line":3,"column":8,"nodeType":"409","messageId":"410","endLine":3,"endColumn":16},{"ruleId":"414","severity":1,"message":"450","line":91,"column":56,"nodeType":"416","messageId":"417","endLine":91,"endColumn":61},{"ruleId":"407","severity":1,"message":"441","line":5,"column":20,"nodeType":"409","messageId":"410","endLine":5,"endColumn":29},{"ruleId":"407","severity":1,"message":"451","line":18,"column":10,"nodeType":"409","messageId":"410","endLine":18,"endColumn":20},{"ruleId":"407","severity":1,"message":"452","line":18,"column":22,"nodeType":"409","messageId":"410","endLine":18,"endColumn":38},{"ruleId":"453","severity":1,"message":"454","line":69,"column":1,"nodeType":"455","messageId":"456","endLine":71,"endColumn":39},{"ruleId":"407","severity":1,"message":"457","line":7,"column":8,"nodeType":"409","messageId":"410","endLine":7,"endColumn":19},{"ruleId":"407","severity":1,"message":"408","line":8,"column":10,"nodeType":"409","messageId":"410","endLine":8,"endColumn":16},{"ruleId":"414","severity":1,"message":"458","line":254,"column":21,"nodeType":"416","messageId":"417","endLine":254,"endColumn":27},{"ruleId":"414","severity":1,"message":"459","line":255,"column":21,"nodeType":"416","messageId":"417","endLine":255,"endColumn":27},{"ruleId":"407","severity":1,"message":"408","line":1,"column":10,"nodeType":"409","messageId":"410","endLine":1,"endColumn":16},{"ruleId":"407","severity":1,"message":"460","line":3,"column":10,"nodeType":"409","messageId":"410","endLine":3,"endColumn":14},{"ruleId":"414","severity":1,"message":"450","line":40,"column":29,"nodeType":"416","messageId":"417","endLine":40,"endColumn":34},{"ruleId":"407","severity":1,"message":"408","line":1,"column":10,"nodeType":"409","messageId":"410","endLine":1,"endColumn":16},{"ruleId":"407","severity":1,"message":"460","line":3,"column":10,"nodeType":"409","messageId":"410","endLine":3,"endColumn":14},{"ruleId":"407","severity":1,"message":"461","line":5,"column":10,"nodeType":"409","messageId":"410","endLine":5,"endColumn":14},{"ruleId":"424","severity":1,"message":"462","line":10,"column":39,"nodeType":"426","messageId":"427","endLine":10,"endColumn":41},{"ruleId":"407","severity":1,"message":"443","line":172,"column":13,"nodeType":"409","messageId":"410","endLine":172,"endColumn":18},{"ruleId":"407","severity":1,"message":"444","line":173,"column":13,"nodeType":"409","messageId":"410","endLine":173,"endColumn":18},{"ruleId":"407","severity":1,"message":"463","line":239,"column":13,"nodeType":"409","messageId":"410","endLine":239,"endColumn":27},{"ruleId":"407","severity":1,"message":"445","line":259,"column":13,"nodeType":"409","messageId":"410","endLine":259,"endColumn":15},{"ruleId":"407","severity":1,"message":"448","line":408,"column":17,"nodeType":"409","messageId":"410","endLine":408,"endColumn":24},{"ruleId":"464","severity":1,"message":"465","line":582,"column":43,"nodeType":"426","messageId":"466","endLine":585,"endColumn":22},{"ruleId":"407","severity":1,"message":"467","line":16,"column":8,"nodeType":"409","messageId":"410","endLine":16,"endColumn":15},{"ruleId":"424","severity":1,"message":"468","line":104,"column":17,"nodeType":"469","messageId":"470","endLine":104,"endColumn":23},{"ruleId":"407","severity":1,"message":"460","line":14,"column":10,"nodeType":"409","messageId":"410","endLine":14,"endColumn":14},{"ruleId":"407","severity":1,"message":"471","line":16,"column":10,"nodeType":"409","messageId":"410","endLine":16,"endColumn":19},{"ruleId":"407","severity":1,"message":"472","line":16,"column":21,"nodeType":"409","messageId":"410","endLine":16,"endColumn":33},{"ruleId":"407","severity":1,"message":"473","line":16,"column":51,"nodeType":"409","messageId":"410","endLine":16,"endColumn":74},{"ruleId":"407","severity":1,"message":"474","line":24,"column":8,"nodeType":"409","messageId":"410","endLine":24,"endColumn":20},{"ruleId":"407","severity":1,"message":"475","line":26,"column":8,"nodeType":"409","messageId":"410","endLine":26,"endColumn":18},{"ruleId":"407","severity":1,"message":"476","line":37,"column":10,"nodeType":"409","messageId":"410","endLine":37,"endColumn":23},{"ruleId":"407","severity":1,"message":"477","line":193,"column":21,"nodeType":"409","messageId":"410","endLine":193,"endColumn":23},{"ruleId":"407","severity":1,"message":"478","line":196,"column":21,"nodeType":"409","messageId":"410","endLine":196,"endColumn":24},{"ruleId":"407","severity":1,"message":"479","line":259,"column":13,"nodeType":"409","messageId":"410","endLine":259,"endColumn":15},{"ruleId":"407","severity":1,"message":"480","line":335,"column":13,"nodeType":"409","messageId":"410","endLine":335,"endColumn":17},{"ruleId":"407","severity":1,"message":"481","line":371,"column":13,"nodeType":"409","messageId":"410","endLine":371,"endColumn":15},{"ruleId":"407","severity":1,"message":"482","line":604,"column":13,"nodeType":"409","messageId":"410","endLine":604,"endColumn":15},{"ruleId":"407","severity":1,"message":"483","line":62,"column":13,"nodeType":"409","messageId":"410","endLine":62,"endColumn":18},{"ruleId":"407","severity":1,"message":"484","line":63,"column":13,"nodeType":"409","messageId":"410","endLine":63,"endColumn":19},{"ruleId":"407","severity":1,"message":"485","line":1,"column":10,"nodeType":"409","messageId":"410","endLine":1,"endColumn":18},{"ruleId":"486","severity":1,"message":"487","line":109,"column":9,"nodeType":"488","endLine":109,"endColumn":42,"suggestions":"489"},{"ruleId":"407","severity":1,"message":"490","line":26,"column":12,"nodeType":"409","messageId":"410","endLine":26,"endColumn":18},{"ruleId":"407","severity":1,"message":"491","line":27,"column":12,"nodeType":"409","messageId":"410","endLine":27,"endColumn":19},{"ruleId":"407","severity":1,"message":"492","line":28,"column":12,"nodeType":"409","messageId":"410","endLine":28,"endColumn":18},{"ruleId":"407","severity":1,"message":"493","line":35,"column":21,"nodeType":"409","messageId":"410","endLine":35,"endColumn":31},{"ruleId":"486","severity":1,"message":"494","line":294,"column":8,"nodeType":"488","endLine":294,"endColumn":14,"suggestions":"495"},{"ruleId":"407","severity":1,"message":"483","line":316,"column":13,"nodeType":"409","messageId":"410","endLine":316,"endColumn":18},{"ruleId":"486","severity":1,"message":"496","line":419,"column":8,"nodeType":"488","endLine":419,"endColumn":14,"suggestions":"497"},{"ruleId":"407","severity":1,"message":"460","line":5,"column":10,"nodeType":"409","messageId":"410","endLine":5,"endColumn":14},{"ruleId":"407","severity":1,"message":"498","line":6,"column":10,"nodeType":"409","messageId":"410","endLine":6,"endColumn":16},{"ruleId":"424","severity":1,"message":"468","line":119,"column":48,"nodeType":"426","messageId":"499","endLine":119,"endColumn":50},{"ruleId":"407","severity":1,"message":"485","line":3,"column":10,"nodeType":"409","messageId":"410","endLine":3,"endColumn":18},{"ruleId":"407","severity":1,"message":"441","line":3,"column":20,"nodeType":"409","messageId":"410","endLine":3,"endColumn":29},{"ruleId":"407","severity":1,"message":"460","line":5,"column":10,"nodeType":"409","messageId":"410","endLine":5,"endColumn":14},{"ruleId":"407","severity":1,"message":"498","line":6,"column":10,"nodeType":"409","messageId":"410","endLine":6,"endColumn":16},{"ruleId":"407","severity":1,"message":"500","line":20,"column":13,"nodeType":"409","messageId":"410","endLine":20,"endColumn":14},{"ruleId":"407","severity":1,"message":"501","line":36,"column":13,"nodeType":"409","messageId":"410","endLine":36,"endColumn":28},{"ruleId":"424","severity":1,"message":"468","line":47,"column":25,"nodeType":"426","messageId":"499","endLine":47,"endColumn":27},{"ruleId":"424","severity":1,"message":"468","line":63,"column":48,"nodeType":"426","messageId":"499","endLine":63,"endColumn":50},{"ruleId":"407","severity":1,"message":"412","line":3,"column":8,"nodeType":"409","messageId":"410","endLine":3,"endColumn":13},{"ruleId":"502","severity":1,"message":"503","line":8,"column":5,"nodeType":"504","messageId":"505","endLine":11,"endColumn":6},{"ruleId":"407","severity":1,"message":"460","line":3,"column":10,"nodeType":"409","messageId":"410","endLine":3,"endColumn":14},{"ruleId":"407","severity":1,"message":"506","line":8,"column":21,"nodeType":"409","messageId":"410","endLine":8,"endColumn":33},{"ruleId":"407","severity":1,"message":"506","line":50,"column":21,"nodeType":"409","messageId":"410","endLine":50,"endColumn":33},{"ruleId":"407","severity":1,"message":"506","line":86,"column":21,"nodeType":"409","messageId":"410","endLine":86,"endColumn":33},{"ruleId":"407","severity":1,"message":"506","line":147,"column":21,"nodeType":"409","messageId":"410","endLine":147,"endColumn":33},{"ruleId":"407","severity":1,"message":"506","line":173,"column":21,"nodeType":"409","messageId":"410","endLine":173,"endColumn":33},{"ruleId":"407","severity":1,"message":"506","line":204,"column":21,"nodeType":"409","messageId":"410","endLine":204,"endColumn":33},{"ruleId":"407","severity":1,"message":"506","line":234,"column":21,"nodeType":"409","messageId":"410","endLine":234,"endColumn":33},{"ruleId":"407","severity":1,"message":"507","line":6,"column":19,"nodeType":"409","messageId":"410","endLine":6,"endColumn":25},{"ruleId":"407","severity":1,"message":"508","line":6,"column":27,"nodeType":"409","messageId":"410","endLine":6,"endColumn":34},{"ruleId":"407","severity":1,"message":"509","line":18,"column":18,"nodeType":"409","messageId":"410","endLine":18,"endColumn":25},{"ruleId":"407","severity":1,"message":"490","line":19,"column":12,"nodeType":"409","messageId":"410","endLine":19,"endColumn":18},{"ruleId":"407","severity":1,"message":"491","line":20,"column":12,"nodeType":"409","messageId":"410","endLine":20,"endColumn":19},{"ruleId":"407","severity":1,"message":"492","line":21,"column":12,"nodeType":"409","messageId":"410","endLine":21,"endColumn":18},{"ruleId":"486","severity":1,"message":"510","line":111,"column":8,"nodeType":"488","endLine":111,"endColumn":10,"suggestions":"511"},"no-native-reassign",["512"],"no-negated-in-lhs",["513"],"no-unused-vars","'nanoid' is defined but never used.","Identifier","unusedVar","'Chapter04' is defined but never used.","'parse' is defined but never used.","'Skills' is assigned a value but never used.","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected","'Qual' is defined but never used.","'LovelyOgive' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-labels","Unexpected labeled statement.","LabeledStatement","unexpectedLabel","no-unused-labels","'HAMMING:' is defined but never used.","unused",{"range":"514","text":"515"},"'TeachingAssistant' is defined but never used.","'data' is defined but never used.","'hamming_abs_reinf_rate' is defined but never used.","Duplicate key 'fontWeight'.","'d3' is defined but never used.","'useEffect' is defined but never used.","'phenString' is assigned a value but never used.","'r1min' is assigned a value but never used.","'r2min' is assigned a value but never used.","'Be' is assigned a value but never used.","'t1' is assigned a value but never used.","'t2' is assigned a value but never used.","'delta_t' is assigned a value but never used.","'ReadMore' is defined but never used.","Duplicate key 'color'.","'population' is assigned a value but never used.","'updatePopulation' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'HammingDemo' is defined but never used.","Duplicate key 'margin'.","Duplicate key 'border'.","'Fade' is defined but never used.","'Card' is defined but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'allPopulations' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'randomFitness', 'relativeFitnessValues'.","unsafeRefs","'TableHD' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'NeonStart' is defined but never used.","'NeonEmission' is defined but never used.","'NeonCreateNewPopulation' is defined but never used.","'AgentHistory' is defined but never used.","'ButtonNext' is defined but never used.","'MyD3Component' is defined but never used.","'rd' is assigned a value but never used.","'rf1' is assigned a value but never used.","'gn' is assigned a value but never used.","'bits' is assigned a value but never used.","'x0' is assigned a value but never used.","'tn' is assigned a value but never used.","'width' is assigned a value but never used.","'height' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'd3Container.current'. Either exclude it or remove the dependency array. Mutable values like 'd3Container.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["516"],"'class1' is assigned a value but never used.","'classes' is assigned a value but never used.","'class2' is assigned a value but never used.","'setPlotAvg' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hd_cod', 'hd_other', 'hd_self', 'plotAvg', and 'props.boundary1'. Either include them or remove the dependency array.",["517"],"React Hook useEffect has missing dependencies: 'hd_cod', 'hd_other', 'hd_self', 'props.boundary1', 'props.boundary2', 'props.limit1', and 'props.limit2'. Either include them or remove the dependency array.",["518"],"'Button' is defined but never used.","expectedInside","'a' is assigned a value but never used.","'defaultGenotype' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'setNeonClass' is assigned a value but never used.","'hdSelf' is defined but never used.","'hdOther' is defined but never used.","'setData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["519"],"no-global-assign","no-unsafe-negation",[5742,5760],"",{"desc":"520","fix":"521"},{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},"Update the dependencies array to be: [props.data]",{"range":"528","text":"529"},"Update the dependencies array to be: [data, hd_cod, hd_other, hd_self, plotAvg, props.boundary1]",{"range":"530","text":"531"},"Update the dependencies array to be: [data, hd_cod, hd_other, hd_self, props.boundary1, props.boundary2, props.limit1, props.limit2]",{"range":"532","text":"533"},"Update the dependencies array to be: [data]",{"range":"534","text":"535"},[3928,3961],"[props.data]",[8573,8579],"[data, hd_cod, hd_other, hd_self, plotAvg, props.boundary1]",[12301,12307],"[data, hd_cod, hd_other, hd_self, props.boundary1, props.boundary2, props.limit1, props.limit2]",[3473,3475],"[data]"]
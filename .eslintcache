[{"F:\\react_portfolio\\src\\index.js":"1","F:\\react_portfolio\\src\\App.js":"2","F:\\react_portfolio\\src\\COMPONENTS\\about_files\\AboutSection.js":"3","F:\\react_portfolio\\src\\COMPONENTS\\background\\Chapter04.js":"4","F:\\react_portfolio\\src\\COMPONENTS\\contact\\ContactSection.js":"5","F:\\react_portfolio\\src\\DATA\\infoTimeline.js":"6","F:\\react_portfolio\\src\\DATA\\myData.js":"7","F:\\react_portfolio\\src\\DATA\\infoSkills.js":"8","F:\\react_portfolio\\src\\DATA\\infoRecent.js":"9","F:\\react_portfolio\\src\\DATA\\infoTeaching.js":"10","F:\\react_portfolio\\src\\DATA\\infoContact.js":"11","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\LovelyOgive.jsx":"12","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingCard.jsx":"13","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingAssistant.jsx":"14","F:\\react_portfolio\\src\\COMPONENTS\\matching\\matchingState.js":"15","F:\\react_portfolio\\src\\DATA\\infoNav.js":"16","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\HammingDemo.js":"17","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\TableHook.js":"18","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\HeatmapHook.js":"19","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\hammingFunctions.js":"20","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\HammingDistances.js":"21","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\etbdState.js":"22","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\hdValues.js":"23","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\hdCodValues.js":"24","F:\\react_portfolio\\src\\COMPONENTS\\etbd_nbt\\Nbt2008.jsx":"25","F:\\react_portfolio\\src\\COMPONENTS\\etbd_nbt\\nbtData.js":"26","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingLMS.jsx":"27","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingSection.jsx":"28","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\OrderFellowship.jsx":"29","F:\\react_portfolio\\src\\DATA\\infoHighlights.js":"30","F:\\react_portfolio\\src\\COMPONENTS\\header_files\\NavMain.jsx":"31","F:\\react_portfolio\\src\\COMPONENTS\\header_files\\NavCollapse.jsx":"32","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\infoCV.js":"33","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\CitationVitae.jsx":"34","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\ContinuousEducation.jsx":"35","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\certificates.js":"36","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\MyVitae.jsx":"37","F:\\react_portfolio\\src\\COMPONENTS\\abc\\Highlighted.jsx":"38","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\FilterCheckbox.jsx":"39","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingIntro.jsx":"40","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\research_study\\ResearchStudyNew.js":"41","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\research_study\\StudyInfo.jsx":"42","F:\\react_portfolio\\src\\COMPONENTS\\header_files\\HeaderSection.jsx":"43","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\MyTimeline.jsx":"44","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\CollapseHook.jsx":"45","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\ReadMore.jsx":"46","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\ImagesCarousel.jsx":"47","F:\\react_portfolio\\src\\COMPONENTS\\header_files\\NavAcronyms.jsx":"48","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\demoEtbd.js":"49","F:\\react_portfolio\\src\\COMPONENTS\\matching\\CumulativeRecord.jsx":"50","F:\\react_portfolio\\src\\COMPONENTS\\matching\\dataSample.js":"51","F:\\react_portfolio\\src\\COMPONENTS\\abc\\InputSlider.jsx":"52","F:\\react_portfolio\\src\\COMPONENTS\\abc\\InputSliderRange.jsx":"53","F:\\react_portfolio\\src\\COMPONENTS\\abc\\InputPlusMinus.jsx":"54","F:\\react_portfolio\\src\\COMPONENTS\\background\\ResearchIntro.jsx":"55","F:\\react_portfolio\\src\\COMPONENTS\\background\\ResearchOverview.jsx":"56","F:\\react_portfolio\\src\\COMPONENTS\\matching\\MatchingDemo.jsx":"57","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\etbdSampleData.js":"58","F:\\react_portfolio\\src\\COMPONENTS\\matching\\CumulativeRecordV2.js":"59","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\Agent44.js":"60","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\Agent46.js":"61","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\Agent48.js":"62","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\Agent50.js":"63","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\FlippedCards.js":"64","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\Gen.js":"65","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\IsThereCake.js":"66","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\Population.js":"67","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\BehaviorSpaceBasic.js":"68","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\BoxTitle.js":"69","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\PopulationItem.js":"70","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\EmissionSign.js":"71","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\ConsequenceSign.js":"72","F:\\react_portfolio\\src\\COMPONENTS\\background\\ResearchDemo.jsx":"73","F:\\react_portfolio\\src\\COMPONENTS\\background\\TeaserPopa2019.jsx":"74","F:\\react_portfolio\\src\\COMPONENTS\\background\\BgDivider.jsx":"75","F:\\react_portfolio\\src\\COMPONENTS\\matching\\DivPoints.js":"76","F:\\react_portfolio\\src\\COMPONENTS\\abc\\PopOverV2.js":"77","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\NeonsSigns.jsx":"78","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\fitness\\SelectionPressure.jsx":"79","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\fitness\\FitnessD3.jsx":"80","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\emission\\NeonEmitBehavior.jsx":"81","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\mutation\\MutationDemo.jsx":"82","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\selection\\SelectParents.jsx":"83","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\emission\\AvailableOptions.jsx":"84","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\recombination\\RecombineGenotypes.jsx":"85","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\mutation\\CbxMutation.jsx":"86","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\recombination\\RadioHook.jsx":"87","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\EmergenceMain2.jsx":"88","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\littleHelpers.js":"89"},{"size":231,"mtime":1644424537603,"results":"90","hashOfConfig":"91"},{"size":6658,"mtime":1666615005689,"results":"92","hashOfConfig":"91"},{"size":1810,"mtime":1663612037571,"results":"93","hashOfConfig":"91"},{"size":5549,"mtime":1644424839882,"results":"94","hashOfConfig":"91"},{"size":3338,"mtime":1651447628699,"results":"95","hashOfConfig":"91"},{"size":67967,"mtime":1650231928190,"results":"96","hashOfConfig":"91"},{"size":3977,"mtime":1644424840022,"results":"97","hashOfConfig":"91"},{"size":2750,"mtime":1655295015957,"results":"98","hashOfConfig":"91"},{"size":3936,"mtime":1645563844581,"results":"99","hashOfConfig":"91"},{"size":10319,"mtime":1651095769871,"results":"100","hashOfConfig":"91"},{"size":2332,"mtime":1644424840012,"results":"101","hashOfConfig":"91"},{"size":12400,"mtime":1651326132811,"results":"102","hashOfConfig":"91"},{"size":2735,"mtime":1651096318316,"results":"103","hashOfConfig":"91"},{"size":3914,"mtime":1647645858887,"results":"104","hashOfConfig":"91"},{"size":2247,"mtime":1664833779525,"results":"105","hashOfConfig":"91"},{"size":4997,"mtime":1665102837011,"results":"106","hashOfConfig":"91"},{"size":8970,"mtime":1644424839892,"results":"107","hashOfConfig":"91"},{"size":6993,"mtime":1644424839892,"results":"108","hashOfConfig":"91"},{"size":13259,"mtime":1644424839892,"results":"109","hashOfConfig":"91"},{"size":2551,"mtime":1644424839892,"results":"110","hashOfConfig":"91"},{"size":5541,"mtime":1644424839892,"results":"111","hashOfConfig":"91"},{"size":1693,"mtime":1666417699974,"results":"112","hashOfConfig":"91"},{"size":206498,"mtime":1644424839902,"results":"113","hashOfConfig":"91"},{"size":585109,"mtime":1644424839902,"results":"114","hashOfConfig":"91"},{"size":9488,"mtime":1645549364615,"results":"115","hashOfConfig":"91"},{"size":8310,"mtime":1645548706926,"results":"116","hashOfConfig":"91"},{"size":2694,"mtime":1651139679438,"results":"117","hashOfConfig":"91"},{"size":4323,"mtime":1655119308620,"results":"118","hashOfConfig":"91"},{"size":11277,"mtime":1651095445319,"results":"119","hashOfConfig":"91"},{"size":63589,"mtime":1655362069067,"results":"120","hashOfConfig":"91"},{"size":2382,"mtime":1654972796475,"results":"121","hashOfConfig":"91"},{"size":1120,"mtime":1654985527872,"results":"122","hashOfConfig":"91"},{"size":71243,"mtime":1651022610889,"results":"123","hashOfConfig":"91"},{"size":1861,"mtime":1651028613351,"results":"124","hashOfConfig":"91"},{"size":3724,"mtime":1651453201544,"results":"125","hashOfConfig":"91"},{"size":2060,"mtime":1650456827230,"results":"126","hashOfConfig":"91"},{"size":14796,"mtime":1651450748078,"results":"127","hashOfConfig":"91"},{"size":684,"mtime":1650807040436,"results":"128","hashOfConfig":"91"},{"size":1841,"mtime":1651026427743,"results":"129","hashOfConfig":"91"},{"size":1008,"mtime":1663348084107,"results":"130","hashOfConfig":"91"},{"size":4255,"mtime":1655012542002,"results":"131","hashOfConfig":"91"},{"size":4760,"mtime":1651372143290,"results":"132","hashOfConfig":"91"},{"size":1832,"mtime":1655112644036,"results":"133","hashOfConfig":"91"},{"size":7055,"mtime":1655095335368,"results":"134","hashOfConfig":"91"},{"size":1325,"mtime":1651202663325,"results":"135","hashOfConfig":"91"},{"size":1259,"mtime":1651182830479,"results":"136","hashOfConfig":"91"},{"size":1660,"mtime":1651460587478,"results":"137","hashOfConfig":"91"},{"size":3180,"mtime":1651461558698,"results":"138","hashOfConfig":"91"},{"size":14416,"mtime":1659248134282,"results":"139","hashOfConfig":"91"},{"size":17973,"mtime":1657417485057,"results":"140","hashOfConfig":"91"},{"size":11362,"mtime":1653445868540,"results":"141","hashOfConfig":"91"},{"size":3629,"mtime":1654562640662,"results":"142","hashOfConfig":"91"},{"size":3656,"mtime":1654562626883,"results":"143","hashOfConfig":"91"},{"size":0,"mtime":1654674504511,"results":"144","hashOfConfig":"91"},{"size":1043,"mtime":1663612409908,"results":"145","hashOfConfig":"91"},{"size":2049,"mtime":1664802851352,"results":"146","hashOfConfig":"91"},{"size":23569,"mtime":1665036991258,"results":"147","hashOfConfig":"91"},{"size":41602,"mtime":1658430134788,"results":"148","hashOfConfig":"91"},{"size":10676,"mtime":1665035664072,"results":"149","hashOfConfig":"91"},{"size":16713,"mtime":1659238023355,"results":"150","hashOfConfig":"91"},{"size":24615,"mtime":1659302487727,"results":"151","hashOfConfig":"91"},{"size":21716,"mtime":1659919663573,"results":"152","hashOfConfig":"91"},{"size":16786,"mtime":1665036928895,"results":"153","hashOfConfig":"91"},{"size":1989,"mtime":1659918781234,"results":"154","hashOfConfig":"91"},{"size":1185,"mtime":1659851039599,"results":"155","hashOfConfig":"91"},{"size":1597,"mtime":1659950250782,"results":"156","hashOfConfig":"91"},{"size":4242,"mtime":1663290292080,"results":"157","hashOfConfig":"91"},{"size":1040,"mtime":1662080097333,"results":"158","hashOfConfig":"91"},{"size":810,"mtime":1661992836836,"results":"159","hashOfConfig":"91"},{"size":1959,"mtime":1662081064495,"results":"160","hashOfConfig":"91"},{"size":1327,"mtime":1662240392205,"results":"161","hashOfConfig":"91"},{"size":2859,"mtime":1662307023943,"results":"162","hashOfConfig":"91"},{"size":400,"mtime":1663841933796,"results":"163","hashOfConfig":"91"},{"size":1615,"mtime":1663345835327,"results":"164","hashOfConfig":"91"},{"size":307,"mtime":1663706881123,"results":"165","hashOfConfig":"91"},{"size":809,"mtime":1664498840535,"results":"166","hashOfConfig":"91"},{"size":1063,"mtime":1665345037762,"results":"167","hashOfConfig":"91"},{"size":3922,"mtime":1665426249287,"results":"168","hashOfConfig":"91"},{"size":2247,"mtime":1665521276980,"results":"169","hashOfConfig":"91"},{"size":10662,"mtime":1665481728838,"results":"170","hashOfConfig":"91"},{"size":614,"mtime":1665794226839,"results":"171","hashOfConfig":"91"},{"size":3141,"mtime":1666569082578,"results":"172","hashOfConfig":"91"},{"size":2090,"mtime":1666615223391,"results":"173","hashOfConfig":"91"},{"size":2194,"mtime":1666616651124,"results":"174","hashOfConfig":"91"},{"size":21931,"mtime":1666600694543,"results":"175","hashOfConfig":"91"},{"size":1377,"mtime":1666569074286,"results":"176","hashOfConfig":"91"},{"size":2084,"mtime":1666407462631,"results":"177","hashOfConfig":"91"},{"size":29758,"mtime":1666600580652,"results":"178","hashOfConfig":"91"},{"size":1240,"mtime":1666452275226,"results":"179","hashOfConfig":"91"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tlfanq",{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"222"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"222"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"222"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"222"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"248"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"312"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"332"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"335","messages":"336","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"337","messages":"338","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"342","messages":"343","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"344","messages":"345","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"346","messages":"347","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"377","messages":"378","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\react_portfolio\\src\\index.js",[],"F:\\react_portfolio\\src\\App.js",["404","405"],"import React, { Component } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n// import infoTimeline from \"./DATA/infoTimeline\";\r\nimport infoHighlights from \"./DATA/infoHighlights\";\r\n\r\nimport HeaderSection from \"./COMPONENTS/header_files/HeaderSection\";\r\nimport About from \"./COMPONENTS/about_files/AboutSection\";\r\nimport MyTimeline from \"./COMPONENTS/timeline_files/MyTimeline\";\r\n\r\n// import Chapter04 from \"./COMPONENTS/background/Chapter04\";\r\n// import RecentProjects from \"./COMPONENTS/recent/RecentProjects\";\r\n\r\nimport TeachingIntro from \"./COMPONENTS/teaching/TeachingIntro\";\r\nimport TeachingExperience from \"./COMPONENTS/teaching/TeachingSection\";\r\nimport Contact from \"./COMPONENTS/contact/ContactSection\";\r\n//import References from \"./COMPONENTS/references/ReferencesSection\";\r\n\r\nimport MyVitae from \"./COMPONENTS/vitae/MyVitae\";\r\n\r\nimport ResearchIntro from \"./COMPONENTS/background/ResearchIntro\";\r\n\r\nimport ResearchOverview from \"./COMPONENTS/background/ResearchOverview\";\r\n\r\nimport ResearchDemo from \"./COMPONENTS/background/ResearchDemo\";\r\n// import MatchingDemo from \"./COMPONENTS/matching/MatchingDemo\";\r\n\r\n// import EmergenceMain from \"./COMPONENTS/emergence/EmergenceMain\";\r\nimport EmergenceMain2 from \"./COMPONENTS/emergence2/EmergenceMain2.jsx\";\r\nimport TeaserPopa2019 from \"./COMPONENTS/background/TeaserPopa2019\";\r\n\r\n\r\nimport BgDivider from \"./COMPONENTS/background/BgDivider\";\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n        var navigationMarkers = [\r\n            { markerID: 'About', navButtonID: \"btnAbout\" },\r\n            { markerID: 'teaching-intro', navButtonID: \"btnteaching-intro\" },\r\n            { markerID: 'research-intro', navButtonID: \"btnresearch-intro\" },\r\n            { markerID: 'research-overview', navButtonID: \"btnresearch-overview\" },\r\n\r\n            { markerID: 'research-demo', navButtonID: \"btnresearch-demo\" },\r\n            { markerID: 'EmergenceSection', navButtonID: \"btnEmergenceSection\" },\r\n\r\n\r\n            { markerID: 'Parkour', navButtonID: \"btnParkour\" },\r\n            // { markerID: 'Portfolio', navButtonID: \"btnPortfolio\" },\r\n\r\n            // { markerID: 'AgreementMatching', navButtonID: \"btnAgreementMatching\" },\r\n            // { markerID: 'HammingCOD', navButtonID: \"btnHammingCOD\" },\r\n            // { markerID: 'MutationADHD', navButtonID: \"btnMutationADHD\" },\r\n            // // { markerID: 'FastMatching', navButtonID: \"btnFastMatching\" },\r\n            // { markerID: 'Dissertation', navButtonID: \"btnDissertation\" },\r\n            // { markerID: 'Jeab2016', navButtonID: \"btnJeab2016\" },\r\n            // { markerID: 'Sparc', navButtonID: \"btnSparc\" },\r\n            // { markerID: 'Triangles', navButtonID: \"btnTriangles\" },\r\n            // { markerID: 'nbtSelection', navButtonID: \"btnnbtSelection\" },\r\n            // { markerID: 'Popa2019a', navButtonID: \"btnPopa2019a\" },\r\n            // { markerID: 'Popa2019b', navButtonID: \"btnPopa2019b\" },\r\n\r\n\r\n            { markerID: 'sectionVitae', navButtonID: \"btnsectionVitae\" },\r\n            { markerID: 'Contact', navButtonID: \"btnContact\" }\r\n        ]\r\n\r\n        let observerOptions = { root: null, threshold: 0, }\r\n\r\n\r\n        var observer = new IntersectionObserver(function (entries, observer) {\r\n            entries.forEach(entry => {\r\n\r\n                if (!entry.isIntersecting) {\r\n                    return;\r\n                }\r\n\r\n                let navButtonID = navigationMarkers.filter(aa => aa.markerID.includes(entry.target.id))[0].navButtonID\r\n                let navButton = document.getElementById(navButtonID)\r\n\r\n\r\n                if (document.getElementsByClassName(\"currentView\").length > 0) {\r\n                    //console.log(\"at least one element with class CURRENT VIEW, removed.\")\r\n                    document.getElementsByClassName(\"currentView\")[0].classList.remove(\"currentView\")\r\n                }\r\n\r\n                navButton.classList.add(\"currentView\")\r\n            });\r\n        },\r\n            observerOptions);\r\n\r\n\r\n        // Apply the observer to every section:\r\n        navigationMarkers.forEach(marker => {\r\n            observer.observe(document.getElementById(marker.markerID))\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n\r\n                <HeaderSection />\r\n\r\n                <About />\r\n\r\n                <TeachingIntro />\r\n\r\n                <TeachingExperience />\r\n\r\n                {/* <TeaserPopa2019 /> */}\r\n\r\n                <ResearchIntro />\r\n\r\n                <ResearchOverview />\r\n\r\n                <BgDivider title=\"DEMO\" />\r\n\r\n                <ResearchDemo />\r\n\r\n                <BgDivider title=\"HOW IT WORKS\" />\r\n\r\n                <EmergenceMain2 />\r\n\r\n\r\n\r\n                {/* <div\r\n                    id='div-highlights'\r\n                    key={nanoid()}\r\n                    style={{\r\n                        backgroundColor: '#274235',\r\n                        color: 'lightgreen',\r\n                        maxWidth: '100%',\r\n                        margin: 'auto',\r\n                        padding: '2rem',\r\n                        textAlign: 'center',\r\n                        color: 'rgba(25, 200, 150, 1)',\r\n                    }}\r\n                >\r\n                    <div\r\n\r\n                        key={nanoid()}\r\n                        style={{\r\n                            color: 'lightgreen',\r\n                            margin: 'auto',\r\n                            padding: '1rem',\r\n                            textAlign: 'center',\r\n                            color: 'rgba(25, 200, 150, 1)',\r\n                            boxShadow: \"0px 0px 30px rgba(0, 255, 50, .25)\",\r\n                            maxWidth: \"70%\"\r\n                        }}\r\n                    >\r\n                        <h1> Highlights </h1>\r\n\r\n                        <p>Lorem ipsum </p>\r\n                    </div>\r\n                </div> */}\r\n\r\n\r\n\r\n                <MyTimeline\r\n                    // events={infoHighlights.slice(0, 11)}\r\n                    events={infoHighlights}\r\n                    orientation=\"vertical\"\r\n                    startFrom=\"first\"\r\n                />\r\n\r\n                {/* <MyTimeline\r\n                    events={infoHighlights.slice(11)}\r\n                    orientation=\"vertical\"\r\n                    startFrom=\"first\"\r\n                    bg={'#274242'}\r\n                    contentBg={'#273542'}\r\n                    titleColor={'#a8dce3'}\r\n                    titleColor={'#ffba00'}\r\n                /> */}\r\n\r\n                {/* <Chapter04 /> */}\r\n\r\n                <MyVitae />\r\n\r\n                <Contact />\r\n\r\n\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","F:\\react_portfolio\\src\\COMPONENTS\\about_files\\AboutSection.js",["406"],"import \"./about.sass\"\r\n\r\nimport React, { Component } from 'react'\r\nimport data from '../../DATA/myData'\r\nimport parse from 'html-react-parser'\r\nimport { nanoid } from 'nanoid'\r\nimport infoSkills from \"../../DATA/infoSkills\"\r\n\r\n\r\n\r\nclass About extends Component {\r\n\r\n\r\n    render() {\r\n\r\n        var Skills = infoSkills.skills.map((item) => {\r\n            return (\r\n                <label key={nanoid()}  >\r\n                    {item.name}\r\n                </label >\r\n            )\r\n        })\r\n\r\n\r\n        return (\r\n\r\n            <div id='About' key={nanoid()} >\r\n\r\n                <h1 key={nanoid()}>About me</h1>\r\n\r\n                <div className='about-wrapper' key={nanoid()} >\r\n\r\n                    <div className='div-picture' key={nanoid()}  >\r\n                        {\r\n                            data.ShowAboutImage ?\r\n                                <img\r\n                                    src={data.aboutImage}\r\n                                    alt='Dr. Andrei Popa'\r\n                                >\r\n                                </img> : null\r\n                        }\r\n                    </div>\r\n\r\n                    <div className='about-column'>\r\n                        {\r\n                            data.aboutText.map((item) => {\r\n                                return (\r\n                                    <p className='narrative' >\r\n                                        {item}\r\n                                    </p>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                        <div className='div-tech' >\r\n                            {Skills}\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","F:\\react_portfolio\\src\\COMPONENTS\\background\\Chapter04.js",[],["407","408"],"F:\\react_portfolio\\src\\COMPONENTS\\contact\\ContactSection.js",["409"],"import \"./contact.sass\";\r\n\r\nimport React, { Component } from \"react\";\r\n//import { Button } from \"react-bootstrap\";\r\nimport parse from \"html-react-parser\";\r\nimport infoContact from \"../../DATA/infoContact\";\r\nimport data from '../../DATA/myData'\r\nimport { nanoid } from 'nanoid'\r\n\r\n\r\n\r\nclass Contact extends Component {\r\n    goToLink = (e) => {\r\n        e.preventDefault();\r\n        let a = e.currentTarget.name;\r\n        window.open(a, \"_blank\");\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div id='Contact' key={nanoid()}  >\r\n\r\n                <h1 key={nanoid()} > Contact  </h1>\r\n\r\n\r\n\r\n                <table key={nanoid()} >\r\n                    <tbody>\r\n\r\n                        <tr key={nanoid()}  >\r\n                            <td key={nanoid()}  >\r\n\r\n\r\n                                <button\r\n                                    id=\"btnEmail\"\r\n                                    className=\"btnContactLink\"\r\n                                    title={\"click to copy\"}\r\n                                    onClick={() =>\r\n                                        navigator.clipboard\r\n                                            .writeText(\"andrei.popa.dev@gmail.com\")\r\n                                            .then(() => alert(\"Copied to clipboard. Use it only for good.\"))\r\n                                    }\r\n                                >\r\n                                    andrei.popa.dev@gmail.com\r\n                                </button>\r\n\r\n\r\n                            </td>\r\n\r\n                            <td >\r\n                                <p className='p-details' key={nanoid()} >\r\n                                    {'click to copy'}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        {infoContact.slice(1).map((link, index) => (\r\n                            <tr key={nanoid()} >\r\n                                <td key={nanoid()}  >\r\n                                    <button\r\n                                        className=\"btnContactLink\"\r\n                                        key={nanoid()}\r\n                                        name={link.url}\r\n                                        title={link.url}\r\n                                        onClick={this.goToLink}\r\n                                    >\r\n                                        {link.name}\r\n                                    </button>\r\n                                </td>\r\n\r\n                                <td key={nanoid()}  >\r\n                                    <p className='p-details' key={nanoid()} >\r\n                                        {parse(link.info)}\r\n                                    </p>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n\r\n                </table>\r\n\r\n\r\n\r\n                <div\r\n                    id='myFooter'\r\n                    key={nanoid()}\r\n                    fixed='bottom'\r\n                >\r\n                    <span>\r\n                        End of site.<br />\r\n                        Made with React and ❤ (but mostly React) | Andrei Popa 2020\r\n                    </span>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;\r\n","F:\\react_portfolio\\src\\DATA\\infoTimeline.js",[],"F:\\react_portfolio\\src\\DATA\\myData.js",[],"F:\\react_portfolio\\src\\DATA\\infoSkills.js",[],"F:\\react_portfolio\\src\\DATA\\infoRecent.js",["410","411"],"F:\\react_portfolio\\src\\DATA\\infoTeaching.js",[],"F:\\react_portfolio\\src\\DATA\\infoContact.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\LovelyOgive.jsx",["412","413"],"import './lovely-ogive.sass'\r\nimport * as d3 from \"d3\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\n\r\n\r\nexport default function LovelyOgive(props) {\r\n\r\n    const refOgiveGroup = useRef()\r\n\r\n    const [margin, setMargin] = useState({ top: 30, left: 75, bottom: 90, right: 75 })\r\n\r\n    const [width] = useState(() => {\r\n        return (\r\n            400 - margin.left - margin.right\r\n        )\r\n    })\r\n\r\n    const [height] = useState(() => {\r\n        return (\r\n            300 - margin.top - margin.bottom)\r\n\r\n    })\r\n\r\n    const [X] = useState(() => {\r\n        let x = d3.scaleLinear()\r\n            .range([0, width])\r\n            .domain([0.0, 7.5])\r\n\r\n        return x\r\n    })\r\n\r\n\r\n    const [Y] = useState(() => {\r\n        let y = d3.scaleLinear()\r\n            .range([height, 0])\r\n            .domain([0, 1])\r\n\r\n        return y\r\n    })\r\n\r\n    const [Y2] = useState(() => {\r\n        let y2 = d3.scaleLinear()\r\n            .range([height, 0])\r\n            .domain([0, 120])\r\n\r\n        return y2\r\n    })\r\n\r\n\r\n    const [labelPath, setLabelPath] = useState('M8.571428571428571,157.5C8.571428571428571,157.5,28.643740823121025,148.9455085807564,37.142857142857146,140C48.49466858517217,128.0519664816741,55.42536315093716,102.81687644641862,65.71428571428571,87.5C74.65974479437328,74.18310596735574,84.19903186779767,62.46469839912068,94.28571428571428,52.50000000000001C103.35452113897328,43.540867414236516,112.6955925873036,34.012394483847494,122.85714285714285,29.750000000000007C131.8783198087884,25.965949943126688,141.99210349197116,28.256742422979706,151.42857142857142,26.250000000000004C161.0430488425248,24.20540239939486,171.2324781245283,18.812443156471748,180,17.499999999999996C187.17286214268302,16.42626742593976,200,17.499999999999996,200,17.499999999999996')\r\n\r\n\r\n    const [labelPath1, setLabelPath1] = useState('M8.571428571428571,7.29166666666666C8.571428571428571,7.29166666666666,27.334891875651056,42.133879269055384,37.142857142857146,58.33333333333334C46.41282935220241,73.64420412979968,55.526816026962024,89.40278566230373,65.71428571428571,102.08333333333331C74.71952926441307,113.29234044024138,84.76190476190477,121.52777777777777,94.28571428571428,131.25C103.8095238095238,140.97222222222223,112.4235583437783,154.4040682831571,122.85714285714285,160.41666666666666C131.7239045450113,165.52634655886033,141.8781147993057,165.51606916507023,151.42857142857142,167.70833333333334C160.92602877706975,169.88843175615827,171.28671615056186,172.37179468931797,180,173.54166666666669C187.2237625904809,174.51155099175597,200,174.85416666666666,200,174.85416666666666')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    useEffect(() => {\r\n\r\n        let gOgive = d3.select(refOgiveGroup.current)\r\n            .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\r\n\r\n        //    ---------------   DATA  ------------------------\r\n\r\n        // the data will come from props eventually:\r\n        let myData = [\r\n            { hdCod: 0.3, sensitivity: .1, coFrequency: 115 },\r\n            { hdCod: 1.3, sensitivity: .2, coFrequency: 80 },\r\n            { hdCod: 2.3, sensitivity: .5, coFrequency: 50 },\r\n            { hdCod: 3.3, sensitivity: .7, coFrequency: 30 },\r\n            { hdCod: 4.3, sensitivity: .83, coFrequency: 10 },\r\n            { hdCod: 5.3, sensitivity: .85, coFrequency: 5 },\r\n            { hdCod: 6.3, sensitivity: .9, coFrequency: 1 },\r\n            { hdCod: 7, sensitivity: .9, coFrequency: .1 },\r\n        ]\r\n\r\n\r\n\r\n        //    ---------------   AXES  ------------------------\r\n\r\n        gOgive.select(\".scatterX\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(\r\n                d3\r\n                    .axisBottom(X)\r\n                    .tickPadding(15)\r\n                    .tickValues([0.3, 1.3, 2.3, 3.3, 4.3, 5.3, 6.3, 7.3])\r\n                    .tickFormat(x => `${x.toFixed(1)}`)\r\n                //.tickSize(-height)\r\n            )\r\n\r\n        gOgive.select(\".scatterY\")\r\n            .attr('transform', `translate(${width}, 0)`)\r\n\r\n            .call(\r\n                d3\r\n                    .axisRight(Y)\r\n                    .tickPadding(15)\r\n                    .tickValues([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\r\n                //.tickSize(-width)\r\n            )\r\n\r\n        gOgive.select(\".scatterY2\")\r\n            .call(\r\n                d3\r\n                    .axisLeft(Y2)\r\n                    .tickPadding(15)\r\n                    .tickValues([0, 20, 40, 60, 80, 100, 120])\r\n                //.tickSize(0)\r\n            )\r\n\r\n        //   -----------------------   DATA POINTS   ------------------------\r\n\r\n        gOgive\r\n            .selectAll(\"circle\")\r\n            .data(myData)\r\n            .join(\r\n                enter => enter.append('circle').attr(\"class\", \"new\"),\r\n                // .on('mouseover', onHover),\r\n                // .on('mouseout', hoverOver),\r\n                update => update.attr(\"class\", \"update\"),\r\n                exit => exit.remove()\r\n            )\r\n            .transition()\r\n            .duration(1000)\r\n            // .on('mouseover', d => {\r\n            //     onHover(d)\r\n            // })\r\n            // .on('mouseout', hoverOver)\r\n            //.attr(\"id\", (d) => `Schedule${d.schedule}`)\r\n            .attr(\"cx\", (d) => X(d.hdCod))\r\n            .attr(\"cy\", (d) => Y(d.sensitivity))\r\n            .attr(\"r\", 3)\r\n            .attr(\"fill\", \"#ffff00\")\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"stroke\", \"#ffff0080\")\r\n\r\n\r\n        // DATA POINTS CHANGEOVERS:\r\n\r\n        gOgive\r\n            .selectAll(\"rect\")\r\n            .data(myData)\r\n            .join(\r\n                enter => enter.append('rect').attr(\"class\", \"newRect\"),\r\n                // .on('mouseover', onHover),\r\n                // .on('mouseout', hoverOver),\r\n                update => update.attr(\"class\", \"updateRect\"),\r\n                exit => exit.remove()\r\n            )\r\n            .transition()\r\n            .duration(1000)\r\n            // .on('mouseover', d => {\r\n            //     onHover(d)\r\n            // })\r\n            // .on('mouseout', hoverOver)\r\n            //.attr(\"id\", (d) => `Schedule${d.schedule}`)\r\n            .attr(\"x\", (d) => X(d.hdCod))\r\n            .attr(\"y\", (d) => Y2(d.coFrequency))\r\n            .attr(\"width\", 2)\r\n            .attr(\"height\", 2)\r\n\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"fill\", \"#dddddd\")\r\n            .attr(\"stroke\", \"#dddddd\")\r\n\r\n\r\n\r\n\r\n        // CHANGEOVERS VALUES INSTEAD OF SYMBOL:\r\n        // i may need a separate group, or use a class name: \r\n\r\n        gOgive\r\n            .selectAll(\".co_values\")\r\n            .data(myData)\r\n            .join(\r\n                enter => enter.append('text').attr(\"class\", \"co_values\"),\r\n                // .on('mouseover', onHover),\r\n                // .on('mouseout', hoverOver),\r\n                update => update.attr(\"class\", \"updated_co_values\"),\r\n                exit => exit.remove()\r\n            )\r\n            .transition()\r\n            .duration(1000)\r\n            // .on('mouseover', d => {\r\n            //     onHover(d)\r\n            // })\r\n            // .on('mouseout', hoverOver)\r\n            //.attr(\"id\", (d) => `Schedule${d.schedule}`)\r\n            .attr(\"x\", (d) => X(d.hdCod))\r\n            .attr(\"y\", (d) => Y2(d.coFrequency))\r\n            .attr(\"dx\", 6)\r\n            //.attr(\"height\", 2)\r\n\r\n            //.attr(\"stroke-width\", 1)\r\n            .style(\"fill\", \"#ffffffad\")\r\n            .style('font-size', '10px')\r\n            //.attr(\"stroke\", \"#dddddd\")\r\n            .text(d => d.coFrequency)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //   -----------------------   Lines   ------------------------\r\n\r\n        // I have the scales, X, Y, Y2;\r\n\r\n        const lineGenerator = d3.line()\r\n            .curve(d3.curveCatmullRom.alpha(.5))\r\n            .x(d => X(d.hdCod))\r\n            .y(d => Y(d.sensitivity))\r\n\r\n        const lineGenerator2 = d3.line()\r\n            .curve(d3.curveCatmullRom.alpha(.5))\r\n            .x(d => X(d.hdCod))\r\n            .y(d => Y2(d.coFrequency))\r\n\r\n\r\n        let path1 = lineGenerator(myData)\r\n        setLabelPath(path1)\r\n\r\n        let path2 = lineGenerator2(myData)\r\n        setLabelPath1(path2)\r\n\r\n        // SENSITIVITY:\r\n        gOgive.append('path')\r\n            .datum(myData)\r\n            .attr('d', lineGenerator)\r\n            .attr('fill', 'none')\r\n            .style('stroke', '#ffff0099')\r\n            .style('stroke-width', 2)\r\n\r\n\r\n        // CHANGEOVERS:\r\n        gOgive.append('path')\r\n            .attr('d', lineGenerator2(myData))\r\n            .attr('fill', 'none')\r\n            .style('stroke', '#d4d4d462')\r\n            .style('stroke-width', 2)\r\n            .style('stroke-dasharray', 4)\r\n\r\n\r\n\r\n        /* \r\n            How to use a gradient.         \r\n        */\r\n\r\n            \r\n        //make defs and add the linear gradient\r\n        var lg = gOgive.append(\"defs\")\r\n            .append(\"linearGradient\")\r\n            .attr(\"id\", \"mygrad\")\r\n            .attr(\"x1\", \"0%\")\r\n            .attr(\"y1\", \"100%\")\r\n            .attr(\"x2\", \"100%\")\r\n            .attr(\"y2\", \"100%\")\r\n            ;\r\n\r\n\r\n        lg.append(\"stop\")\r\n            .attr(\"offset\", \"0%\")\r\n            .style(\"stop-color\", \"#35493f\") // red, 1f342a, 35493f\r\n        //.style(\"stop-opacity\", 0)\r\n\r\n        lg.append(\"stop\")\r\n            .attr(\"offset\", \"50%\")\r\n            .style(\"stop-color\", \"#4f6b63\") // red, 1f342a, 35493F\r\n        //.style(\"stop-opacity\", 0)\r\n\r\n        lg.append(\"stop\")\r\n            .attr(\"offset\", \"100%\")\r\n            .style(\"stop-color\", \"#99dec3\")  // 00fff2ec,  6ED0AA\r\n        //.style(\"stop-opacity\", .5)\r\n\r\n\r\n        // LABEL X-AXIS, WITH GRADIENT... ? \r\n        gOgive.append('text')\r\n            .text('discriminability')\r\n            .attr('fill', 'url(#mygrad)')\r\n            // .attr(\"fill\", \"#00fff2ec\")\r\n            .attr(\"x\", 50)\r\n            .attr(\"y\", height + 70)\r\n            .attr(\"font-size\", \"22px\")\r\n            .style(\"font-variant\", \"small-caps\")\r\n            .style(\"letter-spacing\", \"1.5px\")\r\n            .style(\"font-family\", \"Monospace\")\r\n\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div id='divHammingOgive' >\r\n\r\n            <svg id='svgOgive'>\r\n\r\n                <g\r\n                    ref={refOgiveGroup}\r\n                    id='gOgive'\r\n                >\r\n                    <g className=\"scatterX\"></g>\r\n                    <g className=\"scatterY\"></g>\r\n                    <g className=\"scatterY2\"></g>\r\n\r\n\r\n                    <path\r\n                        id=\"PathOfOgive\"\r\n                        fill=\"transparent\"\r\n                        style={{\r\n                            stroke: \"transparent\",\r\n                            //strokeWidth: 2,\r\n                        }}\r\n                        d={labelPath}\r\n                    />\r\n\r\n\r\n                    <text\r\n                        dy='-10px'\r\n                        style={{\r\n                            fill: '#ffff0099',\r\n                            fontSize: \"14px\",\r\n                            letterSpacing: \"1px\",\r\n                            fontStyle: 'italic',\r\n                        }}\r\n                    >\r\n                        <textPath\r\n                            href=\"#PathOfOgive\" // xlink:href doesn't work in JSX\r\n                            startOffset={'45%'}\r\n                        >\r\n                            Sensitivity  ( a )\r\n                        </textPath>\r\n                    </text>\r\n\r\n                    <path\r\n                        id=\"PathOfChangeovers\"\r\n                        fill=\"transparent\"\r\n                        style={{\r\n                            stroke: \"transparent\",\r\n                            //strokeWidth: 2,\r\n                        }}\r\n                        d={labelPath1}\r\n                    />\r\n\r\n\r\n                    <text\r\n                        dy='20px'\r\n                        style={{\r\n                            fill: '#ffffff99',\r\n                            fontSize: \"14px\",\r\n                            letterSpacing: \"1px\",\r\n                        }}\r\n                    >\r\n                        <textPath\r\n                            href=\"#PathOfChangeovers\"\r\n                            startOffset={'15%'}\r\n                        >\r\n                            Changeovers\r\n                        </textPath>\r\n                    </text>\r\n\r\n\r\n\r\n                </g>\r\n\r\n            </svg>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingCard.jsx",["414","415","416","417"],"import { nanoid } from \"nanoid\"\r\nimport React from \"react\"\r\nimport { Fade } from \"react-reveal\"\r\nimport parse from 'html-react-parser'\r\n\r\nexport default class TeachingCard extends React.Component {\r\n    render() {\r\n        let fontClr = \"\"\r\n\r\n        if (this.props.schoolCode === \"agnes\") {\r\n            fontClr = \"fcb3ff\"\r\n        }\r\n        if (this.props.schoolCode === \"emory\" || this.props.schoolCode === \"oxford\") {\r\n            fontClr = \"edfd36\"\r\n        }\r\n        if (this.props.schoolCode === \"georgia\") {\r\n            fontClr = \"71b6ff\"\r\n        }\r\n\r\n\r\n        // if (!this.props.schools.includes(this.props.schoolCode)) {\r\n        //     return null\r\n        // }\r\n        if (this.props.teachingDetails === false) {\r\n            return null\r\n        }\r\n        else {\r\n            return (\r\n                <div\r\n                    className='divDetails'\r\n                    style={{\r\n                        // margin: \"0px\",\r\n                        marginBottom: \"4px\",\r\n\r\n                        fontSize: \"12px\",\r\n                        display: \"flex\",\r\n                        // flexDirection: \"column\",\r\n                        flexDirection: \"row\",\r\n\r\n                        textAlign: \"left\",\r\n                        width: \"100%\",\r\n                        // padding: \"0px 5px \",\r\n                        color: \"#19f8e2\",\r\n                        // border: '1px dotted yellow',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n\r\n\r\n\r\n                    <span\r\n                        style={{\r\n                            textAlign: \"left\",\r\n                            color: \"#eee\",\r\n                            fontSize: '11px',\r\n                        }}\r\n                    >\r\n                        {this.props.institution} {this.props.sections > 1 ? `(${this.props.sections} sections)` : null}\r\n\r\n                    </span>\r\n\r\n\r\n                    {/* <span\r\n                        style={{\r\n                            margin: \"1px\",\r\n                            textAlign: \"left\",\r\n                            color: \"#ddd\",\r\n                        }}\r\n                    >\r\n                        {this.props.semester}  {this.props.sections > 1 ? `, ${this.props.sections} sections` : null}\r\n                    </span>\r\n */}\r\n\r\n                    <span\r\n                        style={{\r\n                            fontSize: '11px',\r\n                            textAlign: \"left\",\r\n                            color: \"#ddd\",\r\n                        }}\r\n                    >\r\n                        {this.props.semester}\r\n\r\n                    </span>\r\n\r\n\r\n                </div >\r\n\r\n\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingAssistant.jsx",["418","419","420","421"],"import { nanoid } from \"nanoid\"\r\nimport React from \"react\"\r\nimport { Fade } from \"react-reveal\"\r\nimport { assistantRoles } from \"../../DATA/infoTeaching\"\r\nimport { Card } from \"react-bootstrap\"\r\n\r\n\r\n\r\nexport default class TeachingAssistant extends React.Component {\r\n    render() {\r\n\r\n        const infoTA = assistantRoles()\r\n\r\n        const TARoles = infoTA.map((item) => {\r\n            return (\r\n\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        textAlign: \"left\",\r\n                        marginBottom: \"15px\",\r\n                        fontSize: \"13px\",\r\n\r\n                    }}\r\n                >\r\n                    <span\r\n                        style={{\r\n                            margin: \"0px\",\r\n                            marginBottom: '4px',\r\n                            textAlign: \"left\",\r\n                            color: \"#31D1B3\",\r\n                            color: '#ff9900',\r\n                            fontSize: \"13px\",\r\n                            fontWeight: 500,\r\n                        }}\r\n                    >\r\n                        {item.name}\r\n                    </span>\r\n\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"row\",\r\n                            width: \"100%\",\r\n                            margin: \"0px\",\r\n                            // border: \"1px dashed lime\",\r\n                            justifyContent: 'space-between',\r\n                            textAlign: 'left',\r\n                        }}\r\n                    >\r\n\r\n\r\n\r\n                        <span\r\n                            style={{\r\n                                // margin: 'auto',\r\n                                fontFamily: \"Roboto\",\r\n                                color: \"#aaa\",\r\n                                fontSize: \"11px\",\r\n                                // paddingLeft: \"20px\",\r\n                                // border: \"1px dotted red\",\r\n\r\n                            }}\r\n                        >\r\n                            {`Instructor: ${item.instructor}`}\r\n                        </span>\r\n\r\n                        <span\r\n                            style={{\r\n                                fontFamily: \"Roboto\",\r\n                                color: \"#aaa\",\r\n                                fontSize: \"11px\",\r\n                                // margin: 'auto',\r\n\r\n                            }}\r\n                        >\r\n                            {item.years ? item.years : item.semester.slice(-4)}\r\n                        </span>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    //color: \"#19f8e2\", \r\n                    color: \"#aaa\",\r\n                    width: '100%',\r\n                    //height: \"fit-content\",\r\n                    //marginRight: \"75px\",\r\n                    //border: \"1px dashed lime\",\r\n                }}\r\n            >\r\n\r\n\r\n                <div className='sub-section-header'\r\n                    style={{\r\n                        marginBottom: '20px',\r\n                    }}\r\n                >\r\n\r\n                    <h1 className=\"title\" >\r\n                        TEACHING ASSISTANT\r\n                    </h1>\r\n\r\n                    <h2 className=\"years\"  >\r\n                        Emory University, 2007 - 2011\r\n                    </h2>\r\n\r\n                </div>\r\n\r\n                <div className='sub-section-body'\r\n                    style={{\r\n                        marginTop: '0px',\r\n                        paddingTop: '0px',\r\n                    }}\r\n                >\r\n                    {TARoles}\r\n                </div>\r\n\r\n\r\n            </div >\r\n        )\r\n    }\r\n\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\matching\\matchingState.js",[],"F:\\react_portfolio\\src\\DATA\\infoNav.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\HammingDemo.js",["422","423"],"import \"./hamming_style.sass\";\r\nimport '../etbd_input/input_styles.sass'\r\n\r\nimport React from \"react\";\r\n//import parse from \"html-react-parser\"\r\n\r\nimport { hdValues } from \"./hdValues\";\r\nimport { hdCodValues } from \"./hdCodValues\";\r\n\r\n\r\n// import DrawPhenotypes from \"./drawPhenotypes\";\r\nimport HammingDistances from \"./HammingDistances\"\r\n\r\nimport InputTemplate from \"../etbd_input/InputTemplate\";\r\nimport HeatMapHook from \"./HeatmapHook\";\r\nimport TableHD from \"./TableHook\"\r\n\r\n\r\nexport default class HammingDemo extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            range1: 0,\r\n            limit1: 471,\r\n            boundary1: 511,\r\n            boundary2: 512,\r\n            limit2: 552,\r\n            range2: 1023,\r\n            hdValues: hdValues,\r\n            hdCodValues: hdCodValues,\r\n            lim1: 471,\r\n            lim2: 512,\r\n            lim3: 553,\r\n            hdSame: 0,\r\n            hdOther: 0\r\n        };\r\n\r\n\r\n\r\n        this.updateValue = this.updateValue.bind(this)\r\n        // this.decreaseValue = this.decreaseValue.bind(this)\r\n        // this.increaseValue = this.increaseValue.bind(this)\r\n\r\n        //this.handleFieldChange = this.handleFieldChange.bind(this)\r\n    };\r\n\r\n\r\n    updateValue = (e) => {\r\n        e.preventDefault();\r\n        let a22 = e.target.name\r\n        let b22 = e.target.value\r\n        this.setState({ [a22]: parseInt(b22) })\r\n        console.log(\"target name & value: \", a22, b22)\r\n    };\r\n\r\n\r\n    // handleFieldChange = (e) => {\r\n    //     //e.preventDefault();\r\n    //     let a22 = e.target.name\r\n    //     let b22 = e.target.value\r\n    //     this.setState({ [a22]: parseInt(b22) })\r\n    //     console.log(\"target name & value: \", a22, b22)\r\n    // };\r\n\r\n\r\n    decreaseValue = (e) => {\r\n        //e.preventDefault();\r\n        let a22 = e.target.name\r\n        let b22 = e.target.value\r\n        this.setState({ [a22]: parseInt(b22) })\r\n    };\r\n\r\n    increaseValue = (e) => {\r\n        //e.preventDefault();\r\n        let a22 = e.target.name\r\n        let b22 = e.target.value\r\n        this.setState({ [a22]: parseInt(b22) })\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        // let c1 = d3.range(471, 512)\r\n        // let c11 = d3.range(471, 553)\r\n        // let hdScatter = loadHammingDataOriginal(c11, c1)\r\n        // this.setState({ scatterData: hdScatter })\r\n        // console.log(this.state.lim1)\r\n    };\r\n\r\n\r\n    componentDidUpdate() {\r\n        //console.log(\"HammingDemo did update\")\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        var formFields = Object.entries(this.state).map((key, value) => {\r\n\r\n            let exceptions = ['hdValues', 'range1', 'range2', 'hdCodValues', \"lim1\", \"lim2\", \"lim3\", 'hdSame', 'hdOther', \"\"];\r\n\r\n            if (exceptions.includes(key[0]) === true) {\r\n                return\r\n            } else {\r\n                return (\r\n                    <InputTemplate\r\n                        key={key[0]}\r\n                        name={key[0]}\r\n                        value={key[1]}\r\n                        updateValue={this.updateValue}\r\n                    >\r\n                    </InputTemplate>\r\n                )\r\n            }\r\n        })\r\n\r\n        // var hdScatter = this.state.hdCodValues.filter(\r\n        //     item => item.variable > this.state.boundary1 - 3\r\n        //         & item.variable <= this.state.boundary1\r\n        //         & item.group > this.state.boundary1 - 3\r\n        //         & item.group < this.state.boundary2 + 3\r\n        // )\r\n        //console.log(hdScatter)\r\n\r\n\r\n\r\n        return (\r\n\r\n            <>\r\n                <div id=\"divHamming\">\r\n\r\n                    {/* <div\r\n                        style={{display: \"flex\", flexDirection: \"row\",}}>\r\n                        <svg id=\"svgHamming\"></svg>\r\n                    </div> */}\r\n\r\n\r\n\r\n                    {/* <Scatter2\r\n                        limit1={this.state.limit1}\r\n                        limit2={this.state.limit2}\r\n                        boundary1={this.state.boundary1}\r\n                        boundary2={this.state.boundary2}\r\n                    /> */}\r\n\r\n\r\n\r\n\r\n                    <HeatMapHook\r\n                        //myData={hdScatter}\r\n                        limit1={this.state.limit1}\r\n                        limit2={this.state.limit2}\r\n                        boundary1={this.state.boundary1}\r\n                        boundary2={this.state.boundary2}\r\n                    />\r\n\r\n\r\n\r\n                    {/* <TableHD\r\n                        limit1={this.state.limit1}\r\n                        limit2={this.state.limit2}\r\n                        boundary1={this.state.boundary1}\r\n                        boundary2={this.state.boundary2}\r\n                    /> */}\r\n\r\n                    <HammingDistances\r\n                        myData={this.state.hdValues}\r\n                        limit1={this.state.limit1}\r\n                        limit2={this.state.limit2}\r\n                        boundary1={this.state.boundary1}\r\n                        boundary2={this.state.boundary2}\r\n                    />\r\n\r\n\r\n                    {/* <DrawPhenotypes\r\n                        myData={this.state.hdValues}\r\n                        limit1={this.state.limit1}\r\n                        limit2={this.state.limit2}\r\n                        boundary1={this.state.boundary1}\r\n                        boundary2={this.state.boundary2}\r\n                    /> */}\r\n\r\n\r\n\r\n\r\n                    <div className=\"divButtons\">\r\n                        {formFields}\r\n                    </div>\r\n\r\n\r\n                    <div className=\"divButtons\">\r\n\r\n                        <button\r\n                            name=\"reset\"\r\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    limit1: 303,\r\n                                    boundary1: 343,\r\n                                    boundary2: 344,\r\n                                    limit2: 384,\r\n                                })\r\n                            }}\r\n                        >???</button>\r\n\r\n\r\n                        <button\r\n                            name=\"reset\"\r\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    limit1: 407,\r\n                                    boundary1: 447,\r\n                                    boundary2: 448,\r\n                                    limit2: 488,\r\n                                })\r\n                            }}\r\n                        >1.4</button>\r\n\r\n\r\n                        <button\r\n                            name=\"reset\"\r\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    limit1: 215,\r\n                                    boundary1: 255,\r\n                                    boundary2: 256,\r\n                                    limit2: 296,\r\n                                })\r\n                            }}\r\n                        >3.4</button>\r\n\r\n\r\n                        <button\r\n                            name=\"reset\"\r\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    limit1: 471,\r\n                                    boundary1: 511,\r\n                                    boundary2: 512,\r\n                                    limit2: 552,\r\n                                })\r\n                            }}\r\n                        >4.4</button>\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                    {/* <div\r\n                        id=\"divHeatMap\"\r\n                        style={{\r\n                            //backgroundColor: \"#446b58\",\r\n\r\n                        }}\r\n                    >\r\n                        <svg id=\"svgHeatMap\"></svg>\r\n\r\n                        <div id=\"ttHeatMap\"></div>\r\n                    </div > */}\r\n\r\n\r\n                    {/* {drawHeatMap(\r\n                        // this.state.hdCodValues.filter(\r\n                        //     item => item.variable > 506\r\n                        //         & item.variable <= 511\r\n                        //         & item.group > 506\r\n                        //         & item.group < 517\r\n                        // ),\r\n                        hdScatter,\r\n                        [],\r\n                        //this.state.tick_values_heat,\r\n                        [this.state.limit1, this.state.boundary1],\r\n                    )\r\n                    } */}\r\n\r\n\r\n                </div>\r\n            </>\r\n\r\n        )\r\n    }\r\n}",["424","425"],"F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\TableHook.js",["426","427"],"import \"./hamming_style.sass\";\r\nimport \"./phenotypes.sass\";\r\n//import \"./scatter.sass\";\r\n\r\n\r\n//import parse from \"html-react-parser\"\r\nimport * as d3 from \"d3\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nimport { dec2bin } from \"./hammingFunctions\";\r\n\r\n\r\n\r\n\r\nfunction HammingCodTable(props) {\r\n\r\n    const refHDTable = useRef()\r\n\r\n    const [data, setData] = useState([])\r\n    const [class1, setclass1] = useState([])\r\n    const [classes, setClasses] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        let size = 2\r\n        let boundary2 = props.boundary1 + 1\r\n        let class1 = d3.range(props.boundary1 - size, boundary2)\r\n        let classes = d3.range(props.boundary1 - size, boundary2 + 1 + size)\r\n\r\n\r\n        let myData = []\r\n        class1.forEach((b1) => {\r\n            let g1 = dec2bin(5, b1)\r\n            classes.forEach((b12) => {\r\n                let g12 = dec2bin(5, b12)\r\n                let hd = 0\r\n                for (let i = 0; i < g12.length; i++) {\r\n                    if (g1[i] !== g12[i]) {\r\n                        hd = hd + 1\r\n                    }\r\n                }\r\n                myData.push(\r\n                    { b1: b1, b12: b12, hd: hd, g1: g1, g12: g12 }\r\n                )\r\n            })\r\n        })\r\n        console.log(myData)\r\n        setData(myData)\r\n        setclass1(class1)\r\n        setClasses(classes)\r\n\r\n    }, [props])\r\n\r\n\r\n    useEffect(() => {\r\n        let margin = { top: 50, left: 100, bottom: 50, right: 50 }\r\n        let svgWidth = 550\r\n        let svgHeight = 250\r\n        let width = svgWidth - margin.left - margin.right\r\n        let height = svgHeight - margin.top - margin.bottom\r\n\r\n        // let X_Linear = d3.scaleLinear()\r\n        //     .range([0, width])\r\n        //     .domain([d3.min(classes) - 1, d3.max(classes) + 1])\r\n\r\n        // let Y_Linear = d3.scaleLinear()\r\n        //     .range([height, 0])\r\n        //     .domain([d3.max(class1) + 1, d3.min(class1) - 1])\r\n\r\n        // let Z_Linear = d3.scaleLinear()\r\n        //     .range([2, 12])\r\n        //     .domain([0, 10])\r\n\r\n\r\n        //let svg = d3.select(refSVG.current)\r\n        let tableHD = d3.select(refHDTable.current).attr(\"transform\",\r\n            `translate(${margin.left},${margin.top})`)\r\n\r\n        // scatter2.select(\".scatter2X\")\r\n        //     .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        //     .call(\r\n        //         d3\r\n        //             .axisBottom(X_Linear)\r\n        //             .tickValues(classes)\r\n        //             .tickPadding(11)\r\n        //     )\r\n        //     .selectAll('text')\r\n        //     .transition()\r\n        //     .duration(1000)\r\n        //     .attr('fill', (d) => {\r\n        //         if (d <= props.boundary1) {\r\n        //             return 'lime'\r\n        //         } else {\r\n        //             return 'orange'\r\n        //         }\r\n        //     })\r\n\r\n        // scatter2.select(\".scatter2Y\")\r\n        //     .call(\r\n        //         d3\r\n        //             .axisLeft(Y_Linear)\r\n        //             .tickValues((class1))\r\n        //             .tickPadding(11)\r\n        //     )\r\n        //     .selectAll('text')\r\n        //     .text((d) => d.toFixed(0))\r\n        //     .text((d) => {\r\n        //         console.log(\"text d: \", d)\r\n        //         return dec2bin(10, d)\r\n        //     })\r\n\r\n\r\n        //var groupedData = d3.group(data, (d) => d.b12)\r\n        var groupedArrayedData = Array.from(d3.group(data, (d) => d.b1))\r\n\r\n        tableHD.selectAll(\"tr\")\r\n            .data(groupedArrayedData)\r\n            .join(\r\n                enter => enter.append('tr'),\r\n                update => update.attr(\"class\", \"update\"),\r\n                exit => exit.remove()\r\n            )\r\n            .selectAll('td')\r\n            //.data(d => d)\r\n            .data((d) => {\r\n                return d[1]\r\n            })\r\n            .join(\r\n                enter => enter.append('td').attr(\"class\", \"cell\"),\r\n                update => update.attr(\"class\", \"cellUp\"),\r\n                exit => exit.remove()\r\n            )\r\n            // .attr(\"width\", 45)\r\n            // .attr(\"height\", 20)\r\n            // .text((d, i) => {\r\n            //     return d\r\n            // })\r\n            //.html(\"whattt\")\r\n            .html((d) => {\r\n                console.log(\"d cell: \", d)\r\n\r\n                return d.g1\r\n            })\r\n            //.attr(\"stroke-width\", 1)\r\n            .attr(\"stroke\", \"#fff\")\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"fill\", \"#ddd\")\r\n            .attr(\"color\", \"cyan\")\r\n            .attr(\"opacity\", .8);\r\n\r\n\r\n\r\n        // tableHD.on('mouseover', (e, d) => {\r\n        //     //e.target.style.opacity = 1\r\n        //     console.log(e.target)\r\n        //     console.log(\"d: \", d)\r\n        // })\r\n\r\n\r\n        // .on('mouseout', (e, d) => {\r\n        //     e.target.style.opacity = .7\r\n        // })\r\n        // ;\r\n\r\n\r\n\r\n        // scatter2\r\n        //     .selectAll(\"circle\")\r\n        //     .data(data)\r\n        //     .join(\r\n        //         enter => enter.append('circle').attr(\"class\", \"new\"),\r\n        //         update => update.attr(\"class\", \"update\"),\r\n        //         exit => exit.remove().transition()\r\n        //             .duration(1500)\r\n\r\n        //     )\r\n        //     .transition()\r\n        //     .duration(1000)\r\n        //     .attr(\"cx\", (d) => X_Linear(d.b12))\r\n        //     .attr(\"cy\", (d) => Y_Linear(d.b1))\r\n        //     .attr(\"r\", (d) => Z_Linear(d.hd))\r\n        //     .attr(\"stroke-width\", 1)\r\n        //     .attr(\"fill\", \"#ddd\")\r\n        //     .attr(\"stroke\", \"cyan\")\r\n        //     .attr(\"stroke-width\", 1)\r\n        //     .attr(\"opacity\", .4);\r\n\r\n\r\n    }, [data]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <div\r\n                id=\"divScatter2\"\r\n                style={{\r\n                    position: \"relative\",\r\n                    marginTop: \"10px\",\r\n                    width: \"550px\",\r\n                    border: \"1px solid teal\"\r\n                }}\r\n            >\r\n                <label>{class1.toString().replaceAll(',', ', ')}</label>\r\n\r\n                <label>{classes.slice(3).toString().replaceAll(',', ', ')}</label>\r\n\r\n                {/* <svg id=\"svgScatter2\" ref={refSVG} >\r\n                    < g ref={refScatter2}>\r\n                        <g className=\"scatter2X\"></g>\r\n\r\n                        <g className=\"scatter2Y\"></g>\r\n                    </g>\r\n                </svg> */}\r\n\r\n                <table >\r\n                    <tbody ref={refHDTable}>\r\n\r\n\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div >\r\n\r\n\r\n            {/* <div\r\n                id=\"divScatter2\"\r\n                style={{\r\n                    position: \"relative\",\r\n                    marginTop: \"10px\",\r\n                }}\r\n            >\r\n                <table ref={refHDTable}></table>\r\n            </div > */}\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default HammingCodTable;\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\HeatmapHook.js",["428","429","430","431","432","433","434"],"// /* \r\n// d3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/heatmap_data.csv\").then(function (data) {\r\n\r\n//  */\r\n\r\n\r\n//import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport \"./hamming_style.sass\";\r\n\r\nimport { dec2bin, hdSelf, hdOther } from \"./hammingFunctions\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\n// import parse from \"html-react-parser\"\r\n\r\nfunction HeatMapHook(props) {\r\n\r\n    const refHeatMap = useRef()\r\n    const refHeatMapSmall = useRef()\r\n\r\n\r\n    const [data, setData] = useState([])\r\n    const [class1, setClass1] = useState([])\r\n    const [classes, setClasses] = useState([])\r\n    const [class2, setClass2] = useState([]) // just for hd-cod;\r\n\r\n    const [hd_self, setSelf] = useState(0)\r\n    const [hd_other, setOther] = useState(0)\r\n    const [hd_cod, setCod] = useState(0)\r\n\r\n    //const [plotAvg, setPlotAvg] = useState(true)\r\n    const [plotAvg, setPlotAvg] = useState(false)\r\n\r\n\r\n\r\n    // Creates the data and sets it as state; \r\n    // uses limits, supplied as props. \r\n\r\n\r\n    useEffect(() => {\r\n        // let size = 41\r\n        // let boundary2 = props.boundary1 + 1\r\n        // let class1 = d3.range(props.boundary1 - size, props.boundary1 + 1)\r\n        // let classes = d3.range(props.boundary1 - size, boundary2 + 1 + size)\r\n        // let class2 = d3.range(props.boundary1 + 1, boundary2 + 1 + size)\r\n\r\n        let class1 = d3.range(props.limit1, props.boundary1 + 1)\r\n        let classes = d3.range(props.limit1, props.limit2 + 1)\r\n        let class2 = d3.range(props.boundary2, props.limit2 + 1)\r\n\r\n        let myData = []\r\n        class1.forEach((b1) => {\r\n            let g1 = dec2bin(10, b1)\r\n            classes.forEach((b12) => {\r\n                let g12 = dec2bin(10, b12)\r\n                let hd = 0\r\n                for (let i = 0; i < g12.length; i++) {\r\n                    if (g1[i] !== g12[i]) {\r\n                        hd = hd + 1\r\n                    }\r\n                }\r\n                myData.push(\r\n                    { b1: b1, b12: b12, hd: hd, g1: g1, g12: g12 }\r\n                )\r\n            })\r\n        })\r\n\r\n\r\n        // HD self, other, cod\r\n        let hd1, hd2, hd3;\r\n        if (classes.length > 0) {\r\n            hd1 = hdSelf(class1)\r\n            hd2 = hdOther(class1, class2)\r\n            hd3 = Math.abs(hd1 - hd2)\r\n        } else {\r\n            hd1 = 0\r\n            hd2 = 0\r\n            hd3 = Math.abs(hd1 - hd2)\r\n        }\r\n\r\n\r\n        setData(myData)\r\n        setClass1(class1)\r\n        setClasses(classes)\r\n        setClass2(class2)\r\n\r\n        setSelf(hd1)\r\n        setOther(hd2)\r\n        setCod(hd3.toFixed(1))\r\n\r\n    }, [props])\r\n\r\n\r\n\r\n    // ===============================================\r\n\r\n    useEffect(() => {\r\n        let margin = { top: 60, left: 150, bottom: 50, right: 110 }\r\n        //let margin = { top: 80, left: 100, bottom: 100, right: 325 }\r\n\r\n        let colorGreen = 'rgb(28, 255, 28)'\r\n        let colorOrange = 'rgb(255, 128, 49)'\r\n\r\n        var greenOrange = d3.scaleLinear()\r\n            .domain([1, 10])\r\n            .range([colorGreen, colorOrange])\r\n\r\n        let svgWidth\r\n        let svgHeight\r\n\r\n        if (document.getElementById(\"svgHeatMapHook\")) {\r\n            svgWidth = document.getElementById(\"svgHeatMapHook\").clientWidth\r\n            svgHeight = document.getElementById(\"svgHeatMapHook\").clientHeight\r\n        } else {\r\n            svgWidth = 550\r\n            svgHeight = 250\r\n        }\r\n\r\n        let width = svgWidth - margin.left - margin.right\r\n        let height = svgHeight - margin.top - margin.bottom\r\n\r\n\r\n        // SCALES:\r\n        let myGroups = Array.from(new Set(data.map(d => d.b1)))\r\n        let myVars = Array.from(new Set(data.map(d => d.b12)))\r\n\r\n        let X_Band = d3.scaleBand().range([0, width]).domain(myVars)\r\n        let Y_band = d3.scaleBand().range([height, 0]).domain(myGroups)\r\n\r\n\r\n        let chartHeatMap = d3.select(refHeatMap.current).attr(\"transform\",\r\n            `translate(${margin.left},${margin.top})`);\r\n\r\n\r\n\r\n\r\n\r\n        // CHART INFO:\r\n        let chartInfo = chartHeatMap.select(\".chartInfo\")\r\n            .attr(\"transform\", `translate(${0},${0})`)\r\n\r\n        chartInfo.selectAll(\"text\").remove()\r\n\r\n        // TITLE:\r\n        chartInfo\r\n            .append('text')\r\n            .text(\"HeatmapHook.js\")\r\n            .attr(\"id\", \"chartTitle1\")\r\n            .attr(\"x\", -130)\r\n            .attr(\"y\", -40)\r\n            .attr(\"fill\", \"yellow\")\r\n            .attr(\"font-size\", '16px')\r\n\r\n\r\n        // HD SELF:\r\n        chartInfo.append(\"text\").attr(\"fill\", \"lime\")\r\n            .attr(\"font-size\", \"14px\")\r\n            .attr(\"x\", 50)\r\n            .attr(\"y\", 160)\r\n            .text(hd_self)\r\n\r\n        // HD OTHER:\r\n        chartInfo.append(\"text\").attr(\"fill\", \"orange\")\r\n            .attr(\"font-size\", \"14px\")\r\n            .attr(\"x\", 200)\r\n            .attr(\"y\", 160)\r\n            .text(hd_other)\r\n\r\n        // COMBINED:\r\n        chartInfo.append(\"text\").attr(\"fill\", \"cyan\")\r\n            .attr(\"font-size\", \"14px\")\r\n            .attr(\"x\", 120)\r\n            .attr(\"y\", 180)\r\n            .text(() => {\r\n                // return `HDcod = | ${hd_self} - ${hd_other} | = ${hd_cod}`\r\n                return hd_cod\r\n            })\r\n\r\n\r\n\r\n\r\n        // X-axis:\r\n        chartHeatMap.select(\".heatmapX\")\r\n            .attr(\"transform\", `translate(0, ${height})`)\r\n            .call(\r\n                d3.axisBottom(X_Band)\r\n                    .tickValues([])\r\n                // .tickValues(classes)\r\n                // .tickPadding(11)\r\n            )\r\n            .selectAll(\"text\").remove()\r\n        // .style(\"color\", (d) => {\r\n        //     if (d <= d3.max(myGroups)) {\r\n        //         return 'lime'\r\n        //     } else {\r\n        //         return 'orange'\r\n        //     }\r\n        // })\r\n\r\n\r\n        // Y-axis:\r\n        chartHeatMap.select(\".heatmapY\")\r\n            .call(\r\n                d3.axisLeft(Y_band)\r\n                    .tickValues([])\r\n                // .tickValues((class1))\r\n                // .tickPadding(11)\r\n            )\r\n            .selectAll(\"text\").remove()\r\n        // .text(\r\n        //     (d) => {\r\n        //         return `${d}: ${dec2bin(10, d)}`\r\n        //     }\r\n        // )\r\n\r\n\r\n        // TOOLTIP:\r\n        const ttHeatMap = d3.select(\"#ttHeatMap\")\r\n            .style(\"opacity\", 0)\r\n            .style(\"class\", \"tooltip\")\r\n            .style(\"background-color\", \"white\")\r\n            .style(\"border\", \"solid\")\r\n            .style(\"border-width\", \"1px\")\r\n            .style(\"border-radius\", \"5px\")\r\n            .style(\"padding\", \"5px\")\r\n            .style(\"font-size\", \"11px\")\r\n            .attr(\"z-index\", 0)\r\n\r\n\r\n        // MOUSE OVER, MOVE, LEAVE:\r\n        const mouseover = function (event, d) {\r\n            //console.log(event)\r\n            ttHeatMap\r\n                .style(\"opacity\", 0.8)\r\n\r\n        }\r\n\r\n        const mousemove = function (event, d) {\r\n            //console.log(d)\r\n            ttHeatMap\r\n                .style(\"opacity\", 0.8)\r\n                .html(d.description)\r\n                .style(\"left\", (event.layerX - 30) + \"px\")\r\n                .style(\"top\", (event.layerY - 15) + \"px\")\r\n                .style(\"position\", \"absolute\")\r\n        }\r\n\r\n        const mouseleave = function (event, d) {\r\n            ttHeatMap\r\n                .style(\"opacity\", 0)\r\n        }\r\n\r\n\r\n        // DATA:\r\n        chartHeatMap\r\n            .selectAll(\"rect\")\r\n            .data(data)\r\n            .join(\r\n                enter => enter.append('rect').attr(\"class\", \"new\"),\r\n                update => update.attr(\"class\", \"update\"),\r\n                exit => exit.remove().transition()\r\n                    .duration(1000)\r\n            )\r\n            .attr(\"x\", function (d) { return X_Band(d.b12) })\r\n            .attr(\"y\", function (d) { return Y_band(d.b1) })\r\n            .attr(\"width\", X_Band.bandwidth())\r\n            .attr(\"height\", Y_band.bandwidth())\r\n            .on(\"mouseover\", mouseover)\r\n            .on(\"mousemove\", mousemove)\r\n            .on(\"mouseleave\", mouseleave)\r\n            .transition()\r\n            .duration(1000)\r\n            .style(\"fill\", function (d) {\r\n\r\n                if (plotAvg === true) {\r\n                    if (d.b12 <= props.boundary1) {\r\n                        return greenOrange(hd_self)\r\n                    } else {\r\n                        return greenOrange(hd_other)\r\n                    }\r\n                } else {\r\n                    return greenOrange(d.hd)\r\n                }\r\n\r\n\r\n            })\r\n\r\n\r\n\r\n\r\n    }, [data]);\r\n\r\n\r\n\r\n\r\n\r\n    // SMALL VERSION, ONLY AVERAGES of HD SELF - OTHER\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let margin = { top: 60, left: 30, bottom: 150, right: 450 }\r\n\r\n        let colorGreen = 'rgb(28, 255, 28)'\r\n        let colorOrange = 'rgb(255, 128, 49)'\r\n\r\n        var greenOrange = d3.scaleLinear()\r\n            .domain([1, 10])\r\n            .range([colorGreen, colorOrange])\r\n\r\n        let svgWidth = 550\r\n        let svgHeight = 250\r\n        let width = svgWidth - margin.left - margin.right\r\n        let height = svgHeight - margin.top - margin.bottom\r\n\r\n\r\n\r\n\r\n        let smallData = [\r\n            {\r\n                b1: 1, b12: 1, hd: hd_self,\r\n                class: `${props.limit1} - ${props.boundary1}`, g1: \"0111010111\", g12: \"0111010111\"\r\n            },\r\n            {\r\n                b1: 1, b12: 2, hd: hd_other,\r\n                class: `${props.boundary2} - ${props.limit2}`, g1: \"0111010111\", g12: \"0111010111\"\r\n            }]\r\n\r\n        // SCALES:\r\n        let mySmallGroups = Array.from(new Set(smallData.map(d => d.b1)))\r\n        let mySmallVars = Array.from(new Set(smallData.map(d => d.b12)))\r\n\r\n        let X_Band = d3.scaleBand().range([0, 100]).domain(mySmallVars)\r\n        let Y_band = d3.scaleBand().range([50, 0]).domain(mySmallGroups)\r\n\r\n        let chartHeatMap = d3.select(refHeatMapSmall.current).attr(\"transform\",\r\n            `translate(${margin.left},${margin.top})`);\r\n\r\n        chartHeatMap.select(\".smallInfo\").selectAll(\"text\").remove()\r\n        chartHeatMap.select(\".smallInfo\").append(\"text\")\r\n            .text(hd_cod)\r\n            .attr(\"font-size\", \"14px\")\r\n            .attr(\"x\", 35)\r\n            .attr(\"y\", -10)\r\n            .attr(\"fill\", \"cyan\")\r\n        //.attr(\"font-family\", \"Arial\")\r\n\r\n\r\n        // X-axis:\r\n        chartHeatMap.select(\".smallX\")\r\n            .attr(\"transform\", `translate(0, ${height})`)\r\n            .call(\r\n                d3.axisBottom(X_Band)\r\n                    .tickSize(0)\r\n                    .tickPadding(20)\r\n\r\n            )\r\n            .selectAll(\"text\")\r\n            .style(\"color\", (d) => {\r\n                if (d <= d3.max(mySmallGroups)) {\r\n                    return 'lime'\r\n                } else {\r\n                    return 'orange'\r\n                }\r\n            })\r\n            .text((d) => {\r\n                if (d === 1) {\r\n                    return hd_self\r\n                } else {\r\n                    return hd_other\r\n                }\r\n            })\r\n            .attr(\"font-size\", \"12px\")\r\n\r\n\r\n        // Y-axis:\r\n        chartHeatMap.select(\".smallY\")\r\n            .call(\r\n                d3.axisLeft(Y_band)\r\n                    .tickValues([])\r\n                    .tickSize(0)\r\n            )\r\n\r\n\r\n        // SMALL DATA:\r\n        chartHeatMap\r\n            .selectAll(\"rect\")\r\n            .data(smallData)\r\n            .join(\r\n                enter => enter.append('rect').attr(\"class\", \"new\"),\r\n                update => update.attr(\"class\", \"update\"),\r\n                exit => exit.remove().transition()\r\n                    .duration(1000)\r\n            )\r\n            .attr(\"x\", function (d) { return X_Band(d.b12) })\r\n            .attr(\"y\", function (d) { return Y_band(d.b1) })\r\n            .attr(\"width\", X_Band.bandwidth())\r\n            .attr(\"height\", Y_band.bandwidth())\r\n            .transition()\r\n            .duration(1000)\r\n            .style(\"fill\", function (d) {\r\n                // console.log(\"d: \", parseFloat(d.hd) + 1)\r\n                return greenOrange(parseFloat(d.hd))\r\n\r\n\r\n            })\r\n\r\n\r\n        // chartHeatMap\r\n        //     .selectAll(\"rect\").on(\"mouseover\", mouseover)\r\n        //     .on(\"mousemove\", mousemove)\r\n        //     .on(\"mouseleave\", mouseleave)\r\n\r\n\r\n\r\n    }, [data]);\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <div\r\n                id=\"divHeatMapHook\"\r\n                style={{\r\n                    position: \"relative\",\r\n                    marginTop: \"10px\",\r\n                    border: \"1px solid red\"\r\n                }}\r\n            >\r\n                <svg id=\"svgHeatMapHook\">\r\n\r\n                    <g ref={refHeatMap}>\r\n                        <g className=\"heatmapX\"></g>\r\n                        <g className=\"heatmapY\"></g>\r\n                        <g className=\"chartInfo\"></g>\r\n                    </g>\r\n\r\n\r\n                    <g ref={refHeatMapSmall}>\r\n                        <g className=\"smallX\"></g>\r\n                        <g className=\"smallY\"></g>\r\n                        <g className=\"smallInfo\"></g>\r\n                    </g>\r\n\r\n\r\n\r\n                </svg>\r\n\r\n                <div id=\"ttHeatMap\"></div>\r\n\r\n            </div >\r\n\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default HeatMapHook;\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\hammingFunctions.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\HammingDistances.js",["435","436","437","438","439","440","441"],"import \"./hamming_style.sass\";\r\nimport \"./phenotypes.sass\";\r\n\r\n//import parse from \"html-react-parser\"\r\nimport * as d3 from \"d3\";\r\nimport { dec2bin, hdSelf, hdOther } from \"./hammingFunctions\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nimport { hdValues } from \"./hdValues\";\r\n\r\n\r\nfunction HammingDistances(props) {\r\n    const refHammingDistances = useRef()\r\n\r\n    const [data, setData] = useState(hdValues)\r\n    const [class1, setClass1] = useState([])\r\n    const [classes, setClasses] = useState([])\r\n    const [class2, setClass2] = useState([]) // just for hd-cod;\r\n\r\n\r\n    useEffect(() => {\r\n        let size = 3\r\n        let boundary2 = props.boundary1 + 1\r\n        let class1 = d3.range(props.boundary1 - size, props.boundary1 + 1)\r\n        let classes = d3.range(props.boundary1 - size, boundary2 + 1 + size)\r\n        let class2 = d3.range(props.boundary1 + 1, boundary2 + 1 + size)\r\n\r\n        let myData = []\r\n\r\n        class1.forEach((b1) => {\r\n            let g1 = dec2bin(10, b1)\r\n            classes.forEach((b12) => {\r\n                let g12 = dec2bin(10, b12)\r\n                let hd = 0\r\n                for (let i = 0; i < g12.length; i++) {\r\n                    if (g1[i] !== g12[i]) {\r\n                        hd = hd + 1\r\n                    }\r\n                }\r\n                myData.push(\r\n                    { b1: b1, b12: b12, hd: hd, g1: g1, g12: g12 }\r\n                )\r\n            })\r\n        })\r\n        // console.log(\"HammingDistances:\")\r\n        // console.log(myData)\r\n\r\n        //setData(myData)\r\n        setClass1(class1)\r\n        setClasses(classes)\r\n        setClass2(class2)\r\n\r\n    }, [props])\r\n\r\n\r\n    useEffect(() => {\r\n        let margin = { top: 20, right: 20, bottom: 100, left: 40, }\r\n        let svgWidth = 550\r\n        let svgHeight = 250\r\n        let width = svgWidth - margin.left - margin.right\r\n        let height = svgHeight - margin.top - margin.bottom\r\n\r\n        let X_Band = d3.scaleBand()\r\n            .range([0, width])\r\n            .domain(\r\n                data.map((d) => {\r\n                    return d.hdNext.hdLabel\r\n                }))\r\n            .padding(0.0);\r\n\r\n        let Y_Linear = d3.scaleLinear().range([height, 0]).domain([1, 10]);\r\n\r\n        let HammingChart = d3.select(refHammingDistances.current).attr(\"transform\",\r\n            `translate(${margin.left},${margin.top})`);\r\n\r\n        HammingChart.select(\".hammingX\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(\r\n                d3.axisBottom(X_Band)\r\n                    .tickSize(0)\r\n            )\r\n            .selectAll(\"text\").remove()\r\n\r\n        HammingChart.select(\".hammingY\")\r\n            .call(\r\n                d3.axisLeft(Y_Linear)\r\n                    .tickPadding(10)\r\n            )\r\n\r\n\r\n        HammingChart.select(\".hammingBarPhens\")\r\n            .selectAll(\"rect\")\r\n            .data(data)\r\n            .join(\r\n                enter => enter.append('rect').attr(\"class\", \"new\"),\r\n                update => update.attr(\"class\", \"update\"),\r\n                exit => exit.remove().transition()\r\n                    .duration(1000)\r\n            )\r\n            .attr(\"x\", (d) => X_Band(d.hdNext.hdLabel))\r\n            .attr(\"y\", (d) => Y_Linear(d.hdNext.hd))\r\n            .attr(\"width\", X_Band.bandwidth())\r\n            .attr(\"height\", (d) => height - Y_Linear(d.hdNext.hd))\r\n            .attr(\"stroke-width\", 1)\r\n\r\n\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        var updateColors = () => {\r\n            let hammingBins = d3.select(\".hammingBarPhens\").selectAll(\"rect\")\r\n\r\n            hammingBins.attr(\"fill\", (d) => {\r\n                if (d.phenotype >= props.limit1 & d.phenotype <= props.boundary1) {\r\n                    return 'rgb(28, 255, 28)'\r\n                } else if (d.phenotype >= props.boundary2 & d.phenotype <= props.limit2) {\r\n                    return 'rgb(255, 128, 49)'\r\n\r\n                } else {\r\n                    return '#fff'\r\n                }\r\n            })\r\n            hammingBins.attr(\"stroke\", (d) => {\r\n                if (d.phenotype >= props.limit1 & d.phenotype <= props.boundary1) {\r\n                    return 'rgb(28, 255, 28)'\r\n                } else if (d.phenotype >= props.boundary2 & d.phenotype <= props.limit2) {\r\n                    return 'rgb(255, 128, 49)'\r\n                } else {\r\n                    return 'none'\r\n                }\r\n            })\r\n        }\r\n\r\n        updateColors()\r\n\r\n\r\n    }, [props.limit1, props.boundary1, props.limit2, props.boundary2]\r\n    );\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let HammingChart = d3.select(refHammingDistances.current)\r\n\r\n        HammingChart.append(\"rect\")\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <div\r\n                id=\"divHammingChart\"\r\n                style={{\r\n                    backgroundColor: \"#446b58\",\r\n                    position: \"relative\",\r\n                    marginTop: \"10px\",\r\n                }}\r\n            >\r\n                <svg id=\"svgHammingChart\">\r\n\r\n                    <g ref={refHammingDistances}>\r\n                        <g className=\"hammingX\"></g>\r\n                        <g className=\"hammingY\"></g>\r\n                        <g className=\"chartInfo\"></g>\r\n                        <g className=\"hammingBarPhens\"></g>\r\n                    </g>\r\n\r\n                </svg>\r\n\r\n                {/* <div id=\"ttPhenotypes\"></div> */}\r\n\r\n            </div >\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default HammingDistances;\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\etbdState.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\hdValues.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd_hamming\\hdCodValues.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd_nbt\\Nbt2008.jsx",["442","443","444"],"import './nbt_styles.sass'\r\nimport * as d3 from \"d3\";\r\nimport { nanoid } from \"nanoid\"\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport { nbtData } from './nbtData'\r\n\r\n\r\nexport default function Nbt2008(props) {\r\n\r\n    const refBaseline = useRef()\r\n    // const refBias = useRef()\r\n\r\n\r\n    const [margin, setMargin] = useState({ top: 75, left: 75, bottom: 50, right: 75 })\r\n\r\n    const [width] = useState(() => {\r\n        return (\r\n            400 - margin.left - margin.right\r\n        )\r\n    })\r\n\r\n    const [height] = useState(() => {\r\n        return (\r\n            300 - margin.top - margin.bottom)\r\n\r\n    })\r\n\r\n    const [X] = useState(() => {\r\n        let x = d3.scaleLinear()\r\n            .range([0, width])\r\n            .domain([0, 70])\r\n\r\n        return x\r\n    })\r\n\r\n\r\n    const [Y] = useState(() => {\r\n        let y = d3.scaleLinear()\r\n            .range([height, 0])\r\n            .domain([0, 2.5])\r\n\r\n        return y\r\n    })\r\n\r\n\r\n    const [biasData] = useState(() => {\r\n        let allData = nbtData()\r\n        //console.log(\"allData: \", allData)\r\n        //console.log(\"-----------------: \")\r\n\r\n        let bias = allData[1]\r\n        //console.log(\"bsn: \", bsn)\r\n\r\n        //let xxx = bsn.filter(item => {return item.study === 'original'})[0]\r\n        //console.log(\"original: \", xxx)\r\n\r\n        return bias\r\n    })\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let gBaseline = d3.select(refBaseline.current)\r\n            .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\r\n\r\n\r\n        //    ---------------   AXES  ------------------------\r\n\r\n        gBaseline.select(\".gX\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(\r\n                d3\r\n                    .axisBottom(X)\r\n                    .tickPadding(15)\r\n                    .tickValues([10, 25, 40, 55, 70])\r\n                    .tickFormat((d) => { return `L${d}-40` })\r\n            )\r\n\r\n        gBaseline.select(\".gY\")\r\n            .call(\r\n                d3\r\n                    .axisLeft(Y)\r\n                    .tickPadding(10)\r\n                    .tickValues([0.0, 0.5, 1, 1.5, 2, 2.5])\r\n            )\r\n\r\n\r\n        // _______________________   data  POINTS  _______________________\r\n\r\n        gBaseline\r\n            .selectAll(\".slope-original\")\r\n            .data(\r\n                biasData.filter(item => { return item.study === 'original' })[0].conditions\r\n            )\r\n            .join(\r\n                enter => enter.append('circle').attr(\"class\", \"slope-original\"),\r\n            )\r\n            //.attr(\"cx\", (d) => X(d.magnRatio))\r\n            .attr(\"cx\", (d) => X(d.miuLeft))\r\n\r\n            .attr(\"cy\", (d) => Y(d.slopeMean))\r\n            .attr(\"r\", 2)\r\n            .attr(\"stroke-width\", 0)\r\n            .attr(\"fill\", \"#c9cecc75\")\r\n            .attr(\"stroke\", \"#c9cecc75\")\r\n\r\n\r\n        gBaseline\r\n            .selectAll(\".slope-replication\")\r\n            .data(\r\n                biasData.filter(item => { return item.study === 'replication' })[0].conditions\r\n            )\r\n            .join(\r\n                enter => enter.append('circle').attr(\"class\", \"slope-replication\"),\r\n            )\r\n            .attr(\"cx\", (d) => X(d.miuLeft))\r\n            .attr(\"cy\", (d) => Y(d.slopeMean))\r\n            .attr(\"r\", 2)\r\n            .attr(\"stroke-width\", 0)\r\n            .attr(\"fill\", \"#c9cecc75\")\r\n            .attr(\"stroke\", \"#c9cecc75\")\r\n\r\n\r\n        gBaseline\r\n            .selectAll(\".slope-nbt\")\r\n            .data(\r\n                biasData.filter(item => { return item.study === 'nbt' })[0].conditions\r\n            )\r\n            .join(\r\n                enter => enter.append('circle').attr(\"class\", \"slope-nbt\"),\r\n            )\r\n            .attr(\"cx\", (d) => X(d.miuLeft))\r\n            .attr(\"cy\", (d) => Y(d.slopeMean))\r\n            .attr(\"r\", 2)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"fill\", \"#6ED0AA\")\r\n            .attr(\"stroke\", \"#6ED0AA\")\r\n\r\n\r\n        //  CIRCLES BIAS POINTS:\r\n        \r\n        \r\n        gBaseline\r\n            .selectAll(\".bias-original\")\r\n            .data(\r\n                biasData.filter(item => { return item.study === 'original' })[0].conditions\r\n            )\r\n            .join(\r\n                enter => enter.append('circle').attr(\"class\", \"bias-original\"),\r\n            )\r\n            //.attr(\"cx\", (d) => X(d.magnRatio))\r\n            .attr(\"cx\", (d) => X(d.miuLeft))\r\n\r\n            .attr(\"cy\", (d) => Y(d.biasMean))\r\n            .attr(\"r\", 2)\r\n            .attr(\"stroke-width\", 0)\r\n            .attr(\"fill\", \"#c9cecc75\")\r\n            .attr(\"stroke\", \"#c9cecc75\")\r\n\r\n\r\n        gBaseline\r\n            .selectAll(\".bias-replication\")\r\n            .data(\r\n                biasData.filter(item => { return item.study === 'replication' })[0].conditions\r\n            )\r\n            .join(\r\n                enter => enter.append('circle').attr(\"class\", \"bias-replication\"),\r\n            )\r\n            .attr(\"cx\", (d) => X(d.miuLeft))\r\n            .attr(\"cy\", (d) => Y(d.biasMean))\r\n            .attr(\"r\", 2)\r\n            .attr(\"stroke-width\", 0)\r\n            .attr(\"fill\", \"#c9cecc75\")\r\n            .attr(\"stroke\", \"#c9cecc75\")\r\n\r\n\r\n        gBaseline\r\n            .selectAll(\".bias-nbt\")\r\n            .data(\r\n                biasData.filter(item => { return item.study === 'nbt' })[0].conditions\r\n            )\r\n            .join(\r\n                enter => enter.append('circle').attr(\"class\", \"bias-nbt\"),\r\n\r\n            )\r\n            .attr(\"cx\", (d) => X(d.miuLeft))\r\n            .attr(\"cy\", (d) => Y(d.biasMean))\r\n            .attr(\"r\", 2)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"fill\", \"#6ED0AA\")\r\n            .attr(\"stroke\", \"#6ED0AA\")\r\n\r\n\r\n\r\n        // _______________________   data LINES / PATHS  _______________________\r\n\r\n\r\n        // SLOPES:\r\n        const lineGenerator = d3.line()\r\n            .curve(d3.curveCatmullRom.alpha(.5))\r\n            .x(d => X(d.miuLeft))\r\n            .y(d => Y(d.slopeMean))\r\n\r\n        const originalSlope = lineGenerator(biasData.filter(item => { return item.study === 'original' })[0].conditions)\r\n        const replicationSlope = lineGenerator(biasData.filter(item => { return item.study === 'replication' })[0].conditions)\r\n        const nbtSlope = lineGenerator(biasData.filter(item => { return item.study === 'nbt' })[0].conditions)\r\n\r\n\r\n        // BIAS PARAMETERS:\r\n        const lineGenerator2 = d3.line()\r\n            .curve(d3.curveCatmullRom.alpha(.5))\r\n            .x(d => X(d.miuLeft))\r\n            .y(d => Y(d.biasMean))\r\n\r\n        const originalBias = lineGenerator2(biasData.filter(item => { return item.study === 'original' })[0].conditions)\r\n        const replicationBias = lineGenerator2(biasData.filter(item => { return item.study === 'replication' })[0].conditions)\r\n        const nbtBias = lineGenerator2(biasData.filter(item => { return item.study === 'nbt' })[0].conditions)\r\n\r\n\r\n        // APPEND SLOPE PATHS:\r\n\r\n        gBaseline.append('path')\r\n            .attr('d', originalSlope)\r\n            .attr('fill', 'none')\r\n            .style('stroke', '#c9cecc75')\r\n            .style('stroke-width', 1)\r\n\r\n        gBaseline.append('path')\r\n            .attr('d', replicationSlope)\r\n            .attr('fill', 'none')\r\n            .style('stroke-width', 1)\r\n            .attr(\"stroke-dasharray\", 5)\r\n\r\n        gBaseline.append('path')\r\n            .attr('d', nbtSlope)\r\n            .attr('fill', 'none')\r\n            .style('stroke', '#6ED0AA')\r\n            .style('stroke-width', 1)\r\n\r\n\r\n        // APPEND BIAS PATHS:\r\n\r\n        gBaseline.append('path')\r\n            .attr('d', originalBias)\r\n            .attr('fill', 'none')\r\n            .style('stroke', '#c9cecc75')\r\n            .style('stroke-width', 1)\r\n\r\n        gBaseline.append('path')\r\n            .attr('d', replicationBias)\r\n            .attr('fill', 'none')\r\n            .style('stroke-width', 1)\r\n            .attr(\"stroke-dasharray\", 5)\r\n\r\n        gBaseline.append('path')\r\n            .attr('d', nbtBias)\r\n            .attr('fill', 'none')\r\n            .style('stroke', '#6ED0AA')\r\n            .style('stroke-width', 1)\r\n\r\n\r\n\r\n        // _______________________   LABELS  _______________________\r\n\r\n        gBaseline.append('text')\r\n            .text('Linear selection, unequal magnitudes')\r\n            .attr(\"fill\", \"#ffffffaa\")\r\n            .attr(\"x\", 10)\r\n            .attr(\"y\", -45)\r\n            .attr(\"font-size\", \"15px\")\r\n            //.style(\"font-variant\", \"small-caps\")\r\n            //.style(\"letter-spacing\", \"1.5px\")\r\n            .style(\"font-family\", \"Roboto\")\r\n\r\n\r\n        gBaseline.append('text')\r\n            .text('(Studies 1 and 2 from McDowell et. al. (2008)')\r\n            .attr(\"fill\", \"#ffffff70\")\r\n            .attr(\"x\", 30)\r\n            .attr(\"y\", -25)\r\n            .attr(\"font-size\", \"10px\")\r\n\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div id='divNbt2008' >\r\n\r\n            <svg id='svgNbt2008'>\r\n\r\n\r\n                <g\r\n                    ref={refBaseline}\r\n                    id='gBaseline'\r\n                >\r\n                    <g className=\"gX\"></g>\r\n                    <g className=\"gY\"></g>\r\n                    {/* <g className=\"gY2\"></g> */}\r\n                </g>\r\n\r\n\r\n                {/* <g\r\n                    ref={refBias}\r\n                    id='gBias'\r\n                >\r\n                    <g className=\"gX\"></g>\r\n                    <g className=\"gY\"></g>\r\n                    <g className=\"gY2\"></g>\r\n                </g> */}\r\n\r\n            </svg>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\etbd_nbt\\nbtData.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingLMS.jsx",["445","446","447","448"],"import React, { Component } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\n\r\nexport default function TeachingLMS() {\r\n\r\n    let style1 = {\r\n        width: '100%',\r\n        margin: '.2rem',\r\n        padding: '.2rem',\r\n        fontSize: '.75rem',\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <Container\r\n                title='Learning Management Systems'\r\n                style={{\r\n                    textAlign: 'center',\r\n                    opacity: \"0.8\",\r\n                    border: '1px solid #ff990050',\r\n                    marginTop: \"1rem\",\r\n                }}\r\n            >\r\n                <Row>\r\n                    <Col\r\n\r\n                    >\r\n                        <Row\r\n                            style={{\r\n                                color: '#1f8f92',\r\n                                width: \"100%\",\r\n                                height: \"100%\",\r\n                                // border: \"1px solid #1f8f92\",\r\n                                letterSpacing: \".2rem\"\r\n                            }}\r\n                        >\r\n\r\n\r\n                            <h3\r\n                                style={{\r\n                                    color: '#1f8f92',\r\n                                    color: \"#ff990050\",\r\n                                    color: \"#ff9900\",\r\n                                    fontSize: \"1.5rem\",\r\n                                    width: \"8rem\",\r\n                                    margin: \"auto\",\r\n                                    padding: \".3rem\",\r\n                                    textAlign: 'center',\r\n                                }}\r\n                            >\r\n                                LMS\r\n                            </h3>\r\n\r\n\r\n                        </Row>\r\n\r\n                    </Col>\r\n                    \r\n    \r\n                    <Col   >\r\n                        <Row>\r\n                            <a style={style1} href=\"https://www.blackboard.com/\">Blackboard</a>\r\n                        </Row>\r\n                        <Row>\r\n                            <a style={style1} href=\"https://www.d2l.com/\">D2L</a>\r\n                        </Row>\r\n                    </Col>\r\n\r\n                    <Col   >\r\n                        <Row>\r\n                            <a style={style1} href=\"https://www.instructure.com/\">Canvas</a>\r\n                        </Row>\r\n                        <Row>\r\n                            <a style={style1} href=\"https://moodle.com/\">Moodle</a>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n\r\n        </>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n",["449","450"],"F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingSection.jsx",["451"],"import \"./teaching.sass\";\r\n\r\nimport React, { Component } from \"react\";\r\nimport parse from \"html-react-parser\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nimport { instructorRoles } from \"../../DATA/infoTeaching\"\r\n//import OrderFellowship from \"./OrderFellowship\"\r\n\r\nimport { nanoid } from \"nanoid\"\r\nimport TeachingCard from \"./TeachingCard\"\r\nimport TeachingAssistant from \"./TeachingAssistant\"\r\n\r\nimport { Fade } from \"react-reveal\";\r\nimport CollapseHook from \"../timeline_files/CollapseHook\"\r\n\r\nimport OrderFellowship from './OrderFellowship'\r\n\r\n\r\n\r\nexport default class TeachingExperience extends Component {\r\n\r\n\r\n    state = {\r\n        teachingDetails: true,\r\n        schools: [\"emory\", \"oxford\", \"gsu\", \"agnes\"],\r\n    }\r\n\r\n\r\n    showDetails = () => {\r\n        this.state.teachingDetails === false ? this.setState({ teachingDetails: true }) : this.setState({ teachingDetails: false })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const infoTeaching = instructorRoles()\r\n        var TeachingCards = infoTeaching.map((item) => {\r\n\r\n            var muie = item.semesters\r\n\r\n            var Muie1 = muie.map((s) => {\r\n                return (\r\n                    <TeachingCard\r\n                        institution={s.institution}\r\n                        institution1={s.institution1}\r\n\r\n                        semester={s.semester}\r\n                        sectionSize={s.sectionSize}\r\n                        sections={s.sections}\r\n                        teachingDetails={this.state.teachingDetails}\r\n                        schools={this.state.schools}\r\n                        schoolCode={s.schoolCode}\r\n                        role={s.role}\r\n\r\n                    />\r\n                )\r\n            })\r\n\r\n\r\n\r\n\r\n            return (\r\n                <Card\r\n                    text={\"Dark\".toLowerCase() === 'light' ? 'dark' : 'white'}\r\n                    className=\"card\"\r\n                    key={nanoid()}\r\n                >\r\n\r\n                    <Fade>\r\n                        <Card.Title\r\n                            className=\"title\"\r\n                            style={{\r\n                                marginBottom: '5px',\r\n\r\n                            }}\r\n\r\n                        >\r\n                            {parse(item.name)}\r\n\r\n                        </Card.Title>\r\n                    </Fade>\r\n\r\n\r\n                    {Muie1}\r\n\r\n                </Card>)\r\n        }\r\n        )\r\n\r\n\r\n        return (\r\n\r\n            <div id='teachingSection'>\r\n\r\n                <div\r\n                    style={{\r\n                        width: '350px',\r\n                        height: \"fit-content\",\r\n                        marginRight: \"75px\",\r\n                        // display: \"flex\",\r\n                        // flexDirection: \"row\",\r\n                    }}\r\n                >\r\n\r\n                    <TeachingAssistant />\r\n\r\n                    <OrderFellowship />\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n                <div\r\n                    style={{\r\n                        width: \"fit-content\",\r\n                        marginBottom: \"0px\",\r\n                        maxWidth: '350px',\r\n                    }}\r\n                >\r\n\r\n                    <div className='sub-section-header'  >\r\n\r\n\r\n                        {/* <h1 className=\"title\"\r\n                            style={{\r\n                                width: 'fit-content',\r\n                                textAlign: 'left',\r\n                            }}\r\n                        >\r\n                            INSTRUCTOR\r\n                        </h1>\r\n                        <h1 className=\"title\"\r\n                            style={{\r\n                                width: 'fit-content',\r\n                                textAlign: 'left',\r\n                                color: '#19f8e2',\r\n                            }}\r\n                        >\r\n                            2013 - 2018\r\n                        </h1> */}\r\n\r\n\r\n\r\n\r\n                        <h1 className=\"title\" >   {'INSTRUCTOR'}  </h1>\r\n                        <h2 className=\"years\" >  {'2013 - 2018'}  </h2>\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                    <div className=\"teachingCards\"   >\r\n                        {TeachingCards}\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\teaching\\OrderFellowship.jsx",["452","453","454","455"],"//import \"./teaching.sass\";\r\n\r\n\r\n// let urls_order = [\r\n//     {\r\n//         name: 'O.R.D.E.R.',\r\n//         link: 'http://www.order.emory.edu/about/index.html'\r\n//     },\r\n//     {\r\n//         name: 'Syllabus', link: 'http://www.order.emory.edu/documents/sex-drugs-and-vodou-spirits-fall-syllabus.pdf',\r\n//     },\r\n//     { name: \"Google Drive\", link: \"gDrive\" },\r\n\r\n// ]\r\n\r\n\r\n// let description_order = \"My appreciation for mentorship was instilled in me since grad school, when I had the privilege of    holding an interdisciplinary teaching fellowship called O.R.D.E.R. (On Recent Discoveries by    Emory Researchers; 2011-2012). It entailed co-teaching an interdisciplinary course - with    fellows from physics, women studies, anthropology, and epidemiology – and guiding students in    developing research projects. The team I mentored, first-year students at the time, carried out    an ingenious study, which showed that conforming to the group (Asch, 1955) did not require the    presence of others; simply knowing their preferences sufficed to produce strong conformity    effects. My efforts and contribution were recognized with the Emory/Hughes Medical Institute    Teacher-Scholar Award (2012) and an invitation to serve on the O.R.D.E.R. 2012-13 advisory     board, which I gladly accepted. I am grateful to the fellowship coordinators, David Lynn and Leslie Taylor for their guidance and support.\"\r\n\r\n// let summary_order = \"As an ORDER fellow I developed two intersdisciplnary seminars with colleagues from physics, women studies, anthropology, and epidemiology. Together  – and guiding students in developing research projects. The team I mentored, first-year students at the time, carried out a study that showed that conforming to the group (Asch, 1955) did not require the presence of others; knowing their answers sufficed to produce conformity effects.\"\r\n\r\n\r\n\r\n\r\n\r\n// {\r\n//     id: 14,\r\n//     title: \"Conformity at a distance\",\r\n//     date: \"05/10/2012\",\r\n//     type: \"O.R.D.E.R. fellow, study coordinator\",\r\n//     role: \"O.R.D.E.R. fellow\",\r\n//     keywords: [\r\n//         \"Prof. David Lynn (Biological Chemistry)\",\r\n//         \"Prof. Leslie Taylor (Theatre Studies).\",\r\n//     ],\r\n//     tags: [],\r\n\r\n//     description: \"<br/><br/>  <br/><br/>  <br/><br/>  <br/><br/> <br/><br/>\",\r\n//     img: [asch1, asch2],\r\n//     citation: \"\",\r\n//     urls: [\r\n//         {\r\n//             name: \"O.R.D.E.R.\",\r\n//             link: \"http://www.order.emory.edu/about/index.html\",\r\n//         },\r\n//         { name: \"Google Drive\", link: \"gDrive\" },\r\n//         {\r\n//             name: \"Syllabus\",\r\n//             link: \"http://www.order.emory.edu/documents/sex-drugs-and-vodou-spirits-fall-syllabus.pdf\",\r\n//         },\r\n//     ],\r\n\r\n//     abstract:\r\n//         \"My appreciation for mentorship was instilled in me since grad school, when I had the privilege of    holding an interdisciplinary teaching fellowship called O.R.D.E.R. (On Recent Discoveries by    Emory Researchers; 2011-2012). It entailed co-teaching an interdisciplinary course - with    fellows from physics, women studies, anthropology, and epidemiology – and guiding students in    developing research projects. The team I mentored, first-year students at the time, carried out    an ingenious study, which showed that conforming to the group (Asch, 1955) did not require the    presence of others; simply knowing their preferences sufficed to produce strong conformity    effects. My efforts and contribution were recognized with the Emory/Hughes Medical Institute    Teacher-Scholar Award (2012) and an invitation to serve on the O.R.D.E.R. 2012-13 advisory     board, which I gladly accepted. I am grateful to the fellowship coordinators, David Lynn and Leslie Taylor for their guidance and support.\",\r\n// },\r\n\r\n\r\n\r\n\r\nimport React, { Component } from \"react\";\r\nimport CollapseHook from \"../timeline_files/CollapseHook\"\r\n\r\nimport parse from \"html-react-parser\";\r\n\r\n\r\nexport default function OrderFellowship() {\r\n\r\n\r\n        return (\r\n\r\n\r\n            <>\r\n                <div\r\n                    className='sub-section-header'\r\n                    style={{\r\n                        marginTop: \"30px\",\r\n                        textAlign: \"center\",\r\n                        fontFamily: \"Montserrat\",\r\n                        border: \"1px dotted teal\",\r\n\r\n                        paddingTop: \"10px\",\r\n\r\n\r\n                    }}\r\n                >\r\n\r\n                    <h2 className=\"years\"\r\n                        style={{\r\n                            fontFamily: \"Montserrat\",\r\n                            fontSize: \"11px\",\r\n                            marginBottom: \"5px\",\r\n                            letterSpacing: 1,\r\n                        }}\r\n                    >\r\n                        On Recent Discoveries by Emory Researchers\r\n                    </h2>\r\n\r\n\r\n                    <h1 className=\"title\"\r\n                        style={{\r\n                            marginBottom: \"0px\",\r\n                            paddingBottom: \"0px\",\r\n                            //fontSize: \"10px\",\r\n                            fontFamily: \"Montserrat\",\r\n                            color: \"#ff9900\",\r\n                        }}\r\n                    >\r\n\r\n                        Complexity & Emergence:\r\n\r\n                        {/* <br/>\r\n                        from Automata to Behavior  */}\r\n\r\n                    </h1>\r\n                    <h1 className=\"title\"\r\n                        style={{\r\n                            fontFamily: \"Montserrat\",\r\n                            margin: \"0px\",\r\n                            padding: \"2px\",\r\n                            color: \"#ff9900\",\r\n\r\n                        }}\r\n                    >\r\n                        from Automata to Behavior\r\n                    </h1>\r\n\r\n                    <h2 className=\"years\"\r\n                        style={{\r\n                            margin: \"15px auto 5px auto\",\r\n                        }}\r\n                    >\r\n                        - interdisciplinary seminars -\r\n                    </h2>\r\n\r\n\r\n                    <h2 className=\"years\"\r\n                        style={{\r\n                            margin: \"0px auto 15px auto\",\r\n                        }}\r\n                    >\r\n                        2011 - 2012\r\n                    </h2>\r\n\r\n\r\n\r\n                    <CollapseHook\r\n                        collapsedTitle={'click to expand'}\r\n\r\n                        collapsedText={\r\n\r\n                            <div\r\n                                className='sub-section-body'\r\n                                style={{\r\n                                    textAlign: \"left\",\r\n                                    color: \"#aaa\",\r\n                                    fontSize: \"11px\",\r\n                                    fontFamily: \"Roboto\",\r\n                                    wordWrap: \"break-word\",\r\n                                    //padding: \"2px\",\r\n                                    marginTop: \"20px\",\r\n                                    //border: \"1px dotted tomato\",\r\n                                    paddingTop: \"0px\",\r\n\r\n                                }}\r\n                            >\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                <p\r\n                                    style={{\r\n                                        maxWidth: \"350px\",\r\n                                        wordWrap: \"break-word\",\r\n                                        margin: \"0px\",\r\n                                        fontSize: \"11px\",\r\n                                        lineHeight: \"15px\",\r\n                                        padding: \"0px\",\r\n                                        marginBottom: \"5px\",\r\n                                        fontFamily: \"Roboto\",\r\n                                        color: \"#aaa\",\r\n                                    }}\r\n                                >\r\n                                    When I wrote this, on 03/01/2022, the links were broken, but I found these snapshots from July 2021. Thank you,\r\n                                    <a href=\"http://web.archive.org/\"> Wayback Machine</a> !\r\n                                </p>\r\n\r\n\r\n                                <a href='http://web.archive.org/web/20210731031935/www.order.emory.edu/about/index.html'\r\n                                >\r\n                                    <p\r\n                                        style={{\r\n                                            maxWidth: \"300px\",\r\n                                            wordWrap: \"break-word\",\r\n                                            margin: \"0px\",\r\n                                            fontSize: \"10px\",\r\n                                            margin: \"auto\",\r\n                                            paddingBottom: \"5px\",\r\n                                        }}\r\n                                    >\r\n                                        http://web.archive.org/web/20210731031935/www.order.emory.edu/about/index.html\r\n                                    </p>\r\n\r\n                                </a>\r\n\r\n                                <a href='http://web.archive.org/web/20210731053234/http://order.emory.edu/people/past-teacher-scholars.html'\r\n                                >\r\n                                    <p\r\n                                        style={{\r\n\r\n                                            maxWidth: \"300px\",\r\n                                            wordWrap: \"break-word\",\r\n                                            margin: \"0px\",\r\n                                            padding: \"0px\",\r\n                                            margin: \"auto\",\r\n                                        }}\r\n                                    >\r\n                                        http://web.archive.org/web/20210731053234/http://order.emory.edu/people/past-teacher-scholars.html\r\n                                    </p>\r\n                                </a>\r\n\r\n\r\n\r\n                                <p\r\n                                    style={{\r\n                                        padding: \"0px\",\r\n                                        margin: \"0px\",\r\n                                        marginTop: \"10px\",\r\n\r\n                                        marginBottom: \"5px\",\r\n                                        fontWeight: 600,\r\n                                        letterSpacing: \"1px\",\r\n                                    }}\r\n                                >\r\n                                    Fellowship coordinators:\r\n                                </p>\r\n\r\n                                <p\r\n                                    style={{\r\n                                        marginBottom: \"0px\",\r\n                                        paddingBottom: \"0px\",\r\n                                    }}\r\n                                >\r\n                                    Prof. David Lynn (Biological Chemistry)<br />\r\n                                    Prof. Leslie Taylor (Theatre Studies)\r\n                                </p>\r\n\r\n\r\n                            </div>\r\n                        }\r\n                    />\r\n                </div>\r\n\r\n\r\n            </>\r\n\r\n\r\n\r\n\r\n        )\r\n}\r\n\r\n","F:\\react_portfolio\\src\\DATA\\infoHighlights.js",["456","457","458","459","460","461"],"\r\n// var gDrive = \"https://drive.google.com/drive/folders/1d6QlunZ_zh-mTXB1H2u0C5DQC7Vjmq5U?usp=sharing\";\r\n\r\n\r\nimport jeab_2010_abstract from \"../assets/temp/jeab_2010_abstract.png\"\r\nimport jeab_2012_abstract from \"../assets/temp/jeab_2012_abstract.png\"\r\n\r\n// import bp_2009_abstract from \"../assets/temp/bp_2009_abstract.png\"\r\nimport bp_2010_abstract from \"../assets/temp/bp_2010_abstract.png\"\r\n\r\nimport abai2011_01 from \"../assets/temp/abai2011_01.png\";\r\nimport abai2011_02 from \"../assets/temp/abai2011_02.png\";\r\n\r\nimport phd_etbd_humans_sensitivity from \"../assets/temp/phd_etbd_humans_sensitivity.png\";\r\nimport phd_etbd_humans_bout_length from \"../assets/temp/phd_etbd_humans_bout_length.png\";\r\n\r\nimport phd_committee from \"../assets/temp/phd_committee.png\";\r\nimport etbd_adhd_slide_1 from \"../assets/temp/etbd_adhd_slide_1.png\";\r\n\r\nimport jeab2016_0 from \"../assets/temp/jeab2016_0.png\";\r\nimport jeab2016_1 from \"../assets/temp/jeab2016_1.png\";\r\n\r\nimport SpARC_01_Adekunle from \"../assets/sparc2016/SpARC_01_Adekunle.png\";\r\nimport SpARC_02_1_Tang from \"../assets/sparc2016/SpARC_02_1_Tang.png\";\r\nimport SpARC_06_1_Adekunle from \"../assets/sparc2016/SpARC_06_1_Adekunle.png\";\r\nimport SpARC_05_1_Forbes from \"../assets/sparc2016/SpARC_05_1_Forbes.png\";\r\nimport SpARC_07_1_Shen from \"../assets/sparc2016/SpARC_07_1_Shen.png\";\r\nimport SpARC_10_1_Adekunle from \"../assets/sparc2016/SpARC_10_1_Adekunle.png\";\r\nimport SpARC_11_1_Shen from \"../assets/sparc2016/SpARC_11_1_Shen.png\";\r\nimport SpARC_12_1_Booher from \"../assets/sparc2016/SpARC_12_1_Booher.png\";\r\nimport SpARC_14_1_Shen from \"../assets/sparc2016/SpARC_14_1_Shen.png\";\r\nimport SpARC_15_1_Waithe from \"../assets/sparc2016/SpARC_15_1_Waithe.png\";\r\nimport SpARC_16_1_Grissom from \"../assets/sparc2016/SpARC_16_1_Grissom.png\";\r\n\r\nimport Pos01_1_pos from \"../assets/triangles/Pos01_1_pos.png\";\r\nimport Neg04_1_neg from \"../assets/triangles/Neg04_1_neg.png\";\r\nimport Trn04_2_pos from \"../assets/triangles/Trn04_2_pos.png\";\r\nimport Trn04_3_neg from \"../assets/triangles/Trn04_3_neg.png\";\r\nimport Trn04_4_ext from \"../assets/triangles/Trn04_4_ext.png\";\r\n\r\nimport nbt_fig1 from \"../assets/temp/nbt_fig1.png\";\r\nimport change_in_state_2 from \"../assets/temp/change_in_state_2.png\";\r\nimport projectAutomata1 from \"../assets/temp/prj_img_imperfect_automata.jpg\";\r\n\r\n\r\n// WEB DEVELOPMENT  --------------------\r\n\r\nimport projectCardSorting from \"../assets/temp/prj_img_personal_values.png\";\r\nimport pure_refuge from \"../assets/temp/pure_refuge.png\"\r\nimport aquerous_plains from \"../assets/temp/aquerous_plains.png\"\r\n\r\n\r\n// ----    OLD ONES  ---------------------\r\n\r\n// import abai_2014_radars_originals from \"../assets/abai_2014_radars_originals.png\"\r\n// import ABAI_2014_Chicago from \"../assets/abai_darwin_sqab/ABAI_2014_Chicago.png\";\r\n// import ABAI_2014_Andrei from \"../assets/abai_darwin_sqab/ABAI_2014_Andrei.png\";\r\n// import ABAI_2017_5 from \"../assets/abai_darwin_sqab/ABAI_2017_5.png\";\r\n// import ABAI_2017_6 from \"../assets/abai_darwin_sqab/ABAI_2017_6.png\";\r\n// import wcalb2017_extinction08 from \"../assets/wcalb2017_extinction08.png\";\r\n// import abai_2014_slide1 from \"../assets/abai_2014_slide1.png\";\r\n// import abai_2014_slide2 from \"../assets/abai_2014_slide2.png\";\r\n// import sch6_02_prob_same_impulsive_agent from \"../assets/sch6_02_prob_same_impulsive_agent.png\"\r\n\r\n\r\n\r\n\r\nvar infoHighlights = [\r\n\r\n\r\n    // {\r\n    //     // title: 'Mathematical models & computational theories',\r\n    //     title: 'Agreement with mathematical models',\r\n\r\n    //     nickname: \"Emory 2009\",\r\n\r\n\r\n    //     fontFam: \"Roboto\",\r\n    //     date: \"05/02/2009\",\r\n    //     displayDate: \"April 2009\",\r\n\r\n\r\n    //     type: 'invited talk Emory University',\r\n    //     role: \"invited talk\",\r\n\r\n    //     authors: [\"Popa & McDowell (2009)\"],\r\n\r\n\r\n    //     tags: [],\r\n    //     keywords: [\"ETBD\", \"conference\", \"Emory University\"],\r\n    //     // description: \"<b>Mathematical</b> models <b>describe</b> the behavior of biological agents in specific environments. <b>Computational</b> theories are essentially computer programs that implement algorithms that <b>generate</b> behavior. The algorithms implement theoretical assumptions about how learning works in biological agents. Mathematical models can be used to verify these assumptions.\",\r\n    //     description: \"are good benchmarks for verifying and calibrating computational theories, especially in early stages of development.\",\r\n    //     img: [jeab_2010_abstract, paper_bivariate_matching_2012],\r\n    //     captions: [\"jeab_2010_abstract\", \"paper_bivariate_matching_2012\"],\r\n    //     urls: [\r\n    //         //{ name: \"\", link: \"\" },\r\n    //     ],\r\n    //     // citation: \"Popa, A., & McDowell, J J. (2009). A Computational Model of Adaptive Behavior Dynamics. Emory University, Department of Psychology, Annual Research Festival. Atlanta, GA\",\r\n\r\n    //     references: [\r\n    //         // \"Popa, A., & McDowell, J J. (2009). A Computational Model of Adaptive Behavior Dynamics. Emory University, Department of Psychology, Annual Research Festival. Atlanta, GA\",\r\n    //         \"McDowell, J. J, & Popa, A. (2010). Toward a mechanics of adaptive behavior: Evolutionary dynamics and matching theory statics. Journal of the Experimental Analysis of Behavior, 94, 241-260.\",\r\n    //         \"McDowell, J, J., Popa, A., & Calvin, N. (2012). Selection Dynamics in Joint Matching to Rate and Magnitude of Reinforcement. <i>Journal of the Experimental Analysis of Behavior</i>, <i>98</i>, 199-212.\",\r\n    //     ],\r\n    // },\r\n\r\n    // citation: \"Popa, A., & McDowell, J J. (2009). A Computational Model of Adaptive Behavior Dynamics. Emory University, Department of Psychology, Annual Research Festival. Atlanta, GA\",\r\n\r\n\r\n\r\n\r\n    {\r\n        meta: \"verification\",\r\n        title: 'Agreement with mathematical models',\r\n        displayDate: '2007 ...',\r\n        navMarker: 'AgreementMatching',\r\n        tech: [\r\n            \"Excel\",\r\n            \"VBA\",\r\n        ],\r\n        skills: [\r\n            \"hypothesis testing\",\r\n            \"model selection\",\r\n            \"ensemble fitting\",\r\n            \"residual analysis\",\r\n        ],\r\n        keywords: [\"ETBD\", \"conference\", \"Emory University\"],\r\n        relevantWork: ['Emory 2009', 'JEAB 2010', 'JEAB 2012'],\r\n\r\n        img: [jeab_2010_abstract, jeab_2012_abstract],\r\n        captions: [\"jeab_2010_abstract\", \"paper_bivariate_matching_2012\"],\r\n        urls: [\r\n            {\r\n                name: \"JEAB 2010\",\r\n                link: \"https://www.researchgate.net/publication/50937156_Toward_a_Mechanics_of_Adaptive_Behavior_Evolutionary_Dynamics_and_Matching_Theory_Statics\",\r\n            },\r\n            {\r\n                name: \"JEAB 2012\",\r\n                link: \"https://www.researchgate.net/publication/231176507_Selection_dynamics_in_joint_matching_to_rate_and_magnitude_of_reinforcement\",\r\n            },\r\n\r\n        ],\r\n\r\n        description: \"Mathematical models describe choice behavior at equilibrium. They are good benchmarks for verifying and calibrating computational theories, especially in early stages of development.\",\r\n        // description: \"<b>Mathematical</b> models <b>describe</b> the behavior of biological agents in specific environments. <b>Computational</b> theories are essentially computer programs that implement algorithms that <b>generate</b> behavior. The algorithms implement theoretical assumptions about how learning works in biological agents. Mathematical models can be used to verify these assumptions.\",\r\n    },\r\n\r\n\r\n\r\n\r\n    // {\r\n    //     meta: \"theoretical foundations\",\r\n    //     title: 'Emergence is what makes ETDB special',\r\n    //     date: \"07/01/2009\",\r\n    //     displayDate: \"2009\",\r\n    //     tech: [\r\n    //         \"Excel\",\r\n    //         \"VBA\",\r\n    //     ],\r\n    //     skills: [\r\n    //         \"hypothesis testing\",\r\n    //         \"model selection\",\r\n    //         \"ensemble fitting\",\r\n    //         \"residual analysis\",\r\n    //     ],\r\n    //     keywords: [\"Wolfram\", \"complex systems\", \"emergence\", \"Elementary Cellular Automata\", \"cellular automaton\"],\r\n\r\n\r\n    //     relevantWork: ['BP 2009', 'ABAI 2010', 'ABAI 2013'],\r\n\r\n    //     description: \"Each time a coin is tossed, the probability of side A is 50%, regardless of previous outcomes. The same is true in ETBD: each Darwinian cycle happens the same way every time, indifferent to the past. This means that its output emerges from a perpetual present, governed by Darwinian rules.\",\r\n\r\n    //     img: [bp_2009_abstract],\r\n\r\n    //     captions: [\r\n    //         \"Fig. 5. Image of a section of cellular automaton output, a cumulative record, and a log IRT survivor plot for a Rule 22 (top row) and a Rule 30 (bottom row) cellular automaton. The cumulative records and log survivor plots were constructed from a column of the cellular automaton output where each black cell was taken to represent a response.\",\r\n    //     ],\r\n\r\n    //     urls: [\r\n    //         { name: \"Pubmed\", link: \"http://www.ncbi.nlm.nih.gov/pubmed/19429227\" },\r\n    //         {\r\n    //             name: \"ResGate\",\r\n    //             link: \"https://www.researchgate.net/publication/24414894_Beyond_continuous_mathematics_and_traditional_scientific_analysis_Understanding_and_mining_Wolfram's_A_New_Kind_of_Science\",\r\n    //         },\r\n    //     ],\r\n\r\n    //     // references: [\r\n    //     //     \"McDowell, J. J, & Popa, A. (2009). Beyond continuous mathematics and traditional scientific analysis: Understanding and mining Wolfram's A new kind of science. <i>Behavioural Processes</i>, 81, 343-352.\",\r\n\r\n    //     //     \"Popa, A., & McDowell, J J. (2010). Evolutionary Behavior Dynamics causally generates both molar and molecular properties of behavior. Symposium: The Molar-Molecular debate: A further discussion on the unresolved issue. Discussant: William M. Baum, Ph.D. Presented at the 36th Annual Convention of the Association for Behavior Analysis International, San Antonio, TX.\",\r\n    //     // ],\r\n    // },\r\n\r\n\r\n\r\n\r\n    {\r\n        meta: \"empirical equivalent\",\r\n        title: 'Hamming Distances and CODs',\r\n        displayDate: '2008 ...',\r\n        custom_item: 'hamming_demo',\r\n        navMarker: 'HammingCOD',\r\n        tags: [\r\n            \"Master of Arts\",\r\n            \"Behavioural Processes\",\r\n            \"journal article\",\r\n            \"changeover delay\",\r\n            \"hamming\",\r\n            \"matching\",\r\n            \"sensitivity\",\r\n            \"M.A.\",\r\n            \"Hamming Distance\",\r\n            \"education\",\r\n            \"deggree\",\r\n        ],\r\n        committee: \"Dr. Jack McDowell (chair), Dr. Eugene Emory, Dr. Philip Wolff\",\r\n        keywords: [\"Masters Thesis\", \"ETBD\", \"Hamming Distances\", \"Changeover Delay\", \"matching\", \"sensitivity\",],\r\n        relevantWork: ['SQAB 2009', 'MA 2009', 'BP 2010', 'SQAB 2010', 'ABAI 2012', 'PHD 2013'],\r\n\r\n        img: [bp_2010_abstract],\r\n        captions: [\"hamming_paper_page1\"],\r\n\r\n        urls: [\r\n            {\r\n                name: \"Emory ETD\",\r\n                link: \"https://etd.library.emory.edu/concern/etds/8k71nj12p?locale=en\",\r\n            },\r\n\r\n            // {\r\n            //     name: \"ReshGate\",\r\n            //     link: \"https://www.researchgate.net/publication/41427297_The_effect_of_Hamming_distances_in_a_computational_model_of_selection_by_consequences\",\r\n            // },\r\n\r\n            // { name: \"Pubmed\", link: \"http://www.ncbi.nlm.nih.gov/pubmed/20152891\" },\r\n\r\n        ],\r\n\r\n\r\n        description:\r\n            \"When the transition between different behavior classes is efortless, it tends to happen often. ETBD behavior becomes fragmented and dizorganized, as it does in living agents.\",\r\n\r\n\r\n        // description:\r\n        //     \"Exploring the Hamming - COD parallel was was my first significant investigation into ETBD and its innerworkings. My work revealed that the ETBD equivalent of a COD was the overall degree of similarity between the target classes, measured in Hamming Distances (Popa, 2013; pp.19-21; figure 4, page 111).<br/><br/><b>Masters committee</b>: Dr. Jack McDowell (chair), Dr. Eugene Emory, Dr. Philip Wolff\",\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        meta: \"empirical equivalent\",\r\n        title: 'Mutation rate and impulsivity',\r\n        // custom_item: \"hamming_demo\",\r\n\r\n        // nickname: \"M.A.\",\r\n        // date: \"05/30/2011\",\r\n        displayDate: '2010 ...',\r\n        navMarker: 'MutationADHD',\r\n        // type: \"Masters's Thesis\",\r\n        // role: \"Master of Arts\",\r\n        tags: [\r\n            \"Master of Arts\",\r\n            \"Behavioural Processes\",\r\n            \"journal article\",\r\n            \"changeover delay\",\r\n            \"hamming\",\r\n            \"matching\",\r\n            \"sensitivity\",\r\n            \"M.A.\",\r\n            \"Hamming Distance\",\r\n            \"education\",\r\n            \"deggree\",\r\n        ],\r\n        // authors: [\"Popa (2009)\", \"Popa & McDowell (2010)\"],\r\n        // committee: \"Dr. Jack McDowell (chair), Dr. Eugene Emory, Dr. Philip Wolff\",\r\n        keywords: [\"ETBD\", \"ADHD\"],\r\n        relevantWork: ['SQAB 2011', 'ABAI 2011'],\r\n\r\n        img: [abai2011_01, abai2011_02],\r\n        captions: [\"\"],\r\n        urls: [\r\n            {\r\n                name: \"ABAI 2011\",\r\n                link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=13494&by=ByArea#s445_0\",\r\n            },\r\n            {\r\n                name: \"SQAB 2011\",\r\n                link: \"https://www.sqab.org/programs/2011.pdf\"\r\n            }\r\n        ],\r\n\r\n        description: \"We knew that high mutation rates produced sensitivity values similar to those reported in human participants diagnosed with ADHD. We also knew that increasing reinforcement rate, magnitude, or the COD requirement counteracted these effects, also in agreement with the ADHD literature (Kollins, Lane, and Shapiro, 1997; Aase and Sagvolden, 2006; Taylor, Lincoln, and Foster, 2010).\",\r\n\r\n\r\n        // description:\r\n        //     \"Exploring the Hamming - COD parallel was was my first significant investigation into ETBD and its innerworkings. My work revealed that the ETBD equivalent of a COD was the overall degree of similarity between the target classes, measured in Hamming Distances (Popa, 2013; pp.19-21; figure 4, page 111).<br/><br/><b>Masters committee</b>: Dr. Jack McDowell (chair), Dr. Eugene Emory, Dr. Philip Wolff\",\r\n\r\n\r\n        abstract: \"... The present experiments systematically investigated the effects of various mutation levels, rates of reinforcement, changeover delay (COD) values, and reinforcers' magnitudes on the behavior of the virtual organism on concurrent RI RI schedules. The purpose was twofold: to clarify the parallel between mutation and impulsivity and to explore methods of counteracting the undesired effects of high mutation rates. <br/><br/>The results showed that improved performance in concurrent-schedules (e.g. increased sensitivity to reinforcement, reduced rate of switching, etc.) under high levels of mutation is attainable by increasing the rate or magnitude of the reinforcement and/or the COD requirement; the results accurately parallel those reported in the attention deficit/hyperactivity disorder literature (Kollins, Lane, and Shapiro, 1997; Aase and Sagvolden, 2006; Taylor, Lincoln, and Foster, 2010), indicating that mutation is the computational equivalent of impulsivity.\",\r\n    },\r\n\r\n\r\n\r\n    // {\r\n    //     meta: 'empirical equivalent',\r\n    //     name: ,\r\n    //     date: \"\",\r\n    //     type: \"talk\",\r\n    //     keywords: [],\r\n    //     // citation:\r\n    //     //     \"Popa, A., & McDowell, J J. (2011). A Computational Model of Selection by Consequences: Evidence that Mutation is Computationally Equivalent to Impulsivity. Paper presented at the 37th Annual Convention of the Association for Behavior Analysis International, Denver, CO.\",\r\n\r\n    //     img: [],\r\n    //     urls: [\r\n\r\n    //         {\r\n    //             name: \"ABAI 2011\",\r\n    //             link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=13494&by=ByArea#s445_0\",\r\n    //         },\r\n\r\n    //     ],\r\n\r\n    //     description: \"The work I presented in May at SQAB and ABAI showed that high mutation rates produced sensitivity values similar to those reported in human participants diagnosed with ADHD. Increasing reinforcement rate, magnitude, the COD requirement counteracted these effects, also in agreement with the ADHD literature (Kollins, Lane, and Shapiro, 1997; Aase and Sagvolden, 2006; Taylor, Lincoln, and Foster, 2010).\",\r\n    //     // abstract:\r\n    //     //     \"... The present experiments systematically investigated the effects of various mutation levels, rates of reinforcement, changeover delay (COD) values, and reinforcers' magnitudes on the behavior of the virtual organism on concurrent RI RI schedules. The purpose was twofold: to clarify the parallel between mutation and impulsivity and to explore methods of counteracting the undesired effects of high mutation rates. The results showed that improved performance in concurrent-schedules performance (e.g. increased sensitivity to reinforcement, reduced rate of switching, etc.) under high levels of mutation is attainable by increasing the rate or magnitude of the reinforcement and/or the COD requirement; the results accurately parallel those reported in the attention deficit/hyperactivity disorder literature (Kollins, Lane, and Shapiro, 1997; Aase and Sagvolden, 2006; Taylor, Lincoln, and Foster, 2010), indicating that mutation is the computational equivalent of impulsivity.\",\r\n    // },\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // {\r\n    //     studyInfo: [\r\n\r\n    //         { name: \"name\" },\r\n    //         { stageName: 'stage name' },\r\n    //         { location: \"location\" },\r\n    //         { startDate: \"start date\" },\r\n    //         { endDate: \"end date\" },\r\n    //         { irbNumber: \"IRB number, amendments\" },\r\n    //         { irbLieson: \"IRB lieson\" },\r\n    //         // {\r\n    //         //     instruments: [\r\n    //         //         {\r\n    //         //             shortName: 'Fast Matching',\r\n    //         //             longName: 'Fast Matching',\r\n    //         //             description: 'Concurrent schedule environemnt used to investigate choice behavior in humans; written in VB.Net by yours trully.',\r\n    //         //         },\r\n    //         //         {\r\n    //         //             shortName: 'SSS-5',\r\n    //         //             longName: 'Sensation Seeking Scale',\r\n    //         //             description: 'impulsivity inventory',\r\n    //         //         },\r\n    //         //         {\r\n    //         //             shortName: 'UPPS-P',\r\n    //         //             longName: 'long name',\r\n    //         //             description: 'impulsivity inventory, five subscales',\r\n    //         //         },\r\n    //         //         {\r\n    //         //             shortName: 'CPT-IP',\r\n    //         //             longName: 'CPT - Identical Pairs',\r\n    //         //             description: 'description',\r\n    //         //         },\r\n    //         //         {\r\n    //         //             shortName: 'ADDE-S',\r\n    //         //             longName: 'long name',\r\n    //         //             description: 'inattention and impulsivity scale',\r\n    //         //         },\r\n    //         //     ]\r\n    //         // },\r\n\r\n\r\n    //         //{ role: \"Andrea Goosen, MPH\" },\r\n    //         { notes: \"This study was part of my dissertation project\" },\r\n    //         //{notes: \"This was the first time I designed and managed a research study from beginning to end. Technology-wise, I used VB.Net for the experimental interface and Excel and VBA for data analysis.\"},\r\n\r\n    //         // {\r\n    //         //     team: [\r\n    //         //         { hero: 'Andrei Popa', role: 'Principal Investigator' },\r\n    //         //         { hero: 'Dr. Jack J MvDowell', role: 'Co-Investigator' },\r\n    //         //         { hero: 'Nicholas Calvin / Olivia Calvin', role: 'Co-Investigator' },\r\n    //         //     ]\r\n    //         // },\r\n\r\n\r\n\r\n    //     ],\r\n\r\n    //     title: \"Fast matching: from bits to human behavior\",\r\n    //     nickname: \"ABAI 2012\",\r\n    //     fontFam: \"Roboto\",\r\n\r\n    //     // date: \"05/26/2012\",\r\n    //     displayDate: '2012',\r\n\r\n    //     type: \"talk, ABAI 2012\",\r\n    //     role: \"SPEAKER (talk)\",\r\n    //     authors: [\"Popa & McDowell (2012)\"],\r\n    //     technologies: [\"VB.Net\", \"Excel/VBA\",],\r\n\r\n    //     keywords: [\"research\", \"thesis\", \"fast matching\"],\r\n    //     tags: [],\r\n\r\n    //     description: \"To verify ETBD predictions, I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side.<br/><br/>To verify ETBD predictions, I investigated human behavior under different COD requirements, as shown in the demo. The results went in the direction predicted by ETBD for all eight dependent variables (pp. phd). < br /> <br />Finally, I used traditional instruments to measure ADHD symptoms in the same participants and I compared the scores with measures of choice behavior.\",\r\n\r\n    //     // description: \"To accomplish two and three I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side.<br/><br/>To verify ETBD predictions, I investigated human behavior under different COD requirements, as shown in the demo. The results went in the direction predicted by ETBD for all eight dependent variables (pp. phd). Parts of this work were presented at ABAI (2012).<br/><br/>< p className = 'p-left' style = {{ color: 'rgb(255, 128, 49)', }}> Then, I explored human behavior under different COD requirements and I compared it with the ETBD. < br /> <br /></p ><br/><br/><p className='p-left' style={{ color: 'rgb(255, 128, 49)', }}>Finally, I used traditional instruments to measure ADHD symptoms in the same participants and I compared the scores with measures of choice behavior.</p>\",\r\n\r\n    //     // description: \"To accomplish two and three I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side.<br/><br/>To verify ETBD predictions, I investigated human behavior under different COD requirements, as shown in the demo. The results went in the direction predicted by ETBD for all eight dependent variables (pp. phd). < br /> <br />Finally, I used traditional instruments to measure ADHD symptoms in the same participants and I compared the scores with measures of choice behavior.\",\r\n\r\n\r\n\r\n    //     // img: [ABAI_2012_event, phd_etbd_humans_1, phd_etbd_humans_2,],\r\n    //     //img: [phd_etbd_humans_1, phd_etbd_humans_2,],\r\n    //     img: [phd_etbd_humans_sensitivity, phd_etbd_humans_bout_length],\r\n    //     captions: [\"phd_etbd_humans_1\", \"phd_etbd_humans_2\"],\r\n\r\n    //     urls: [\r\n    //         {\r\n    //             name: \"ABAI 2012\",\r\n    //             link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=17728&by=ByArea#s28_0\",\r\n    //         },\r\n    //         {\r\n    //             name: \"ResGate\",\r\n    //             link: \"yyy\",\r\n    //         },\r\n    //     ],\r\n    //     // citation:\r\n    //     //     \"Popa, A., & McDowell, J J. (2012). The Computational Theory of Behavior Dynamics Predicts Effects of COD on Behavioral Variability: Evidence from experiments with human participants. Paper presented at the 38th Annual Convention of the Association for Behavior Analysis International, Seattle, WA.\",\r\n\r\n    //     abstract:\r\n    //         \"Popa and McDowell (2010) showed that the Hamming Distance, a particular mathematical feature of McDowell’s Evolutionary Theory of Behavior Dynamics (ETBD; McDowell, 2004, 2010) is computationally equivalent to the changeover delay (COD; Findley, 1954) used in experiments with live organisms. Popa and McDowell (2011) suggested that increasing the computational COD requirement reduces behavioral variability in a virtual organism animated by the ETBD. The present paper further investigated a wide range of computational COD values and used the results to formulate predictions about the effects of COD requirements on the behavioral variability of humans in concurrent-schedules environments. As predicted by ETBD, the rate of switching between alternatives was systematically decreased by increased COD requirements. These results provide further support for the ETBD as a valid account of behavior dynamics, showing that it is not only able to produce outcomes congruent with known behavior statics (the Matching Law; McDowell & Popa, 2010), but it can also formulate predictions about the behavior of live organisms. Moreover, these findings suggest that high behavioral variability may be a natural outcome of the selection pressure exerted by unstructured environments. The implications for ADHD-symptoms are discussed within the framework provided by previous research (Neuringer, 2010; Taylor et al, 2010).\",\r\n\r\n    //     references:\r\n    //         [\r\n    //             \"Popa, A., & McDowell, J J. (2012). The Computational Theory of Behavior Dynamics Predicts Effects of COD on Behavioral Variability: Evidence from experiments with human participants. Paper presented at the 38th Annual Convention of the Association for Behavior Analysis International, Seattle, WA.\",\r\n    //         ],\r\n    // },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        meta: \"translate\",\r\n        studyInfo: {\r\n\r\n            name: \"Choice and Conditioned Reinforcement\",\r\n            stageName: 'Fast Matching',\r\n            location: \"Emory University\",\r\n            startDate: \"04/29/2011\",\r\n            endDate: \"04/28/2013\",\r\n            irbNumber: \"IRB00049478, CR1_IRB00049478\",\r\n            irbLieson: \"Andrea Goosen, MPH\",\r\n\r\n            instruments: [\r\n                {\r\n                    shortName: 'Fast Matching',\r\n                    longName: 'Fast Matching',\r\n                    description: 'Concurrent schedule environemnt used to investigate choice behavior in humans; written in VB.Net by yours trully.',\r\n                },\r\n                {\r\n                    shortName: 'SSS-5',\r\n                    longName: 'Sensation Seeking Scale',\r\n                    description: 'impulsivity inventory',\r\n                },\r\n                {\r\n                    shortName: 'UPPS-P',\r\n                    longName: 'long name',\r\n                    description: 'impulsivity inventory, five subscales',\r\n                },\r\n                {\r\n                    shortName: 'CPT-IP',\r\n                    longName: 'CPT - Identical Pairs',\r\n                    description: 'description',\r\n                },\r\n                {\r\n                    shortName: 'ADDE-S',\r\n                    longName: 'long name',\r\n                    description: 'inattention and impulsivity scale',\r\n                },\r\n            ]\r\n            ,\r\n\r\n\r\n            //{ role: \"Andrea Goosen, MPH\" },\r\n            studyNotes: \"This was the first time I designed and managed a research study from beginning to end. Technology-wise, I used VB.Net for the experimental interface and Excel and VBA for data analysis.\",\r\n\r\n\r\n            team: [\r\n                { hero: \"Andrei Popa\", role: \"Principal Investigator\" },\r\n                { hero: \"Dr. Jack J MvDowell\", role: \"Co-Investigator\" },\r\n                { hero: \"Nicholas Calvin / Olivia Calvin\", role: \"Co-Investigator\" },\r\n            ]\r\n            ,\r\n        },\r\n\r\n\r\n\r\n\r\n        title: 'Fast matching: from bits to human behavior',\r\n        // nickname: \"ABAI 2012\",\r\n        // fontFam: \"Roboto\",\r\n\r\n        // date: \"05/26/2012\",\r\n        displayDate: '2011 - 2013',\r\n        navMarker: 'FastMatching',\r\n\r\n        // type: \"research study\",\r\n        // role: \"SPEAKER (talk)\",\r\n        // authors: [\"Popa & McDowell (2012)\"],\r\n        tech: [\"VB.Net\", \"Excel/VBA\",],\r\n\r\n        keywords: [\"research\", \"thesis\", \"fast matching\"],\r\n        relevantWork: ['ABAI 2012', 'PHD 2013'],\r\n\r\n        tags: [],\r\n\r\n        description: \"The goal was to expand on the COD equivalence and to explore the relation between mutation rate and ADHD.<br/><br/>In ETBD, I looked at mutation rates between 5% and 100% under different reinforcement rates, magnitudes, and HD COD values. <br/><br/>In humans, I looked at choice behavior under different COD requirements and at traditional measures of ADHD.\",\r\n\r\n\r\n        // 'My dissertation project was accepted a few month later.<br/><br/>For my doctoral thesis I tackled the connection between <i>mutation</i> and ADHD.<br/><br/>My main goals were to verify if ETBD can simulate ADHD symptoms, treatments, and developmental trajectories, and if ETBD data is relevant to human behavior.' \r\n\r\n        // description: \"To accomplish two and three I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side.<br/><br/>To verify ETBD predictions, I investigated human behavior under different COD requirements, as shown in the demo. The results went in the direction predicted by ETBD for all eight dependent variables (pp. phd). Parts of this work were presented at ABAI (2012).<br/><br/>< p className = 'p-left' style = {{ color: 'rgb(255, 128, 49)', }}> Then, I explored human behavior under different COD requirements and I compared it with the ETBD. < br /> <br /></p ><br/><br/><p className='p-left' style={{ color: 'rgb(255, 128, 49)', }}>Finally, I used traditional instruments to measure ADHD symptoms in the same participants and I compared the scores with measures of choice behavior.</p>\",\r\n\r\n        // description: \"To accomplish two and three I designed and implemented a concurrent-schedule procedure that allowed me to compare human and computational data side by side.<br/><br/>To verify ETBD predictions, I investigated human behavior under different COD requirements, as shown in the demo. The results went in the direction predicted by ETBD for all eight dependent variables (pp. phd). < br /> <br />Finally, I used traditional instruments to measure ADHD symptoms in the same participants and I compared the scores with measures of choice behavior.\",\r\n\r\n\r\n\r\n        // img: [ABAI_2012_event, phd_etbd_humans_1, phd_etbd_humans_2,],\r\n        //img: [phd_etbd_humans_1, phd_etbd_humans_2,],\r\n        img: [phd_etbd_humans_sensitivity, phd_etbd_humans_bout_length],\r\n        captions: [\"phd_etbd_humans_1\", \"phd_etbd_humans_2\"],\r\n\r\n        urls: [\r\n            {\r\n                name: \"ABAI 2012\",\r\n                link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=17728&by=ByArea#s28_0\",\r\n            },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"yyy\",\r\n            },\r\n        ],\r\n        // citation:\r\n        //     \"Popa, A., & McDowell, J J. (2012). The Computational Theory of Behavior Dynamics Predicts Effects of COD on Behavioral Variability: Evidence from experiments with human participants. Paper presented at the 38th Annual Convention of the Association for Behavior Analysis International, Seattle, WA.\",\r\n        abstract:\r\n            \"Popa and McDowell (2010) showed that the Hamming Distance, a particular mathematical feature of McDowell’s Evolutionary Theory of Behavior Dynamics (ETBD; McDowell, 2004, 2010) is computationally equivalent to the changeover delay (COD; Findley, 1954) used in experiments with live organisms. Popa and McDowell (2011) suggested that increasing the computational COD requirement reduces behavioral variability in a virtual organism animated by the ETBD. The present paper further investigated a wide range of computational COD values and used the results to formulate predictions about the effects of COD requirements on the behavioral variability of humans in concurrent-schedules environments. As predicted by ETBD, the rate of switching between alternatives was systematically decreased by increased COD requirements. These results provide further support for the ETBD as a valid account of behavior dynamics, showing that it is not only able to produce outcomes congruent with known behavior statics (the Matching Law; McDowell & Popa, 2010), but it can also formulate predictions about the behavior of live organisms. Moreover, these findings suggest that high behavioral variability may be a natural outcome of the selection pressure exerted by unstructured environments. The implications for ADHD-symptoms are discussed within the framework provided by previous research (Neuringer, 2010; Taylor et al, 2010).\",\r\n\r\n        // references:\r\n        //     [\r\n        //         \"Popa, A., & McDowell, J J. (2012). The Computational Theory of Behavior Dynamics Predicts Effects of COD on Behavioral Variability: Evidence from experiments with human participants. Paper presented at the 38th Annual Convention of the Association for Behavior Analysis International, Seattle, WA.\",\r\n        //     ],\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        meta: \"ETBD and mental health\",\r\n\r\n        // title: \"An Evolutionary Theory of Behavior Dynamics<br/>Complexity, Darwinism, and the Emergence of High-Level Phenotypes\",\r\n        title: 'Complexity, Darwinism, and the Emergence of High-Level Phenotypes',\r\n\r\n        // nickname: \"PhD\",\r\n        date: \"12/24/2013\",\r\n        displayDate: \"2013\",\r\n        navMarker: 'Dissertation',\r\n\r\n        // type: \"doctoral dissertation\",\r\n        // role: \"Doctor of Philosophy\",\r\n        // authors: [\"Popa (2013)\", \"Hackett (2019)\"],\r\n        keywords: [\"Doctor of Philosophy\", \"dissertation\", \"education\", \"doctoral deggree\", \"PhD\"],\r\n        relevantWork: ['SQAB 2011', 'ABAI 2011', 'ABAI 2012', 'PHD 2013', 'ABAI 2014',],\r\n\r\n        tags: [\"synthetic data\", \"human data\"],\r\n\r\n        description:\r\n            \"My work showed that ETBD can simulate clinically-relevant behaviors and interventions and that ETBD data can be used to predict human behavior. As for the third goal - properties of choice behavior were compared with scores on measures of ADHD that are popular among researchers: CPT-IP, UPPS-P, SSS-V, A-ADDES, etc. The results were inconclusive, likely due to a lack of high impulsivity scores in the human sample (Popa, 2013). McDowell's lab later confirmed my hypothesis (Hackett, 2019).\",\r\n        img: [\r\n            phd_committee,\r\n            etbd_adhd_slide_1,\r\n        ],\r\n        captions: [\"phd_committee\", \"etbd_adhd_slide_1\"],\r\n\r\n        urls: [\r\n            {\r\n                name: \"Popa (2013)\",\r\n                link: \"https://etd.library.emory.edu/concern/etds/9880vr10s?locale=en\",\r\n            },\r\n            { name: \"Hackett (2019)\", link: \"https://etd.library.emory.edu/concern/etds/rr171z32k?locale=en\" },\r\n            { name: \"Study info\", link: \"gDrive\" },\r\n        ],\r\n\r\n        // citation:\r\n        //     \"Popa (2013). An Evolutionary Theory of Behavior Dynamics - Complexity, Darwinism, and the Emergence of High-Level Phenotypes. Doctoral Dissertation. Retrieved: https://etd.library.emory.edu/concern/etds/9880vr10s?locale=en. ISBNxxxxxxxxxxxxxxx\",\r\n\r\n        abstract: \"The main purpose of this project was to explore the effects of mutation and the environment's value and conduciveness on various dimensions of behavioral variability, in continuous choice environments. Secondly, qualitative predictions made by the Evolutionary Theory about the effects of changeover delays (COD) on behavior variability were verified against the behavior of college students in equivalent environments. The continuous choice behavior of college students was correctly predicted on eight out of eight behavioral dimensions. Thirdly, low-level characteristics of students' continuous choice behavior were compared with traditional measures of impulsivity and sustained attention, in an effort to investigate the potential equivalence between mutation and a property of the nervous system that produces impulsivity-like symptoms. The results were inconclusive, likely due to a lack of extreme impulsivity scores in the human sample. The findings presented in this paper provided significant additional evidence for the selectionist account as a valid mechanism of behavior change. In addition, the knowledge generated by the Evolutionary Theory provided important insights about clinically-relevant phenomena, such as disordered variability (or impulsivity) and raise the possibility of using the theory as a platform for simulating the emergence of specific high-level phenotypes. These implications appear even more fascinating considering that a connection with mental health was not explicitly sought, nor can it be traced to the inner-workings of the theory. This challenges our current understanding of mental illness and provides a new way of thinking about the evolution of behavioral repertoires and their emergent high-level characteristics.\",\r\n\r\n\r\n        // references: [\r\n        //     \"Popa (2013). An Evolutionary Theory of Behavior Dynamics - Complexity, Darwinism, and the Emergence of High-Level Phenotypes. Doctoral Dissertation. Retrieved: https://etd.library.emory.edu/concern/etds/9880vr10s?locale=en. ISBNxxxxxxxxxxxxxxx\",\r\n        // ],\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n    {\r\n        meta: \"empirical equivalent\",\r\n        title: 'Mutation, ADHD, and DMN activation',\r\n        // date: \"03/01/2016\",\r\n        displayDate: '2014 - 2016',\r\n        navMarker: 'Jeab2016',\r\n        keywords: [\"Popa & McDowell, 2016\", \"DMN\"],\r\n        relevantWork: ['ABAI 2011', 'PHD 2013', 'ABAI 2014', 'JEAB 2016'],\r\n        tags: [],\r\n        description:\r\n            \"The brain's Default Mode Network, or DMN, is a plausible equivalent for mutation. This - and much more - can be investigated experimentally. <br/><br/>By syncronizing fast matching procedures with EEG and Eye Trackers is possible to investigate real-time changes in behavior, attention, and brain activity <i>simoultaneously</i>.\",\r\n        img: [jeab2016_0, jeab2016_1],\r\n        captions: [\"\"],\r\n\r\n        urls: [\r\n            {\r\n                name: \"JEAB\",\r\n                link: \"http://onlinelibrary.wiley.com/doi/10.1002/jeab.199/abstract\",\r\n            },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/299382923_Behavioral_variability_in_an_evolutionary_theory_of_behavior_dynamics\",\r\n            },\r\n        ],\r\n        // citation:\r\n        //     \"Popa, A., & McDowell, J, J. (2016). Behavioral Variability in an Evolutionary Theory of Behavior Dynamics. The Journal of the Experimental Analysis of Behavior, 105 (2), 270-290.\",\r\n\r\n        abstract:\r\n            \"A plausible biological counterpart for mutation is the activity of the DMN - Default Mode Network, with high mutation rates coresponding to high levels of DMN activation. <br/><br/>These Fast matching procedures can be used in conjunction with  <br/><br/> \",\r\n\r\n        // references: [\r\n        //     \"Popa, A., & McDowell, J, J. (2016). Behavioral Variability in an Evolutionary Theory of Behavior Dynamics. The Journal of the Experimental Analysis of Behavior, 105 (2), 270-290.\",\r\n        // ],\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        meta: \"new benchmarks for ETBD\",\r\n\r\n        title: 'Negative reinforcement and stimulus control in humans',\r\n\r\n        studyInfo: {\r\n\r\n            name: \"Basic Properties of Continuous Decision Making\",\r\n            stageName: 'Beyond Positive Reinforcement',\r\n            location: \"Agnes Scott College\",\r\n            startDate: \"11/01/2015\",\r\n            endDate: \"05/01/2016\",\r\n            irbNumber: \"none provided\",\r\n            irbLieson: \"Rachel Hall-Clifford\",\r\n\r\n            studyNotes: \"During my one-year appointment at Agnes Scott my research goals coincided with the opportunity to teach a senior seminar. I decided to combine the two and, with a little effort and creativity, we managed to run several research studies in less than three months.\",\r\n\r\n\r\n            team: [\r\n                { hero: \"Andrei Popa\", role: \"Principal Investigator\" },\r\n                { hero: \"Anastasia Xi Zhang\", role: \"Undergraduate Research Assistant/Lab Manager\" },\r\n                { hero: \"Olivia Zivot\", role: \"Undergraduate Research Assistant\" },\r\n            ]\r\n            ,\r\n\r\n\r\n\r\n        },\r\n        // studyInfo: [\r\n\r\n        //     { name: \"ASC study name\" },\r\n        //     { location: \"Agnes Scott University\" },\r\n        //     { dates: \"10/2015 - 05/2016\" },\r\n        //     { irb: [\"ASC IRB xxxxxxxxx\", \"xxxxxx\"] },\r\n        //     { pi: [\"Dr. Andrei Popa\"] },\r\n        //     { ci: [\"\"] },\r\n        // ],\r\n\r\n        nickname: \"SpARC 2016\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"04/01/2016\",\r\n        displayDate: '2015 - 2016',\r\n        navMarker: 'Sparc',\r\n\r\n        type: \"research study, human choice\",\r\n        time: \"04/01/2016\",\r\n        role: \"STUDY COORDINATOR\",\r\n        authors: [\r\n            \"<sup>U</sup>Adekunle & Popa (2016)\",\r\n            \"<sup>U</sup>Booher & Popa (2016)\",\r\n            \"<sup>U</sup>Forbes & Popa (2016)\",\r\n            \"<sup>U</sup>Grissom & Popa (2016)\",\r\n            \"<sup>U</sup>Shen & Popa (2016)\",\r\n            \"<sup>U</sup>Tang & Popa (2016)\",\r\n            \"<sup>U</sup>Waithe & Popa (2016)\",\r\n            \"Popa & Grissom (2017)\",\r\n        ],\r\n        technologies: [\"VB.Net\", \"Excel/VBA\",],\r\n\r\n        keywords: [\"Agnes Scott College\"],\r\n        relevantWork: ['spark1', 'spark2', 'spark3', 'spark4', 'spark5', 'spark6', 'spark7', 'WCALB 2017'],\r\n\r\n        tags: [\"VB.Net\"],\r\n        description: \"The goal of this study was to learn more about aversive conditioning and stimulus control in humans. And learned we did.\",\r\n\r\n        // \"During my appointment at Agnes Scott (2015-2016) my mentees and I explored concurrent schedules of reinforcement and punishment, escape behavior, extinction-induced phenomena, invisible target classes of different dimensions, etc.\"\r\n\r\n        img: [\r\n            SpARC_01_Adekunle,\r\n            SpARC_12_1_Booher,\r\n            SpARC_05_1_Forbes,\r\n            SpARC_16_1_Grissom,\r\n            SpARC_07_1_Shen,\r\n            SpARC_02_1_Tang,\r\n            SpARC_15_1_Waithe,\r\n\r\n            // SpARC_06_1_Adekunle,\r\n            // SpARC_10_1_Adekunle,\r\n            // SpARC_11_1_Shen,\r\n            // SpARC_14_1_Shen,\r\n        ],\r\n\r\n        // captions: [\r\n        //     \"Adekunle, O. & Popa, A. (2016). Higher Payoff or More Options? Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        //     \"Booher, C. & Popa, A. (2016). Choice Behavior in Unsignaled Environments With and Without Immediate Negative Feedback. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        //     \"Forbes, V., & Popa, A. (2016). Human Choice Behaviors Before and After Extinction. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        //     \"Grissom, M. K., & Popa, A. (2016). Effects of Extinction on Human Escape Behavior. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        //     \"Shen, R. & Popa, A. (2016). Is Competition Sufficient to Increase the Motivation to “Do Well”? Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        //     \"Tang, X., & Popa, A. (2016). Choice Behavior in Low Discriminability Conditions: Effects of the Operant Class Size. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        //     \"Waithe, O. Y., & Popa, A. (2016). The Effects of Imagery on Psychological Discomfort. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        // ],\r\n\r\n        urls: [\r\n            { name: \"SpARC\", link: \"https://www.agnesscott.edu/sparc/index.html\" },\r\n            { name: \"SpARC INDEX\", link: \"https://www.agnesscott.edu/sparc/\" },\r\n            {\r\n                name: \"WCALB 2017\",\r\n                link: \"https://static1.squarespace.com/static/57b732f259cc68697145ea01/t/5b7dbd231ae6cf8700f3d604/1534967075831/Past+Programs+2017.pdf\",\r\n            },\r\n        ],\r\n\r\n        abstract: \"The Spring Annual Research Conference is held at Agnes Scott each April to provide students and faculty with an opportunity to present their work to the campus community.As an interdisciplinary conference, SpARC fosters essential connections across academic disciplines and encourages an ongoing dialogue between the liberal arts and sciences. My mentees (bold font) and I contributed five (5) posters and three (3) talks, counting towards ~15% of all research projects presented at SpARC 2016. Note that all eight were novel contributions to the field. I would like to take this opportunity to thank my former students and research assistants, AlessandraXi Zhangand Olivia Zivot. Without their contribution, managing this enterprise would have been challenging at best.\",\r\n        // citations:\r\n        //     \"Adekunle, O. & Popa, A. (2016). Higher Payoff or More Options? Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA. <br/> Booher, C. & Popa, A. (2016). Choice Behavior in Unsignaled Environments With and Without Immediate Negative Feedback. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Forbes, V., & Popa, A. (2016). Human Choice Behaviors Before and After Extinction. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Grissom, M. K., & Popa, A. (2016). Effects of Extinction on Human Escape Behavior. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Shen, R. & Popa, A. (2016). Is Competition Sufficient to Increase the Motivation to “Do Well”? Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Tang, X., & Popa, A. (2016). Choice Behavior in Low Discriminability Conditions: Effects of the Operant Class Size. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Waithe, O. Y., & Popa, A. (2016). The Effects of Imagery on Psychological Discomfort. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n\r\n        references: [\r\n            \"Popa, A. & Grissom, M. K. (2017). Extinction-Induced Variability on Negatively Reinforced Human Behavior. Paper presented at the Winter Conference on Animal Learning & Behavior, Park City, UT.\",\r\n            \"Adekunle, O. & Popa, A. (2016). Higher Payoff or More Options? Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n            \"Booher, C. & Popa, A. (2016). Choice Behavior in Unsignaled Environments With and Without Immediate Negative Feedback. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n            \"Forbes, V., & Popa, A. (2016). Human Choice Behaviors Before and After Extinction. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n            \"Grissom, M. K., & Popa, A. (2016). Effects of Extinction on Human Escape Behavior. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n            \"Shen, R. & Popa, A. (2016). Is Competition Sufficient to Increase the Motivation to “Do Well”? Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n            \"Tang, X., & Popa, A. (2016). Choice Behavior in Low Discriminability Conditions: Effects of the Operant Class Size. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n            \"Waithe, O. Y., & Popa, A. (2016). The Effects of Imagery on Psychological Discomfort. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        ],\r\n    },\r\n\r\n\r\n\r\n\r\n    {\r\n        meta: 'recreate this, jack!',\r\n\r\n        title: 'Triangles!',\r\n\r\n        studyInfo: {\r\n\r\n            name: \"Effects of Personality Factors and Environemntal Properties on the Variability and Organization of Behavioral and Cognitive Processes\",\r\n            stageName: 'Triangles!',\r\n            location: \"Oxford College of Emory University\",\r\n            startDate: \"01/31/2018\",\r\n            endDate: \"05/01/2018\",\r\n            irbNumber: 'IRB00101193, AM1_IRB00101193, AM2_IRB00101193 *',\r\n            irbLieson: \"Emilie Scheffer\",\r\n\r\n            // role: \"Andrea Goosen, MPH\" ,\r\n            studyNotes: \"I conducted this study during my one year appointment as a adjunct faculty. Because the Emory IRB does not allow temporary faculty to conduct research as principal investigators, Dr. Carter graciously aggreed to help me bypass the red tape.\",\r\n            //notes: \"This was the first time I designed and managed a research study from beginning to end. Technology-wise, I used VB.Net for the experimental interface and Excel and VBA for data analysis.\"},\r\n\r\n            //     team: [\r\n            //         { hero: 'Dr. Andrei Popa', role: 'Principal Investigator (<i>de facto</i>)' },\r\n            //         { hero: 'Dr. Kenneth Carter', role: 'Emory lieson' },\r\n            //         { hero: 'Student Name', role: 'Undergraduate Research Assistant' },\r\n            //         { hero: 'Student Name', role: 'Undergraduate Research Assistant' },\r\n            //         { hero: 'Student Name', role: 'Undergraduate Research Assistant' },\r\n\r\n            //     ]\r\n\r\n\r\n\r\n        },\r\n\r\n        // studyInfo: [\r\n\r\n        //     { name: \"Effects of Personality Factors and Environmental Properties on the Variability and Organization of Behavioral and Cognitive Processes\" },\r\n        //     { location: \"Emory University, Oxford campus\" },\r\n        //     { dates: \"10/2017 - 05/2018\" },\r\n        //     { irb: [\"e IRB xxxxxxxxx\", \"xxxxxx\"] },\r\n        //     { pi: [\"Dr. Keneth Carter\", \"Dr. Andrei Popa (<i>de facto</i>)\"] },\r\n        //     { ci: [\"\"] },\r\n        // ],\r\n\r\n\r\n        date: \"05/01/2018\",\r\n        displayDate: '2018',\r\n        navMarker: 'Triangles',\r\n        type: \"empirical research\",\r\n        role: \"PRINCIPAL INVESTIGATOR (<i>de facto</i>)\",\r\n        authors: [\"Popa & Carter (2018)\"],\r\n        technologies: [\"VB.Net\", \"Excel/VBA\",],\r\n\r\n        keywords: [\"fgchgbjk\"],\r\n        tags: [\"VB.NET\", \"Python\", \"Pandas\", \"SciPy\", \"Matplotlib\"],\r\n        description:\r\n            // \"Here we compared positively reinforced behavior and avoidance behavior in symmetrical environments (Popa & Carter, 2018). Participants discovered abstract rules twice as fast when correct responses acquired points (positive reinforcement) then when they prevented the loss of points (negative reinforcement). <br/><br/>\",\r\n            \"Participants discovered abstract rules twice as fast when correct responses acquired points (positive reinforcement) then when they prevented the loss of points (negative reinforcement).\",\r\n        img: [Pos01_1_pos, Neg04_1_neg, Trn04_2_pos, Trn04_3_neg, Trn04_4_ext],\r\n        captions: [\"Pos01_1_pos\", \"Neg04_1_neg\", \"Trn04_2_pos\", \"Trn04_3_neg\", \"Trn04_4_ext\"],\r\n\r\n        urls: [{ name: \"gDrive\", link: \"gDrive\" }],\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n    {\r\n        meta: 'theoretical developments',\r\n\r\n        title: 'Rethinking selection',\r\n        custom_item: 'nbt',\r\n        nickname: \"Python\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"09/01/2018\",\r\n        displayDate: '2018',\r\n        navMarker: 'nbtSelection',\r\n        type: \"(research, computational modelling)\",\r\n        role: \"PRINCIPAL INVESTIGATOR\",\r\n        technologies: [\"Python\", \"Tkinter\", \"Postgress\"],\r\n\r\n        keywords: [\"buyhbvjhb\"],\r\n        authors: [],\r\n\r\n        tags: [\"Python\", \"SciPy\", \"SQLite\", \"Postgres\"],\r\n        description:\r\n            \"In ETBD, reinforcers trigger selection events: phenotypes closer to the reinforced one are assigned a higher probability to become parents. <br/><br/>[...] <i>a random value is obtained from an exponential distribution, say 5. The program checks the population for a phenotype that is 5 integers away from the reinforced one. If the reinforced one was 100, it looks for 95 or 105. When it doesn't find a match, it goes back to the distribution, gets a new random value, and so on until it finds a match.<br/><br/>Here I explored a next-best-thing approach: obtain a random value from the distribution and search for a match; if one is not found, the phenotype closest to the required value becomes parent.\",\r\n        img: [nbt_fig1],\r\n        captions: [\"\"],\r\n\r\n        urls: [\r\n            //{name: \"xxx\", link:\"xxx\"},\r\n            //{name: \"GitHub\", link: \"xxx\"}\r\n        ],\r\n        // citation: \"\",\r\n\r\n        references: [\"zxvxv\", \"mcvhncv\"],\r\n    },\r\n\r\n\r\n\r\n    {\r\n        meta: \"breakthrough\",\r\n        title: 'The Shape of Will',\r\n        nickname: \"PsyArXiv\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"09/08/2019\",\r\n        displayDate: '2019',\r\n        navMarker: 'Popa2019',\r\n        type: \"preprint\",\r\n        time: \"09/08/2019\",\r\n        role: \"PRINCIPAL INVESTIGATOR\",\r\n        authors: [\"Popa (2019a)\"],\r\n        keywords: [\"hguhjbjkn\"],\r\n        tags: [\"Problem Solving\"],\r\n        // description:\r\n        //     \"Close as it comes to the brain without being brain, per se. Causally speaking, changes in neuronal activation states begin after physicochemical changes, and before psychological phenomena, like cognitive, behavioral, emotional reactions. Fast and sensitive enough • to react to any immediate experience, no matter how subtle or short - lived(e.g., 'a look',subtle voice inflections, etc.) and • to be proximate cause for every form of expression(e.g., implicit cognition, thinking, carrying a conversation, ruminating, etc.). Complex and versatile enough to represent(i.e., 'encode') the richness of psychological dimensions and phenomena. Domain independent; common, binary - based representation for all psychological phenomena.Amenable to scientific investigation: Structures that can be described in terms of nodes and edges - like neurons and synapses - are called graphs. The transition between any two consecutive configurations of active neurons is equivalent to morphing one graph into another, again and again. These structures can be described mathematically and the transformations can be represented computationally.\",\r\n\r\n        description:\r\n            \"Neurons are located in a confined, 3-dimensional space. A neuron can be in one of two states: 1 or 0.<br/><br/> The neurons that 'fire' in a given window of time describe a shape, a configuration with measurable properties. The configuration keeps changing, as action potentials travel from cell to cell. <br/><br/> The streams of activation states is the material counterpart of all forms of experience and expression:  an agent that feels, notices, thinks, does - in real time.\",\r\n\r\n        // description:\r\n        //     \"The transformations that occur in the brain must occur in real time and must accomodate any form of experience and expression.<br/><br/><br/>Structures that can be described in terms of nodes and edges - like neurons and synapses - are called graphs. The transition between any two consecutive configurations of active neurons is equivalent to morphing one graph into another, again and again. These structures can be described mathematically and the transformations can be represented computationally.\",\r\n\r\n        /* \r\n\r\n        Neurons are located in a confined, 3-dimensional space. A neuron can be in one of two states: 1 or 0.<br/><br/> The neurons that \"fire\" in a given window of time describe a shape, a configuration with measurable properties. The configuration keeps changing, as action potentials travel from cell to cell. <br/><br/> The streams of activation states is the material counterpart of all forms of experience and expression:  an agent that feels, notices, thinks, does - in real time.\r\n        */\r\n\r\n\r\n        //caption: \"Fig. 1. The transition between two configurations of active neurons is         equivalent to transforming on graph(t n ; left) into another(t n+ 1 ; right panel).\",\r\n        img: [change_in_state_2],\r\n        captions: [\"change_in_state_2\"],\r\n\r\n        urls: [\r\n            { name: \"PsyArXiv\", link: \"https://psyarxiv.com/m87an/\" },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/335688963_Psychology_20_The_Emergence_of_Individuality\",\r\n            },\r\n        ],\r\n        citation:\r\n            \"Popa, Andrei. 2019. “Psychology 2.0: The Emergence of Individuality.” PsyArXiv. September 8. doi:10.31234/osf.io/m87an.\",\r\n\r\n        references: [\r\n            \"Popa, Andrei. 2019. “Psychology 2.0: The Emergence of Individuality.” PsyArXiv. September 8. doi:10.31234/osf.io/m87an.\",\r\n        ],\r\n    },\r\n\r\n\r\n\r\n\r\n    {\r\n        title: 'Imperfect Automata',\r\n        nickname: \"PsyArXiv\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"09/30/2019\",\r\n        displayDate: '2019',\r\n        navMarker: 'ImperfectAutomata',\r\n\r\n        type: \"preprint\",\r\n\r\n        keywords: [\"hjhjbjn\"],\r\n        tags: [\"Python\", \"Tkinter\"],\r\n        description:\r\n            \"Novelty requires error. Automata are deterministic systems, governed by precise rules. The question examined here was: what if every new cell has a small probability to be written incorrectly, i.e. to mutate from 0 to 1 or viceversa. ... Low mutation probabilities facilitated the emergence of new patterns and structures, disconnected from the initial conditions. <br/><br/><br/><br/>\",\r\n        img: [projectAutomata1],\r\n        captions: [\"projectAutomata1\"],\r\n        urls: [\r\n            { name: \"PsyArXiv\", link: \"https://psyarxiv.com/wgp4e/\" },\r\n            { name: \"GitHub\", link: \"https://github.com/ap-dev1/automata/\" },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/336143797_Imperfect_Automata_Effects_of_mutation_on_the_evolution_of_automaton_01101110_Rule_110\",\r\n            },\r\n        ],\r\n        // citation:\r\n        //     \"Popa, Andrei. 2019. “Imperfect Automata: Effects of “mutation” on the Evolution of Automaton 01101110 (rule 110)” PsyArXiv. September 30. doi:10.31234/osf.io/wgp4e.\",\r\n\r\n        references: [\r\n            \"Popa, Andrei. 2019. “Imperfect Automata: Effects of “mutation” on the Evolution of Automaton 01101110 (rule 110)” PsyArXiv. September 30. doi:10.31234/osf.io/wgp4e.\"\r\n        ],\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // {\r\n    //     title: \"Hello web world!\",\r\n    //     nickname: \"JS / MERN\",\r\n    //     fontFam: \"Roboto\",\r\n\r\n    //     date: \"11/01/2020\",\r\n    //     displayDate: '2020',\r\n\r\n    //     type: \"MERN project\",\r\n    //     time: \"10/05/2020\",\r\n    //     role: \"\",\r\n    //     technologies: [\"mongoDB\", \"Express\", \"React\", \"Node\"],\r\n\r\n    //     keywords: [\"fghvhjb n\"],\r\n    //     authors: [],\r\n\r\n    //     tags: [\r\n    //         \"React\",\r\n    //         \"Node/Express\",\r\n    //         \"MongoDB/Atlas\",\r\n    //         \"DynamoDB\",\r\n    //         \"RDS/Postgres\",\r\n    //     ],\r\n    //     description:\r\n    //         \"My first MERN project was a simple card sorting activity: choose five cards from a deck of 80. It implements user registration and authentication, the activity itself, storing results, and redirecting the user to an updated home page. \",\r\n    //     // +\r\n    //     // \"The first version was deployed with AWS and used DynamoDB for authentication data and RDS/Postgres for session data. The second version was deployed on Heroku and used MongoDB/Atlas for all app data. <br/><br/><br/><br/>\",\r\n\r\n    //     img: [projectCardSorting],\r\n    //     captions: [\"projectCardSorting\"],\r\n\r\n    //     urls: [\r\n    //         { name: \"GitHub\", link: \"https://github.com/ap-dev1/personal_values\" },\r\n    //     ],\r\n    //     citation: \"\",\r\n\r\n    //     references: [\"cZDCx\", \"vzxv\"],\r\n    // },\r\n\r\n\r\n\r\n    // {\r\n    //     title: 'Aqueros',\r\n    //     technologies: ['MongoDB/Atlas', 'Node.js', 'Express.js', 'React'],\r\n    //     description: 'Imagine you are immersed in work. All of a sudden you have a thought about something unrelated. Creating and indexing a note can require enough cognitive effort to fracture your flow, because every step in the process is a changeover delay requirement.<br/><br/><br/>A proactive personal assistant, that knows what to ask and how to organize the information.',\r\n    //     urls: [\r\n    //         { name: \"Demo\", link: 'https://aqueous-plains-89974.herokuapp.com' },\r\n    //         { name: \"GitHub\", link: 'https://github.com/ap-dev1/clock_in' },\r\n    //     ],\r\n    //     img: [aquerous_plains],\r\n    //     captions: ['aqueros'],\r\n    //     fontFam: \"Roboto\",\r\n\r\n    //     date: \"11/01/2020\",\r\n    //     displayDate: '2021',\r\n\r\n    //     type: \"MERN project\",\r\n    //     time: \"10/05/2020\",\r\n    //     role: \"\",\r\n\r\n    //     keywords: [\"fghvhjb n\"],\r\n    //     nickname: \"JS / MERN\",\r\n    //     authors: [],\r\n    //     citation: \"\",\r\n    //     references: [\"cZDCx\", \"vzxv\"],\r\n    // },\r\n\r\n\r\n\r\n    {\r\n        title: 'Pure Refuge',\r\n        technologies: ['Python', 'Websockets', 'Node.js', 'React.js', 'D3.js'],\r\n        urls: [\r\n            { name: \"Demo\", link: 'https://pure-refuge-75977.herokuapp.com/' },\r\n            { name: \"GitHub\", link: 'https://github.com/ap-dev1/wolves3' },\r\n        ],\r\n        img: [pure_refuge],\r\n        captions: ['pure refuge'],\r\n        description: \"Let's say we have a computational theory of learning, i.e. an agent capable to learn to approach and to avoid. To implement a mini-society, we need to add social behaviors and social consequences. <br/> <br/> <b>What can be implemented and what shouldn't be implemented</b><br/><br/><br/><br/><b>Computational representations</b>.\",\r\n\r\n        nickname: \"JS / MERN\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"11/01/2020\",\r\n        displayDate: '2021',\r\n\r\n        type: \"MERN project\",\r\n        time: \"10/05/2020\",\r\n        role: \"\",\r\n\r\n        keywords: [\"fghvhjb n\"],\r\n        authors: [],\r\n\r\n        tags: [\r\n            \"React\",\r\n            \"Node/Express\",\r\n            \"MongoDB/Atlas\",\r\n            \"DynamoDB\",\r\n            \"RDS/Postgres\",\r\n        ],\r\n\r\n\r\n\r\n        // urls: [\r\n        //     { name: \"GitHub\", link: \"https://github.com/ap-dev1/personal_values\" },\r\n        // ],\r\n        citation: \"\",\r\n\r\n        references: [\"cZDCx\", \"vzxv\"],\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        title: 'This',\r\n        navMarker: 'Portfolio',\r\n        technologies: ['React.js', 'D3.js'],\r\n        urls: [\r\n            { name: \"Demo\", link: 'https://pure-refuge-75977.herokuapp.com/' },\r\n            { name: \"GitHub\", link: 'https://github.com/ap-dev1/wolves3' },\r\n        ],\r\n        img: [pure_refuge],\r\n        captions: ['pure refuge'],\r\n        description: 'poertfolio description when all else is done.',\r\n\r\n        nickname: \"JS / MERN\",\r\n        fontFam: \"Roboto\",\r\n\r\n        date: \"2022\",\r\n        displayDate: '2022',\r\n\r\n        type: \"MERN project\",\r\n        role: \"\",\r\n\r\n        keywords: [\"fghvhjb n\"],\r\n        authors: [],\r\n\r\n        tags: [\r\n            \"React\",\r\n        ],\r\n\r\n\r\n\r\n        // urls: [\r\n        //     { name: \"GitHub\", link: \"https://github.com/ap-dev1/personal_values\" },\r\n        // ],\r\n        citation: \"\",\r\n\r\n        references: [\"cZDCx\", \"vzxv\"],\r\n    },\r\n\r\n];\r\n\r\n\r\nexport default infoHighlights;\r\n","F:\\react_portfolio\\src\\COMPONENTS\\header_files\\NavMain.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\header_files\\NavCollapse.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\vitae\\infoCV.js",["462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494"],"\r\nimport sqab2009 from \"../../assets/sqab_2009_abstract.png\";\r\nimport sqab2010 from \"../../assets/sqab_2010_abstract.png\";\r\nimport sqab2011 from \"../../assets/sqab_2011_abstract.png\";\r\n\r\nimport jeab_2010_abstract from \"../../assets/temp/jeab_2010_abstract.png\";\r\nimport jeab_2012_abstract from \"../../assets/temp/jeab_2012_abstract.png\";\r\n\r\nimport bp_2009_abstract from \"../../assets/temp/bp_2009_abstract.png\";\r\nimport bp_2010_abstract from \"../../assets/temp/bp_2010_abstract.png\";\r\n\r\nimport phd_etbd_humans_sensitivity from \"../../assets/temp/phd_etbd_humans_sensitivity.png\";\r\nimport phd_etbd_humans_bout_length from \"../../assets/temp/phd_etbd_humans_bout_length.png\";\r\n\r\nimport phd_committee from \"../../assets/temp/phd_committee.png\";\r\nimport etbd_adhd_slide_1 from \"../../assets/temp/etbd_adhd_slide_1.png\";\r\n\r\nimport jeab2016_0 from '../../assets/temp/jeab2016_0.png';\r\nimport jeab2016_1 from '../../assets/temp/jeab2016_1.png';\r\n\r\nimport SpARC_01_Adekunle from \"../../assets/sparc2016/SpARC_01_Adekunle.png\";\r\nimport SpARC_02_1_Tang from \"../../assets/sparc2016/SpARC_02_1_Tang.png\";\r\nimport SpARC_06_1_Adekunle from \"../../assets/sparc2016/SpARC_06_1_Adekunle.png\";\r\nimport SpARC_05_1_Forbes from \"../../assets/sparc2016/SpARC_05_1_Forbes.png\";\r\nimport SpARC_07_1_Shen from \"../../assets/sparc2016/SpARC_07_1_Shen.png\";\r\nimport SpARC_10_1_Adekunle from \"../../assets/sparc2016/SpARC_10_1_Adekunle.png\";\r\nimport SpARC_11_1_Shen from \"../../assets/sparc2016/SpARC_11_1_Shen.png\";\r\nimport SpARC_12_1_Booher from \"../../assets/sparc2016/SpARC_12_1_Booher.png\";\r\nimport SpARC_14_1_Shen from \"../../assets/sparc2016/SpARC_14_1_Shen.png\";\r\nimport SpARC_15_1_Waithe from \"../../assets/sparc2016/SpARC_15_1_Waithe.png\";\r\nimport SpARC_16_1_Grissom from \"../../assets/sparc2016/SpARC_16_1_Grissom.png\";\r\n\r\nimport Pos01_1_pos from \"../../assets/triangles/Pos01_1_pos.png\";\r\nimport Neg04_1_neg from \"../../assets/triangles/Neg04_1_neg.png\";\r\nimport Trn04_2_pos from \"../../assets/triangles/Trn04_2_pos.png\";\r\nimport Trn04_3_neg from \"../../assets/triangles/Trn04_3_neg.png\";\r\nimport Trn04_4_ext from \"../../assets/triangles/Trn04_4_ext.png\";\r\n\r\nimport nbt_fig1 from \"../../assets/temp/nbt_fig1.png\";\r\nimport change_in_state_2 from \"../../assets/temp/change_in_state_2.png\";\r\nimport projectAutomata1 from \"../../assets/temp/prj_img_imperfect_automata.jpg\";\r\n\r\n\r\n// WEB DEVELOPMENT:  ----------------------\r\n\r\nimport projectCardSorting from \"../../assets/temp/prj_img_personal_values.png\";\r\nimport pure_refuge from '../../assets/temp/pure_refuge.png';\r\nimport aquerous_plains from '../../assets/temp/aquerous_plains.png';\r\n\r\n//--------------------------------------------\r\n\r\n// import ABAI_2014_Chicago from \"../../assets/abai_2014_Chicago.png\";\r\n// import ABAI_2014_Andrei from \"../../assets/abai_2014_Andrei.png\";\r\n\r\n// import paper_bivariate_matching_2012 from \"../../assets/paper_bivariate_matching_2012.png\"\r\nimport hamming_abs_reinf_rate from \"../../assets/_not_used/hamming_abs_reinf_rate.png\";\r\nimport abai_2014_radars_originals from \"../../assets/abai_2014_radars_originals.png\";\r\n\r\n// ----    OLD ONES  ---------------------\r\n\r\nimport abai_2017_5 from \"../../assets/abai_2017_5.png\";\r\nimport abai_2017_6 from \"../../assets/abai_2017_6.png\";\r\n\r\nimport wcalb2017_extinction08 from \"../../assets/wcalb2017_extinction08.png\";\r\n\r\nimport abai_2014_slide1 from \"../../assets/abai_2014_slide1.png\";\r\nimport abai_2014_slide2 from \"../../assets/abai_2014_slide2.png\";\r\n\r\n//---------------------------------------------\r\n\r\nimport sch6_02_prob_same_impulsive_agent from \"../../assets/sch6_02_prob_same_impulsive_agent.png\"\r\n\r\nimport placeholder_blank from \"../../assets/placeholder_blank.png\"\r\nimport abai_sqab_2011_bw from \"../../assets/placeholder_blank.png\"\r\nimport phd_etbd_humans_1 from \"../../assets/placeholder_blank.png\"\r\nimport phd_etbd_humans_2 from \"../../assets/placeholder_blank.png\"\r\nimport darwin_essentialism_psych from \"../../assets/placeholder_blank.png\"\r\nimport darwin_2016_slide_06 from \"../../assets/placeholder_blank.png\"\r\n\r\n\r\nconst infoCV = [\r\n\r\n    {\r\n        name: 'Emory 2009',\r\n        iconName: 'Emory',\r\n        type: \"invited talk\",\r\n        category: \"conferences\",\r\n        date: \"05/02/2009\",\r\n        keywords: [\"ETBD\", \"mathematical models\", \"matching\", \"undermatching\", 'emergence'],\r\n        citation: \"Popa, A., & McDowell, J J. (2009). A Computational Model of Adaptive Behavior Dynamics. Emory University, Department of Psychology, Annual Research Festival. Atlanta, GA\",\r\n        description: \"Mathematical models such as the matching equations describe behavior. Computational theories are essentially computer programs that generate behavior. They implement theoretical assumptions about how learning works in biological agents. Mathematical models can be used to verify these assumptions.\",\r\n    },\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'SQAB 2009',\r\n        iconName: 'SQAB',\r\n        type: \"research poster\",\r\n        category: \"conferences\",\r\n\r\n        date: \"05/21/2009\",\r\n        citation:\r\n            \"Popa, A., & McDowell, J J. (2009). Hamming cliffs in a computational model of selection by consequences. Poster presented at the 32nd Annual Meeting of the Society for the Quantitative Analysis of Behavior, Phoenix, AZ.\",\r\n        authors: [\"Popa & McDowell (2009)\"],\r\n        urls: [\r\n            { name: \"SQAB 2009\", link: \"https://www.sqab.org/programs/2009.pdf\" },\r\n        ],\r\n        images: [sqab2009],\r\n        description: \"McDowell et. al. (2008) hypothesized that the Hamming distance between the target classes may be functionally equivalent to a changeover delay. Exploring this parallel became the topic of my Masters' thesis.\",\r\n        keywords: [\"ETBD\", \"matching\", 'emergence', 'Hamming', ],\r\n\r\n    },\r\n\r\n\r\n\r\n    {\r\n        name: 'BP 2009',\r\n        iconName: 'BP',\r\n        type: \"journal article\",\r\n        category: \"publications\",\r\n\r\n        date: \"07/01/2009\",\r\n\r\n        citation:\r\n            \"McDowell, J. J, & Popa, A. (2009). Beyond continuous mathematics and traditional scientific analysis: Understanding and mining Wolfram's A new kind of science. <i>Behavioural Processes</i>, <i>81</i>, 343-352.\",\r\n        urls: [\r\n            { name: \"Pubmed\", link: \"http://www.ncbi.nlm.nih.gov/pubmed/19429227\" },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/24414894_Beyond_continuous_mathematics_and_traditional_scientific_analysis_Understanding_and_mining_Wolfram's_A_New_Kind_of_Science\",\r\n            },\r\n        ],\r\n        images: [bp_2009_abstract],\r\n        description: \"Cellular automata are mathematical models that consist of cells. The cells can only exist in a finite number of states. The state of each cell is determined by the states of a predefined neighborhood, via simple rules. <br/> Here we explored their potential to represent adaptive behavior and to inform the philosophical foundations of behavior analysis.\",\r\n        // description: \"Cellular automata are mathematical models that consist of cells. The cells can exist in a finite number of states. <br/>The state of each cell is determined by the sates of a predefined neighborhood, via simple rules. <br/> Here we explored their potential to represent adaptive behavior and to inform the philosophical foundations of behavior analysis.  <br/><br/> During this time I noticed an interesting limitation that led me to revisit these models a few years later (Popa, 2019).\",\r\n\r\n        abstract: \"In A New Kind of Science, Stephen Wolfram recommends abandoning traditional scientific analysis and the continuous mathematical description that it affords in favor of the study of simple rules. He focuses on amachine known as a cellular automaton as the prototype generator of complex phenomena such as those we see in nature. The simplest cellular automaton consists of a row of cells, each existing in one of two states. The states of the cells are updated from moment to moment by simple rules. Wolfram shows that these machines and their many variations can generate a host of outcomes ranging from very simple to extremely complex.He argues that among these outcomes representations of all the phenomena in the universe will be found, including presumably the behavior of organisms. The output of cellular automata can be mapped to behavior by considering, for example, one of the states of a cell to represent the emission of a behavior. For some cellular automaton rules, these mappings generate cumulative records and inter-response time distributions that are similar to those produced by live organisms. In addition, at least one cellular automaton generates the Herrnstein hyperbola as an emergent outcome. These results suggest that Wolfram’s program and its mainstream version, which is known as complexity theory, is worth pursuing as a possible means of understanding and accounting for the behavior of organisms.\",\r\n\r\n        keywords: [\"Wolfram\", \"ETBD\", \"complexity\", \"emergence\", \"Elementary Cellular Automata\", \"cellular automaton\"],\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'MA 2009',\r\n        iconName: 'M.A.',\r\n        date: \"20/12/2009\",\r\n        type: \"Master of Arts\",\r\n\r\n\r\n\r\n\r\n        category: '????????',\r\n\r\n\r\n\r\n        citation: \"Popa, A. (2009). The Effects of Hamming Distances in a Computational Model of Selection by Consequences. <b>Masters thesis</b>. Retrieved: <br/> https://etd.library.emory.edu/concern/etds/8k71nj12p?locale=en\",\r\n\r\n        committee: \"Dr. Jack McDowell (chair), Dr. Eugene Emory, Dr. Philip Wolff\",\r\n        urls: [\r\n            {\r\n                name: \"Emory ETD\",\r\n                link: \"https://etd.library.emory.edu/concern/etds/8k71nj12p?locale=en\",\r\n            },\r\n\r\n        ],\r\n        abstract: \"McDowell (2004) instantiated the Darwinian principles of selection, recombination, and mutation in a computational model of selection by consequences. The model forces a population of behaviors to evolve under the selection pressure of the environment, by applying low-level Darwinian principles; it has been tested under a variety of conditions and the quantitative outcomes are remarkably similar to those obtained in experiments with live organisms (McDowell et al., 2008). The computational model animates a virtual organism with a repertoire of 100 behaviors, represented by binary strings; this raises the specific issue of Hamming distances, the number of digits in a binary string that must be changed in order to obtain another bit string of equal length (Hamming, 1950). McDowell (2008) hypothesized that in environments that reinforce two alternatives the Hamming distance may be computationally equivalent to a changeover delay (COD). In experiments with live organisms that reinforce two alternatives, an interesting phenomenon is sometimes observed: instead of responding to the alternatives, the organism behaves \\\"as if\\\" switching itself is reinforced. One way to prevent this phenomenon is the use of a changeover delay, a procedure that prevents the organism from acquiring reinforcement if it switches too often (Findley, 1958). The computational model places the target classes next to each other, and, traditionally, they are separated by a large Hamming cliff, which makes it more difficult for a behavior to switch from one target class to the other. In order to investigate the effects of smaller cliffs between the target classes, they were positioned at different locations along the continuum; in addition, other parameters were systematically varied. Results confirmed McDowell et al.'s Hamming-Distance-As-Changeover-Delay hypothesis and also revealed a robust rule about the effects of Hamming distances within the model. The steady state outcome is, therefore, a product of the reiteration of Darwinian rules, and not an artifact of conveniently choosing an exceptional location for the target classes. This study constitutes another argument for the robustness of the computational model of selection by consequences as a valid account of the behavioral dynamics.\",\r\n\r\n\r\n\r\n        keywords: [\"Masters Thesis\", \"ETBD\", \"Hamming Distances\", \"Changeover Delay\", \"matching\", \"sensitivity\", 'Hamming',],\r\n    },\r\n\r\n\r\n    {\r\n        name: 'BP 2010',\r\n        iconName: 'BP',\r\n        type: \"journal article\",\r\n        date: \"03/01/2010\",\r\n        \r\n        citation:\r\n            \"Popa, A., & McDowell, J. J. (2010). The effect of Hamming distances in a computational model of selection by consequences. <i>Behavioural Processes</i>, <i>84</i>, 428-434.\",\r\n        images: [bp_2010_abstract],\r\n\r\n        urls: [\r\n            {\r\n                name: \"ReshGate\",\r\n                link: \"https://www.researchgate.net/publication/41427297_The_effect_of_Hamming_distances_in_a_computational_model_of_selection_by_consequences\",\r\n            },\r\n\r\n            { name: \"Pubmed\", link: \"http://www.ncbi.nlm.nih.gov/pubmed/20152891\" },\r\n\r\n        ],\r\n\r\n        abstract:\r\n            \"McDowell (2004) instantiated the Darwinian principles of selection, recombination, and mutation in a computational model of selection by consequences.The model has been tested under a variety of conditions and the outcome is quantitatively indistinguishable from that displayed by live organisms. The computational model animates a virtual organism with a repertoire of 100 behaviors, selected from the integers from 0 to 1023, where the corresponding binary representations constitute the behavior’s genotypes. Using strings of binary digits raises the specific problem of Hamming distances: the number of bits that must be changed from 1 to 0 or from 0 to 1 in order to obtain another string of equal length.McDowell hypothesized that the Hamming distance may be computationally equivalent to the changeover delay used in experiments with live organisms.The results of the present experiments confirmed this hypothesis and revealed a robust rule about the effects of Hamming distances within the model, namely, in order to obtain good matching, the difference between the Hamming distance that separates the target classes and the largest Hamming distance comprised within a class must be equal to or larger than three.\",\r\n\r\n            keywords: [\"ETBD\", \"Hamming Distances\", \"Changeover Delay\", \"matching\", \"sensitivity\", \"COD\", 'hamming'],\r\n    },\r\n\r\n\r\n\r\n    {\r\n        name: 'SQAB 2010',\r\n        iconName: 'SQAB',\r\n        type: \"research poster\",\r\n        date: \"05/28/2010\",\r\n\r\n        citation:\r\n            \"Popa, A., & McDowell, J J. (2010). Absolute reinforcement rates in ETBD. Poster presented at the 33rd Annual Meeting of the Society for the Quantitative Analysis of Behavior, San Antonio, TX.\",\r\n        images: [hamming_abs_reinf_rate, sqab2010],\r\n        urls: [\r\n            { name: \"SQAB 2010\", link: \"https://www.sqab.org/programs/2010.pdf\" },\r\n        ],\r\n\r\n        description: \"Consider two scenarios. In scenario A, two sources of reinforcement schedule 10 and 20 reinforcers per minute, respectivelly. In scenario B, they schedule 20 and 40, respectively. In both scenarios, the second alternative is twice as good, but overall scenario B is twice as good as A. As the overall reinforcer rate increases, the weaker the effects of <b>mutation rate</b> and reinforcer <b>magnitude</b>. and <b>COD</b>. <br/><br/> Understanding these interactions became a priority. Specifically, wanted to know <b>1)</b> how independent variables influence behavior at generation level, <i>here-and-now</i>, and <b>2)</b> how these effects shape the preference patterns that emerge over time.\",\r\n\r\n        abstract: \"McDowell and Popa (in press) showed that when running concurrent schedules, experimental settings designed to reasonably sample the reinforcement ratio domain may not adequately sample the absolute reinforcement rate domain.  For example, a concurrent RI 10 RI 20 has a reinforcement ratio of 2:1, equal to a concurrent RI 100 RI 200; evidently, the absolute reinforcement rates differ considerably. McDowell and Popa suggested that the overall absolute reinforcement rate in a concurrent schedule might affect behavior generated by the computational model. Systematic and thorough sampling of the absolute reinforcement rate domain in a series of computational experiments confirmed this hypothesis. <b>The results</b> showed that as the overall absolute reinforcement rate increased, behavior generated by the computational model became less sensitive to changes in parameters related to reinforcer value, changeover delay, and impulsivity.\",\r\n\r\n        keywords: [\"ETBD\", \"reinforcement rate\", \"reinforcement magnitude\", 'matching', 'hamming', 'adhd', 'impulsivity',],\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'ABAI 2010',\r\n        iconName: 'ABAI',\r\n        date: \"05/31/2010\",\r\n        type: \"invited talk\",\r\n        tags: [\"problem framing\"],\r\n\r\n        citation:\r\n            \"Popa, A., & McDowell, J J. (2010). Evolutionary Behavior Dynamics causally generates both molar and molecular properties of behavior. Symposium: The Molar-Molecular debate: A further discussion on the unresolved issue. Discussant: William M. Baum, Ph.D. Presented at the 36th Annual Convention of the Association for Behavior Analysis International, San Antonio, TX.\",\r\n\r\n\r\n\r\n\r\n        urls: [\r\n            { name: 'ABAI 2010', link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=8950&by=ByArea#s436_0\" },\r\n        ],\r\n        description: \"ETBD was shown to generate behavior consistent with that of living organisms at both molar and molecular lever. This suggests that both molar and molecular properties are natural consequences of evolutionary dynamics, which cancels the need for molar and molecular views\",\r\n        abstract:\r\n            \"Both molar and molecular causality may be illusory. Molar and molecular features of behavior are emergent properties of an evolutionary theory of behavior dynamics that instantiates the idea that behavior evolves in response to selection pressure provided by reinforcement from the environment. This theory consists of Darwinian rules of selection, reproduction, and mutation that operate on a population of potential behaviors over time to generate a continuous stream of emitted behavior. The evolutionary theory has been shown to generate behavior on single random interval (RI) and concurrent RI RI schedules that has molar properties consistent with matching theory, and that are quantitatively indistinguishable from molar properties of live-organism behavior. At the same time, the theory has been shown to generate molecular inter-response time (IRT) distributions that can be studied in the form of log-survivor plots, and that are similar to log-survivor IRT distributions from live organisms. A parallel selectionist theory of neural functioning has been discussed as a plausible material mechanism for this evolutionary theory of behavior dynamics.\",\r\n\r\n        keywords: [\"ETBD\", \"ABAI\", \"invited talk\", \"conference\", 'emergence', 'matching',],\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'JEAB 2010',\r\n        iconName: 'JEAB',\r\n        title: \"Towards a mechanics of adaptive behavior\",\r\n        type: \"journal article\",\r\n        date: \"12/01/2010\",\r\n        citation:\r\n            \"McDowell, J. J, & Popa, A. (2010). Toward a mechanics of adaptive behavior: Evolutionary dynamics and matching theory statics. <i>Journal of the Experimental Analysis of Behavior</i>, <i>94</i>, 241-260.\",\r\n\r\n        images: [jeab_2010_abstract],\r\n        urls: [\r\n            {\r\n                name: \"Pubmed\",\r\n                link: \"http://www.ncbi.nlm.nih.gov/pubmed/20152891\"\r\n            },\r\n            {\r\n                name: \"NCBI\",\r\n                link: \"http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2929088/\",\r\n            },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/50937156_Toward_a_Mechanics_of_Adaptive_Behavior_Evolutionary_Dynamics_and_Matching_Theory_Statics\",\r\n            },\r\n        ],\r\n\r\n        description: \"ETBD was tested by comparing the steady-state behavior it generated on concurrent schedules to the description of steady state behavior provided by modern matching theory. Ensemble fits of modern matching theory that enforced its constant-k requirement and the parametric identities required by its equations, accounted for large proportions of data variance, left random residuals, and yielded parameter estimates with values and properties similar to those obtained in experiments with live organisms.\",\r\n\r\n        abstract:\r\n            \"One theory of behavior dynamics instantiates the idea that behavior evolves in response to selection pressure from the environment in the form of reinforcement. This computational theory implements Darwinian principles of selection, reproduction, and mutation, which operate on a population of potential behaviors by means of a genetic algorithm. The behavior of virtual organisms animated by this theory may be studied in any experimental environment. The evolutionary theory was tested by comparing the steady-state behavior it generated on concurrent schedules to the description of steady state behavior provided by modern matching theory. Ensemble fits of modern matching theory that enforced its constant-k requirement and the parametric identities required by its equations, accounted for large proportions of data variance, left random residuals, and yielded parameter estimates with values and properties similar to those obtained in experiments with live organisms. These results indicate that the dynamics of the evolutionary theory and the statics of modern matching theory together constitute a good candidate for a mechanics of adaptive behavior.\",\r\n\r\n        keywords: [\"ETBD\", \"jeab\", \"publication\", \"journal\", 'emergence', 'matching',],\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'QUAL 2011',\r\n        iconName: 'Qual',\r\n        title: \"The Terminal Link Effect\",\r\n        date: \"04/10/2011\",\r\n        type: \"Qualifying Exam\",\r\n        citation: \"Qualifying Examination. \",\r\n        committee: \"Dr. Robert Hampton (chair), Dr. Irwin Waldman, Dr. Philip Wolff\",\r\n        keywords: [\"candidacy\", \"Terminal Link Effect\", \"TLE\"],\r\n        urls: [\r\n            // { name: \"Platform paper\", link: \"https://www.sqab.org/programs/2011.pdf\" },\r\n        ],\r\n        description:\r\n            \"The Qualifying exam is the last requirement on the way to PhD.\",\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'SQAB 2011',\r\n        iconName: 'SQAB',\r\n        date: '05/27/2011',\r\n        type: \"research poster\",\r\n        tags: [],\r\n\r\n        citation: \"Popa, A., & McDowell, J J. (2011). A Computational Model of Selection by Consequences: Effects of the changeover delay (COD) on the impulsive behavior of a virtual organism. Poster presented at the 34th Annual Meeting of the Society for the Quantitative Analysis of Behavior, Denver, CO.\",\r\n\r\n        urls: [\r\n            { name: 'SQAB 2011', link: \"https://www.sqab.org/programs/2011.pdf\" },\r\n        ],\r\n        images: [sqab2011],\r\n        notes: 'page 35 of the pdf schedule; abstract must be typed, no copying allowed; 2nd poster session, friday evening',\r\n        abstract: \"Popa & McDowell (2010) showed that a partcular feature of ETBD is computationally equivalent to to the changeover delay (COD) used in experiments with live organisms. McDowell & Popa (2010) suggested that mutation, one of the Darwinian rules implemented in ETBD, is computationally equivalent to impulsivity. The present study clarified how Hamming distances affect ETBD behavior in concurrent schedules, at different mutation rates. The results were qualitatively and quantitatively congruent with those recently reported in the ADHD literature (Taylor et al, 2010): high mutation rates (impulsivity) resulted in low exponents (a) and increased changeover frequency; the maladaptive effects were meliorated by increasing the COD requirement - namely the average Hamming distance between the two target classes.\",\r\n\r\n        keywords: [\"etbd\", \"adhd\", \"impulsivity\", \"cod\", \"hamming\", \"mutation\"],\r\n\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'ABAI 2011',\r\n        iconName: 'ABAI',\r\n        date: \"05/30/2011\",\r\n        type: \"talk\",\r\n        citation:\r\n            \"Popa, A., & McDowell, J J. (2011). A computational Model of selection by consequences: evidence that mutation is computationally equivalent to impulsivity. Paper presented at the 37th Annual Convention of the Association for Behavior Analysis International, Denver, CO.\",\r\n\r\n        images: [abai_sqab_2011_bw],\r\n        urls: [\r\n\r\n            {\r\n                name: \"ABAI 2011\",\r\n                link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=13494&by=ByArea#s445_0\",\r\n            },\r\n\r\n        ],\r\n\r\n        // description: \"We knew that high mutation rates produced sensitivity values similar to those reported in human participants diagnosed with ADHD. We also knew that increasing reinforcement rate, magnitude, or the COD requirement counteracted these effects, also in agreement with the ADHD literature (Kollins, Lane, and Shapiro, 1997; Aase and Sagvolden, 2006; Taylor, Lincoln, and Foster, 2010).\",\r\n        abstract:\r\n            \"... The present experiments systematically investigated the effects of various mutation levels, rates of reinforcement, changeover delay (COD) values, and reinforcers' magnitudes on the behavior of the virtual organism on concurrent RI RI schedules. The purpose was twofold: to clarify the parallel between mutation and impulsivity and to explore methods of counteracting the undesired effects of high mutation rates. The results showed that improved performance in concurrent-schedules performance (e.g. increased sensitivity to reinforcement, reduced rate of switching, etc.) under high levels of mutation is attainable by increasing the rate or magnitude of the reinforcement and/or the COD requirement; the results accurately parallel those reported in the attention deficit/hyperactivity disorder literature (Kollins, Lane, and Shapiro, 1997; Aase and Sagvolden, 2006; Taylor, Lincoln, and Foster, 2010), indicating that mutation is the computational equivalent of impulsivity.\",\r\n\r\n        keywords: [\"etbd\", \"impulsivity\", \"cod\", \"mutation\", 'matching', 'hamming', 'adhd',],\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'JEAB 2012',\r\n        iconName: 'JEAB',\r\n        type: \"journal article\",\r\n        date: \"03/01/2012\",\r\n        citation:\r\n            \"McDowell, J, J., Popa, A., & Calvin, N. (2012). Selection dynamics in joint matching to rate and magnitude of reinforcement. <i>Journal of the Experimental Analysis of Behavior</i>, <i>98</i>, 199-212.\",\r\n\r\n        images: [jeab_2012_abstract],\r\n\r\n        urls: [\r\n            {\r\n                name: \"NCBI/Pubmed\",\r\n                link: \"http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3449856/\",\r\n            },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/231176507_Selection_dynamics_in_joint_matching_to_rate_and_magnitude_of_reinforcement\",\r\n            },\r\n        ],\r\n\r\n        description: \"We ran ETBD in concurrent schedules where both the rate and magnitude of reinforcement were varied. The resulting patterns were described well by an extended version of the power function matching equation - a mathematical model that expresses behavior allocation as a joint function of reinforcement rate ratios and reinforcer magnitude ratios.\",\r\n\r\n        abstract:\r\n            \"Virtual organisms animated by a selectionist theory of behavior dynamics worked on concurrent random interval schedules where both the rate and magnitude of reinforcement were varied. The selectionist theory consists of a set of simple rules of selection, recombination, and mutation that act on a population of potential behaviors by means of a genetic algorithm. An extension of the power function matching equation, which expresses behavior allocation as a joint function of exponentiated reinforcement rate and reinforcer magnitude ratios, was fitted to the virtual organisms’ data, and over a range of moderate mutation rates was found to provide an excellent description of their behavior without residual trends.\",\r\n\r\n        keywords: [\"etbd\", 'matching', 'emergence'],\r\n\r\n    },\r\n\r\n\r\n    {\r\n        name: 'ABAI 2012',\r\n        iconName: 'ABAI',\r\n        date: \"05/26/2012\",\r\n        type: \"talk\",\r\n\r\n        citation:\r\n            \"Popa, A., & McDowell, J J. (2012). The computational theory of behavior dynamics predicts effects of COD on behavioral variability: evidence from experiments with human participants. Paper presented at the 38th Annual Convention of the Association for Behavior Analysis International, Seattle, WA.\",\r\n\r\n        urls: [\r\n            {\r\n                name: 'ABAI 2012',\r\n                link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=17728&by=ByArea#s28_0\",\r\n            },\r\n            {\r\n                name: \"ResearchGate\",\r\n                link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=17728&by=ByArea#s28_0\",\r\n            },\r\n        ],\r\n        abstract:\r\n            \"Popa and McDowell (2010) showed that the Hamming Distance, a particular mathematical feature of McDowell’s Evolutionary Theory of Behavior Dynamics (ETBD; McDowell, 2004, 2010) is computationally equivalent to the changeover delay (COD; Findley, 1954) used in experiments with live organisms. Popa and McDowell (2011) suggested that increasing the computational COD requirement reduces behavioral variability in a virtual organism animated by the ETBD. The present paper further investigated a wide range of computational COD values and used the results to formulate predictions about the effects of COD requirements on the behavioral variability of humans in concurrent-schedules environments. As predicted by ETBD, the rate of switching between alternatives was systematically decreased by increased COD requirements. These results provide further support for the ETBD as a valid account of behavior dynamics, showing that it is not only able to produce outcomes congruent with known behavior statics (the Matching Law; McDowell & Popa, 2010), but it can also formulate predictions about the behavior of live organisms. Moreover, these findings suggest that high behavioral variability may be a natural outcome of the selection pressure exerted by unstructured environments. The implications for ADHD-symptoms are discussed within the framework provided by previous research (Neuringer, 2010; Taylor et al, 2010).\",\r\n\r\n        keywords: [\"etbd\", \"impulsivity\", \"cod\", \"mutation\", 'matching', 'hamming', 'adhd', 'human research', 'fast matching'],\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'ABAI 2013',\r\n        iconName: 'ABAI',\r\n        date: \"05/26/2013\",\r\n        type: \"talk\",\r\n\r\n        citation:\r\n            \"Popa, A., Calvin, N., & McDowell, J J. (2013). Complexity, emergence, and the behavior of organisms. Paper presented at the 39th Annual Convention of the Association for Behavior Analysis International, Minneapolis, MN.\",\r\n        urls: [\r\n            {\r\n                name: 'ABAI 2013',\r\n                link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=28880&by=ByArea#s166_0\",\r\n            },\r\n        ],\r\n        abstract: \"Complexity science is rapidly becoming the 'spoiled child' of the scientific community, promising to dissolve interdisciplinary barriers and open a new chapter in our understanding of the natural world (Mitchell, 2009). Complex systems are dynamic, adaptive systems, composed from a large number of interconnected parts, and governed by simple, low-level rules that can give rise to novel, emergent features or behaviors. High-level, emergent properties are not readily reducible to the rules that produce them. They appear to be stand-alone entities and behavioral and psychological sciences have traditionally studied them as such (e.g. impact of divorce on children's risk of depression). However, if they are emergent features of a dynamic system, the relations between them cannot, in principle, be causal (divorce → depression). Their co-occurrence is incidental, both being produced by underlying simple rules reiterated over long periods of time. In order to fully understand an emergent property, one must identify the rules that govern the system and the specific conditions under which the property emerges (McDowell & Popa, 2009). This implies a complete shift in focus, from high-level properties to low-level rules and characteristics, opening a fascinating doorway for scholars interested in the behavior of organisms.\",\r\n\r\n        keywords: [\"etbd\", \"impulsivity\", \"cod\", \"mutation\", 'matching', 'hamming', 'adhd', 'emergence'],\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'PHD 2013',\r\n        iconName: 'PhD',\r\n        type: \"doctoral dissertation\",\r\n        date: \"12/24/2013\",\r\n        keywords: [\"ETBD\", \"ADHD\", \"Hamming\", \"Changeover Delay\", \"mutation rate\", \"reinforcement rate\", \"reinforcement magnitude\", \"fast matching\"],\r\n        citation:\r\n            \"Popa (2013). An evolutionary theory of behavior dynamics: complexity, darwinism, and the emergence of high-level phenotypes. <b>Doctoral Dissertation</b>. Retrieved:<br/> https://etd.library.emory.edu/concern/etds/9880vr10s?locale=en. ISBNxxxxxxxxxxxxxxx\",\r\n        role: \"PRINCIPAL INVESTIGATOR\",\r\n        images: [\r\n            phd_committee,\r\n            etbd_adhd_slide_1,\r\n            phd_etbd_humans_1,\r\n            phd_etbd_humans_2,\r\n        ],\r\n        urls: [\r\n            {\r\n                name: \"Emory ETD\",\r\n                link: \"https://etd.library.emory.edu/concern/etds/9880vr10s?locale=en\",\r\n            },\r\n            // { name: \"ProQuest\", link: \"xxxx\" },\r\n            // { name: \"Study info\", link: \"gDrive\" },\r\n        ],\r\n\r\n\r\n\r\n        abstract: \"The main purpose of this project was to explore the effects of mutation and the environment's value and conduciveness on various dimensions of behavioral variability, in continuous choice environments. Secondly, qualitative predictions made by the Evolutionary Theory about the effects of changeover delays (COD) on behavior variability were verified against the behavior of college students in equivalent environments. The continuous choice behavior of college students was correctly predicted on eight out of eight behavioral dimensions. Thirdly, low-level characteristics of students' continuous choice behavior were compared with traditional measures of impulsivity and sustained attention, in an effort to investigate the potential equivalence between mutation and a property of the nervous system that produces impulsivity-like symptoms. The results were inconclusive, likely due to a lack of extreme impulsivity scores in the human sample. The findings presented in this paper provided significant additional evidence for the selectionist account as a valid mechanism of behavior change. In addition, the knowledge generated by the Evolutionary Theory provided important insights about clinically-relevant phenomena, such as disordered variability (or impulsivity) and raise the possibility of using the theory as a platform for simulating the emergence of specific high-level phenotypes. These implications appear even more fascinating considering that a connection with mental health was not explicitly sought, nor can it be traced to the inner-workings of the theory. This challenges our current understanding of mental illness and provides a new way of thinking about the evolution of behavioral repertoires and their emergent high-level characteristics.\",\r\n\r\n        keywords: [\"etbd\", \"impulsivity\", \"cod\", \"mutation\", 'matching', 'hamming', 'adhd', 'emergence'],\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'ABAI 2014',\r\n        iconName: 'ABAI',\r\n        date: \"05/24/2014\",\r\n        type: \"talk\",\r\n        keywords: [\"ABAI 2014\", \"causation\", \"complexity\"],\r\n        citation:\r\n            \"Popa, A., Calvin, N., & McDowell, J J. (2014). Multifinality and equifinality in an evolutionary theory of behavior dynamics. Paper presented at the 40th Annual Convention of the Association for Behavior Analysis International, Chicago, IL.\",\r\n        urls: [\r\n            {\r\n                name: 'ABAI 2014',\r\n                link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=40586&by=ByArea#s30_0\",\r\n            },\r\n        ],\r\n        abstract:\r\n            \"Skinner (1981) suggested that natural selection operates not only at the biological level, but is also responsible for the evolution of behavioral repertoires throughout an organism’s lifetime. McDowell (2004) implemented the selectionist account in a computational theory of behavior dynamics. The theory causes a population of behaviors to evolve through time under the selection pressure exerted by the environment. It has been tested under a variety of conditions and the emergent outcomes were repeatedly  shown to be qualitatively and quantitatively indistinguishable from those displayed by live organisms (McDowell, in press). The present project investigated the effects of various environmental variables (e.g. reward magnitude) on the behavior variability of virtual organisms characterized by various mutation rates. High mutation rates produced behavioral constellations similar to those displayed by ADHD-diagnosed children. These effects were counteracted by arranging richer or more structured environments (higher changeover delay). Interestingly, arranging low-value environments caused organisms characterized by low mutation rates to display abnormally high levels of variability. These findings suggest that similar high-level phenotypes such ADHD may be caused by various combinations of organismic and environmental features (equifinality), during a dynamic process governed by Darwinian forces.\",\r\n\r\n        keywords: [\"etbd\", \"impulsivity\", \"cod\", \"mutation\", 'matching', 'hamming', 'adhd', 'scienta nova'],\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'Darwin 2015',\r\n        iconName: 'Darwin',\r\n        date: \"02/13/2015\",\r\n        type: \"invited talk\",\r\n        keywords: [\"Darwin2015\", \"invited talk\", \"conference\"],\r\n        citation:\r\n            \"Popa, A. (2015). Towards an Evolutionary Account for the Dynamics of Cognizant Systems. Darwin Day Lecture Series, Georgia State University, Atlanta, GA.\",\r\n        images: [darwin_essentialism_psych],\r\n        urls: [\r\n            //{ name: \"\", link: \"\" },\r\n        ],\r\n        description: \"Before Darwin, biology was dominated by essentialism,  the view that each species has an immutable prototype, an ideal form from which all individuals depart to some extent. Darwins insight, now known as population thinking, was that ideal forms do not exist and averages are illusions. The phenotipic diversity in a population is not imperfection, or decay, but its natural state. We have a similar problem in psychology.\",\r\n        keywords: [\"etbd\", 'population thinking', 'emergence', 'psychodiversity', 'scienta nova'],\r\n    },\r\n\r\n\r\n\r\n    {\r\n        name: 'Darwin 2016',\r\n        iconName: 'Darwin',\r\n        title: \"Think populations, think psychodiversity\",\r\n        date: \"02/09/2016\",\r\n        type: \"invited talk\",\r\n        citation:\r\n            \"Popa, A. (2016). Population Thinking, Psychodiversity, and Human Development. Darwin Day Lecture Series, Georgia State University, Atlanta, GA.\",\r\n        images: [\r\n            darwin_2016_slide_06,\r\n        ],\r\n        urls: [\r\n            //{ name: \"\", link: \"\" },\r\n        ],\r\n        description: \"Darwin proposed that the biodiversity we observe today emerged gradually, from a common root, by means of natural selection: when individuals reproduce, they pass on their genes. Those who reproduce more often will pass on more copies of their genetic material. Adaptation, therefore, is a byproduct of sexual reproduction.\",\r\n        keywords: [\"etbd\", 'population thinking', 'emergence', 'psychodiversity', 'scienta nova'],\r\n\r\n    },\r\n\r\n\r\n\r\n    {\r\n        name: 'JEAB 2016',\r\n        iconName: 'JEAB',\r\n        date: \"03/01/2016\",\r\n        type: \"journal article\",\r\n        citation:\r\n            \"Popa, A., & McDowell, J, J. (2016). Behavioral Variability in an Evolutionary Theory of Behavior Dynamics. The Journal of the Experimental Analysis of Behavior, 105 (2), 270-290.\",\r\n        images: [],\r\n        urls: [\r\n            {\r\n                name: \"JEAB\",\r\n                link: \"http://onlinelibrary.wiley.com/doi/10.1002/jeab.199/abstract\",\r\n            },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/299382923_Behavioral_variability_in_an_evolutionary_theory_of_behavior_dynamics\",\r\n            },\r\n        ],\r\n\r\n        abstract:\r\n            \"McDowell’s evolutionary theory of behavior dynamics (McDowell, 2004) instantiates populations of behaviors(abstractly represented by integers) that evolve under the selection pressure of the environment in the form of positive reinforcement.Each generation gives rise to the next via low-level Darwinian processes of selection, recombination, and mutation.The emergent patterns can be analyzed and compared to those produced by biological organisms.The purpose of this project was to explore the effects of high mutation rates on behavioral variability in environments that arranged different reinforcer rates and magnitudes.Behavioral variability increased with the rate of mutation. High reinforcer rates and magnitudes reduced these effects; low reinforcer rates and magnitudes augmented them. These results are in agreement with live - organism research on behavioral variability. Various combinations of mutation rates, reinforcer rates, and reinforcer magnitudes produced similar high-level outcomes(equifinality).These findings suggest that the independent variables that describe an experimental condition interact; that is, they do not influence behavior independently.These conclusions have implications for the interpretation of high levels of variability, mathematical undermatching, and the matching theory. The last part of the discussion centers on a potential biological counterpart for the rate of mutation, namely spontaneous fluctuations in the brain’s default mode network.\",\r\n        keywords: ['ETBD', 'ADHD', 'behavior variablity', 'reinforcement learning', 'DMN', 'default mode network', 'spontaneous fluctuations', 'emergence', 'complexity', 'sustained behavior'],\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n    /* \r\n    'SPARC CONFERENCES, ALL OF THEM'\r\n     */\r\n\r\n\r\n    // ============================================================   SPARC\r\n    // {\r\n    //     id: \"[20]\",\r\n    //     authors: \"<sup>U</sup>Adekunle & Popa (2016)\",\r\n    //     type: 'research poster',\r\n    //     keywords: \"keywords\",\r\n    //     citation: \"<sup>U</sup>Adekunle, O. & Popa, A. (2016). <i>Higher Payoff or More Options? Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n    // },\r\n\r\n\r\n    // {\r\n    //     id: \"[21]\",\r\n    //     authors: \"<sup>U</sup>Booher & Popa (2016)\",\r\n    //     type: 'research poster',\r\n    //     keywords: \"keywords\",\r\n    //     citation: \"<sup>U</sup>Booher, C. & Popa, A. (2016). <i>Choice Behavior in Unsignaled Environments With and Without Immediate Negative Feedback. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n    // },\r\n\r\n\r\n    // {\r\n    //     id: \"[22]\",\r\n    //     authors: \"<sup>U</sup>Forbes & Popa (2016)\",\r\n    //     type: 'research poster',\r\n    //     citation: \"<sup>U</sup>Forbes, V., & Popa, A. (2016). <i>Human Choice Behaviors Before and After Extinction. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n    //     keywords: \"keywords\",\r\n    // },\r\n\r\n    // {\r\n    //     id: \"[17]\",\r\n    //     authors: \"<sup>U</sup>Grissom & Popa (2016)\",\r\n    //     type: 'talk',\r\n    //     keywords: \"keywords\",\r\n    //     citation: \"<sup>U</sup>Grissom, M. K., & Popa, A. (2016). <i>Effects of Extinction on Human Escape Behavior. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n    // },\r\n\r\n\r\n    // {\r\n    //     id: \"[18]\",\r\n    //     authors: \"<sup>U</sup>Shen & Popa (2016)\",\r\n    //     type: 'talk',\r\n    //     keywords: \"keywords\",\r\n    //     citation: \"<sup>U</sup>Shen, R. & Popa, A. (2016). <i>Is Competition Sufficient to Increase the Motivation to “Do Well”</i>? Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n    // },\r\n\r\n    // {\r\n    //     id: \"[23]\",\r\n    //     authors: \"<sup>U</sup>Tang & Popa (2016)\",\r\n    //     type: 'research poster',\r\n    //     citation: \"<sup>U</sup>Tang, X., & Popa, A. (2016). <i>Choice Behavior in Low Discriminability Conditions: Effects of the Operant Class Size. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n    //     keywords: \"keywords\",\r\n    // },\r\n\r\n    // {\r\n    //     id: \"[19]\",\r\n    //     authors: \"<sup>U</sup>Waithe & Popa (2016)\",\r\n    //     type: 'paper',\r\n    //     keywords: \"keywords\",\r\n    //     citation: \"<sup>U</sup>Waithe, O. Y., & Popa, A. (2016). <i>The Effects of Imagery on Psychological Discomfort</i>. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n    // },\r\n\r\n    // ============================================================\r\n\r\n\r\n\r\n    // ============================================================   SPARC\r\n    {\r\n        name: 'spark1',\r\n        iconName: 'SpARC',\r\n        authors: \"<sup>U</sup>Adekunle & Popa (2016)\",\r\n        type: 'research poster',\r\n        citation: \"<sup>U</sup>Adekunle, O. & Popa, A. (2016). Higher Payoff or More Options? Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        urls: [\r\n            { name: \"SpARC\", link: \"https://www.agnesscott.edu/sparc/index.html\" },\r\n            { name: \"SpARC INDEX\", link: \"https://www.agnesscott.edu/sparc/\" },\r\n        ],\r\n        abstract: \"Having multiple options is appealing in our everyday lives, arguably because it allows for a flexible future. Some studies, however, showed that people may be less satisfied when presented with multiple options. This project investigated whether people preferred to keep their options open (so to speak) by arranging an asymmetrical, continuous choice environment. It was hypothesized that people will work to keep their options open even if it limits acquiring the maximum number of points. Seven Agnes Scott students responded on concurrent Random Interval (RI) schedules of reinforcement. The overall rate of reinforcement was constant, but one target class delivered higher-magnitude reinforcers (5 points vs. 1 point). However, the target class with the lower reinforcer magnitude (1 reinforcer = 1 point) shrank in size when not selected for ten or more consecutive seconds. Every ten-second interval would reduce its size by one fourth of its original size and every new response would increase its size by one fourth (or, if at original size, reset the ten-second interval). Results showed preference for the shrinking class (b ~ 0.9), even though reinforcer magnitude on this class was five times smaller. This suggests that participants preferred to keep their options open, even if meant acquiring a lower overall payoff.\",\r\n        keywords: ['fast matching', 'human research', 'agnes scott college',],\r\n\r\n    },\r\n\r\n\r\n    {\r\n        name: 'spark2',\r\n        iconName: 'SpARC',\r\n        authors: \"<sup>U</sup>Booher & Popa (2016)\",\r\n        type: 'research poster',\r\n        citation: \"<sup>U</sup>Booher, C. & Popa, A. (2016). Choice Behavior in Unsignaled Environments With and Without Immediate Negative Feedback. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        abstract: \"The purpose of this study was to explore properties of choice behavior when the target classes that have the potential for reinforcement were hidden. Twenty-four Agnes Scott students were randomly assigned to two experimental conditions. In one condition an unpleasant sound was made contingent on each response that occurred outside a target region. In the second condition, extraneous responses were not signaled. In both conditions, reinforced responses resulted in one point and a pleasant sound. Target responses that were not reinforced were never signaled. We hypothesized that the condition with feedback 1) will elicit higher accuracy in locating the target classes and 2) will produce lower levels of behavioral variability. Preliminary results appear to confirm the hypotheses.\",\r\n        keywords: ['fast matching', 'human research', 'agnes scott college',],\r\n\r\n    },\r\n\r\n\r\n    {\r\n        name: 'spark3',\r\n        iconName: 'SpARC',\r\n        authors: \"<sup>U</sup>Forbes & Popa (2016)\",\r\n        type: 'research poster',\r\n        citation: \"<sup>U</sup>Forbes, V., & Popa, A. (2016). Human Choice Behaviors Before and After Extinction. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        abstract:\r\n            \"One way to eliminate behaviors form an organism’s repertoire is to identify and remove the reinforcing contingencies that maintain them. This procedure is referred to as extinction. Extinction is known to be accompanied by a short increase in behavior frequency, intensity, and variability. In this project, we examined various properties of choice behavior before and after extinction was implemented. Preliminary results showed that the frequency of both target and extraneous (non-target) responses increased during the extinction phase. The effect was more pronounced for extraneous responses, possibly for their exploratory potential. Future analysis will focus on various measures of variability before and after reinforcement is withdrawn.\",\r\n        keywords: ['fast matching', 'human research', 'agnes scott college',],\r\n\r\n    },\r\n\r\n    {\r\n        name: 'spark4',\r\n        iconName: 'SpARC',\r\n        authors: \"<sup>U</sup>Grissom & Popa (2016)\",\r\n        type: 'talk',\r\n        citation: \"<sup>U</sup>Grissom, M. K., & Popa, A. (2016). Effects of Extinction on Human Escape Behavior. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        abstract: \"The purpose of this study was to explore the effects of negative reinforcement on the frequency and variability of continuous choice behavior. The concurrent-schedule procedure was implemented via a computer program developed by the second author. Participants began the experiment with a fixed number of points (e.g., 1,000). As time passed, the number of points decreases at a rate of 4 points per second. Responses (mouse clicks) on two target regions stopped the loss of points for a small amount of time (e.g., 4 seconds). The first specific aim was to verify if escape behavior (stop the loss of points) become avoidance behavior (prevent loss of points). The second was to observe if avoidance behavior continued when it was no longer necessary. The third specific aim was to verify to what extent responding continued when it was no longer adaptive (i.e., when loss of points could not be avoided). The fourth specific aim was to observe if responding resurged once its adaptive function - preventing loss of points - was restored. The fifth aim was to explore possible relations between specific, low-level properties of choice behavior (e.g., bout frequency, variability in inter-response intervals) and personality traits (e.g., conscientiousness).\",\r\n        keywords: ['fast matching', 'human research', 'agnes scott college',],\r\n\r\n    },\r\n\r\n\r\n    {\r\n        name: 'spark5',\r\n        iconName: 'SpARC',\r\n        authors: \"<sup>U</sup>Shen & Popa (2016)\",\r\n        type: 'talk',\r\n        citation: \"<sup>U</sup>Shen, R. & Popa, A. (2016). Is Competition Sufficient to Increase the Motivation to “Do Well”? Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        abstract: \"In concurrent schedule procedures, humans exhibit lower sensitivity to reinforcement than non-humans (McDowell, 2013), possibly because points may not be as reinforcing for humans as food is for non- humans. We hypothesized that an environment that creates the impression of  competition may increase the reinforcing value of points. Two groups of participants (competition vs. non-competition) responded for 18 minutes in a continuous-choice procedure that arranged concurrent, independent Random Interval (RI) schedules; the target classes were invisible to both groups. Preliminary analyses showed that sensitivity to reinforcement, contrary to our hypothesis, was not noticeably higher in the competition condition. These results showed that competition by itself may not be sufficient to increase motivation. Several potential explanations are discussed, including the perceived relevance (or lack thereof) of the activity.\",\r\n        keywords: ['fast matching', 'human research', 'agnes scott college',],\r\n\r\n    },\r\n\r\n    {\r\n        name: 'spark6',\r\n        iconName: 'SpARC',\r\n\r\n        authors: \"<sup>U</sup>Tang & Popa (2016)\",\r\n        type: 'research poster',\r\n        citation: \"<sup>U</sup>Tang, X., & Popa, A. (2016). Choice behavior in Low discriminability conditions: effects of the operant class size. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        abstract: \"The purpose of the study was to explore basic properties of choice behavior when the target classes varied in size, in low-discriminability conditions (invisible target classes). 24 Agnes Scott students responded in environments that arranged symmetrical, concurrent, Random Interval (RI) schedules of reinforcement. The target regions (or classes) were hidden. In one condition (N = 12) the target classes were small (about 4% of the experimental area). In the second condition the target classes occupied approximately 20% of the experimental area. Sensitivity to reinforcement was larger when the classes were small ( a ~ 0.70) than when they were large ( a ~ 0.19). The same was true for spatial variability, but not for temporal variability, which was larger when the target classes were small.\",\r\n        keywords: ['fast matching', 'human research', 'agnes scott college',],\r\n\r\n    },\r\n\r\n    {\r\n        name: 'spark7',\r\n        iconName: 'SpARC',\r\n\r\n        authors: \"<sup>U</sup>Waithe & Popa (2016)\",\r\n        type: 'talk',\r\n        citation: \"<sup>U</sup>Waithe, O. Y., & Popa, A. (2016). The Effects of Imagery on Psychological Discomfort. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n        urls: [\r\n            { name: \"SpARC\", link: \"https://www.agnesscott.edu/sparc/index.html\" },\r\n            { name: \"SpARC INDEX\", link: \"https://www.agnesscott.edu/sparc/\" },\r\n        ],\r\n        abstract: \"This study examines the effectiveness of art by means of geometric and spatial relations as a means of therapy for anxiety-based disorders. Recent studies on the nature of trypophobia (fear of holes) suggest that specific geometrical arrangements, such as high contrast midrange spatial frequency images, may automatically trigger feelings of discomfort (Cole & Wilkins, 2013). The purpose of this study is twofold: to replicate the findings reported by Cole and Wilkins (2013) and to explore the extent to which the phenomenon can be reversed. Participants will be exposed to similar stimuli as those used by Cole & Wilkins (2013) via a computer program. They will be asked to rate their level of discomfort and provide a short explanation of why. They will then be asked to manipulate the images using (i.e., re-arrange the elements) using the mouse until the level of discomfort decreases. Each resulting image, as well as the stroke paths, will be recorded and analyzed for concurrences of basic geometric shapes and/or arrangements that help reduce anxiety. The overarching goal is to be able to produce personalized visual stimuli that reduce anxiety, thus increasing the level of personalization and effectiveness of therapeutic approaches to anxiety.\",\r\n        keywords: ['fast matching', 'human research', 'agnes scott college',],\r\n\r\n    },\r\n\r\n    // ============================================================\r\n\r\n\r\n\r\n\r\n\r\n    // {\r\n    //     id: 22,\r\n    //     title: \"Fast Matching procedures adapted \",\r\n    //     date: \"04/01/2016\",\r\n    //     type: \"research study, human choice\",\r\n    //     time: \"04/01/2016\",\r\n    //     role: \"STUDY COORDINATOR\",\r\n    //     authors: [\r\n    //         \"<sup>U</sup>Adekunle & Popa (2016)\",\r\n    //         \"<sup>U</sup>Booher & Popa (2016)\",\r\n    //         \"<sup>U</sup>Forbes & Popa (2016)\",\r\n    //         \"<sup>U</sup>Grissom & Popa (2016)\",\r\n    //         \"<sup>U</sup>Shen & Popa (2016)\",\r\n    //         \"<sup>U</sup>Tang & Popa (2016)\",\r\n    //         \"<sup>U</sup>Waithe & Popa (2016)\",\r\n    //     ],\r\n    //     keywords: [\"Agnes Scott College\"],\r\n    //     tags: [\"VB.Net\"],\r\n    //     description: \"\",\r\n    //     // description:\r\n    //     //   \"My second opportunity to run my own lab. ... (Senior Seminar, Choice and Preference) ... Stimulus control and negative reinforcement in humans. ...The students from my senior seminar on The Dynamics of Choice and Preference contributed three talks and four posters to the Spring Annual Research Conference. Managing this enterprise would have been challenging at best without my research assistants - Alessandra Xi Zhang and Olivia Zivot, to whom I am grateful.\",\r\n    //     img: [\r\n    //         // SpARC_01_Adekunle,\r\n    //         // SpARC_02_1_Tang,\r\n    //         // SpARC_06_1_Adekunle,\r\n    //         // SpARC_05_1_Forbes,\r\n    //         // SpARC_07_1_Shen,\r\n    //         // SpARC_10_1_Adekunle,\r\n    //         // SpARC_11_1_Shen,\r\n    //         // SpARC_12_1_Booher,\r\n    //         // SpARC_14_1_Shen,\r\n    //         // SpARC_15_1_Waithe,\r\n    //         // SpARC_16_1_Grissom,\r\n    //         // placeholder_blank\r\n    //     ],\r\n    //     urls: [\r\n    //         { name: \"SpARC\", link: \"https://www.agnesscott.edu/sparc/index.html\" },\r\n    //         { name: \"SpARC INDEX\", link: \"https://www.agnesscott.edu/sparc/\" },\r\n    //     ],\r\n    //     citation:\r\n    //         \"The Spring Annual Research Conference is held at Agnes Scott each April to provide students and faculty with an opportunity to present their work to the campus community. As an interdisciplinary conference, SpARC fosters essential connections across academic disciplines and encourages an ongoing dialogue between the liberal arts and sciences.\",\r\n    //     abstract: \"The Spring Annual Research Conference is held at Agnes Scott each April to provide students and faculty with an opportunity to present their work to the campus community.As an interdisciplinary conference, SpARC fosters essential connections across academic disciplines and encourages an ongoing dialogue between the liberal arts and sciences. My mentees (bold font) and I contributed five (5) posters and three (3) talks, counting towards ~15% of all research projects presented at SpARC 2016. Note that all eight were novel contributions to the field. I would like to take this opportunity to thank my former students and research assistants, AlessandraXi Zhangand Olivia Zivot. Without their contribution, managing this enterprise would have been challenging at best.\",\r\n    //     // citations:\r\n    //     //     \"Adekunle, O. & Popa, A. (2016). Higher Payoff or More Options? Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA. <br/> Booher, C. & Popa, A. (2016). Choice Behavior in Unsignaled Environments With and Without Immediate Negative Feedback. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Forbes, V., & Popa, A. (2016). Human Choice Behaviors Before and After Extinction. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Grissom, M. K., & Popa, A. (2016). Effects of Extinction on Human Escape Behavior. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Shen, R. & Popa, A. (2016). Is Competition Sufficient to Increase the Motivation to “Do Well”? Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Tang, X., & Popa, A. (2016). Choice Behavior in Low Discriminability Conditions: Effects of the Operant Class Size. Poster presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.<br/> Waithe, O. Y., & Popa, A. (2016). The Effects of Imagery on Psychological Discomfort. Paper presented at the Spring Annual Research Conference, Agnes Scott College, Decatur, GA.\",\r\n    // },\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'WCALB 2017',\r\n        iconName: 'WCALB',\r\n\r\n        date: \"02/19/2017\",\r\n        type: \"talk\",\r\n\r\n        citation:\r\n            \"Popa, A. & Grissom, M. K. (2017). Extinction-Induced Variability on Negatively Reinforced Human Behavior. Paper presented at the Winter Conference on Animal Learning & Behavior, Park City, UT.\",\r\n\r\n        // fig_captions: [\r\n        //     \"The figure illustrates the participants’ visual experience during the experiment. The computer screen was separated in two: a narrow ribbon at the top of the screen and a large experimental area. Both regions were 1366 pixels wide. The ribbon, colored dark blue (RGB 0, 0, 100), was 50 pixels high, displayed the number of points, and included a progress bar that began filled and emptied as time passed. The experimental area was 718 pixels high (768 minus 50) and 1366 pixels wide. Its background color was “honeydew” (RGB 240, 255, 240). The two target regions were positioned at its center. Each target region was a square with side 200 pixels. The distance between them was 100 pixels. The Cartesian coordinates of their corners are listed in the figure.\",\r\n        //     \"The figure shows complete cumulative records for the only two participants who stopped responding during extinction. The two solid lines represent target responses; the dotted line represents extraneous responses.S07 stopped responding 15 seconds before the end of the extinction phase and re-engaged 15 seconds into Phase 5 (30 seconds pause). S14 stopped responding 55 seconds before the end of the extinction phase; the pause was terminated by one response that occurred immediately before the beginning of Phase V.\",\r\n        //     \"The figure shows the distribution of responses for participants P08 (top panel) and P09 (bottom panel), who exhibited the highest frequency of extraneous responses during extinction (BE/min = 14.3 and 36.3, respectively). The empty circles indicate responses that occurred in Phases 1, 2, 3, and 5, combined; the dark-filled circles indicate responses that occurred during extinction.\",\r\n        // ],\r\n        images: [wcalb2017_extinction08],\r\n        urls: [\r\n            {\r\n                name: \"WCALB 2017\",\r\n                link: \"https://static1.squarespace.com/static/57b732f259cc68697145ea01/t/5b7dbd231ae6cf8700f3d604/1534967075831/Past+Programs+2017.pdf\",\r\n            },\r\n        ],\r\n\r\n\r\n        abstract:\r\n            \"When a previously reinforced behavior suddenly becomes ineffective, it will eventually disappear from an organism’s repertoire. Its extinction, however, is often preceded by an extinction burst: a short-lived period of frenetic activity, during which the targeted behavior increases in frequency, intensity, and variability, and often accompanied by the presence of novel behaviors. The effects of extinction on behavioral variability have been mostly investigated in the context of positively reinforced behaviors. In this paper, we explored its effects on the frequency and variability of negatively reinforced human behavior. Extinction caused a ten-fold increase in behavior frequency, high changeover frequency, a surge in the frequency of extraneous behavior, and higher inter-response variability, in both time and space. These results suggested, among other things, that negatively reinforced behavior was inherently variable, that behavioral novelty observed during extinction may have had little adaptive potential (if any), and that negative reinforcement may have stifled exploratory tendencies.\",\r\n\r\n        keywords: ['fast matching', 'human research', 'agnes scott college', 'wcalb',],\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'ABAI 2017',\r\n        iconName: 'ABAI',\r\n\r\n        date: \"05/28/2017\",\r\n        type: \"talk\",\r\n        keywords: [\"keywords\"],\r\n        citation:\r\n            \"Popa, A., (2017). Towards a Dynamic Account of Human Development. Paper presented at the 43rd Annual Convention of the Association for Behavior Analysis International, Denver, CO.\",\r\n\r\n        images: [abai_2017_5, abai_2017_6],\r\n        urls: [\r\n            {\r\n                name: \"ABAI 2017\",\r\n                link: \"https://www.abainternational.org/events/program-details/event-detail.aspx?sid=53139&by=ByArea#s196_0\",\r\n            },\r\n            {\r\n                name: \"Conference schedule\",\r\n                link: \"https://www.abainternational.org/events/annual-2017.aspx\",\r\n            },\r\n        ],\r\n\r\n\r\n        abstract:\r\n            \"The biopsychosocial model acknowledges that high-level phenotypes (e.g., impulsivity, good at math, etc.) are multiply-caused by a plethora of contributing, interacting factors, such as specific genetic configurations, socio-economic status, culture, ethnicity, gender, and so on.  However, the model does not explain how these variables interact with each other or how, exactly, they contribute to a specific outcome. I submit to the reader a potential explanation. Drawing on theoretical advancements from the field of complex systems and on computational research on the dynamics of behavioral repertoires (McDowell, 2013; Popa, 2013; Popa & McDowell, 2016), the theory discussed here proposes that the interaction between agents and their environment consists of a continuous-choice process during which agents adapt to environmental changes. This process molds an individual’s context (e.g., income, culture, etc.) into robust collections of cognitive, emotional, and behavioral manifestations like “impulsivity”, “authoritative parent”, etc. The factors typically associated with impulsivity (for example) contribute to its emergence indirectly, by altering the relative value of existing options, and, by extension, the moment-to-moment probability of choosing one course of action over another. High-level phenotypes, therefore, cannot be directly explained by the contributing factors themselves, but by the moment-to-moment changes said factors produce in cognition and action.\",\r\n\r\n        keywords: ['population thinking', 'individuality','emergence', 'psychodiversity', 'scienta nova'],\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'PsyArXiv 2019, a',\r\n        iconName: 'PsyArXiv',\r\n\r\n        title: \"The Shape of Will\",\r\n        date: \"09/08/2019\",\r\n        type: \"preprint\",\r\n        skills: ['problem framing', 'problem solving'],\r\n\r\n\r\n        citation:\r\n            \"Popa, Andrei. 2019. Psychology 2.0: The Emergence of Individuality. PsyArXiv. September 8. doi:10.31234/osf.io/m87an.\",\r\n\r\n        //img: [projectPsych],\r\n        images: [change_in_state_2],\r\n        urls: [\r\n            { name: \"PsyArXiv\", link: \"https://psyarxiv.com/m87an/\" },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/335688963_Psychology_20_The_Emergence_of_Individuality\",\r\n            },\r\n        ],\r\n\r\n        description:\r\n            \"Physical forces acting on particles explain how physical systems change over time. Evolutionary forces acting on populations of genomes explain change in the genetic structure of populations across generations. Change in psychological systems - i.e. human development, or learning - is not yet understood. Although dynamic principles have been proposed, their target remained vaguely defined. What are such principles acting on, what kind of empirical transformations do they cause, and how do these transformations explain development?\",\r\n\r\n        abstract:\r\n            \"Physical forces acting on particles explain how physical systems change over time. Evolutionary forces acting on populations of genomes explain change in the genetic structure of populations across generations. Change in psychological systems - i.e. human development, or learning - is not yet understood. Although dynamic principles have been proposed, their target remained vaguely defined. Here I identified their target and I showed how it ties into psychology.\",\r\n\r\n            keywords: ['population thinking', 'individuality','emergence', 'psychodiversity', 'scienta nova'],\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n    {\r\n        name: 'PsyArXiv 2019, b',\r\n        iconName: 'PsyArXiv',\r\n\r\n        title: \"Imperfect Automata\",\r\n        date: \"09/30/2019\",\r\n        type: \"preprint\",\r\n\r\n        tags: [\"Python\", \"Tkinter\"],\r\n\r\n        citation:\r\n            \"Popa, Andrei. 2019. Imperfect Automata: Effects of “mutation” on the Evolution of Automaton 01101110 (rule 110). PsyArXiv. September 30. doi:10.31234/osf.io/wgp4e.\",\r\n\r\n\r\n        img: [projectAutomata1],\r\n        urls: [\r\n            { name: \"PsyArXiv\", link: \"https://psyarxiv.com/wgp4e/\" },\r\n            { name: \"GitHub\", link: \"https://github.com/ap-dev1/automata/\" },\r\n            {\r\n                name: \"ResGate\",\r\n                link: \"https://www.researchgate.net/publication/336143797_Imperfect_Automata_Effects_of_mutation_on_the_evolution_of_automaton_01101110_Rule_110\",\r\n            },\r\n        ],\r\n\r\n        description:\r\n            \"Novelty requires error. Automata are deterministic systems, governed by precise rules. The question examined here was: what if every new cell has a small probability to be written incorrectly, i.e. to mutate from 0 to 1 or viceversa. ... Low mutation probabilities facilitated the emergence of new patterns and structures, disconnected from the initial conditions.\",\r\n        abstract:\r\n            \"Novelty requires error. Automata are deterministic systems, governed by precise rules. The question examined here was: what if every new cell has a small probability to be written incorrectly, i.e. to mutate from 0 to 1 or viceversa. ... Low mutation probabilities facilitated the emergence of new patterns and structures, disconnected from the initial conditions.\",\r\n\r\n            keywords: [\"Wolfram\", \"ETBD\", \"complexity\", \"emergence\", \"Elementary Cellular Automata\", \"cellular automaton\", 'novelty' ],\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n];\r\n\r\nexport default infoCV;\r\n","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\CitationVitae.jsx",["495"],"import \"./cv.sass\"\r\nimport { nanoid } from 'nanoid';\r\nimport { useState } from 'react';\r\nimport { Collapse, Button } from 'react-bootstrap';\r\n// import parse from \"html-react-parser\";\r\n\r\nexport default function CitationVitae(props) {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    return (\r\n\r\n        <>\r\n            <div\r\n                onClick={() => setOpen(!open)}\r\n                aria-controls=\"citation-collapse-text\"\r\n                aria-expanded={open}\r\n                title=\"click to expand\"\r\n                className=\"div-citation\"\r\n                style={{\r\n                    backgroundColor: open ? \"#9ffbf899\" : \"transparent\",\r\n                    //border: open ? \"1px solid #ccc\" : \"0px transparent\",\r\n                    color: open ? \"#000\" : \"#888\",\r\n\r\n                }}\r\n            >\r\n                <p\r\n                    key={nanoid()}\r\n                    className=\"cvCitation\"\r\n                    name={props.contentType}\r\n                    content-type={props.contentType}\r\n                >\r\n                    {props.collapsedTitle}\r\n                </p>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n            <Collapse in={open}>\r\n\r\n                <div\r\n                    id=\"citation-collapse-text\"\r\n                style={{\r\n                    // fontFamily: \"Arial\",\r\n                    // fontSize: \"13px\",\r\n                    // margin: \"0\",\r\n                    // padding: \"0\",\r\n                    // paddingLeft: \"2rem\",\r\n                    // display: \"flex\",\r\n                    // flexDirection: \"column\",\r\n                    // maxWidth: \"450px\",\r\n                    // marginBottom: \"10px\",\r\n                    backgroundColor: \"#fff\"\r\n                }}\r\n                >\r\n                    {props.collapsedText}\r\n\r\n                </div>\r\n\r\n\r\n            </Collapse>\r\n        </>\r\n    );\r\n}\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\ContinuousEducation.jsx",["496"],"import \"./cnt-edu.sass\";\r\nimport React, { Component } from 'react';\r\nimport { nanoid } from \"nanoid\";\r\nimport { Collapse, Button } from 'react-bootstrap';\r\nimport { useState } from 'react';\r\n\r\nimport certificate_python from \"../../assets/stripes/certificate_python.png\";\r\nimport certificate_web_dev from \"../../assets/stripes/certificate_web_dev.png\";\r\nimport certificate_ml from \"../../assets/stripes/certificate_ml_coursera.png\";\r\nimport certificate_django from \"../../assets/stripes/certificate_django.png\";\r\nimport certificate_ds_data_camp from \"../../assets/stripes/certificate_ds_data_camp.png\";\r\nimport certificate_sql from \"../../assets/stripes/certificate_sql.png\";\r\nimport certificate_nlp from \"../../assets/stripes/certificate_sql.png\";\r\nimport certificate_d3_react from \"../../assets/stripes/certificate_sql.png\";\r\n\r\n// import CollapseHook from \"../timeline_files/CollapseHook\";\r\n\r\n\r\nconst certificates = [\r\n    { name: \"D3 with React\", source: \"Udemy\", date: \"12-31-2020\", link: \"https://www.udemy.com/certificate/UC-1a8d660a-bfef-4f05-a54d-2bf3abb00acf/\", img: certificate_d3_react, notes: \"\" },\r\n    { name: \"NLP\", source: \"Udemy\", date: \"06-30-2020\", link: \"https://www.udemy.com/certificate/UC-484a14d9-7ae0-4569-b3eb-606f03649571/\", img: certificate_nlp, notes: \"\" },\r\n    { name: \"Web Development with React and Node\", source: \"Udemy\", date: \"06-30-2020\", link: \"https://www.udemy.com/certificate/UC-9ee6c9ba-94e1-4a02-9d5e-4aee303e5c1a/\", img: certificate_web_dev, notes: \"\" },\r\n    { name: \"Django Bootcamp\", source: \"Udemy\", date: \"06-09-2020\", link: \"https://www.udemy.com/certificate/UC-797bf1ab-2cf1-4823-b226-6dd3e5f0ac79/\", img: certificate_django, notes: \"\" },\r\n    { name: \"Data Science\", source: \"Data Camp\", date: \"2019\", link: \"\", img: certificate_ds_data_camp, notes: \"\" },\r\n\r\n    { name: \"Machine Learning\", source: \"Coursera\", date: \"12/2018\", link: \"coursera.org/verify/UJ88SUYL735J\", img: certificate_ml, notes: \"\" },\r\n\r\n    { name: \"SQL Bootcamp\", source: \"Udemy\", date: \"12/08/2018\", link: \"https://www.udemy.com/certificate/UC-Y3NY4DGH/\", img: certificate_sql, notes: \"\" },\r\n\r\n    { name: \"Python 3 Bootcamp\", source: \"Udemy\", date: \"10-02-2018\", link: \"https://www.udemy.com/certificate/UC-1ZA6WABW/\", img: certificate_python, notes: \"\" },\r\n\r\n]\r\n\r\n\r\nexport default function ContinuousEducation() {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n\r\n    return (\r\n\r\n\r\n        <>\r\n            <Button\r\n                key={nanoid()}\r\n                id='btn-certificates'\r\n                onClick={() => setOpen(!open)}\r\n                aria-controls='div-cnt-edu'\r\n                aria-expanded={open}\r\n                title=\"click to expand\"\r\n            >\r\n                {'Continuous education (2018 - ... )'.toUpperCase()}\r\n\r\n                <span key={nanoid()} >\r\n                    click to expand\r\n                </span>\r\n            </Button>\r\n\r\n            <Collapse in={open}>\r\n                <div id='div-cnt-edu' key={nanoid()} >\r\n                    <div id='div-certificates' key={nanoid()} >\r\n                        {\r\n                            certificates.map((item) => {\r\n                                return (\r\n\r\n                                    <label\r\n                                        key={nanoid()}\r\n                                        title={`${item.source}, ${item.date.slice(-4)}`}\r\n                                    >\r\n                                        {item.name}\r\n                                    </label>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n            </Collapse>\r\n        </>\r\n\r\n\r\n\r\n    );\r\n\r\n};\r\n\r\n\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\vitae\\certificates.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\vitae\\MyVitae.jsx",["497","498"],"\r\nimport \"./cv.sass\";\r\nimport \"./filter-checkbox.sass\";\r\nimport \"../about_files/about.sass\";\r\n\r\nimport infoCV from \"./infoCV\";\r\n\r\nimport React from \"react\";\r\nimport parse from \"html-react-parser\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nimport ContinuousEducation from \"./ContinuousEducation\";\r\n\r\nimport CitationVitae from \"./CitationVitae\";\r\n\r\nimport infoSkills from \"../../DATA/infoSkills\";\r\n\r\nimport Highlighted from \"../abc/Highlighted\";\r\n\r\n\r\n\r\n\r\nconst kws = ['all', 'Matching', 'Hamming', 'ADHD', 'Scienta Nova']\r\n\r\n\r\nexport default class MyVitae extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            searchGreen: \"\",\r\n            displayTypes: [\"Master of Arts\", \"Qualifying Exam\", \"doctoral dissertation\"],\r\n            itemCategory: \"all items\",\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n\r\n    }\r\n\r\n\r\n    handleChange = (e) => {\r\n        // this.setState({checked: !this.state.checked})\r\n        this.setState({\r\n            [e.target.name]: !e.target.checked\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        // --------------------------------------------------------\r\n        var Skills = infoSkills.skills.map((item) => {\r\n            return (\r\n                <label className='lbl-tech-vitae'  key={nanoid()}>\r\n                    {item.name}\r\n                </label >\r\n            )\r\n        })\r\n\r\n        // --------------------------------------------------------\r\n\r\n        // const FilterLabels = kws.forEach((xx) => {\r\n        //     return (\r\n        //         <label>\r\n        //             <input\r\n        //                 type='radio'\r\n        //                 value={xx}\r\n        //                 checked={this.state.itemCategory === xx}\r\n        //                 onChange={(event) => this.setState({ itemCategory: event.target.value.toLowerCase() })}\r\n        //             />\r\n        //             <span>{xx}</span>\r\n        //         </label>\r\n        //     )\r\n        // })\r\n\r\n        // --------------------------------------------\r\n\r\n\r\n        const VitaeEntries = infoCV.map((item) => {\r\n\r\n            if (this.state.itemCategory !== 'all items') {\r\n                if (item.keywords.includes(this.state.itemCategory.toLowerCase()) === false)\r\n                    return null\r\n            }\r\n\r\n            // let Keywords = item.keywords.map((kw) => {\r\n            //     return (\r\n            //         <label\r\n            //             style={{\r\n            //                 padding: \"2px 6px\",\r\n            //                 margin: \"1px 4px\",\r\n            //                 border: \"1px solid #149da799\",\r\n            //                 border: \"1px solid teal\",\r\n            //                 color: \"teal\",\r\n            //                 borderRadius: \"3px\",\r\n            //             }}\r\n            //         >\r\n            //             {kw}\r\n            //         </label>\r\n            //     )\r\n            // })\r\n\r\n\r\n            let Urls = null\r\n\r\n            if (item.urls) {\r\n\r\n                Urls = item.urls.map((url) => {\r\n                    return (\r\n                        <a\r\n                            style={{\r\n                                marginBottom: \"5px\",\r\n                                marginLeft: \"10px\",\r\n                                fontSize: \".7rem\",\r\n                                textDecoration: \"none\",\r\n                                wordWrap: 'break-word',\r\n                                maxWidth: \"100%\"\r\n\r\n                            }}\r\n                            key={nanoid()}\r\n                            href={url.link}\r\n                        >\r\n                            {url.link}\r\n                        </a>\r\n                    )\r\n                })\r\n            }\r\n\r\n\r\n\r\n\r\n            let Abstract = item.abstract ? parse(item.abstract) : parse(item.description)\r\n\r\n            let HighlightedAbstract = <Highlighted\r\n                text={item.abstract ? item.abstract : item.description}\r\n                highlight={this.state.searchGreen}\r\n            />\r\n\r\n\r\n            return (\r\n                <CitationVitae\r\n                    collapsedTitle={parse(item.citation)}\r\n                    contentType={item.iconName}\r\n                    collapsedText={\r\n                        <div\r\n                            style={{\r\n                                width: \"430px\",\r\n                                fontSize: \".8rem\",\r\n                                display: \"flex\",\r\n                                flexDirection: \"column\",\r\n                                paddingLeft: \"2rem\",\r\n                                marginTop: \"10px\",\r\n                                marginBottom: \"10px\",\r\n                            }}\r\n                        >\r\n                            {Urls}\r\n\r\n                            <div\r\n                                style={{\r\n                                    maxWidth: \"400px\",\r\n                                    fontSize: '.75rem',\r\n                                    padding: \"5px 10px\",\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"row\",\r\n                                    // border: \"1px solid #ccc\",\r\n                                    marginTop: \"5px\",\r\n                                    marginBottom: \"5px\",\r\n                                    textIndent: \"1.5rem\",\r\n                                    color: \"#888\",\r\n                                    fontWeight: 400,\r\n                                    lineHeight: 1.1,\r\n                                    textAlign: \"justify\",\r\n                                    textJustify: \"inter-word\"\r\n                                }}\r\n                            >\r\n\r\n                                {HighlightedAbstract}\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                    }\r\n\r\n                // abstract={item.abstract ? parse(item.abstract) : parse(item.description)}\r\n                // keywords={item.keywords}\r\n                // urls={item.urls}\r\n                />\r\n            );\r\n        });\r\n\r\n\r\n        return (\r\n\r\n\r\n            <div id='sectionVitae' key={nanoid()}  >\r\n\r\n                <div id='row1' key={nanoid()} >\r\n\r\n                    <div id='colA' key={nanoid()}  >\r\n\r\n                        <h1>EDUCATION</h1>\r\n\r\n                        <div id='cvEducation' key={nanoid()}  >\r\n\r\n                            <table >\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>2003</td>\r\n                                        <td>B.A. Psychology</td>\r\n                                        <td>Alexandru Ioan Cuza University, Iasi, RO</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>2009</td>\r\n                                        <td>M.A. Psychology</td>\r\n                                        <td>Emory University, Atlanta, GA</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>2013</td>\r\n                                        <td>Ph.D. Psychology</td>\r\n                                        <td>Emory University, Atlanta, GA</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <h1>APPOINTMENTS</h1>\r\n\r\n                        <div id='cvAppointments' key={nanoid()} >\r\n\r\n                            <table >\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>2012-2015</td>\r\n                                        <td>Adjunct faculty</td>\r\n                                        <td>Georgia State University</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>2015-2016</td>\r\n                                        <td>Adjunct faculty</td>\r\n                                        <td>Agnes Scott College</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>2017-2018</td>\r\n                                        <td>Adjunct faculty</td>\r\n                                        <td>Oxford College of Emory University</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>2019-2022</td>\r\n                                        <td colSpan={2}>Independent researcher / web developer (freelance)</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n\r\n                        <h1>EXPERTISE</h1>\r\n\r\n                        <div id='expertise' key={nanoid()}>\r\n                            <label>learning and development</label>\r\n                            <label>emergence</label>\r\n                            <label>computational modelling</label>\r\n                            <label>reinforcement learning</label>\r\n                            <label>translational science</label>\r\n                        </div>\r\n\r\n\r\n                        <h1>TECH</h1>\r\n\r\n                        <div id='skills' key={nanoid()}   >\r\n                            <div\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    flexFlow: \"row wrap\",\r\n                                    maxWidth: \"400px\",\r\n                                }}\r\n                            >\r\n                                {Skills}\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div id='bottom' key={nanoid()} >\r\n                            <ContinuousEducation />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                    <div id='colB' key={nanoid()}>\r\n\r\n                        <div id='filters' key={nanoid()}>\r\n\r\n                            <div\r\n                                key={nanoid()}\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"row\",\r\n                                }}\r\n                            >\r\n\r\n                                <form>\r\n                                    <label className=\"filter-checkbox\" key={nanoid()}>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            value='all items'\r\n                                            checked={this.state.itemCategory === 'all items'}\r\n                                            className={this.state.itemCategory === 'ADHD' ? 'checked' : 'unchecked'}\r\n                                            onChange={(event) => this.setState({ itemCategory: event.target.value })}\r\n                                        />\r\n                                        <span>all items</span>\r\n                                    </label>\r\n\r\n                                    <label className=\"filter-checkbox\" key={nanoid()}>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            value='Matching'\r\n                                            checked={this.state.itemCategory === 'Matching'}\r\n                                            className={this.state.itemCategory === 'ADHD' ? 'checked' : 'unchecked'}\r\n                                            onChange={(event) => this.setState({ itemCategory: event.target.value })}\r\n                                        />\r\n                                        <span>Matching</span>\r\n                                    </label>\r\n\r\n                                    <label className=\"filter-checkbox\" key={nanoid()}>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            value='Hamming'\r\n                                            checked={this.state.itemCategory === 'Hamming'}\r\n                                            className={this.state.itemCategory === 'ADHD' ? 'checked' : 'unchecked'}\r\n                                            onChange={(event) => this.setState({ itemCategory: event.target.value })}\r\n                                        />\r\n                                        <span>Hamming</span>\r\n                                    </label>\r\n\r\n\r\n                                    <label className=\"filter-checkbox\" key={nanoid()}>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            value='ADHD'\r\n                                            checked={this.state.itemCategory === 'ADHD'}\r\n                                            className={this.state.itemCategory === 'ADHD' ? 'checked' : 'unchecked'}\r\n                                            onChange={(event) => this.setState({ itemCategory: event.target.value })}\r\n                                        />\r\n                                        <span>ADHD</span>\r\n                                    </label>\r\n\r\n\r\n                                    <label className=\"filter-checkbox\" key={nanoid()}>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            value='Scienta Nova'\r\n                                            checked={this.state.itemCategory === 'Scienta Nova'}\r\n                                            className={this.state.itemCategory === 'ADHD' ? 'checked' : 'unchecked'}\r\n                                            onChange={(event) => this.setState({ itemCategory: event.target.value })}\r\n                                        />\r\n                                        <span>Scienta Nova</span>\r\n                                    </label>\r\n\r\n                                </form>\r\n\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n\r\n                        <div\r\n                            id='cv-items'\r\n                            key={nanoid()}\r\n                            className='cv-scroll'\r\n                        >\r\n                            {VitaeEntries}\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div >\r\n        )\r\n    }\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\abc\\Highlighted.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\vitae\\FilterCheckbox.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\teaching\\TeachingIntro.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\research_study\\ResearchStudyNew.js",["499","500"],"import \"./study.sass\"\r\n\r\nimport React, { Component } from \"react\"\r\nimport parse from \"html-react-parser\";\r\n\r\n//import parse from \"html-react-parser\"\r\nimport ReadMore from \"../ReadMore\";\r\nimport { nanoid } from \"nanoid\"\r\n\r\n// import ImagesContainer from \"./ImagesContainer\";\r\nimport ImagesCarousel from \"../ImagesCarousel\";\r\nimport CollapseHook from \"../CollapseHook\"\r\n\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport StudyInfo from \"./StudyInfo\";\r\n\r\nexport default class ResearchStudyNew extends Component {\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const studyInfo = this.props.studyInfo\r\n\r\n\r\n        return (\r\n            <div\r\n                className=\"item\"\r\n                content1={this.props.displayDate}\r\n                key={nanoid()}\r\n                id={this.props.navMarker}\r\n            >\r\n                <div className=\"itemContent\" key={nanoid()}>\r\n\r\n\r\n\r\n                    {/* -------------------       RESEARCH STUDY  NEW    ---------------------- */}\r\n\r\n                    <Container\r\n                        className='research-study'\r\n                        key={nanoid()}\r\n                    >\r\n\r\n                        <Row className='row1' key={nanoid()}>\r\n\r\n                            <Col className='col1' key={nanoid()}>\r\n\r\n                                <h1 key={nanoid()}  >\r\n                                    {this.props.title[0].toUpperCase()}\r\n                                </h1>\r\n\r\n                                <h2 key={nanoid()}  >\r\n                                    {this.props.title[1] ? this.props.title[1].toUpperCase() : this.props.title[1]}\r\n                                </h2>\r\n\r\n\r\n                                <div\r\n                                    className='description'\r\n                                    key={nanoid()}\r\n                                >\r\n                                    {this.props.description}\r\n                                </div>\r\n\r\n                            </Col>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            <Col className='col2' key={nanoid()}>\r\n\r\n                                <div className='study-header' key={nanoid()}>\r\n\r\n                                    <h1 key={nanoid()} >\r\n                                        RESEARCH STUDY\r\n                                    </h1>\r\n\r\n                                    <h2 key={nanoid()} >\r\n                                        {studyInfo.location}\r\n                                    </h2>\r\n\r\n                                    <h2 key={nanoid()} >\r\n                                        {studyInfo.startDate} - {studyInfo.endDate}\r\n                                    </h2>\r\n\r\n                                </div>\r\n\r\n\r\n\r\n                                <div className='study-notes' key={nanoid()}  >\r\n                                    <p>\r\n                                        {studyInfo.studyNotes}\r\n                                    </p>\r\n                                </div>\r\n\r\n\r\n                                <StudyInfo\r\n                                    studyInfo={studyInfo}\r\n                                />\r\n\r\n\r\n                                <div className='div-tech-links' key={nanoid()}  >\r\n                                    {this.props.tech}\r\n                                    {this.props.links}\r\n                                    <CollapseHook\r\n                                        collapsedTitle={\"Relevant work\"}\r\n\r\n                                        collapsedText={\r\n                                            <div className=\"divRefs\" key={nanoid()}>\r\n                                                {this.props.references}\r\n                                            </div>\r\n                                        }\r\n                                    />\r\n                                </div>\r\n\r\n\r\n\r\n                            </Col>\r\n                        </Row>\r\n\r\n\r\n\r\n                        <Row className='row2'  >\r\n                            <Col className='col1'  >\r\n                                <ImagesCarousel props={this.props.img} />\r\n                            </Col>\r\n\r\n                        </Row>\r\n\r\n                    </Container>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\research_study\\StudyInfo.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\header_files\\HeaderSection.jsx",["501"],"\r\nimport \"./header.sass\";\r\nimport { Fade } from \"react-reveal\"\r\nimport { nanoid } from \"nanoid\"\r\nimport React, { Component } from \"react\";\r\n\r\nimport NavMain from \"./NavMain\";\r\n\r\n\r\nclass HeaderSection extends Component {\r\n\r\n    scrollToProfile = (e) => {\r\n        e.preventDefault();\r\n        document\r\n            .getElementById(\"About\")\r\n            .scrollIntoView({ block: \"end\", behavior: \"smooth\" });\r\n        document.getElementById(\"nav1\").style.opacity = 0.9;\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                id='Header'\r\n                key={nanoid()}\r\n            >\r\n\r\n                <div className='div-inset' key={nanoid()}>\r\n\r\n                    <p className='inset-title' key={nanoid()} >\r\n                        Hi, I'm Dr. Andrei Popa.\r\n                    </p>\r\n\r\n                    <p className='inset-subtitle' key={nanoid()}  >\r\n                        Psychologist. Web developer. Puzzle enthusiast.\r\n                    </p>\r\n\r\n                    <div\r\n                        role='button'\r\n                        className='btn-cnt'\r\n                        key={nanoid()}\r\n                        onClick={this.scrollToProfile}\r\n                    >\r\n                        Continue\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                {/* <div id=\"columnHeader\">\r\n                    <p>\r\n                        Hi, I'm <span style={{ color: \"#45a085\" }}>Dr. Andrei Popa.</span>\r\n                    </p>\r\n                    <p>I do research and development.</p>\r\n                    <p>\r\n                        <button onClick={this.scrollToProfile}>Continue</button>\r\n                    </p>\r\n                </div> */}\r\n\r\n\r\n\r\n                <NavMain />\r\n\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderSection;\r\n","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\MyTimeline.jsx",["502","503","504","505","506"],"import \"./timeline.sass\";\r\nimport \"./event-default.sass\";\r\n\r\nimport { nanoid } from \"nanoid\"\r\n\r\nimport React from \"react\";\r\nimport parse from \"html-react-parser\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport infoHighlights from \"../../DATA/infoHighlights\";\r\nimport infoCV from \"../vitae/infoCV\";\r\n\r\n\r\nimport ReadMore from \"./ReadMore\";\r\nimport ImagesCarousel from \"./ImagesCarousel\";\r\n// import ResearchStudy from \"./ResearchStudy\";\r\nimport ResearchStudyNew from \"./research_study/ResearchStudyNew\";\r\n\r\n// import Qual from \"./Qual\";\r\nimport CollapseHook from \"./CollapseHook\"\r\n// import MathematicalModels from \"./MathematicalModels\"\r\n// import EtbdEmergence from \"./EtbdEmergence\"\r\n// import HammingDistances from \"./HammingDistances\"\r\n// import EtbdPy from './EtbdPy'\r\n\r\nimport LovelyOgive from \"./LovelyOgive\"\r\nimport Nbt2008 from \"../etbd_nbt/Nbt2008\"\r\n\r\nimport { Container, Row, Col } from \"react-bootstrap\"\r\n\r\nconst MyTimeline = (props) => {\r\n\r\n    // let { events, orientation, startFrom } = props;\r\n    let { events } = props;\r\n\r\n    var goToLink = (e) => {\r\n        e.preventDefault();\r\n        let destination = e.target.id;\r\n        window.open(destination, \"_blank\");\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    const TimelineHighlights = events.map((e, i) => {\r\n        var Description = \"\",\r\n            Links = [],\r\n            Skills = [],\r\n            Tech = [],\r\n            References;\r\n\r\n\r\n        // LINKS\r\n        if (e.urls.length > 0) {\r\n            Links = e.urls.map((item) => (\r\n                <button\r\n                    className='button-link'\r\n                    key={nanoid()}\r\n                    id={item.link}\r\n                    title={item.link}\r\n                    onClick={goToLink}\r\n                >\r\n                    {item.name}\r\n                </button >\r\n            ))\r\n        };\r\n\r\n        // TECH\r\n        if (e.tech) {\r\n            Tech = e.tech.map((item) =>\r\n                <label className='lbl-tech' key={nanoid()}> {parse(item)} </label>\r\n            )\r\n        };\r\n\r\n        if (e.skills) {\r\n            Skills = e.skills.map((item) => {\r\n                return <label className='lbl-skill' key={nanoid()}>{parse(item)}</label>\r\n            })\r\n        };\r\n\r\n        if (e.description !== \"\") {\r\n            Description = parse(e.description);\r\n        };\r\n\r\n\r\n\r\n        if (e.relevantWork) {\r\n            References = e.relevantWork.map((item) => {\r\n\r\n                if (item) {\r\n                    let x = infoCV.filter(d => d.name === item)[0]\r\n                    let xx = infoCV.filter(d => d.name === item)\r\n                    let myRef = x.citation\r\n\r\n                    return (\r\n                        < p className=\"citation-apa\" key={nanoid()} >\r\n                            {parse(myRef)}\r\n                        </p >\r\n                    )\r\n                }\r\n            })\r\n        };\r\n\r\n\r\n\r\n        var nickname = \"\"\r\n\r\n        if (e.nickname) {\r\n            nickname = e.nickname\r\n        } else {\r\n            nickname = e.title\r\n        }\r\n\r\n        let navMarker = e.navMarker ? e.navMarker : e.date\r\n\r\n        // RESEARCH STUDY: \r\n        if (e.studyInfo) {\r\n            let studyTitle = e.title.split(\":\")\r\n\r\n            return (\r\n                <ResearchStudyNew\r\n                    nickname={nickname}\r\n                    key={nanoid()}\r\n                    name={\"\"}\r\n                    studyInfo={e.studyInfo}\r\n                    links={Links}\r\n                    tech={Tech}\r\n                    skills={Skills}\r\n                    description={Description}\r\n                    references={References}\r\n                    img={e.img}\r\n                    title={studyTitle}\r\n                    displayDate={e.displayDate}\r\n                    navMarker={navMarker}\r\n                />\r\n            )\r\n        };\r\n\r\n        // DEFAULT:\r\n        return (\r\n            <div\r\n                className='item'\r\n                content1={e.displayDate}\r\n                key={nanoid()}\r\n                id={navMarker}\r\n            >\r\n                <div\r\n                    className='itemContent'\r\n                    key={nanoid()}\r\n                    style={{\r\n                        backgroundColor: props.contentBg ? props.contentBg : '#274235'\r\n                    }}\r\n                >\r\n\r\n\r\n                    {/* -------------------       default event     ---------------------- */}\r\n\r\n                    <div className='event-default' key={nanoid()}>\r\n\r\n                        <div className='col-left' key={nanoid()}>\r\n\r\n                            <h1 className='title' key={nanoid()} >\r\n                                {parse(e.title)}\r\n                            </h1>\r\n\r\n                            <ReadMore overview={Description} maxChars={1000} />\r\n\r\n\r\n                            {/* <div\r\n                                    className='div-tech' key={nanoid()}\r\n                                >\r\n                                    {Skills}\r\n                                </div> */}\r\n\r\n                            <div className='div-tech' key={nanoid()}>\r\n                                {Tech}\r\n                            </div>\r\n\r\n                            <div className='div-links' key={nanoid()} >\r\n                                {Links}\r\n                            </div>\r\n\r\n                            <CollapseHook\r\n                                collapsedTitle={\"Relevant work\"}\r\n\r\n                                collapsedText={\r\n                                    <div className=\"divRefs\" key={nanoid()}>\r\n                                        {References}\r\n                                    </div>\r\n                                }\r\n                            />\r\n\r\n                        </div>\r\n\r\n                        <div className=\"projectColumnImages\">\r\n                            {\r\n                                e.custom_item === 'hamming_demo' ? <LovelyOgive /> : e.custom_item === 'nbt' ? <Nbt2008 /> : <ImagesCarousel props={e.img} />\r\n                            }\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n\r\n    return (\r\n\r\n        <div\r\n            id='Parkour'\r\n            className='timeline'\r\n            key={nanoid()}\r\n            style={{\r\n                backgroundColor: props.bg ? props.bg : '#274235',\r\n            }}\r\n        >\r\n\r\n            {TimelineHighlights}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nMyTimeline.propTypes = {\r\n    events: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            //time: PropTypes.string.isRequired,\r\n            title: PropTypes.string.isRequired,\r\n            //desc: PropTypes.string.isRequired\r\n        })\r\n    ).isRequired,\r\n    orientation: PropTypes.oneOf([\"horizontal\", \"vertical\"]).isRequired,\r\n    startFrom: PropTypes.oneOf([\"first\", \"last\"]).isRequired,\r\n};\r\n\r\nMyTimeline.defaultProps = {\r\n    orientation: \"vertical\",\r\n    startFrom: \"first\",\r\n    // events: infoTimeline,\r\n    events: infoHighlights\r\n};\r\n\r\nexport default MyTimeline;\r\n","F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\CollapseHook.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\ReadMore.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\timeline_files\\ImagesCarousel.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\header_files\\NavAcronyms.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd\\demoEtbd.js",["507","508","509"],"// formerly known as ETBD, now commented out.\r\n\r\nimport \"./etbd.sass\";\r\nimport etbdState from \"./etbdState\";\r\nimport * as d3 from \"d3\";\r\n\r\n\r\n\r\n\r\n// let pair = [9, 30]\r\n// let str1 = pair[0].toString(2)\r\n// let str2 = pair[1].toString(2)\r\n\r\n// let str11 = str1.padStart(5, \"0\")\r\n// let str22 = str2.padStart(5, \"0\")\r\n\r\n\r\n// console.log(\"after padding: \")\r\n// console.log(\"str11: \", str11)\r\n// console.log(\"str22: \", str22)\r\n\r\n// let comparison = str1.localeCompare(str2)\r\n// let comparison1 = str11.localeCompare(str22)\r\n// console.log('comparison: ', comparison)\r\n// console.log('comparison1: ', comparison1)\r\n\r\nexport function clonePop(arr1) {\r\n    let arr2 = []\r\n    arr1.forEach((item) => {\r\n        arr2.push(item)\r\n    })\r\n    return arr2\r\n}\r\n\r\n\r\nexport function createGenZero() {\r\n    let genZero = []\r\n\r\n    let n = etbdState.popSize\r\n    let low = d3.min(etbdState.repertoire)\r\n    let high = d3.max(etbdState.repertoire)\r\n\r\n\r\n    for (let i = 0; i < n; i++) {\r\n        let b = d3.randomInt(low, high + 1)()\r\n        genZero.push(b)\r\n    }\r\n\r\n    genZero.sort((a, b) => a - b)\r\n\r\n    return genZero\r\n};\r\n\r\n\r\n\r\nexport function emitBehavior(array1) {\r\n    let idx = d3.randomInt(array1.length)()\r\n    let ems = array1[idx]\r\n    return ems\r\n};\r\n\r\n\r\n\r\nexport function emissionClass(ems) {\r\n    if (etbdState.class1.includes(ems)) {\r\n        return \"class1\";\r\n    } else if (etbdState.class2.includes(ems)) {\r\n        return \"class2\";\r\n    } else {\r\n        return \"else\";\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function twoRandomParents(thisPopulation) {\r\n\r\n    let idx1 = d3.randomInt(thisPopulation.length)()\r\n    let p1 = thisPopulation[idx1]\r\n    let diad = [p1]\r\n\r\n    let p2 = null\r\n    let leftOvers = thisPopulation.filter((item) => item !== p1)\r\n\r\n    if (leftOvers.length === 0) {\r\n\r\n        let idx2 = d3.randomInt(thisPopulation.length)()\r\n        p2 = thisPopulation[idx2]\r\n        diad.push(p2)\r\n        console.log('Alert: no unique parents: ', thisPopulation)\r\n    } else {\r\n        let idx2 = d3.randomInt(leftOvers.length)()\r\n        p2 = leftOvers[idx2]\r\n        diad.push(p2)\r\n    }\r\n\r\n    return diad\r\n}\r\n\r\n\r\n\r\nexport function twoFitParents(arr, cls, ems) {\r\n\r\n    let fitDiad = []\r\n    let miu = cls === 'b1' ? etbdState.Miu1 : etbdState.Miu2;\r\n\r\n    //let rndExp = parseInt(d3.randomExponential(1, 5)(miu) * 100);\r\n    //let rndExp1 = parseInt(d3.randomExponential(1, 5)(miu) * 100);\r\n\r\n    arr = [1, 2, 5, 11, 15, 20, 22, 30]\r\n    ems = 15\r\n    let rndExp = 6\r\n    let rndExp1 = 6\r\n\r\n\r\n    let fitnessValues = []\r\n\r\n    arr.forEach(b => {\r\n        let phen_dif = Math.abs(b - ems)\r\n        fitnessValues.push(phen_dif)\r\n    })\r\n\r\n\r\n    let relativeFitnessValues = [];\r\n\r\n    fitnessValues.forEach(fitness => {\r\n        let fitness_dif = Math.abs(fitness - rndExp)\r\n        relativeFitnessValues.push(fitness_dif)\r\n    })\r\n\r\n    let closestIndex = d3.minIndex(relativeFitnessValues)\r\n\r\n\r\n    //-------------\r\n    let p1 = arr[closestIndex]\r\n    let diad = [p1]\r\n\r\n\r\n    let leftOvers = arr.filter((item) => item !== p1)\r\n\r\n    //----------------\r\n\r\n\r\n    let fitnessValues1 = []\r\n\r\n    arr.forEach(b => {\r\n        let phen_dif = Math.abs(b - ems)\r\n        fitnessValues1.push(phen_dif)\r\n    })\r\n\r\n\r\n    let relativeFitnessValues1 = [];\r\n\r\n    fitnessValues1.forEach(fitness => {\r\n        let fitness_dif = Math.abs(fitness - rndExp1)\r\n        relativeFitnessValues1.push(fitness_dif)\r\n    })\r\n\r\n    let closestIndex1 = d3.minIndex(relativeFitnessValues1)\r\n    let p2 = arr[closestIndex1]\r\n    diad.push(p2)\r\n\r\n\r\n    return diad\r\n    //--------------\r\n\r\n\r\n    //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n    // let fitnessValues = []\r\n\r\n    // thisPopulation.forEach(phenotype => {\r\n    //     let phen_dif = Math.abs(phenotype - ems)\r\n    //     fitnessValues.push(phen_dif)\r\n    // })\r\n\r\n    // let fitParents = []\r\n\r\n    // while (parents.length < 2) {\r\n    //     let randomFitness = parseInt(d3.randomExponential(1, 300)(etbdState.Miu1) * 100);\r\n\r\n    //     let relativeFitnessValues = [];\r\n\r\n    //     fitnessValues.forEach(fitness => {\r\n    //         let fitness_dif = Math.abs(fitness - randomFitness)\r\n    //         relativeFitnessValues.push(fitness_dif)\r\n    //     })\r\n\r\n    //     let closestIndex = d3.minIndex(relativeFitnessValues)\r\n\r\n    //     let closestPhen = thisPopulation[closestIndex]\r\n\r\n    //     if (!fitParents.includes(closestPhen)) {\r\n    //         fitParents.push(closestPhen)\r\n    //     }\r\n    // }\r\n}\r\n\r\n\r\n\r\nexport function stringToInt(string) {\r\n    let result = 0\r\n    let arr1 = Array.from(string)\r\n\r\n    arr1.forEach((item, i) => {\r\n        let bitPower = arr1.length - 1 - i\r\n        let bitValue = 2 ** bitPower\r\n        result = result + item * bitValue\r\n    })\r\n\r\n    return result\r\n}\r\n\r\n\r\n\r\n\r\nexport function crossTwoStrings(pair) {\r\n\r\n    let bits = d3.max(etbdState.repertoire).toString(2).length\r\n    let newString = \"\"\r\n    let newArray = []\r\n\r\n    // COMPUTE and pad GENOTYPEs:\r\n    let s1 = pair[0].toString(2)\r\n    let s2 = pair[1].toString(2)\r\n    let s11 = s1.padStart(bits, \"0\")\r\n    let s22 = s2.padStart(bits, \"0\")\r\n\r\n\r\n    // CROSS GENOTYPES:\r\n    for (let g = 0; g < bits; g++) {\r\n        let bit = \"\"\r\n        let coin = d3.randomUniform()()\r\n\r\n        if (coin < 0.5) {\r\n            bit = s11[g]\r\n        } else {\r\n            bit = s22[g]\r\n        }\r\n        newString = newString + bit\r\n        newArray.push(parseInt(bit))\r\n    };\r\n\r\n    let newInt = stringToInt(newString)\r\n\r\n    return newInt\r\n}\r\n\r\n\r\n\r\n\r\nexport function undergoesMutation() {\r\n    let mutation_chance = d3.randomUniform()()\r\n    if (mutation_chance > etbdState.mutation_rate) {\r\n        return false\r\n    } else {\r\n        return true\r\n    }\r\n};\r\n\r\n\r\n\r\nexport function flipRandomBit(phen) {\r\n    let bits = d3.max(etbdState.repertoire).toString(2).length\r\n    let s = phen.toString(2)\r\n\r\n    let string1 = s.padStart(bits, \"0\")\r\n\r\n    let idx = d3.randomInt(string1.length)()\r\n    let array1 = Array.from(string1)\r\n    let flippedBit = array1[idx] === '1' ? '0' : '1'\r\n\r\n    array1[idx] = flippedBit\r\n\r\n    let mutatedString = ''\r\n\r\n    array1.forEach((item) => {\r\n        mutatedString = mutatedString + item\r\n    })\r\n\r\n    let mutatedInt = stringToInt(mutatedString)\r\n\r\n\r\n    return mutatedInt\r\n}\r\n\r\n\r\n\r\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\nexport function pressLeverEffect(cls) {\r\n    // let svgMatching1 = d3.select(\"#svgMatching\")\r\n    // let lv1 = svgMatching1.select(\"#lever1\")\r\n    // lv1\r\n    //     .style(\"opacity\", .9)\r\n    //     .attr(\"transform\", \"scale(0.98)\")\r\n    //     .attr(\"transform\", \"translate(2, 2)\")\r\n    //     .attr(\"box-shadow\", \"3px 2px 22px 1px rgba(0, 0, 0, 0.24)\")\r\n\r\n    let lever = `#lever${cls.toString()}`\r\n\r\n    d3\r\n        .select(\"#svgMatching\")\r\n        .select(lever)\r\n        .style(\"opacity\", .9)\r\n        .attr(\"transform\", \"scale(0.98)\")\r\n        .attr(\"transform\", \"translate(2, 2)\")\r\n        .attr(\"box-shadow\", \"3px 2px 22px 1px rgba(0, 0, 0, 0.24)\")\r\n};\r\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n\r\n\r\n\r\n// export function demoEtbd(props) {\r\n\r\n//     // The first two Random Intervals, between 1000 and 5000 ms, from an exponential with mean 1/RI mean. I use integers here to remove the microseconds. When the timers exceed the intervals, reinforcement becomes available.\r\n\r\n//     // const [r1ready, setR1ready] = useState(false)\r\n//     // const [r2ready, setR2ready] = useState(false)\r\n\r\n//     // const [int1, setInt1] = useState(() => parseInt(d3.randomExponential(1, 5)(etbdState.RI1) * 1000))\r\n//     // const [int2, setInt2] = useState(() => parseInt(d3.randomExponential(1, 5)(etbdState.RI2) * 1000))\r\n\r\n\r\n//     // console.log(\"demoEtbd, int1, int2, in ms: \", int1, int2)\r\n\r\n//     // d3.timeout((elapsed1) => {\r\n//     //     this.setState({ r1ready: 1 });\r\n//     // }, int1);\r\n//     // d3.timeout((elapsed2) => {\r\n//     //     this.setState({ r2ready: 1 });\r\n//     // }, int2);\r\n\r\n\r\n//     // // EVENTS PER SESSION (15s):\r\n//     // let r1min = `${1 / this.state.RI1 * this.state.timeLimit}`\r\n//     // let r2min = `${1 / this.state.RI2 * this.state.timeLimit}`\r\n\r\n\r\n\r\n//     let etbdEvents = props;\r\n//     let thisPopulation = [];\r\n\r\n//     if (props.population) {\r\n//         thisPopulation = props.population\r\n//     } else {\r\n//         let g0 = createGenZero()\r\n//         thisPopulation = g0\r\n//     }\r\n\r\n\r\n//     // Random emission:\r\n//     // let emission = emitBehavior(thisPopulation)\r\n\r\n\r\n//     let newEvent = { ems: ems, respClass: \"be\", reinforced: false }\r\n\r\n\r\n//     // Evaluate ems:\r\n//     if (etbdState.class1.includes(ems)) {\r\n//         newEvent.respClass = \"b1\";\r\n\r\n//         if (props.r1ready !== 0) {\r\n//             newEvent.reinforced = true;\r\n//             // this.setState({\r\n//             //     Points1: Points1 + this.state.r1ready,\r\n//             //     r1ready: 0,\r\n//             // });\r\n//             let int1 = parseInt(d3.randomExponential(1, 5)(etbdState.RI1) * 1000);\r\n//             // d3.timeout((elapsed1) => {\r\n//             //     this.setState({ r1ready: 1 });\r\n//             // }, int1);\r\n//         };\r\n//         // lv1\r\n//         //     .transition().duration(300).style(\"opacity\", .5)\r\n//         //     .attr(\"transform\", \"scale(1)\")\r\n//         //     .attr(\"transform\", \"translate(-2, -2)\")\r\n//         //     .attr(\"box-shadow\", \"none\")\r\n//     };\r\n\r\n\r\n\r\n\r\n//     // -------------------------------------------------------------- Class 2\r\n\r\n//     if (class2.includes(ems)) {\r\n\r\n//         // let svgMatching = d3.select(\"#svgMatching\")\r\n//         // let lv2 = svgMatching.select(\"#lever2\")\r\n\r\n//         // lv2\r\n//         //     .style(\"opacity\", .9)\r\n//         //     .attr(\"transform\", \"scale(0.98)\")\r\n//         //     .attr(\"transform\", \"translate(2, 2)\")\r\n//         //     .attr(\"box-shadow\", \"3px 2px 22px 1px rgba(0, 0, 0, 0.24)\")\r\n\r\n\r\n//         newEvent.respClass = \"b2\";\r\n\r\n\r\n//         // CHECK FOR REINFORCEMENT:\r\n//         if (props.r2ready !== 0) {\r\n//             newEvent.reinforced = true;\r\n\r\n//             // this.setState({\r\n//             //     Points2: Points2 + this.state.r2ready,\r\n//             //     r2ready: 0,\r\n//             // });\r\n\r\n//             let int2 = parseInt(d3.randomExponential(1, 5)(etbdState.RI2) * 1000);\r\n\r\n//             // d3.timeout((elapsed2) => {\r\n//             //     this.setState({ r2ready: 1 });\r\n//             // }, int2);\r\n//         };\r\n\r\n//         // lv2\r\n//         //     .transition().duration(300).style(\"opacity\", .5)\r\n//         //     .attr(\"transform\", \"scale(1)\")\r\n//         //     .attr(\"transform\", \"translate(-2, -2)\")\r\n//         //     .attr(\"box-shadow\", \"none\")\r\n//     };\r\n\r\n\r\n\r\n//     // RETURN ..?\r\n\r\n//     /*\r\n//     //  PUSH NEW RESPONSE:  -----------------------------------  PUSH NEW RESPONSE\r\n\r\n//     let newResponse = {\r\n//         timestamp: eventTimeStamp,\r\n//         class: respClass,\r\n//         emission: randomEmission,\r\n//         reinforced: reinforced,\r\n//         population: population,\r\n//         co: co,\r\n//         // points1: points1,\r\n//         // points2: points2,\r\n//     };\r\n\r\n//     // events.push(newResponse);\r\n//     // this.setState({ events: events });\r\n//     // console.log('ems, pop: ', randomEmission, ', ', reinforced, ' from ', population)\r\n\r\n//     */\r\n\r\n\r\n\r\n\r\n\r\n//     //               CREATE NEW_POPULATION:\r\n\r\n\r\n\r\n\r\n//     var next_population = []\r\n\r\n//     if (reinforced === false) {\r\n\r\n//         for (let j = 0; j < population.length; j++) {\r\n\r\n//             let idx1 = d3.randomInt(population.length)()\r\n//             let p1 = population[idx1]\r\n//             let idx2 = d3.randomInt(population.length)()\r\n//             let p2 = population[idx2]\r\n\r\n//             var phenRandom = recombineAndMutate(p1, p2, this.state.mutation_rate)\r\n\r\n//             if (this.state.repertoire.includes(phenRandom)) {\r\n//                 next_population.push(phenRandom)\r\n//             } else {\r\n//                 next_population.push(phenRandom % this.state.repertoire.length)\r\n//             }\r\n\r\n//         }\r\n\r\n//         addData(next_population)\r\n//         this.setState({ population: next_population })\r\n\r\n\r\n\r\n//     }\r\n\r\n//     else if (reinforced === true) {\r\n\r\n//         var fitnessValues = []\r\n\r\n//         population.forEach(phenotype => {\r\n//             let phen_dif = Math.abs(phenotype - randomEmission)\r\n//             fitnessValues.push(phen_dif)\r\n//         })\r\n\r\n\r\n//         // for each behavior in the population:\r\n//         for (let j = 0; j < population.length; j++) {\r\n\r\n\r\n//             // Get two parents:\r\n\r\n//             var parents = []\r\n\r\n//             while (parents.length < 2) {\r\n//                 var randomFitness = parseInt(d3.randomExponential(1, 300)(this.state.Miu1) * 100);\r\n//                 var relativeFitnessValues = []\r\n\r\n//                 fitnessValues.forEach(fitness => {\r\n//                     let fitness_dif = Math.abs(fitness - randomFitness)\r\n//                     relativeFitnessValues.push(fitness_dif)\r\n//                 })\r\n\r\n\r\n//                 var closestIndex = d3.minIndex(relativeFitnessValues)\r\n//                 var closestPhen = population[closestIndex]\r\n\r\n//                 if (!parents.includes(closestPhen)) {\r\n//                     parents.push(closestPhen)\r\n//                 }\r\n//             }\r\n\r\n\r\n//             // CHILD BEHAVIOR:\r\n//             //var phenFitness = recombineAndMutate(p1, p2, 0.50)\r\n//             var child = recombineAndMutate(parents[0], parents[1], this.state.mutation_rate)\r\n\r\n\r\n//             // IS THIS TO WRAP THE REPERTOIRE ... ??\r\n//             if (this.state.repertoire.includes(child)) {\r\n//                 next_population.push(child)\r\n//             } else {\r\n//                 next_population.push(child % this.state.repertoire.length)\r\n//             }\r\n//         };\r\n\r\n//         addData(next_population)\r\n//         this.setState({ population: next_population })\r\n//     }\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     return (\r\n\r\n//         <>\r\n\r\n//             <div\r\n//                 className='div-start-reset'\r\n\r\n//             >\r\n//                 <button\r\n//                     id='btn-run-etbd'\r\n//                     onClick={this.beginSimulation}\r\n//                 >\r\n//                     runETBD()\r\n//                 </button>\r\n\r\n\r\n//             </div>\r\n\r\n//         </>\r\n\r\n\r\n\r\n//     );\r\n// }\r\n// //}\r\n\r\n\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\matching\\CumulativeRecord.jsx",["510","511","512"],"F:\\react_portfolio\\src\\COMPONENTS\\matching\\dataSample.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\abc\\InputSlider.jsx",["513"],"F:\\react_portfolio\\src\\COMPONENTS\\abc\\InputSliderRange.jsx",[],["514","515"],"F:\\react_portfolio\\src\\COMPONENTS\\abc\\InputPlusMinus.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\background\\ResearchIntro.jsx",["516"],"import './_research-intro.sass';\r\nimport { nanoid } from \"nanoid\";\r\nimport parse from \"html-react-parser\";\r\n\r\nexport default function ResearchIntro() {\r\n\r\n    return (\r\n\r\n        <div id='research-intro' key={nanoid()} >\r\n\r\n            <div className='wrapper'>\r\n\r\n                <h1 className='title' key={nanoid()} > RESEARCH  </h1>\r\n\r\n                <h2 className='years' key={nanoid()}  > 2007 - present</h2>\r\n\r\n                <div className='labs'>\r\n                    <span key={nanoid()}>\r\n                        Emory <br />University\r\n                    </span>\r\n\r\n                    <span key={nanoid()}>\r\n                        Agnes Scott<br /> College\r\n                    </span>\r\n\r\n                    <span key={nanoid()} >\r\n                        Emory University, <br />Oxford College\r\n                    </span>\r\n\r\n                    {/* <span key={nanoid()} >\r\n                        Independent\r\n                    </span> */}\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </div >\r\n\r\n\r\n    )\r\n}\r\n","F:\\react_portfolio\\src\\COMPONENTS\\background\\ResearchOverview.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\matching\\MatchingDemo.jsx",["517","518","519","520","521"],"\r\nimport React, { Component } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport _ from \"lodash\";\r\n\r\nimport './_div-live-matching.sass';\r\n\r\nimport { setMatchingState } from \"./matchingState\";\r\nimport * as demoEtbd from \"../etbd/demoEtbd\"\r\nimport CumulativeRecordV2 from \"./CumulativeRecordV2\";\r\nimport Agent50 from \"../etbd/Agent50\";\r\nimport DivPoints from \"./DivPoints\";\r\n\r\nimport PopOverV2 from \"../abc/PopOverV2\";\r\n\r\nexport default class MatchingDemo extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        let myState = setMatchingState();\r\n        this.state = myState;\r\n    };\r\n\r\n\r\n    beginSession = () => {\r\n\r\n        let startEvent = {\r\n            timestamp: performance.now(),\r\n            coordinates: {},\r\n            eventIndex: 0,\r\n            x: 0,\r\n            y: 0,\r\n            class: \"start\",\r\n            co: false,\r\n            consequence: false,\r\n            magnitude: 0,\r\n        };\r\n\r\n        this.setState({\r\n            timeStart: performance.now(),\r\n            events: [startEvent],\r\n            agentType: 'human',\r\n            liveSession: true\r\n        });\r\n\r\n\r\n        let overallInterval = d3.interval((te) => {\r\n            this.setState({ progress: te })\r\n            if (te > this.state.timeLimit * 1000) {\r\n\r\n                overallInterval.stop()\r\n\r\n                this.setState({\r\n                    liveSession: false\r\n                })\r\n            }\r\n        }, 1000);\r\n\r\n\r\n        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\r\n        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\r\n\r\n        // d3.timeout((elapsed1) => {\r\n        //     this.setState({ r1ready: 1 });\r\n        // }, int1);\r\n\r\n        d3.timeout((elapsed2) => {\r\n            this.setState({ r2ready: 1 });\r\n        }, int2);\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n    // clickCoords = (event) => {\r\n    //     let t = performance.now()\r\n    //     let x = parseInt(d3.pointer(event)[0])\r\n    //     let y = parseInt(d3.pointer(event)[1])\r\n    //     let cls = ''\r\n    //     let co = false\r\n    //     let consequence = false\r\n    //     let magnitude = 0\r\n\r\n\r\n\r\n    //     //////////////////////////////////////////////////////////     CLASS  ONE\r\n\r\n    //     if (d3.polygonContains(this.state.class1, [x, y])) {\r\n    //         cls = 'class1';\r\n\r\n    //         if (_.last(this.state.events).class !== \"class2\") {\r\n    //             co = true\r\n    //         }\r\n\r\n    //         // CHANGEOVER DELAY:\r\n    //         if (co === true) {\r\n    //             if (this.state.cod1_duration > 0) {\r\n    //                 this.setState({\r\n    //                     cod1_status: \"on\",\r\n    //                     codColor: this.state.colors.color1\r\n    //                 })\r\n    //                 d3.timeout((elapsedCOD1) => {\r\n    //                     this.setState({\r\n    //                         cod1_status: \"off\",\r\n    //                         codColor: \"#282c34\"\r\n    //                     })\r\n    //                 }, this.state.cod1_duration)\r\n    //             }\r\n    //         }\r\n\r\n    //         // REINFORCEMENT:\r\n    //         if (this.state.r1ready !== 0 && this.state.cod1_status === 'off') {\r\n    //             consequence = true\r\n\r\n    //             this.setState({ r1ready: 0, consequence: true, magnitude: 1 });\r\n\r\n    //             let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\r\n\r\n    //             d3.timeout((elapsed1) => {\r\n    //                 this.setState({ r1ready: 1 });\r\n    //             }, int1);\r\n    //         }\r\n    //     }\r\n\r\n\r\n\r\n    //     if (d3.polygonContains(this.state.class2, [x, y])) {\r\n    //         cls = 'class2'\r\n\r\n    //         if (_.last(this.state.events).class !== \"class1\") {\r\n    //             co = true\r\n    //         }\r\n\r\n    //         // CHANGEOVER DELAY:\r\n    //         if (co === true) {\r\n    //             if (this.state.cod2_duration > 0) {\r\n    //                 this.setState({\r\n    //                     cod2_status: \"on\",\r\n    //                     codColor: this.state.colors.color2\r\n    //                 })\r\n    //                 d3.timeout((elapsedCOD2) => {\r\n    //                     this.setState({\r\n    //                         cod2_status: \"off\",\r\n    //                         codColor: \"#282c34\"\r\n    //                     })\r\n    //                 }, this.state.cod2_duration)\r\n    //             }\r\n    //         }\r\n\r\n    //         // REINFORCEMENT:\r\n    //         if (this.state.r2ready !== 0 && this.state.cod2_status === 'off') {\r\n    //             consequence = true\r\n\r\n    //             this.setState({ r2ready: 0, consequence: true, magnitude: 1 });\r\n\r\n    //             let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\r\n\r\n    //             d3.timeout((elapsed2) => {\r\n    //                 this.setState({ r2ready: 1 });\r\n    //             }, int2);\r\n    //         }\r\n    //     }\r\n\r\n\r\n\r\n    //     let thisEvent = {\r\n    //         timestamp: t,\r\n    //         coordinates: { x: x, y: y },\r\n    //         class: cls,\r\n    //         consequence: consequence,\r\n    //         magnitude: this.state.magnitude1 ? this.state.magnitude1 : 1,\r\n    //     }\r\n\r\n    //     this.setState({\r\n    //         x: x,\r\n    //         y: y,\r\n    //         class: cls,\r\n    //         consequence: consequence,\r\n    //         magnitude: this.state.magnitude1 ? this.state.magnitude1 : 1,\r\n    //     })\r\n\r\n    //     this.setState({ events: [...this.state.events, thisEvent] })\r\n    // }\r\n\r\n\r\n    logResponse = (event) => {\r\n\r\n        // console.log(\"muie lu mata\")\r\n        // console.log(event.target.id)\r\n\r\n        let x = parseInt(d3.pointer(event)[0])\r\n        let y = parseInt(d3.pointer(event)[1])\r\n        // this.setState({ cls: event.target.id })\r\n        // console.log(x, y)\r\n\r\n        // console.log(event.target.id)\r\n\r\n    }\r\n\r\n\r\n    evaluateResponse = (event) => {\r\n        // event.preventDefault()\r\n        // console.log(event)\r\n        let t = performance.now()\r\n        let cls = event.target.id\r\n\r\n        // console.log(\" event.target.id: \", event.target.id)\r\n        // console.log(\"event.currentTarget.id: \", event.currentTarget.id)\r\n\r\n\r\n        let x = parseInt(d3.pointer(event)[0])\r\n        let y = parseInt(d3.pointer(event)[1])\r\n        let co = false\r\n        let consequence = false\r\n        let magnitude = 0\r\n\r\n\r\n\r\n        ////////////////////////////////////////     CLASS  ONE\r\n\r\n        if (cls === 'class1') {\r\n\r\n            if (_.last(this.state.events).class !== \"class2\") {\r\n                co = true\r\n            }\r\n\r\n            // CHANGEOVER DELAY:\r\n            // if (co === true) {\r\n            //     if (this.state.cod1_duration > 0) {\r\n            //         this.setState({\r\n            //             cod1_status: \"on\",\r\n            //             codColor: this.state.colors.color1\r\n            //         })\r\n            //         d3.timeout((elapsedCOD1) => {\r\n            //             this.setState({\r\n            //                 cod1_status: \"off\",\r\n            //                 codColor: \"#282c34\"\r\n            //             })\r\n            //         }, this.state.cod1_duration)\r\n            //     }\r\n            // }\r\n\r\n            // REINFORCEMENT:\r\n            if (this.state.r1ready !== 0) {\r\n                consequence = true\r\n                this.setState({\r\n                    r1ready: 0,\r\n                    consequence: true,\r\n                    magnitude: 1\r\n                })\r\n                let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000)\r\n                d3.timeout((elapsed1) => {\r\n                    this.setState({ r1ready: 1 });\r\n                }, int1);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        if (cls === 'class2') {\r\n\r\n            if (_.last(this.state.events).class !== \"class1\") {\r\n                co = true\r\n            }\r\n\r\n            // REINFORCEMENT:\r\n            if (this.state.r2ready !== 0) {\r\n                consequence = true\r\n\r\n                this.setState({\r\n                    r2ready: 0,\r\n                    consequence: true,\r\n                    magnitude: 1\r\n                });\r\n\r\n                let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\r\n\r\n                d3.timeout((elapsed2) => {\r\n                    this.setState({ r2ready: 1 });\r\n                }, int2);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        let thisEvent = {\r\n            timestamp: t,\r\n            coordinates: { x: x, y: y },\r\n            class: cls,\r\n            consequence: consequence,\r\n            magnitude: this.state.magnitude1 ? this.state.magnitude1 : 1,\r\n            delta_t: t - this.state.timeStart,\r\n            irt: t - _.last(this.state.events).timestamp\r\n        }\r\n\r\n        this.setState({\r\n            x: x,\r\n            y: y,\r\n            class: cls,\r\n            consequence: consequence,\r\n            magnitude: this.state.magnitude1 ? this.state.magnitude1 : 1,\r\n        })\r\n\r\n        this.setState({ events: [...this.state.events, thisEvent] })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ////////////////////////////////////////////\r\n\r\n    runSimulation = () => {\r\n\r\n        this.setState({\r\n            agentType: 'etbd',\r\n            player1: true\r\n        })\r\n\r\n        d3.selectAll('.introTexts').remove()\r\n\r\n        let etbdInt1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1));\r\n        let etbdInt2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2));\r\n\r\n        this.setState({ r1etbd: etbdInt1, r2etbd: etbdInt2 });\r\n\r\n\r\n        for (let g = 0; g < 1000; g++) {\r\n\r\n            let evz = this.state.etbdEvents\r\n            let thisGeneration = evz[evz.length - 1]\r\n\r\n            let population = thisGeneration.population\r\n            let ems = demoEtbd.emitBehavior(thisGeneration.population)\r\n            let cls = demoEtbd.emissionClass(ems)\r\n            let rnf = false\r\n\r\n            if (cls === 'b1' && g > this.state.r1etbd) {\r\n                rnf = true\r\n                let etbdInt1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1));\r\n                this.setState({ r1etbd: g + etbdInt1 })\r\n            }\r\n\r\n            if (cls === 'b2' && g > this.state.r2etbd) {\r\n                rnf = true\r\n                let etbdInt2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2));\r\n                this.setState({ r2etbd: g + etbdInt2 })\r\n            }\r\n\r\n            this.setState({\r\n                population: population,\r\n                ems: ems,\r\n                cls: cls,\r\n                rnf: rnf\r\n            })\r\n\r\n\r\n            thisGeneration.g = g\r\n            thisGeneration.eventIndex = g\r\n            thisGeneration.ems = ems\r\n            thisGeneration.cls = cls\r\n            thisGeneration.rnf = rnf\r\n\r\n\r\n            // ----------------  CREATE NEW POPULATION:  --------------\r\n\r\n            let parentalDiads = []\r\n            let children = []\r\n\r\n            // get n pairs of unique parents: \r\n\r\n            if (rnf === true) {\r\n                for (let j = 0; j < thisGeneration.population.length; j++) {\r\n                    let parents = demoEtbd.twoFitParents(thisGeneration.population, cls, ems)\r\n                    parentalDiads.push(parents)\r\n                }\r\n            } else {\r\n                for (let j = 0; j < thisGeneration.population.length; j++) {\r\n                    let parents = demoEtbd.twoRandomParents(thisGeneration.population)\r\n                    parentalDiads.push(parents)\r\n                }\r\n            }\r\n\r\n\r\n            // recombine their genotypes: \r\n            parentalDiads.forEach((pair) => {\r\n                let child = demoEtbd.crossTwoStrings(pair)\r\n                children.push(child)\r\n            })\r\n\r\n\r\n            // mutate some genotypes:\r\n            let newChildren = []\r\n\r\n            children.forEach((child) => {\r\n                let mutant = demoEtbd.undergoesMutation()\r\n\r\n                if (mutant === true) {\r\n                    let newChild = demoEtbd.flipRandomBit(child)\r\n                    newChildren.push(newChild)\r\n                } else {\r\n                    newChildren.push(child)\r\n                }\r\n            })\r\n\r\n            //  =============   A new population has been created  ===========\r\n\r\n            let irt = 0\r\n            let co = false\r\n\r\n            if (this.state.etbdEvents.length > 1) {\r\n                irt = g - this.state.etbdEvents[this.state.etbdEvents.length - 1].g\r\n\r\n                if (cls !== this.state.etbdEvents[this.state.etbdEvents.length - 1].cls) {\r\n                    co = true\r\n                }\r\n            }\r\n\r\n            thisGeneration.co = co\r\n            thisGeneration.irt = irt\r\n\r\n            evz[evz.length - 1] = thisGeneration\r\n            evz.push({\r\n                population: newChildren,\r\n                g: null,\r\n                eventIndex: null,\r\n                ems: null,\r\n                cls: \"\",\r\n                rnf: false,\r\n                co: false,\r\n                irt: null\r\n            })\r\n\r\n            this.setState({\r\n                etbdEvents: evz\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //  RESET:  ---------------------------------------------------          RESET\r\n\r\n    resetDemo = () => {\r\n\r\n        // RESET ALL TIMERS: \r\n\r\n\r\n        // CLEAR CUMULATIVE RECORD:\r\n        let svgRecord = d3.select(\"#svgRecord\");\r\n        svgRecord.selectAll(\".dataLine\").remove();\r\n        svgRecord.selectAll(\".dataCircle\").remove();\r\n\r\n        // RESET STATE: \r\n        let myState = setMatchingState();\r\n        this.setState(myState)\r\n    };\r\n\r\n\r\n\r\n    resetEtbd = () => {\r\n\r\n        this.setState({ player1: false })\r\n        let population = demoEtbd.createGenZero()\r\n        this.setState({\r\n            // population: population,\r\n            etbdEvents: [{\r\n                g: 0,\r\n                eventIndex: 0,\r\n                population: population,\r\n                ems: null,\r\n                cls: \"\",\r\n                rnf: false,\r\n                co: false,\r\n                irt: 0\r\n            }],\r\n        })\r\n    };\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        let population = demoEtbd.createGenZero()\r\n        this.setState({\r\n            // population: population,\r\n            etbdEvents: [{\r\n                g: 0,\r\n                eventIndex: 0,\r\n                population: population,\r\n                ems: null,\r\n                cls: \"\",\r\n                rnf: false,\r\n\r\n                co: false,\r\n                irt: 0\r\n            }],\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n\r\n\r\n            <div className='demo-container'>\r\n\r\n                {/* <h1>learned behavior in mice, mehn, and machines</h1> */}\r\n\r\n\r\n                <div className='row' >\r\n\r\n                    <div className='left'>\r\n\r\n                        <PopOverV2\r\n                            title={'Cumulative records'}\r\n                            description={'show the stream of events that occur in a Skinner box during an experiment.'}\r\n                            link={'https://abatechnologies.com/blog/when-in-doubt-make-a-cumulative-record'}\r\n                        />\r\n                        <CumulativeRecordV2\r\n                            agentType={this.state.agentType}\r\n                            events={this.state.events}\r\n                            etbdEvents={this.state.etbdEvents}\r\n                            timeLimit={this.state.timeLimit}\r\n                            recordHeight={this.state.recordHeight}\r\n                            color1={this.state.colors.color1}\r\n                            color2={this.state.colors.color2}\r\n                        />\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        <div className='div-live-matching'>\r\n\r\n\r\n                            <PopOverV2\r\n                                title={'Skinner boxes'}\r\n                                description={'are used to explore the effects of experience on the probability to engage in an activity.'\r\n                                }\r\n                                link={'https://behavioralscientist.org/21st-century-skinner-box/'}\r\n                            />\r\n\r\n\r\n                            <DivPoints\r\n                                consequence={this.state.consequence}\r\n                            />\r\n\r\n                            <div className='classes'>\r\n                                <button\r\n                                    id='class1'\r\n                                    className='btn-class1 lever-gradient'\r\n                                    // key={nanoid()}\r\n                                    onClick={(this.state.liveSession === true && this.state.cod1_status === 'off') ? this.evaluateResponse : this.logResponse}\r\n                                    style={{\r\n                                        // borderColor: this.state.liveSession === true ? '#28f4bd' : '#1d2731',\r\n                                        color: this.state.liveSession === true ? '#1d2731' : this.state.colors.color1\r\n                                    }}\r\n                                >\r\n                                    This\r\n                                </button>\r\n\r\n                                <button\r\n                                    id='class2'\r\n                                    className='btn-class2 lever-gradient'\r\n                                    // key={nanoid()}\r\n                                    onClick={(this.state.liveSession === true && this.state.cod2_status === 'off') ? this.evaluateResponse : this.logResponse}\r\n                                    style={{\r\n                                        // borderColor: this.state.liveSession === true ? '#28f4bd' : '#1d2731',\r\n                                        color: this.state.liveSession === true ? '#1d2731' : this.state.colors.color2\r\n                                    }}\r\n                                >\r\n                                    That\r\n                                </button>\r\n                            </div>\r\n\r\n\r\n                            <p className='p-directions'\r\n                                style={{\r\n                                    // borderColor: this.state.liveSession === true ? '#28f4bd' : '#1d2731',\r\n\r\n                                    color: this.state.liveSession === true ? '#1d2731' : '#aaa'\r\n                                }}\r\n                            >\r\n                                Doing\r\n                                <span> this </span>\r\n                                or\r\n                                <span> that </span>\r\n                                may result in points.<br />\r\n                                Go ahead, learn something.\r\n                            </p>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n\r\n\r\n                        <div className='box-controls'>\r\n                            <button\r\n                                id=\"btnStartMatching\"\r\n                                onClick={this.beginSession}\r\n                                className='btn-start'\r\n                            >\r\n                                Start\r\n                            </button>\r\n\r\n                            <button\r\n                                id=\"btnResetMatching\"\r\n                                onClick={this.resetDemo}\r\n                                className='btn-reset'\r\n                            >\r\n                                reset\r\n                            </button>\r\n                        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n                    <div className='right'>\r\n\r\n\r\n                        {/* <p\r\n                            style={{\r\n                                width: \"350px\",\r\n                                margin: \"auto auto 2rem auto\",\r\n                                margin: \"auto\",\r\n                                color: \"#999\",\r\n                                fontSize: \".6rem\",\r\n                                fontWeight: 700,\r\n\r\n                            }}\r\n                        >\r\n                            The computational theory is essentially the same as the one I worked with in the past (McDowell, 2004; Popa. 2013; Popa & McDowell, 2016), except for one subtle change to the selection rule (Popa, 2018).\r\n\r\n                            <br />\r\n\r\n                            The live procedure is similar to the one I developed for my disertation project (in VB.Net; Popa, 2013).\r\n\r\n                            <br /><br />\r\n\r\n                            Both were recreated from scratch using React and D3.\r\n                            <a\r\n                                href='https://etd.library.emory.edu/concern/etds/9880vr10s?locale=en'\r\n                            >\r\n                                https://etd.library.emory.edu/concern/etds/9880vr10s?locale=en\r\n                            </a>\r\n                        </p> */}\r\n\r\n\r\n\r\n                        <div className='sub-section'>\r\n\r\n\r\n                            <h2>Computational representation</h2>\r\n\r\n                            <p >\r\n                                In ETBD, <span> behaviors </span> are represented by a range of integers; target <span> classes </span>,\r\n                                by custom sub-ranges; and <span> agents </span>, by populations of integers that evolve according to Darwinian principles.\r\n                            </p>\r\n                        </div>\r\n\r\n\r\n                        {/* <div>\r\n    {this.state.population ? this.state.population.toString() : \"this.state.population\"}\r\n</div> */}\r\n\r\n\r\n                        {/* <PopOverV2\r\n                            title={'Skinner boxes'}\r\n                            description={'are used to explore the effects of experience on the probability to engage in an activity.'\r\n                            }\r\n                            link={'https://behavioralscientist.org/21st-century-skinner-box/'}\r\n                        /> */}\r\n\r\n                        <div className='sub-section'\r\n                            // key={nanoid()}\r\n                            style={{\r\n                                textAlign: \"center\",\r\n                                // border: \"5px solid red\"\r\n                            }}\r\n                        >\r\n\r\n\r\n\r\n\r\n                            {/* <PlayerRangeBasicV1\r\n                                // agentType={this.state.agentType}\r\n                                player1={this.state.player1}\r\n                                resetplayer1={this.state.resetplayer1}\r\n                                // vvv={(this.state.etbdEvents && this.state.etbdEvents.length > 0) ? this.state.etbdEvents : null}\r\n                                vvv={this.state.etbdEvents}\r\n                                runSimulation={this.runSimulation}\r\n                                resetEtbd={this.resetEtbd}\r\n                            /> */}\r\n\r\n                            <Agent50\r\n                                agentType={this.state.agentType}\r\n\r\n                                player1={this.state.player1}\r\n                                resetplayer1={this.state.resetplayer1}\r\n                                vvv={this.state.etbdEvents}\r\n                                runSimulation={this.runSimulation}\r\n                                resetEtbd={this.resetEtbd}\r\n                                recordHeight={this.state.recordHeight}\r\n                            />\r\n                        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\etbdSampleData.js",[],["522","523"],"F:\\react_portfolio\\src\\COMPONENTS\\matching\\CumulativeRecordV2.js",["524","525","526","527","528","529","530","531"],"import './cumulative-record.sass';\r\nimport { dataSample } from \"./dataSample\";\r\n\r\nimport * as d3 from \"d3\";\r\nimport { nanoid } from \"nanoid\";\r\nimport _ from \"lodash\";\r\nimport { useRef, useEffect, useLayoutEffect, useState } from \"react\";\r\n\r\nimport PopOverV2 from '../abc/PopOverV2';\r\nimport etbdState from '../etbd/etbdState';\r\nimport myColors from '../../styles/_colors.sass';\r\n\r\n\r\nexport default function CumulativeRecordV2(props) {\r\n\r\n    const refRecord = useRef(null);\r\n    const refEtbdRecord = useRef(null);\r\n\r\n    let svgWidth = 300;\r\n    let svgHeight = 200;\r\n    let margin = { top: 10, left: 40, bottom: 40, right: 10 };\r\n    let width = svgWidth - margin.left - margin.right;\r\n    let height = svgHeight - margin.top - margin.bottom;\r\n\r\n    const X = d3.scaleLinear()\r\n        .range([0, width])\r\n        .domain([0, props.timeLimit * 1000]);\r\n\r\n    const Y = d3.scaleLinear()\r\n        .range([height, 0])\r\n        .domain([0, props.recordHeight]);\r\n\r\n    // const Xetbd = d3.scaleLinear()\r\n    //     .range([0, width])\r\n    //     .domain([0, 100]);\r\n\r\n\r\n    // ------------------------------------------------------------   CHART  BODY\r\n\r\n    useLayoutEffect(() => {\r\n\r\n        //--------------------------------------------\r\n        d3.select(refEtbdRecord.current).attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n        //---------------------------------------------\r\n        const gRecord = d3.select(refRecord.current);\r\n        gRecord.attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n\r\n        gRecord.select('.xAxis')\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(\r\n                d3\r\n                    .axisBottom(X)\r\n                    .tickPadding(10)\r\n                    // .tickFormat((d) => d === 0 ? `seconds` : `${d / 1000} s`)\r\n                    // .tickFormat((d) => d / 1000 === rops.timeLimit ? `${d / 1000} seconds` : `${d / 1000} s`)\r\n\r\n                    .ticks(0)\r\n                // .tickValues([(timeLimit / 2) * 1000, timeLimit * 1000])\r\n                // .tickValues([0, (props.timeLimit / 2) * 1000, props.timeLimit * 1000])\r\n                // .tickSize(-height)\r\n                // .tickSizeOuter(-height)\r\n            )\r\n            .selectAll('text')\r\n            // .transition().duration(1000)\r\n            // .attr('fill', () => {\r\n            //     return props.agentType === 'etbd'  ? 'cyan' : 'grey'\r\n            // })\r\n            // .style('font-size', () => {\r\n            //     return props.agentType === 'etbd'  ? '.7rem' : '.5rem'\r\n            // } )\r\n            .attr('opacity', () => {\r\n                return props.agentType === \"human\" ? .9 : .4\r\n            })\r\n        // .selectAll('path')\r\n        // .attr('stroke', '#333333')\r\n\r\n        gRecord.select('.yAxis')\r\n            .call(\r\n                d3\r\n                    .axisLeft(Y)\r\n                    .tickPadding(10)\r\n                    .ticks(4)\r\n                // .tickValues([0, props.recordHeight * .33, props.recordHeight * .67, props.recordHeight])\r\n                // .tickSizeOuter(-width)\r\n            )\r\n        // .selectAll('path')\r\n        // .attr('stroke-width', .5)\r\n\r\n        const gLabels = gRecord.append('g').attr(\"class\", 'axes-labels')\r\n\r\n        gLabels.append(\"text\").text('This')\r\n            .attr(\"x\", 15)\r\n            .attr(\"y\", .05 * height)\r\n            .attr(\"fill\", props.color1)\r\n            .attr(\"font-size\", '.8rem')\r\n            .attr(\"font-weight\", 100)\r\n\r\n        gLabels.append(\"text\").text('+')\r\n            .attr(\"x\", 50)\r\n            .attr(\"y\", .05 * height)\r\n            .attr(\"fill\", \"#888888\")\r\n            .attr(\"font-size\", '.8rem')\r\n            .attr(\"font-weight\", 100)\r\n\r\n        gLabels.append(\"text\").text('That')\r\n            .attr(\"x\", 70)\r\n            .attr(\"y\", .05 * height)\r\n            .attr(\"fill\", props.color2)\r\n            .attr(\"font-size\", '.8rem')\r\n            .attr(\"font-weight\", 100)\r\n\r\n        // gLabels.append(\"text\").text('seconds / generations')\r\n\r\n        gLabels.append(\"text\")\r\n            // .text('time')\r\n            // .text(() => { return props.agentType === 'etbd' ? 'generations' : 'time' })\r\n            .text(() => {\r\n                if (props.agentType && props.agentType === 'etbd') {\r\n                    return 'generations'\r\n                } else {\r\n                    return 'time'\r\n                }\r\n            })\r\n            .attr(\"x\", (.9 * width) / 2)\r\n            .attr(\"y\", Y(0))\r\n            .attr(\"dx\", 0)\r\n            .attr(\"dy\", 25)\r\n            // .attr(\"fill\", \"#777\")\r\n\r\n            // .fill(() => {\r\n            //     if (props.agentType && props.agentType === 'etbd') {\r\n            //         return '#00ff00'\r\n            //     } else {\r\n            //         return '#ff9900'\r\n            //     }\r\n            // })\r\n            .attr('fill', () => {\r\n                if (props.agentType && props.agentType === 'etbd') {\r\n                    return '#00ff00'\r\n                } else {\r\n                    return '#ff9900'\r\n                }\r\n            })\r\n\r\n            .attr(\"font-size\", '.9rem')\r\n            .attr(\"font-weight\", 100)\r\n\r\n        // gLabels.append(\"text\")\r\n        //     .text('seconds')\r\n        //     .attr('id', 'time-units')\r\n        //     .attr(\"x\", X(0))\r\n        //     .attr(\"y\", Y(0))\r\n        //     .attr(\"dx\", 5)\r\n        //     .attr(\"dy\", 15)\r\n        //     .attr(\"fill\", \"#555555\")\r\n        //     .attr(\"font-size\", '.8rem')\r\n        //     .attr(\"font-weight\", 100)\r\n\r\n        // gLabels.append(\"text\")\r\n        //     .text(props.timeLimit)\r\n        //     .attr('id', 'time-limit')\r\n        //     .attr(\"x\", width)\r\n        //     .attr(\"y\", Y(0))\r\n        //     .attr(\"dx\", 0)\r\n        //     .attr(\"dy\", 25)\r\n        //     .attr(\"fill\", \"#555\")\r\n        //     .attr(\"font-size\", '1rem')\r\n        //     .attr(\"font-weight\", 100)\r\n\r\n        // LIVE DATA  ------------------------------   LIVE DATA \r\n\r\n        let myData = props.events ? props.events : dataSample\r\n\r\n        gRecord.selectAll('.time-line').remove();\r\n        gRecord.selectAll('.response-line').remove();\r\n\r\n\r\n        gRecord.selectAll('.time-line')\r\n            .data(myData)\r\n            .join(\r\n                enter => enter.append(\"line\").attr(\"class\", \"time-line\"),\r\n                update => update.attr(\"class\", \"updated-time-line\"),\r\n                exit => exit.remove()\r\n            )\r\n\r\n            .attr('x1', (d) => X(d.delta_t - d.irt))\r\n            .attr('x2', (d) => X(d.delta_t))\r\n            .attr('y1', (d, i) => Y((i - 1) % props.recordHeight))\r\n            .attr('y2', (d, i) => Y((i - 1) % props.recordHeight))\r\n            .attr(\"stroke\", (d) => d.class === 'b1' ? props.color1 : props.color2)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke-width\", (d, i) => {\r\n                if (i % props.recordHeight === 0) {\r\n                    return 0\r\n                } else {\r\n                    return .25\r\n                }\r\n            })\r\n            .attr(\"opacity\", () => props.agentType === 'human' ? .9 : .4);\r\n\r\n\r\n        gRecord.selectAll('.response-line')\r\n            .data(myData)\r\n            .join(\r\n                enter => enter.append(\"line\").attr(\"class\", \"response-line\"),\r\n                update => update.attr(\"class\", \"updated-response-line\"),\r\n                exit => exit.remove()\r\n            )\r\n            .attr('x1', (d) => X(d.delta_t))\r\n            .attr('x2', (d) => X(d.delta_t))\r\n            .attr('y1', (d, i) => Y((i - 1) % props.recordHeight))\r\n            .attr('y2', (d, i) => Y(i % props.recordHeight))\r\n\r\n            .attr(\"stroke\", (d) => d.class === 'class1' ? props.color1 : props.color2)\r\n            // .attr(\"stroke-width\", (d) => {\r\n            //     if (d.eventIndex % props.recordHeight === 0 || d.co === 1) {\r\n            //         return 0\r\n            //     } else {\r\n            //         return 1\r\n            //     }\r\n            // })\r\n            .attr(\"stroke-width\", (d, i) => {\r\n                if (i % props.recordHeight === 0) {\r\n                    return 0\r\n                } else {\r\n                    return .25\r\n                }\r\n            })\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"opacity\", () => props.agentType === \"human\" ? .9 : .4);\r\n\r\n\r\n\r\n        gRecord.selectAll('circle')\r\n            .data(myData)\r\n            .join(\r\n                enter => enter.append('circle').attr(\"class\", \"new\"),\r\n                update => update.attr(\"class\", \"updated\"),\r\n                exit => exit.remove()\r\n            )\r\n            .attr(\"cx\", (d) => X(d.delta_t))\r\n            .attr(\"cy\", (d, i) => {\r\n                return Y(i % props.recordHeight)\r\n            })\r\n            .attr(\"r\", 3)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"fill\", (d) => {\r\n                if (d.class === \"class1\" && d.consequence === true) {\r\n                    return props.color1\r\n                } else if (d.class === \"class2\" && d.consequence === true) {\r\n                    return props.color2\r\n                } else {\r\n                    return '#1d2731'\r\n                }\r\n            })\r\n\r\n            .attr(\"stroke\", (d) => d.class === 'class1' ? props.color1 : props.color2)\r\n            .attr(\"opacity\", () => props.agentType === \"human\" ? .9 : .4)\r\n            .attr(\"border-radius\", '50%')\r\n        // .attr(\"border-radius\", (d) => d.class === 'class1' ? props.color1 : props.color2);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //  ----     ETBD stuff   -------------------------\r\n\r\n        if (props.etbdEvents && props.etbdEvents.length > 1) {\r\n\r\n            let etbdData = props.etbdEvents.filter((item) => (item.cls === \"b1\" || item.cls === \"b2\"))\r\n\r\n            etbdData.forEach((item, i) => {\r\n                if (etbdData[i - 1]) {\r\n                    item['irt'] = item.g - etbdData[i - 1].g\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n    },\r\n        [refRecord, props]\r\n    );\r\n\r\n    ///////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"record-wrapper\">\r\n\r\n\r\n\r\n            <svg id='svgCumulativeRecord'\r\n                style={{\r\n                    width: svgWidth,\r\n                    height: svgHeight,\r\n                }}\r\n            >\r\n                <g id='gRecord' ref={refRecord}>\r\n                    <g className='xAxis'  ></g>\r\n                    <g className='yAxis'></g>\r\n                </g>\r\n\r\n                <g id='gEtbdRecord' ref={refEtbdRecord}>\r\n                    <g className='xAxis1'  ></g>\r\n                    <g className='yAxis1'></g>\r\n                </g>\r\n            </svg>\r\n        </div>\r\n    )\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\Agent44.js",["532","533","534","535","536","537","538","539"],"import \"./agent-44.sass\";\r\n\r\nimport * as d3 from \"d3\";\r\nimport { useRef, useEffect, useState, useLayoutEffect } from \"react\";\r\nimport etbdState from \"./etbdState\";\r\n\r\n// import { etbdSampleData, etbdFilteredData } from \"./etbdSampleData\";\r\nimport * as demoEtbd from \"../etbd/demoEtbd\"\r\n\r\n\r\n// BEHAVIOR SPACE: --------------------------------\r\n\r\nfunction createAgent(arcRange, adjustQuadrant) {\r\n    let bp = [];\r\n    let arcSize = arcRange / etbdState.repertoire.length\r\n\r\n    etbdState.repertoire.forEach((item, i) => {\r\n        let radians = arcSize * i + adjustQuadrant;\r\n        let targetClass = '';\r\n        if (etbdState.class1.includes(item)) {\r\n            targetClass = 'class1'\r\n        }\r\n        if (etbdState.class2.includes(item)) {\r\n            targetClass = 'class2'\r\n        }\r\n        bp.push(\r\n            {\r\n                phenotype: item,\r\n                radians: radians,\r\n                present: false,\r\n                emited: false,\r\n                consequence: false,\r\n                frequency: 0,\r\n                targetClass: targetClass,\r\n            }\r\n        )\r\n    })\r\n    return bp;\r\n};\r\n\r\n// let arcRange = 2 * Math.PI\r\n// let adjustQuadrant = -Math.PI\r\n\r\nlet arcRange = Math.PI\r\nlet adjustQuadrant = Math.PI\r\n\r\nlet arcSize = arcRange / etbdState.repertoire.length\r\n// const behaviorSpace = createAgent(2 * Math.PI, -Math.PI)\r\nconst behaviorSpace = createAgent(arcRange, adjustQuadrant)\r\n\r\n\r\n\r\n// necessary... ?\r\nlet etbdInt1 = parseInt(d3.randomExponential(1, 5)(etbdState.RI1));\r\nlet etbdInt2 = parseInt(d3.randomExponential(1, 5)(etbdState.RI2));\r\n\r\n// console.log(\"arcsize: \", arcSize)\r\n\r\nexport default function Agent44(props) {\r\n\r\n    // const refAgent612 = useRef(null);\r\n    // const g612 = useRef(null);\r\n\r\n    const [paused, setpaused] = useState(false);\r\n    const [g, setg] = useState(0)\r\n    const [ppl, setppl] = useState(etbdState.defaultPopulation)\r\n    const [emsidx, setemsidx] = useState(null)\r\n\r\n    const [ems, setems] = useState(null)\r\n    const [cls, setcls] = useState(null)\r\n    const [rnf, setrnf] = useState(null)\r\n\r\n    const [co, setco] = useState(null)\r\n\r\n    const [b1, setb1] = useState(0)\r\n    const [b2, setb2] = useState(0)\r\n\r\n    const [etbdEvents, setetbdEvents] = useState(null);\r\n    // const [targetEvents, settargetEvents] = useState(null);\r\n\r\n    const [agent, setagent] = useState(behaviorSpace);\r\n\r\n    const prevgen = useRef(null);\r\n\r\n    const [r1etbd, setr1etbd] = useState(-etbdInt1);\r\n    const [r2etbd, setr2etbd] = useState(-etbdInt2);\r\n\r\n    const svgWidth = 300;\r\n    const svgHeight = 150;\r\n    const margin = { top: 50, right: 50, bottom: 50, left: 50 }\r\n    const width = svgWidth - margin.left - margin.right;\r\n    const height = svgHeight - margin.top - margin.bottom;\r\n\r\n    const innerRadius = 15;\r\n    const outerRadius = 100;\r\n    const radius = outerRadius - innerRadius;\r\n\r\n    const tickDuration = 1000;\r\n\r\n\r\n\r\n\r\n    function resetAgent() {\r\n        setppl(etbdState.defaultPopulation);\r\n        setems(null);\r\n        setcls(null);\r\n        setrnf(null);\r\n        setg(0);\r\n        setco(null);\r\n        setb1(0);\r\n        setb2(0);\r\n\r\n        setetbdEvents(null);\r\n        setagent(behaviorSpace);\r\n\r\n        prevgen.current = null;\r\n\r\n        let etbdInt1 = parseInt(d3.randomExponential(1, 5)(etbdState.RI1));\r\n        let etbdInt2 = parseInt(d3.randomExponential(1, 5)(etbdState.RI2));\r\n\r\n        setr1etbd(-etbdInt1);\r\n        setr2etbd(-etbdInt2);\r\n\r\n        d3.select('#gEtbdRecord').selectAll('.etbd-record-line').remove()\r\n        d3.select('#gEtbdRecord').selectAll('.etbd-record-circle').remove()\r\n        d3.select('#gEtbdRecord').selectAll('.etbd-record-text').remove()\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let tick = null;\r\n\r\n        if (paused === false) {\r\n\r\n            tick = setTimeout(() => {\r\n                setg(g => g + 1)\r\n                setr1etbd(r1etbd => r1etbd + 1);\r\n                setr2etbd(r2etbd => r2etbd + 1);\r\n\r\n\r\n\r\n                //  POPULATION GOES IN:\r\n                // let e = demoEtbd.emitBehavior(ppl);\r\n\r\n                let idx = d3.randomInt(etbdState.popSize)();\r\n                setemsidx(idx);\r\n\r\n                let e = ppl[idx];\r\n                setems(e);\r\n\r\n                let c = demoEtbd.emissionClass(e);\r\n                setcls(c);\r\n\r\n                if (c === 'class1') {\r\n                    setb1(b1 => b1 + 1)\r\n                }\r\n\r\n                if (c === 'class2') {\r\n                    setb1(b2 => b2 + 1)\r\n                }\r\n\r\n\r\n                let r = false;\r\n\r\n\r\n                if (c === 'class1' && r1etbd >= 0) {\r\n                    r = true;\r\n                    let etbdInt1 = parseInt(d3.randomExponential(1, 5)(etbdState.RI1));\r\n                    setr1etbd(-etbdInt1)\r\n                }\r\n\r\n                if (cls === 'class2' && r2etbd >= 0) {\r\n                    r = true;\r\n                    let etbdInt2 = parseInt(d3.randomExponential(1, 5)(etbdState.RI2));\r\n                    setr2etbd(-etbdInt2)\r\n                }\r\n\r\n                setrnf(r)\r\n\r\n\r\n                let gendata = { g: g, ppl: ppl, ems: e, cls: c, rnf: r, co: co };\r\n\r\n                if (c === \"class1\" || c === \"class2\") {\r\n                    prevgen.current = gendata;\r\n                }\r\n\r\n                if (etbdEvents && etbdEvents.length) {\r\n\r\n                    // let evz = etbdEvents.slice(-49);\r\n                    let evz = etbdEvents;\r\n                    evz.push(gendata)\r\n                    setetbdEvents(evz);\r\n                } else {\r\n                    setetbdEvents([gendata]);\r\n                }\r\n\r\n\r\n                // -------  CREATE NEW POPULATION:  ------------\r\n\r\n                let parentalDiads = []\r\n                let children = []\r\n\r\n\r\n                // get n pairs of unique parents: \r\n                if (rnf === true) {\r\n                    for (let j = 0; j < etbdState.popSize; j++) {\r\n                        let parents = demoEtbd.twoFitParents(ppl, c, e)\r\n                        parentalDiads.push(parents)\r\n                    }\r\n                } else {\r\n                    for (let j = 0; j < etbdState.popSize; j++) {\r\n                        let parents = demoEtbd.twoRandomParents(ppl)\r\n                        parentalDiads.push(parents)\r\n                    }\r\n                }\r\n\r\n\r\n                // recombine their genotypes: \r\n                parentalDiads.forEach((pair) => {\r\n                    let child = demoEtbd.crossTwoStrings(pair)\r\n                    children.push(child)\r\n                })\r\n\r\n\r\n                // mutate some genotypes:\r\n                let newChildren = []\r\n\r\n                children.forEach((child) => {\r\n                    let mutant = demoEtbd.undergoesMutation()\r\n\r\n                    if (mutant === true) {\r\n                        let newChild = demoEtbd.flipRandomBit(child)\r\n                        newChildren.push(newChild)\r\n                    } else {\r\n                        newChildren.push(child)\r\n                    }\r\n                })\r\n\r\n\r\n\r\n                //  RETURN NEW POPULATION: newChildren:\r\n                newChildren.sort((a, b) => a - b)\r\n                setppl(newChildren)\r\n\r\n            }, tickDuration);\r\n        }\r\n\r\n        return () => clearTimeout(tick);\r\n\r\n    },\r\n        [paused, ppl]\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // useEffect(() => {\r\n    //     if (etbdEvents && etbdEvents.length > 0) {\r\n    //         let ev = etbdEvents[etbdEvents.length - 1]\r\n    //         // console.log(\"ev: \", ev)\r\n\r\n    //         if (ev.cls === \"class1\" || ev.cls === \"class2\") {\r\n    //             prevgen.current = ev;\r\n    //         }\r\n    //     }\r\n    // },\r\n    //     [etbdEvents]\r\n    // )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (etbdEvents && etbdEvents.length && etbdEvents.length > 0) {\r\n\r\n            // let etbdData = etbdEvents.filter((item) => (item.cls === \"class1\" || item.cls === \"class2\"))\r\n\r\n            // let etbdData = etbdFilteredData\r\n            // console.log('filtered events: ', etbdData)\r\n\r\n            let gEtbdRecord = d3.select('#gEtbdRecord');\r\n            gEtbdRecord.attr(\"transform\", `translate(${40}, ${40})`);\r\n\r\n\r\n            /////////////////////////////////////////////////////////////\r\n\r\n            let w = 310\r\n            let h = 205\r\n\r\n            let xdomain = g > 100 ? [g - 99, g] : [0, 100]\r\n\r\n            const xrec = d3.scaleLinear()\r\n                .range([0, w])\r\n                .domain(xdomain)\r\n\r\n            const yrec = d3.scaleLinear()\r\n                .range([h, 0])\r\n                .domain([0, props.recordHeight]);\r\n\r\n            /////////////////////////////////////////////////////////////\r\n\r\n\r\n            gEtbdRecord.select('.xAxis1')\r\n                .attr(\"transform\", \"translate(0,\" + h + \")\")\r\n                .call(\r\n                    d3\r\n                        .axisBottom(xrec)\r\n                        .tickPadding(30)\r\n                    // .ticks(20)\r\n                    // .tickSize(-h)\r\n                    // .tickFormat((d) => d === 0 ? `generations` : d)\r\n                )\r\n                .selectAll('text')\r\n                .attr('opacity', () => {\r\n                    return props.agentType === 'etbd' ? .9 : .4\r\n                })\r\n                .selectAll('path')\r\n                .attr('stroke-width', .5)\r\n\r\n\r\n            gEtbdRecord.select('.yAxis1')\r\n                .call(\r\n                    d3\r\n                        .axisLeft(yrec)\r\n                        .tickPadding(10)\r\n                        .ticks(0)\r\n                    // .tickValues([0, props.recordHeight * .33, props.recordHeight * .67, props.recordHeight])\r\n                    // .tickSizeOuter(-width)\r\n                )\r\n                .selectAll('path')\r\n                .attr('stroke-width', .5)\r\n            ////////////////////////////////////////////////////////\r\n\r\n            let x1, x2, y1, y2;\r\n\r\n            if (b1 + b2 === 1) {\r\n                x1 = 0;\r\n                x2 = g - 1;\r\n                y1 = 0;\r\n                y2 = 1;\r\n            } else {\r\n                x1 = prevgen.current.g;\r\n                x2 = g - 1;\r\n                y1 = b1 + b2 - 1;\r\n                y2 = b1 + b2;\r\n            }\r\n\r\n            if (y2 % props.recordHeight !== 0) {\r\n                gEtbdRecord.append('line').attr('class', 'etbd-record-line')\r\n\r\n                    // .attr('x1', xrec(x1 % 100))\r\n                    // .attr('x2', xrec(x2 % 100))\r\n                    .attr('x1', xrec(x1))\r\n                    .attr('x2', xrec(x2))\r\n\r\n                    .attr('y1', yrec((y1 % props.recordHeight)))\r\n                    .attr('y2', yrec(y2 % props.recordHeight))\r\n\r\n                    .attr(\"stroke\", () => {\r\n                        if (cls === 'class1') {\r\n                            return etbdState.color111\r\n                        }\r\n                        if (cls === 'class2') {\r\n                            return etbdState.color222\r\n                        }\r\n                    })\r\n                    .attr('stroke-width', 1)\r\n            }\r\n\r\n            gEtbdRecord.append('circle').attr('class', 'etbd-record-circle')\r\n                // .attr('cx', xrec(x2 % 100))\r\n                .attr('cx', xrec(x2))\r\n                .attr('cy', yrec(y2 % props.recordHeight))\r\n                .attr('r', 3)\r\n                .attr(\"stroke\", () => {\r\n                    if (cls === 'class1') {\r\n                        return etbdState.color11\r\n                    }\r\n                    if (cls === 'class2') {\r\n                        return etbdState.color22\r\n                    }\r\n                })\r\n                .attr(\"fill\", () => {\r\n                    if (cls === 'class1' && rnf === true) {\r\n                        return etbdState.color1\r\n                    }\r\n                    if (cls === 'class2' && rnf === true) {\r\n                        return etbdState.color2\r\n                    }\r\n\r\n                    return '#1d2734'\r\n                })\r\n                .attr('stroke-width', 1)\r\n\r\n\r\n            gEtbdRecord.append('text').attr('class', 'etbd-record-text')\r\n                // .attr('cx', xrec(x2 % 100))\r\n                .attr('x', xrec(x2))\r\n                .attr('y', yrec(y2 % props.recordHeight))\r\n                .attr('dx', -20)\r\n                .attr('dy', -10)\r\n                .attr(\"font-size\", '.7rem')\r\n                .attr(\"fill\", () => {\r\n                    if (cls === 'class1') {\r\n                        return etbdState.color11\r\n                    }\r\n                    if (cls === 'class2') {\r\n                        return etbdState.color22\r\n                    }\r\n                })\r\n\r\n                // .attr(\"fill\", () => {\r\n                //     if (cls === 'class1' && rnf === true) {\r\n                //         return etbdState.color1\r\n                //     }\r\n                //     if (cls === 'class2' && rnf === true) {\r\n                //         return etbdState.color2\r\n                //     }\r\n                //     return '#1d2734'\r\n                // })\r\n                .text(ems)\r\n        }\r\n    },\r\n        [b1, b2]\r\n    );\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n\r\n        <>\r\n            <div id='agent-44'>\r\n\r\n                <div className='behavior-space-basic'>\r\n\r\n                    <div className='min'>\r\n                        {`${etbdState.repertoire[0]} ... `}\r\n                    </div>\r\n\r\n                    <div className='c1' style={{ color: etbdState.color11 }}>\r\n                        {`${etbdState.class1[0]} ... ${etbdState.class1[etbdState.class1.length - 1]}`}\r\n                    </div>\r\n\r\n\r\n                    <div className='c2' style={{ color: etbdState.color22 }}>\r\n                        {`${etbdState.class2[0]} ... ${etbdState.class2[etbdState.class2.length - 1]}`}\r\n                    </div>\r\n\r\n                    <div className='max'>\r\n                        {` ... ${etbdState.repertoire[etbdState.repertoire.length - 1]}`}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n                <div className='agent-theory'>\r\n\r\n\r\n                    <div className='agent' title='Agent'>\r\n\r\n                        <span\r\n                            className='span-agent'\r\n                            datag={g}\r\n                        >\r\n                            Agent\r\n                        </span>\r\n\r\n\r\n                        <div className='div-ppl'>\r\n                            {\r\n                                ppl.map((item, i) => {\r\n                                    return (\r\n\r\n                                        <button\r\n                                            className='btn-ppl'\r\n                                            value={item}\r\n                                            // name={`${i}`}\r\n                                            // style={{\r\n                                            //     transform: i === emsidx ? `translateY(-10px)` : `translateY(0px)`,\r\n                                            // }}\r\n                                            style={{\r\n                                                color: i === emsidx ? '#ffffffaa' : 'transparent',\r\n                                            }}\r\n                                        >\r\n                                            {item}\r\n                                        </button>\r\n\r\n\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n                    <div className='evd'>\r\n                        <div className='box-title'>\r\n                            <h7>Darwinian <br />principles</h7>\r\n                        </div>\r\n\r\n\r\n                        <div className='box-controls' >\r\n\r\n                            <button\r\n                                className='btn-start'\r\n                                onClick={() => { setpaused(!paused) }}\r\n                            >\r\n                                {/* {paused ? 'run ETBD' : `${g}`} */}\r\n                                {paused ? 'run' : `||`}\r\n\r\n                            </button>\r\n\r\n                            <button\r\n                                className='btn-reset'\r\n                                onClick={resetAgent}\r\n                                title='reset'\r\n                            >\r\n                                clr\r\n                            </button>\r\n\r\n\r\n\r\n\r\n                            {/* <div\r\nclassName='div-g'\r\n>\r\n<span> {g}</span>\r\n</div> */}\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n        </>\r\n    )\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n",["540","541"],"F:\\react_portfolio\\src\\COMPONENTS\\etbd\\Agent46.js",["542","543","544","545","546","547","548","549","550","551","552","553"],"F:\\react_portfolio\\src\\COMPONENTS\\etbd\\Agent48.js",["554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571"],"F:\\react_portfolio\\src\\COMPONENTS\\etbd\\Agent50.js",["572","573","574","575","576","577","578","579","580","581","582","583","584","585"],"\r\nimport * as d3 from \"d3\";\r\nimport { useRef, useEffect, useState, useLayoutEffect } from \"react\";\r\n\r\nimport \"./agent-44.sass\";\r\nimport './agent-44-animations.sass';\r\n\r\nimport etbdState from \"./etbdState\";\r\nimport * as demoEtbd from \"../etbd/demoEtbd\";\r\nimport BehaviorSpaceBasic from \"./BehaviorSpaceBasic\";\r\nimport Population from \"./Population\";\r\nimport EmissionSign from \"./EmissionSign\";\r\nimport ConsequenceSign from \"./ConsequenceSign\";\r\nimport BoxTitle from \"./BoxTitle\";\r\n\r\n\r\n// let etbdInt1 = parseInt(d3.randomExponential(1, 5)(etbdState.RI1));\r\nlet etbdInt2 = parseInt(d3.randomExponential(1, 5)(etbdState.RI2));\r\n\r\n\r\n\r\nexport default function Agent50(props) {\r\n\r\n    const [paused, setpaused] = useState(true);\r\n    const [simstate, setsimstate] = useState(\"off\")\r\n    const [g, setg] = useState(null)\r\n    const [ppl, setppl] = useState(null)\r\n    const [emsidx, setemsidx] = useState(null)\r\n    const [ems, setems] = useState(null)\r\n    const [cls, setcls] = useState(null)\r\n    const [rnf, setrnf] = useState(null)\r\n    const [b1, setb1] = useState(0)\r\n    const [b2, setb2] = useState(0)\r\n    const [etbdEvents, setetbdEvents] = useState(null);\r\n    const prevgen = useRef(null);\r\n\r\n    // const [r1etbd, setr1etbd] = useState(-etbdInt1);\r\n    const [r1etbd, setr1etbd] = useState(-1);\r\n    const [r2etbd, setr2etbd] = useState(-etbdInt2);\r\n\r\n    const svgWidth = 300;\r\n    const svgHeight = 150;\r\n    const margin = { top: 50, right: 50, bottom: 50, left: 50 }\r\n    const width = svgWidth - margin.left - margin.right;\r\n    const height = svgHeight - margin.top - margin.bottom;\r\n\r\n    const tickDuration = 1;\r\n\r\n\r\n    function resetAgent() {\r\n        setpaused(true);\r\n        setsimstate(\"off\");\r\n        setppl(null);\r\n        setemsidx(null);\r\n        setems(null);\r\n        setcls(null);\r\n        setrnf(null);\r\n        setg(null);\r\n        setb1(0);\r\n        setb2(0);\r\n\r\n        setetbdEvents(null);\r\n        prevgen.current = null;\r\n\r\n        // let etbdInt1 = parseInt(d3.randomExponential(1, 5)(etbdState.RI1));\r\n        let etbdInt2 = parseInt(d3.randomExponential(1, 5)(etbdState.RI2));\r\n\r\n        // setr1etbd(-etbdInt1);\r\n        setr1etbd(-1);\r\n        setr2etbd(-etbdInt2);\r\n        d3.select('#gEtbdRecord').selectAll('.etbd-record-line').remove()\r\n        d3.select('#gEtbdRecord').selectAll('.etbd-record-circle').remove()\r\n        d3.select('#gEtbdRecord').selectAll('.etbd-record-text').remove()\r\n        d3.select('#gEtbdRecord').selectAll('.etbd-record-time').remove()\r\n    }\r\n\r\n\r\n\r\n    // -------  CREATE NEW POPULATION:  ------------\r\n\r\n    function newppl(oldgen) {\r\n\r\n        let parentalDiads = []\r\n        let children = []\r\n\r\n\r\n        // get n pairs of unique parents: \r\n        if (oldgen.rnf === true) {\r\n            for (let j = 0; j < etbdState.popSize; j++) {\r\n                let parents = demoEtbd.twoFitParents(oldgen.ppl, oldgen.cls, oldgen.ems)\r\n                parentalDiads.push(parents)\r\n            }\r\n        } else {\r\n            for (let j = 0; j < etbdState.popSize; j++) {\r\n                let parents = demoEtbd.twoRandomParents(oldgen.ppl)\r\n                parentalDiads.push(parents)\r\n            }\r\n        }\r\n\r\n\r\n        // recombine their genotypes: \r\n        parentalDiads.forEach((pair) => {\r\n            let child = demoEtbd.crossTwoStrings(pair)\r\n            children.push(child)\r\n        })\r\n\r\n\r\n        // mutate some genotypes:\r\n        let newChildren = []\r\n\r\n        children.forEach((child) => {\r\n            let mutant = demoEtbd.undergoesMutation()\r\n\r\n            if (mutant === true) {\r\n                let newChild = demoEtbd.flipRandomBit(child)\r\n                newChildren.push(newChild)\r\n            } else {\r\n                newChildren.push(child)\r\n            }\r\n        })\r\n\r\n        //  RETURN NEW POPULATION: newChildren:\r\n        newChildren.sort((a, b) => a - b)\r\n        return newChildren\r\n    }\r\n\r\n\r\n\r\n    //  ---------------------- --------------  setg(0)\r\n\r\n    useLayoutEffect(() => {\r\n        let tick = null;\r\n        if (paused === false && g === null) {\r\n\r\n            let gt = d3.select('#xlabel');\r\n            gt.text(null);\r\n            gt.text('generations');\r\n\r\n            tick = setTimeout(() => {\r\n                setg(0);\r\n                setppl(etbdState.defaultPopulation);\r\n                setsimstate(\"randomindex\")\r\n            }, tickDuration);\r\n        }\r\n        return () => clearTimeout(tick);\r\n    },\r\n        [paused]\r\n    )\r\n\r\n\r\n    // -----------------   ------------------- ems idx \r\n\r\n    useLayoutEffect(() => {\r\n        let tick2 = null;\r\n        if (paused === false && simstate === 'randomindex') {\r\n            tick2 = setTimeout(() => {\r\n                let idx = d3.randomInt(etbdState.popSize)();\r\n                setemsidx(idx);\r\n                setsimstate(\"emission\")\r\n            }, tickDuration);\r\n        }\r\n        return () => clearTimeout(tick2);\r\n    },\r\n        [simstate]\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n    // -----------------   ------------------- ems value \r\n    useLayoutEffect(() => {\r\n        let tick3 = null;\r\n        if (paused === false && simstate === 'emission') {\r\n            tick3 = setTimeout(() => {\r\n                let e = ppl[emsidx];\r\n                setems(e);\r\n                setsimstate(\"class\")\r\n            }, tickDuration);\r\n        }\r\n        return () => clearTimeout(tick3);\r\n    },\r\n        [simstate]\r\n    )\r\n\r\n\r\n    // -----------------   ------------------- cls, b1, b2 \r\n    useLayoutEffect(() => {\r\n        let tick4 = null;\r\n        if (paused === false && simstate === 'class') {\r\n            tick4 = setTimeout(() => {\r\n                let c = demoEtbd.emissionClass(ems);\r\n                setcls(c);\r\n                if (c === 'class1') {\r\n                    setb1(b1 => b1 + 1)\r\n                }\r\n                if (c === 'class2') {\r\n                    setb1(b2 => b2 + 1)\r\n                }\r\n\r\n\r\n                //  record, draw time-line:\r\n\r\n\r\n                setsimstate(\"reinforcement\")\r\n\r\n\r\n            }, tickDuration);\r\n        }\r\n        return () => clearTimeout(tick4);\r\n    },\r\n        [simstate]\r\n    )\r\n\r\n\r\n\r\n    // -----------------   ------------------- rnf\r\n    useLayoutEffect(() => {\r\n        let tick5 = null;\r\n        if (paused === false && simstate === 'reinforcement') {\r\n            tick5 = setTimeout(() => {\r\n                let r = false;\r\n                if (cls === 'class1' && r1etbd >= 0) {\r\n                    r = true;\r\n                    let etbdInt1 = parseInt(d3.randomExponential(1, 5)(etbdState.RI1));\r\n                    setr1etbd(-etbdInt1)\r\n                }\r\n                if (cls === 'class2' && r2etbd >= 0) {\r\n                    r = true;\r\n                    let etbdInt2 = parseInt(d3.randomExponential(1, 5)(etbdState.RI2));\r\n                    setr2etbd(-etbdInt2)\r\n                }\r\n                setrnf(r)\r\n                setsimstate(\"events\")\r\n            }, tickDuration);\r\n        }\r\n        return () => clearTimeout(tick5);\r\n    },\r\n        [simstate]\r\n    )\r\n\r\n\r\n\r\n    // -----------------   ------------------- events\r\n    useLayoutEffect(() => {\r\n        // console.log(\"tick6 events --  1\")\r\n        let tick6 = null;\r\n        // if (paused === false && g && ppl && ems && cls && rnf) {\r\n        if (paused === false && simstate === 'events') {\r\n\r\n            // console.log(\"tick6 events --  2\")\r\n            tick6 = setTimeout(() => {\r\n\r\n                let gendata = { g: g, ppl: ppl, ems: ems, cls: cls, rnf: rnf };\r\n\r\n                // console.log(\"tick6 events --  gendata: \", gendata)\r\n                if (cls === \"class1\" || cls === \"class2\") {\r\n                    prevgen.current = gendata;\r\n                }\r\n                if (etbdEvents && etbdEvents.length) {\r\n                    let evz = etbdEvents;\r\n                    evz.push(gendata)\r\n                    setetbdEvents(evz);\r\n                } else {\r\n                    setetbdEvents([gendata]);\r\n                }\r\n\r\n\r\n                // draw on cumulative record:\r\n\r\n\r\n                // reset generation:\r\n                let p = Array(etbdState.popSize).fill(\"-\")\r\n                setppl(p)\r\n                setemsidx(null)\r\n                setems(null)\r\n                setcls(null)\r\n                setrnf(null)\r\n                setsimstate('newgen')\r\n            }, tickDuration);\r\n        }\r\n        return () => clearTimeout(tick6);\r\n    },\r\n        [simstate]\r\n    )\r\n\r\n\r\n\r\n    // -----------------   ------------------- new g\r\n    useLayoutEffect(() => {\r\n        let tick7 = null;\r\n        if (paused === false && simstate === 'newgen') {\r\n            tick7 = setTimeout(() => {\r\n                setg(g => g + 1)\r\n                setr1etbd(r1etbd => r1etbd + 1);\r\n                setr2etbd(r2etbd => r2etbd + 1);\r\n                setsimstate('newppl')\r\n\r\n\r\n                //  record, draw time-line:\r\n\r\n                if (g + 1 >= 100) {\r\n                    setpaused(true)\r\n                }\r\n\r\n\r\n            }, tickDuration);\r\n        }\r\n        return () => clearTimeout(tick7);\r\n    },\r\n        [simstate]\r\n    )\r\n\r\n\r\n\r\n    // -----------------   ------------------- emission\r\n    useLayoutEffect(() => {\r\n        let tick8 = null;\r\n        if (paused === false && simstate === 'newppl') {\r\n            tick8 = setTimeout(() => {\r\n                let ppl1 = newppl(etbdEvents[etbdEvents.length - 1])\r\n                setppl(ppl1)\r\n                setsimstate('randomindex')\r\n            }, tickDuration);\r\n        }\r\n        return () => clearTimeout(tick8);\r\n    },\r\n        [simstate]\r\n    )\r\n\r\n\r\n\r\n    // ------------------------  ----------------------  RECORD TIME LINE\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (etbdEvents && etbdEvents.length && etbdEvents.length > 0) {\r\n\r\n            let gEtbdRecord = d3.select('#gEtbdRecord');\r\n\r\n            let w = 250\r\n            let h = 150\r\n\r\n            // console.log(gEtbdRecord)\r\n\r\n            let xdomain = [0, 100]\r\n\r\n            const xrec = d3.scaleLinear()\r\n                .range([0, w])\r\n                .domain(xdomain)\r\n\r\n            const yrec = d3.scaleLinear()\r\n                .range([h, 0])\r\n                .domain([0, props.recordHeight]);\r\n\r\n\r\n\r\n            gEtbdRecord.select('.xAxis1')\r\n                .attr(\"transform\", \"translate(0,\" + h + \")\")\r\n                .call(\r\n                    d3\r\n                        .axisBottom(xrec)\r\n                        .ticks(0)\r\n                )\r\n\r\n            gEtbdRecord.select('.yAxis1')\r\n                .call(\r\n                    d3\r\n                        .axisLeft(yrec)\r\n                        .tickPadding(10)\r\n                        .ticks(0)\r\n                )\r\n\r\n            let x1, x2, y1, y2;\r\n\r\n            if (b1 + b2 === 1) {\r\n                x1 = 0;\r\n                x2 = g - 1;\r\n                y1 = 0;\r\n                y2 = 1;\r\n            } else {\r\n                x1 = prevgen.current.g;\r\n                x2 = g - 1;\r\n                y1 = b1 + b2 - 1;\r\n                y2 = b1 + b2;\r\n            }\r\n\r\n\r\n            if (y2 % props.recordHeight !== 0) {\r\n                gEtbdRecord.append('line').attr('class', 'etbd-record-line')\r\n\r\n                    .attr('x1', xrec(x1))\r\n                    .attr('x2', xrec(x2))\r\n\r\n                    .attr('y1', yrec((y1 % props.recordHeight)))\r\n                    .attr('y2', yrec(y2 % props.recordHeight))\r\n\r\n                    .attr(\"stroke\", () => {\r\n                        if (cls === 'class1') {\r\n                            return etbdState.color111\r\n                        }\r\n                        if (cls === 'class2') {\r\n                            return etbdState.color222\r\n                        }\r\n                    })\r\n                    .attr('stroke-width', 1)\r\n            }\r\n\r\n\r\n            // class 2 -- rectangle instead of circle; REVISIT.\r\n\r\n            gEtbdRecord.append('circle').attr('class', 'etbd-record-circle')\r\n                .attr('cx', xrec(x2))\r\n                .attr('cy', yrec(y2 % props.recordHeight))\r\n                .attr('r', 3)\r\n                .attr(\"stroke\", () => {\r\n                    if (cls === 'class1') {\r\n                        return etbdState.color11\r\n                    }\r\n                    if (cls === 'class2') {\r\n                        return etbdState.color22\r\n                    }\r\n                })\r\n                .attr(\"fill\", () => {\r\n                    if (cls === 'class1' && rnf === true) {\r\n                        return etbdState.color1\r\n                    }\r\n                    if (cls === 'class2' && rnf === true) {\r\n                        return etbdState.color2\r\n                    }\r\n\r\n                    return '#1d2734'\r\n                })\r\n                .attr('stroke-width', 1)\r\n\r\n\r\n\r\n            // gEtbdRecord.append('text').attr('class', 'etbd-record-text')\r\n            //     .attr('x', xrec(x2))\r\n            //     .attr('y', yrec(y2 % props.recordHeight))\r\n            //     .attr('dx', -20)\r\n            //     .attr('dy', -10)\r\n            //     .attr(\"font-size\", '.6rem')\r\n            //     .attr(\"fill\", () => {\r\n            //         if (cls === 'class1' && rnf === true) {\r\n            //             return etbdState.color11\r\n            //         }\r\n            //         if (cls === 'class2' && rnf === true) {\r\n            //             return etbdState.color22\r\n            //         }\r\n            //         return '#1d2734'\r\n            //     })\r\n\r\n            //     // .attr(\"fill\", () => {\r\n            //     //     if (cls === 'class1' && rnf === true) {\r\n            //     //         return etbdState.color1\r\n            //     //     }\r\n            //     //     if (cls === 'class2' && rnf === true) {\r\n            //     //         return etbdState.color2\r\n            //     //     }\r\n            //     //     return '#1d2734'\r\n            //     // })\r\n            //     .text(ems)\r\n        }\r\n    },\r\n        [b1, b2]\r\n    );\r\n\r\n\r\n    // ------------------------  ----------------------  TIME line\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (g && g > 0) {\r\n\r\n            let gEtbdRecord = d3.select('#gEtbdRecord');\r\n\r\n            let w = 250\r\n            let h = 150\r\n\r\n            let xrec = d3.scaleLinear()\r\n                .range([0, w])\r\n                .domain([0, 100]);\r\n\r\n            let yrec = d3.scaleLinear()\r\n                .range([h, 0])\r\n                .domain([0, props.recordHeight]);\r\n\r\n            gEtbdRecord.append('line').attr('class', 'etbd-record-time')\r\n                .attr('x1', xrec(g - 1))\r\n                .attr('x2', xrec(g))\r\n                .attr('y1', yrec(-.2))\r\n                .attr('y2', yrec(-.2))\r\n\r\n                // .attr('dx', 0)\r\n                // .attr('dy', '4px')\r\n\r\n                .attr(\"stroke\", '#2abbc8')\r\n                .attr('stroke-width', 2)\r\n\r\n\r\n            d3.select('#etbd-record-g').remove();\r\n\r\n\r\n\r\n            gEtbdRecord.append('text').attr('id', 'etbd-record-g')\r\n                .attr('x', xrec(g))\r\n                .attr('y', yrec(0))\r\n                .attr('dx', 0)\r\n                .attr('dy', 20)\r\n                .attr(\"font-size\", '.75rem')\r\n                .attr(\"fill\", '#2abbc8')\r\n                // .text(`generation  ${g}`);\r\n                .text(` ${g}`);\r\n\r\n        }\r\n    },\r\n        [g]\r\n    );\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <div id='agent-44'>\r\n\r\n\r\n                <div className=\"agent-border\">\r\n                    <div className=\"wrapper-behavior-space\">\r\n                        <BehaviorSpaceBasic />\r\n                    </div>\r\n\r\n                    <div className=\"ppl-wrapper\" >\r\n                        <Population\r\n                            ppl={ppl}\r\n                            emsidx={emsidx}\r\n                            simstate={simstate}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className='evd-wrapper'>\r\n                        <BoxTitle\r\n                            paused={paused}\r\n                            g={g}\r\n                            simstate={simstate}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n                <div className='box-controls' >\r\n                    <button\r\n                        className='btn-start'\r\n                        onClick={() => { setpaused(!paused) }}\r\n                    >\r\n                        {paused === true ? 'run theory' : `pause`}\r\n\r\n                    </button>\r\n\r\n                    <button\r\n                        className='btn-reset'\r\n                        onClick={resetAgent}\r\n                        title='reset agent'\r\n                    >\r\n                        reset\r\n                    </button>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n        </>\r\n    )\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\FlippedCards.js",["586","587"],"F:\\react_portfolio\\src\\COMPONENTS\\etbd\\Gen.js",["588","589"],"F:\\react_portfolio\\src\\COMPONENTS\\etbd\\IsThereCake.js",["590","591","592"],"F:\\react_portfolio\\src\\COMPONENTS\\etbd\\Population.js",["593","594","595"],"import \"./agent-44.sass\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { parse } from \"html-react-parser\";\r\nimport etbdState from \"./etbdState\";\r\nimport PopulationItem from \"./PopulationItem\";\r\n\r\n// let p = Array(etbdState.popSize).fill(\"-\")\r\n\r\nlet p = Array(etbdState.popSize).fill(\"z\")\r\n\r\nlet unicodes = [\r\n\r\n    { name: 'smile', code: String.fromCodePoint(\"0x263A\") },\r\n    { name: 'smile1', code: String.fromCodePoint(\"0x1F642\") },\r\n\r\n    { name: 'frown', code: String.fromCodePoint(\"0x2639\") },\r\n\r\n    // { name: 'frown', code: String.fromCodePoint(\"0x26A1\") },\r\n    { name: 'comet', code: String.fromCodePoint(\"0x2604\") },\r\n\r\n    { name: 'speaker', code: String.fromCodePoint(\"0x1F508\") },\r\n    { name: 'music', code: String.fromCodePoint(\"0x266c\") },\r\n\r\n    { name: 'lightbulb', code: String.fromCodePoint(\"0x1F4A1\") },\r\n    // { name: 'stoplight', code: String.fromCodePoint(\"0x2623\") },\r\n    // { name: 'pigeon', code: String.fromCodePoint(\"0x2623\") },\r\n    // { name: 'person', code: String.fromCodePoint(\"0x2623\") },\r\n\r\n    { name: 'cake', code: String.fromCodePoint(\"0x1F382\") },\r\n\r\n    { name: 'danger', code: String.fromCodePoint(\"0x26A0\") },\r\n    { name: 'lightning', code: String.fromCodePoint(\"0x1F5F2\") },\r\n    { name: 'radioactive', code: String.fromCodePoint(\"0x2622\") },\r\n    { name: 'biohazard', code: String.fromCodePoint(\"0x2623\") },\r\n    { name: 'recycle', code: String.fromCodePoint(\"0x267b\") },\r\n\r\n    { name: 'clover', code: String.fromCodePoint(\"0x2618\") },\r\n    { name: 'infinity', code: String.fromCodePoint(\"0x221E\") },\r\n    { name: 'scissors1', code: String.fromCodePoint(\"0x2702\") },\r\n\r\n    { name: 'heart1', code: '❤' },\r\n    { name: 'heart_blue', code: String.fromCodePoint(\"0x1F499\") },\r\n    { name: 'heart_orange', code: String.fromCodePoint(\"0x1F9E1\") },\r\n    { name: 'heart_purple', code: String.fromCodePoint(\"0x1F49C\") },\r\n    { name: 'heart_black', code: String.fromCodePoint(\"0x1F5A4\") },\r\n\r\n\r\n\r\n\r\n    { name: 'delta', code: String.fromCodePoint(\"0x0394\") },\r\n    { name: 'mu', code: String.fromCodePoint(\"0x03C1\") },\r\n    { name: 'sigma', code: String.fromCodePoint(\"0x03C3\") },\r\n    { name: 'xi', code: String.fromCodePoint(\"0x039E\") },\r\n    { name: 'lambda', code: String.fromCodePoint(\"0x039B\") },\r\n    { name: 'theta', code: String.fromCodePoint(\"0x0398\") },\r\n    { name: 'tau', code: String.fromCodePoint(\"0x03A6\") },\r\n\r\n\r\n\r\n    { name: 'logicalAnd', code: String.fromCodePoint(\"0x22C0\") },\r\n    { name: 'logicalOr', code: String.fromCodePoint(\"0x22C1\") },\r\n    { name: 'angle', code: String.fromCodePoint(\"0x2221\") },\r\n\r\n]\r\n\r\n\r\n// let x = \"AGENT\"\r\n// let agent = Array(x.split(\"\"))\r\n// console.log(\"agent: \", agent[0])\r\n\r\n\r\nexport default function Population(props) {\r\n\r\n    const [data, setdata] = useState(p);\r\n    const [bg, setbg] = useState('transparent');\r\n\r\n\r\n    useEffect(() => {\r\n        let ss = props.simstate;\r\n        if (ss === 'randomindex' || ss === 'emission' || ss === 'class' || ss === 'reinforcement' || ss === 'events') {\r\n            setdata(props.ppl)\r\n            setbg('#0f1725')\r\n        } else {\r\n            setdata(p)\r\n            setbg('transparent')\r\n\r\n        }\r\n    },\r\n        [props]\r\n    );\r\n\r\n\r\n    // if (props.simstate === \"off\") return (\r\n    //     <>\r\n    //         <h2\r\n    //             // className='xxx'\r\n    //             style={{\r\n    //                 fontSize: \".7rem\",\r\n    //                 margin: \"auto\",\r\n    //                 fontFamily: \"Arial\",\r\n    //                 color: \"rgba(40, 150, 150, .5\",\r\n    //                 textAlign: \"left\"\r\n    //             }}\r\n    //         >\r\n    //             Population\r\n    //         </h2>\r\n    //     </>\r\n    // )\r\n\r\n\r\n    return (\r\n        <div\r\n            className='div-ppl'\r\n        // style={{ backgroundColor: bg }}\r\n        >\r\n            {data.map((item, i) => {\r\n                return (\r\n                    <PopulationItem\r\n                        item={item}\r\n                        title={item}\r\n                        emited={i === props.emsidx ? true : false}\r\n                        reinforced={props.rnf}\r\n                        simstate={props.simstate}\r\n                    />\r\n                )\r\n            })}\r\n\r\n        </div>\r\n\r\n    )\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\BehaviorSpaceBasic.js",["596","597"],"\r\nimport { useState, useEffect } from \"react\";\r\nimport etbdState from \"./etbdState\";\r\n\r\n\r\nexport default function BehaviorSpaceBasic(props) {\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className='behavior-space-basic'>\r\n\r\n            <div className='min'>\r\n                {/* {`${etbdState.repertoire[0]}`} */}\r\n                min\r\n            </div>\r\n\r\n            <div className='c1' style={{ color: etbdState.color11 }}>\r\n\r\n                {/* {`${etbdState.class1[0]} ... ${etbdState.class1[etbdState.class1.length - 1]}`} */}\r\n                This\r\n            </div>\r\n\r\n\r\n            <div className='c2' style={{ color: etbdState.color22 }}>\r\n                {/* {`${etbdState.class2[0]} ... ${etbdState.class2[etbdState.class2.length - 1]}`} */}\r\n                That\r\n            </div>\r\n\r\n            {/* <div className='else'> ... </div> */}\r\n\r\n\r\n            <div className='max'>\r\n                {/* {`${etbdState.repertoire[etbdState.repertoire.length - 1]}`} */}\r\n                max\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\BoxTitle.js",["598"],"import { useState, useEffect } from \"react\";\r\nimport etbdState from \"./etbdState\";\r\n\r\nexport default function BoxTitle(props) {\r\n\r\n    const [style, setstyle] = useState(\"box-title\");\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let ss = props.simstate;\r\n\r\n        if (ss === \"newgen\") {\r\n            setstyle('box-title blue-shadow')\r\n        } else {\r\n            setstyle('box-title')\r\n        }\r\n\r\n        // if (ss === \"newgen\" && props.rnf === true) {\r\n        //     setstyle('box-title raised yellow-shadow')\r\n        // }\r\n\r\n\r\n\r\n    },\r\n        [props]\r\n    )\r\n\r\n\r\n    return (\r\n        <div\r\n            datag={props.g}\r\n            className={style}\r\n        >\r\n            <h7>\r\n                Darwinian\r\n                <br />\r\n                principles\r\n            </h7>\r\n        </div>\r\n\r\n\r\n    )\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\PopulationItem.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\etbd\\EmissionSign.js",["599"],"import { useState, useEffect } from \"react\";\r\nimport etbdState from \"./etbdState\";\r\n\r\n\r\nexport default function EmissionSign(props) {\r\n\r\n    const [style, setstyle] = useState(\"sign-emission zzz-time\");\r\n    const [msg, setmsg] = useState(\"Response\");\r\n\r\n\r\n    useEffect(() => {\r\n        let ss = props.simstate;\r\n\r\n        // if (ss === 'randomindex' || ss === 'emission' || ss === 'class' || ss === 'reinforcement') {\r\n        //     setstyle('sign-emission')\r\n        // }\r\n\r\n        if (ss === 'off') {\r\n            setstyle('sign-emission zzz-time')\r\n            setmsg('Response')\r\n        }\r\n        else if (ss === \"emission\" || ss === \"class\" || ss === \"reinforcement\" || ss === \"events\") {\r\n            setstyle(\"sign-emission emision-time\")\r\n        }\r\n        else if (ss === \"newgen\" || ss === \"newppl\") {\r\n            setstyle(\"sign-emission darwin-time\")\r\n        }\r\n        else {\r\n            setstyle(\"sign-emission\")\r\n        }\r\n\r\n        // if (props.paused === true) {\r\n        //     setstyle('sign-emission zzz-time')\r\n        // }\r\n    },\r\n        [props]\r\n    )\r\n\r\n    return (\r\n        <button\r\n            data-ss={props.simstate}\r\n            data-paused={props.paused}\r\n            data-rnf={props.rnf}\r\n            className={style}\r\n        >\r\n            {msg}\r\n        </button>\r\n\r\n    )\r\n\r\n\r\n}","F:\\react_portfolio\\src\\COMPONENTS\\etbd\\ConsequenceSign.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\background\\ResearchDemo.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\background\\TeaserPopa2019.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\background\\BgDivider.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\matching\\DivPoints.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\abc\\PopOverV2.js",[],"F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\NeonsSigns.jsx",["600","601","602","603","604"],"import { useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n\r\n\r\nexport function NeonEmission(props) {\r\n    var [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"emission\") {\r\n            return \"light_on_white\"\r\n        } else {\r\n            return \"light_off\"\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            key={nanoid()}\r\n            className=\"darwinian_cycle\"\r\n            // style={{ margin: \"30px auto 0px auto\", }}\r\n            style={{ margin: \"auto\", }}\r\n\r\n        >\r\n\r\n            <h2\r\n                key={nanoid()}\r\n                className={neonClass}\r\n                style={{\r\n                    fontSize: \"16px\", textAlign: \"center\", fontFamily: \"monospace\"\r\n                }}\r\n            >\r\n\r\n                <i>Emit</i> a response</h2>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// export function NeonReinforcement(props) {\r\n//     var [neonClass, setNeonClass] = useState(() => {\r\n//         if (props.demoState === \"emission\") {\r\n//             //return \"light_on_orange\"\r\n//             return \"light_on_white\"\r\n//         } else {\r\n//             return \"light_off\"\r\n//         }\r\n//     })\r\n\r\n\r\n//     return (\r\n//         <div\r\n//             key={nanoid()}\r\n//             className=\"div-neon-sign\"\r\n//         >\r\n//             <h2\r\n//                 key={nanoid()}\r\n//                 className={neonClass}\r\n//             >\r\n\r\n//                 <i>Emit</i> a response</h2>\r\n//         </div>\r\n//     )\r\n// };\r\n\r\n\r\n\r\nexport function NeonCreateNewPopulation(props) {\r\n    var [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"selection\" | props.demoState === \"recombination\" | props.demoState === \"mutation\") {\r\n            return \"light_on_neon\"\r\n        } else {\r\n            return \"light_off\"\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            key={nanoid()}\r\n            className=\"div-neon-sign\"\r\n        >\r\n            <h2\r\n                key={nanoid()}\r\n                className={neonClass}\r\n            >\r\n\r\n                Create new generation</h2>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport function NeonSelection(props) {\r\n    var [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"selection\" && props.reinforced === true) {\r\n            return \"light_on_yellow\"\r\n        }\r\n        else if (props.demoState === \"selection\" && props.reinforced === false) {\r\n            return \"light_on_white\"\r\n        }\r\n        else {\r\n            return \"light_off\"\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            key={nanoid()}\r\n            className=\"div-neon-sign\"\r\n        >\r\n            <h2\r\n                key={nanoid()}\r\n                className={neonClass}\r\n            >\r\n                Select parents\r\n            </h2>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\nexport function NeonRecombination(props) {\r\n    var [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"recombination\") {\r\n            //return \"light_on_green\"\r\n            return \"light_on_white\"\r\n\r\n        } else {\r\n            return \"light_off\"\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            key={nanoid()}\r\n            className=\"div-neon-sign\"\r\n        >\r\n            <h2\r\n                key={nanoid()}\r\n                className={neonClass}\r\n            >\r\n                Recombination\r\n\r\n\r\n            </h2>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport function NeonMutation(props) {\r\n    var [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"mutation\") {\r\n            //return \"light_on_pink\"\r\n            return \"light_on_white\"\r\n\r\n        } else {\r\n            return \"light_off\"\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div className='div-neon-sign' key={nanoid()}>\r\n\r\n            <h2 className={neonClass} key={nanoid()}>\r\n                Mutation\r\n            </h2>\r\n\r\n        </div>\r\n    )\r\n};","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\fitness\\SelectionPressure.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\fitness\\FitnessD3.jsx",["605","606","607","608","609"],"import './_fitness-d3.sass'\r\nimport * as d3 from \"d3\"\r\nimport { nanoid } from \"nanoid\"\r\nimport { useState, useRef, useLayoutEffect } from \"react\"\r\nimport etbdState from \"../../etbd/etbdState\"\r\nimport _ from \"lodash\"\r\n\r\nexport default function FitnessD3(props) {\r\n\r\n    const refFitness = useRef(null);\r\n\r\n    let svgWidth = 400;\r\n    let svgHeight = 300;\r\n    let margin = { top: 50, left: 50, bottom: 50, right: 50 };\r\n\r\n    let width = svgWidth - margin.left - margin.right;\r\n    let height = svgHeight - margin.top - margin.bottom;\r\n\r\n\r\n    useLayoutEffect(() => {\r\n\r\n        // let miu = props.miu ? props.miu : 6;\r\n        // let rnf = props.rnf ? props.rnf : true;\r\n\r\n        // let population = props.population ? props.population : [5, 5, 5, 5, 5];\r\n        // let rnd22 = props.rnd22 ? props.rnd22 : 9;\r\n\r\n        // let nbt = props.nbt ? props.nbt : 5;\r\n\r\n        /* \r\n                const getAge = (data, target) =>\r\n                    data.reduce((acc, obj) =>\r\n                        Math.abs(target - obj.age) < Math.abs(target - acc.age) ? obj : acc\r\n                    );\r\n         */\r\n\r\n\r\n\r\n        // console.log(\"population: \", population)\r\n        // console.log(\"ems, rnf: \", ems, \", \", rnf)\r\n        // console.log(\"miu: \", miu)\r\n\r\n\r\n        // let populationAgentHist = props.populationAgentHist\r\n        // console.log('populationAgentHist: ', populationAgentHist)\r\n\r\n\r\n        const PCumulated = (x) => {\r\n            let lambda = 1 / props.miu\r\n            let df = Math.abs(x - props.ems)\r\n            let y = 1 - Math.exp(-lambda * df)\r\n\r\n            return y\r\n        }\r\n\r\n        const pIndividual = (x) => {\r\n            let lambda = 1 / props.miu\r\n            let df = Math.abs(x - props.ems)\r\n            let y = lambda * Math.exp(-lambda * df)\r\n            return y\r\n        }\r\n\r\n\r\n        //------------------------------------           DATA\r\n\r\n        let data = []\r\n\r\n        etbdState.repertoire.forEach((x) => {\r\n            let df = Math.abs(x - props.ems)\r\n            let exists = props.population.includes(x) ? true : false\r\n\r\n            let P\r\n            let prob\r\n\r\n            if (props.rnf === true) {\r\n                P = PCumulated(x)\r\n                prob = pIndividual(x)\r\n            } else {\r\n                P = PCumulated(1)\r\n                prob = 1 / etbdState.repertoire.length\r\n            }\r\n\r\n\r\n            data.push({\r\n                phen: x,\r\n                df: df,\r\n                P: P,\r\n                prob: prob,\r\n                // PU: 1,\r\n                // probUniform: 1 / props.population.length,\r\n                ems: x === props.ems ? true : false,\r\n                exists: exists,\r\n                available: true,\r\n                parent: false,\r\n                // child: false,\r\n                // mutant: false, \r\n\r\n            })\r\n        })\r\n\r\n\r\n        const getNbt = (myData, target) =>\r\n            myData.reduce((acc, obj) =>\r\n                Math.abs(target - obj.df) < Math.abs(target - acc.df) ? obj : acc\r\n            );\r\n\r\n\r\n        const fontSizeGradient = d3.scalePow()\r\n            .exponent(.2)\r\n            .range(['.5rem', '1.2rem'])\r\n            .domain([_.maxBy(data, function (o) { return o.df }).df, 0])\r\n\r\n\r\n        const fitnessGradient = d3.scalePow()\r\n            .exponent(.4)\r\n            .domain([0, _.maxBy(data, function (o) { return o.df }).df])\r\n            .range(['rgba(255, 255, 0, 1)', 'rgba(50, 50, 0, 1'])\r\n\r\n\r\n\r\n        // =================  =================  =================        SCALES\r\n\r\n        let x = d3.scaleLinear()\r\n            .range([0, width])\r\n            .domain([d3.min(etbdState.repertoire), d3.max(etbdState.repertoire)])\r\n\r\n        let y = d3.scaleLinear()\r\n            .range([height, 0])\r\n            .domain([0, .3])\r\n\r\n        // ==========================================================      CHART\r\n\r\n        let svg = d3.select(refFitness.current)\r\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n        // ==========================================================      Y axis\r\n\r\n        let yAxis = svg.append('g').attr(\"class\", 'y-axis');\r\n        yAxis.call(d3.axisLeft(y));\r\n        yAxis.selectAll('.tick').remove();\r\n        yAxis.selectAll('path').remove();\r\n\r\n        // ==========================================================      X axis\r\n\r\n        let xAxis = svg.append('g').attr(\"class\", 'x-axis')\r\n            .attr(\"transform\", `translate(${0}, ${height})`);\r\n\r\n        xAxis.call(\r\n            d3.axisBottom(x)\r\n                .tickPadding(10)\r\n                .tickValues([d3.min(etbdState.repertoire), ...etbdState.class1, ...etbdState.class2, d3.max(etbdState.repertoire)])\r\n        );\r\n\r\n        // --------------------------------------------------------  \r\n\r\n        xAxis.selectAll('.tick').selectAll('line').remove();\r\n        let xLabels = xAxis.selectAll('.tick').selectAll('text');\r\n\r\n        xLabels.attr('fill', (d) => {\r\n            if (d === props.ems && props.rnf === false) { return 'rgba(0,200,200, 1)'; }\r\n            if (d === props.ems && props.rnf === true) { return 'rgba(255, 255, 0, 1)'; }\r\n            if (d === d3.min(etbdState.repertoire) || d === d3.max(etbdState.repertoire)) { return 'rgba(0,200,200, .5)'; }\r\n            return 'rgba(0,200,200, .25)';\r\n        });\r\n\r\n        xLabels.text((d) => {\r\n            if (d === d3.min(etbdState.repertoire)) { return 'min' }\r\n            if (d === d3.max(etbdState.repertoire)) { return 'max' }\r\n            return d\r\n        });\r\n\r\n        //  ==========================================================        AREA   PATH\r\n\r\n        const probPath = svg.append('path').attr('id', 'probPath')\r\n            .datum(data)\r\n            .attr('fill', props.rnf === true ? 'rgba(187, 88, 64, .5)' : 'rgba(64,163,187, .5)')\r\n            .attr('d', d3.area()\r\n                .curve(d3.curveBasis)\r\n                .x((d) => x(d.phen))\r\n                .y0(y(0))\r\n                .y1((d) => y(d.prob)))\r\n\r\n\r\n        // PLOT THE PHENOTYPES, THE ACTUAL NUMBERS:\r\n        svg\r\n            .append('g')\r\n            .selectAll('.phenotype-label')\r\n            .data(data)\r\n            .join(\"text\")\r\n            .attr(\"class\", 'phenotype-label')\r\n            .attr(\"x\", d => x(d.phen))\r\n            .attr(\"y\", d => y(d.prob))\r\n\r\n            .transition().duration(500)\r\n            .text((d) => { return d.ems === true ? `fitness zero` : -d.df })\r\n            .attr(\"font-weight\", 100)\r\n            .attr(\"font-family\", \"monospace\")\r\n            .attr('fill', (d) => {\r\n                if (props.rnf === true) { return fitnessGradient(d.df) }\r\n                return 'rgba(0, 100, 100, 1)'\r\n            })\r\n            .attr(\"font-size\", '.8rem')\r\n\r\n\r\n        svg\r\n            .append('g')\r\n            .selectAll('.phenotype-circles')\r\n            .data(data)\r\n            .join('circle')\r\n            .attr(\"class\", 'phenotype-label')\r\n            .attr(\"x\", d => x(d.phen))\r\n            .attr(\"y\", d => y(d.prob))\r\n\r\n            .transition().duration(500)\r\n            .text((d) => { return d.ems === true ? `fitness zero` : -d.df })\r\n            .attr(\"font-weight\", 100)\r\n            .attr(\"font-family\", \"monospace\")\r\n            .attr('fill', (d) => {\r\n                if (props.rnf === true) { return fitnessGradient(d.df) }\r\n                return 'rgba(0, 100, 100, 1)'\r\n            })\r\n            .attr(\"font-size\", '.8rem')\r\n\r\n\r\n\r\n\r\n        // =============================\r\n        // \r\n        // create texts for ems, rnf, df\r\n\r\n\r\n\r\n        const txtInfo = svg.append('g')\r\n            .attr(\"transform\", `translate(${100}, 0)`);\r\n\r\n\r\n        txtInfo\r\n            .attr(\"font-weight\", 100)\r\n            .attr(\"font-family\", \"monospace\")\r\n            .attr(\"font-size\", \".8rem\")\r\n            .attr(\"fill\", \"rgba(0, 200, 200, 1)\");\r\n\r\n        // txtInfo.append(\"text\").text(`max df: ${_.maxBy(data, 'df').df}`).attr(\"y\", 0);\r\n        // txtInfo.append(\"text\").text(`rnf: ${props.rnf}`).attr(\"y\", 25);\r\n        // txtInfo.append(\"text\").text(`(mu): ${props.miu}`).attr(\"y\", 50);\r\n\r\n        //  ---------------------------       UNIFORM  AREA\r\n        // svg.append('path')\r\n        //     .datum(data)\r\n        //     .attr('stroke', 'lightgrey')\r\n        //     .attr('stroke-width', 1)\r\n        //     .attr('fill', '#339376')\r\n        //     .attr('d', d3.area()\r\n        //         // .curve(d3.curveBasisOpen)\r\n        //         .curve(d3.curveBasis)\r\n        //         .x((d) => x(d.phen))\r\n        //         .y0(y(0))\r\n        //         // .y1((d) => y(d.uniformProb)))\r\n        //         .y1((d) => props.rnf === true ? y(d.prob) : y(1 / etbdState.repertoire.length)))\r\n\r\n\r\n\r\n        // PLOT THE PHENOTYPES, THE ACTUAL NUMBERS:\r\n        // svg\r\n        //     .append('g')\r\n        //     .selectAll('.phenotype-label')\r\n        //     .data(data)\r\n        //     .join(\"text\")\r\n        //     .attr(\"class\", 'phenotype-label')\r\n        //     .attr(\"x\", d => x(d.phen))\r\n        //     .attr(\"y\", d => y(d.prob))\r\n        //     .text((d) => d.phen)\r\n\r\n        //     .attr(\"dy\", -10)\r\n        //     .attr(\"font-weight\", 100)\r\n        //     .attr(\"font-family\", \"monospace\")\r\n\r\n        //     .attr('fill', d => {\r\n        //         fitnessGradient(d.df)\r\n        //     }\r\n        //     )\r\n\r\n        //     .attr('font-size', d => fontSizeGradient(d.df))\r\n\r\n\r\n\r\n\r\n\r\n\r\n    },\r\n        [refFitness, props]\r\n    );\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            {/* <div\r\n                style={{\r\n                    width: \"fit-content\",\r\n                    minWidth: \"50px\",\r\n                    position: \"absolute\",\r\n                    marginTop: \"3rem\",\r\n                    alignSelf: \"flex-end\",\r\n                    marginRight: \"1rem\",\r\n                    color: \"#cccccc\"\r\n                }}\r\n                onClick={(e)=>{\r\n                    e.preventDefault()\r\n                    let fitnessVal = d3.randomExponential(1 / props.miu)(d3.min(etbdState.repertoire), d3.max(etbdState.repertoire))\r\n                    setrnd22(fitnessVal)\r\n\r\n                }}\r\n            >\r\n                <button\r\n\r\n                >\r\n                    get a random fitness\r\n                    </button>\r\n            </div> */}\r\n\r\n            <svg id='svg-fitness'\r\n                style={{\r\n                    width: svgWidth,\r\n                    height: svgHeight,\r\n                    margin: 'auto',\r\n                    // border: '1px solid rgba(0, 10, 10, 1)'\r\n                }}\r\n                key={nanoid()}\r\n            >\r\n\r\n                <g id='g-fitness' ref={refFitness}>\r\n\r\n                </g>\r\n\r\n            </svg></>\r\n    )\r\n}\r\n\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\emission\\NeonEmitBehavior.jsx",["610"],"import './_neon-emit-behavior.sass';\r\nimport { useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n\r\nexport default function NeonEmitBehavior(props) {\r\n    const [neonClass, setNeonClass] = useState(() => {\r\n        if (props.demoState === \"emission\") {\r\n            return 'light_on_blue'\r\n        } else {\r\n            return 'light_off'\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            className='neon-emit-behavior' key={nanoid()}\r\n        >\r\n\r\n            <h2 className={neonClass} key={nanoid()}>\r\n                <i>Do something</i>\r\n            </h2>\r\n\r\n        </div>\r\n    )\r\n};\r\n","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\mutation\\MutationDemo.jsx",["611","612","613","614"],"import \"./_mutation-demo.sass\";\r\nimport React from \"react\"\r\nimport { nanoid } from \"nanoid\"\r\nimport CbxMutation from \"./CbxMutation\"\r\n\r\n\r\nexport default class MutationDemo extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.onChange = this.onChange.bind(this)\r\n    }\r\n\r\n\r\n\r\n    onChange = (e) => {\r\n        let a = this.state[[e.target.name]][0]\r\n        let b = this.state[[e.target.name]][1]\r\n        let b1 = Math.abs(1 - b)\r\n        let absVal = this.state[[e.target.name]][2]\r\n\r\n        this.setState({\r\n            [e.target.name]: [e.target.checked, b1, absVal]\r\n        })\r\n    }\r\n\r\n\r\n    createStates = () => {\r\n\r\n        let bits = this.props.nrBits\r\n        let defaultGenotype = []\r\n\r\n        let x\r\n\r\n        if (this.props.genotype === []) {\r\n            x = Array.length(bits).fill(\"\")\r\n        } else {\r\n            x = this.props.genotype\r\n        }\r\n\r\n        x.map((item, i) => {\r\n            let power = x.length - 1 - i\r\n            let cellName = `bit${power}`\r\n            this.setState({ [cellName]: [false, item, 2 ** power] })\r\n        })\r\n    }\r\n\r\n\r\n\r\n    componentWillMount() {\r\n        this.createStates()\r\n    }\r\n\r\n\r\n    computePhenotype = () => {\r\n        let mtn = 0\r\n        Object.entries(this.state).map((entry) => {\r\n            let info = entry[1]\r\n            mtn += info[1] * info[2]\r\n        })\r\n\r\n        return mtn\r\n    }\r\n\r\n\r\n\r\n    submitMutantPhenotype = (e) => {\r\n        let xxx = this.computePhenotype()\r\n        this.props.addToNext(xxx)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const Checkboxes = Object.entries(this.state).map((entry) => {\r\n            let cellName = entry[0]\r\n\r\n            return (\r\n                <CbxMutation\r\n                    mutant={this.state[[cellName]][0]}\r\n                    bitState={this.state[[cellName]][1]}\r\n                    cellValue={this.state[[cellName]][2]}\r\n                    bitName={cellName}\r\n                    onChange={this.onChange}\r\n                />\r\n            )\r\n        })\r\n\r\n\r\n\r\n        let myPhenotype = this.computePhenotype()\r\n\r\n\r\n\r\n        return (\r\n\r\n            <div id='mutation-demo' key={nanoid()} >\r\n\r\n                <div className='child-string' key={nanoid()}>\r\n                    {Checkboxes}\r\n                </div>\r\n\r\n                <div\r\n                    id='div-swap'\r\n                    key={nanoid()}\r\n                    onClick={this.submitMutantPhenotype}\r\n                    title={\"Replace the original\"}\r\n                >\r\n\r\n                    <span id='spanOriginal' >\r\n                        {this.props.childPhenotype}\r\n                    </span>\r\n\r\n\r\n                    <label id='lblMutant' >\r\n                        <div id='divMutantText'\r\n                            style={{\r\n                                color: this.props.childPhenotype === myPhenotype ? \"#5ee478\" : \"tomato\",\r\n                            }}\r\n                        >\r\n                            {myPhenotype}\r\n                        </div>\r\n                    </label>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\selection\\SelectParents.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\emission\\AvailableOptions.jsx",["615"],"\r\nimport './_available-options.sass';\r\n\r\nimport React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n\r\nexport default function AvailableOptions(props) {\r\n\r\n    function handleClick(event) {\r\n        props.doSomething(event.target)\r\n    }\r\n\r\n    return (\r\n        <div id='available-options' key={nanoid()}>\r\n            {\r\n                props.population.map((item, i) => {\r\n                    let cellid = `phenotype_${i + 1}`\r\n\r\n                    return (\r\n                        <button\r\n                            className='option'\r\n                            data-selected={props.emsid === cellid ? true : false}\r\n\r\n                            title={item.status}\r\n                            value={item.phenotype}\r\n                            id={cellid}\r\n\r\n                            onClick={handleClick}\r\n\r\n                            role='input'\r\n                            key={nanoid()}\r\n\r\n                        >\r\n                            {item.phenotype}\r\n                        </button>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import './_available-options.sass';\r\n\r\n// import React from \"react\";\r\n// import { nanoid } from \"nanoid\";\r\n\r\n// export default function AvailableOptions(props) {\r\n\r\n//     function handleClick(event) {\r\n//         props.doSomething(event.target.value)\r\n//     }\r\n\r\n//     return (\r\n//         <div id='available-options' key={nanoid()}>\r\n//             {\r\n//                 props.population.map((item, i) => {\r\n//                     let cellId = `phenotype_${i + 1}`\r\n//                     return (\r\n//                         <button\r\n//                             className='option'\r\n//                             key={nanoid()}\r\n//                             title={item.status}\r\n//                             value={item.phenotype}\r\n//                             id={cellId}\r\n//                             onClick={handleClick}\r\n//                         >\r\n//                             {item.phenotype}\r\n//                         </button>\r\n//                     )\r\n//                 })\r\n//             }\r\n//         </div>\r\n//     )\r\n// }","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\recombination\\RecombineGenotypes.jsx",["616"],"import React from \"react\";\r\nimport RadioHook from \"./RadioHook\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport { dec2binList } from \"../../etbd_hamming/hammingFunctions\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n\r\nexport default class RecombineGenotypes extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.onChange = this.onChange.bind(this)\r\n    }\r\n\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n\r\n    createStates = () => {\r\n\r\n        let nrBits = this.props.nrBits\r\n        let p1, p2, x1, x2\r\n\r\n        if (!this.props.parents) {\r\n            p1 = this.props.low\r\n            p2 = this.props.high\r\n\r\n        } else {\r\n            p1 = this.props.parent1\r\n            p2 = this.props.parent2\r\n        }\r\n\r\n        x1 = dec2binList(nrBits, p1)\r\n        x2 = dec2binList(nrBits, p2)\r\n\r\n\r\n        for (let i = 0; i < nrBits; i++) {\r\n\r\n            let power = x1.length - 1 - i\r\n            let cellName = `childBit_${power}`\r\n\r\n            let outcome = \"\"\r\n            let bit1 = parseInt(x1[i])\r\n            let bit2 = parseInt(x2[i])\r\n\r\n\r\n            if (bit1 === bit2) {\r\n                outcome = parseInt(bit1)\r\n            } else {\r\n                // let rnd = Math.random()\r\n                // if (rnd < .5) {\r\n                //     outcome = bit1\r\n                // } else {\r\n                //     outcome = bit2\r\n                // }\r\n            }\r\n\r\n\r\n            this.setState({ [cellName]: outcome })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentWillMount() {\r\n        this.createStates()\r\n    }\r\n\r\n\r\n    computeChildPhenotype = () => {\r\n        let child = 0\r\n\r\n        Object.entries(this.state).map((entry) => {\r\n\r\n            let cellName = entry[0]\r\n            let power = cellName[cellName.length - 1]\r\n\r\n\r\n            let bitState = this.state[[cellName]]\r\n            let slotValue = 2 ** power\r\n\r\n            // 2 ** props.bitName[props.bitName.length - 1]\r\n\r\n\r\n\r\n            child += bitState * slotValue\r\n        })\r\n        return child\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    submitChildPhenotype = (e) => {\r\n        let cp = this.computeChildPhenotype()\r\n        this.props.addChildItem(cp)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let MyGenotypes = Object.entries(this.state).map((entry, i) => {\r\n            let cellName = entry[0]\r\n            let sameThing = false\r\n\r\n            if (this.props.g1[i] === this.props.g2[i]) {\r\n                sameThing = true\r\n            }\r\n\r\n            return (\r\n                <RadioHook\r\n                    bitName={cellName}\r\n                    bit1={this.props.g1[i]}\r\n                    bit2={this.props.g2[i]}\r\n                    chosenBit={parseInt(this.state[[cellName]])}\r\n                    equal={sameThing}\r\n                    onChange={this.onChange}\r\n\r\n                />\r\n            )\r\n        })\r\n\r\n\r\n\r\n        let ChildPhenotype = this.computeChildPhenotype()\r\n\r\n\r\n        return (\r\n\r\n            <div\r\n                key={nanoid()}\r\n                style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    width: \"100%\",\r\n                    margn: \"auto\",\r\n                }}\r\n            >\r\n\r\n\r\n                <div\r\n                    className=\"div_radio_bit1 div_labels1\"\r\n                    key={nanoid()}\r\n                    style={{\r\n                        margin: \"auto\",\r\n                        width: \"60px\",\r\n                        color: \"#ddd\",\r\n\r\n                    }}\r\n                >\r\n\r\n                    <label\r\n                        className=\"radio_bit1\"\r\n                        key={nanoid()}\r\n                        style={{\r\n                            backgroundColor: '#0063cc2f',\r\n                            marginBottom: \"0px\",\r\n                        }}\r\n                    >\r\n                        <div\r\n                            value={this.props.parent1}\r\n                            className=\"radio_text1\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                color: \"#ddd\",\r\n                                fontSize: \"14px\",\r\n                            }}\r\n                        >\r\n                            {this.props.parent1}\r\n\r\n                        </div>\r\n                    </label>\r\n\r\n\r\n                    <label\r\n                        className=\"radio_bit1\"\r\n                        key={nanoid()}\r\n                        style={{\r\n                            borderTop: \"0px solid #0063cc2f\",\r\n                            backgroundColor: '#0063cc2f',\r\n                            marginTop: \"0px\",\r\n                        }}\r\n                    >\r\n                        <div\r\n                            value={this.props.parent2}\r\n                            className=\"radio_text1\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                color: \"#ddd\",\r\n                                fontSize: \"14px\",\r\n                            }}\r\n                        >\r\n                            {this.props.parent2}\r\n                        </div>\r\n                    </label>\r\n\r\n\r\n\r\n\r\n                    <label\r\n                        //className=\"radio_bit1\"\r\n                        key={nanoid()}\r\n                        style={{\r\n                            marginTop: \"20px\",\r\n                            width: \"60px\",\r\n                            borderRadius: \"0px\",\r\n                        }}\r\n                    >\r\n                        <div\r\n                            //className=\"radio_text1\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                border: \"1px solid #0063cc90\",\r\n                                //color: \"#ddd\",\r\n                                textAlign: \"center\",\r\n                                height: \"100%\",\r\n                                fontSize: \"14px\",\r\n                                width: \"100%\",\r\n                                padding: \"2px\"\r\n                            }}\r\n                        >\r\n                            {ChildPhenotype}\r\n                        </div>\r\n                    </label>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <div\r\n                    key={nanoid()}\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        //border: \"1px solid blue\",\r\n                        //width: \"100%\", \r\n                        margin: \"auto\",\r\n                    }}>\r\n\r\n\r\n                    <div\r\n                        key={nanoid()}\r\n                        style={{\r\n                            textAlign: \"left\",\r\n                            display: \"inline-flex\",\r\n                            margin: \"0px auto 10px auto\",\r\n                            //width: \"100%\",\r\n                            //border: \"1px solid orange\"\r\n\r\n                        }}\r\n                    >\r\n                        {MyGenotypes}\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                    <div\r\n                        key={nanoid()}\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"row\",\r\n                            width: \"100%\",\r\n                            justifyContent: \"space-beteen\",\r\n                            margin: \"10px auto auto auto\",\r\n                            height: \"fit-content\",\r\n                            //border: \"1px solid lime\"\r\n                        }}\r\n                    >\r\n\r\n\r\n                        <Button\r\n                            onClick={this.submitChildPhenotype}\r\n                            variant=\"outline-success\"\r\n                            key={nanoid()}\r\n                            style={{\r\n                                width: \"70px\",\r\n                                height: \"30px\",\r\n                                fontSize: \"10px\",\r\n                                margin: \"auto\",\r\n                                padding: \"2px\",\r\n                                marginLeft: \"0px\",\r\n                            }}\r\n                        >\r\n                            next\r\n\r\n                        </Button>\r\n\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from \"react\";\r\n// import RadioHook from \"./RadioHook\";\r\n// import { Button } from \"react-bootstrap\";\r\n\r\n// import { dec2binList } from \"../../etbd_hamming/hammingFunctions\";\r\n// import { nanoid } from \"nanoid\";\r\n\r\n\r\n// export default class RecombineGenotypes extends React.Component {\r\n\r\n\r\n//     constructor(props) {\r\n//         super(props)\r\n\r\n//         this.onChange = this.onChange.bind(this)\r\n//     }\r\n\r\n\r\n//     onChange = (e) => {\r\n//         // console.log(e.target.id)\r\n//         this.setState({\r\n//             [e.target.name]: e.target.value\r\n//         })\r\n//     }\r\n\r\n\r\n\r\n//     createStates = () => {\r\n\r\n//         let nrBits = this.props.nrBits\r\n//         let p1, p2, x1, x2\r\n\r\n//         if (!this.props.parents) {\r\n//             p1 = this.props.low\r\n//             p2 = this.props.high\r\n\r\n//         } else {\r\n//             p1 = this.props.parent1\r\n//             p2 = this.props.parent2\r\n//         }\r\n\r\n//         x1 = dec2binList(nrBits, p1)\r\n//         x2 = dec2binList(nrBits, p2)\r\n\r\n//         for (let i = 0; i < nrBits; i++) {\r\n\r\n//             let power = x1.length - 1 - i\r\n//             let cellName = `childBit_${power}`\r\n\r\n//             let outcome = \"\"\r\n//             let bit1 = parseInt(x1[i])\r\n//             let bit2 = parseInt(x2[i])\r\n\r\n\r\n//             if (bit1 === bit2) {\r\n//                 outcome = parseInt(bit1)\r\n//             } else {\r\n//                 // let rnd = Math.random()\r\n//                 // if (rnd < .5) {\r\n//                 //     outcome = bit1\r\n//                 // } else {\r\n//                 //     outcome = bit2\r\n//                 // }\r\n//             }\r\n\r\n\r\n//             this.setState({ [cellName]: outcome })\r\n//         }\r\n//     }\r\n\r\n\r\n\r\n//     componentWillMount() {\r\n//         this.createStates()\r\n//     }\r\n\r\n\r\n//     computeChildPhenotype = () => {\r\n//         let child = 0\r\n\r\n//         Object.entries(this.state).map((entry) => {\r\n\r\n//             let cellName = entry[0]\r\n//             let power = cellName[cellName.length - 1]\r\n\r\n\r\n//             let bitState = this.state[[cellName]]\r\n//             let slotValue = 2 ** power\r\n\r\n//             // 2 ** props.bitName[props.bitName.length - 1]\r\n\r\n\r\n\r\n//             child += bitState * slotValue\r\n//         })\r\n//         return child\r\n//     }\r\n\r\n\r\n\r\n\r\n\r\n//     submitChildPhenotype = (e) => {\r\n//         let cp = this.computeChildPhenotype()\r\n//         this.props.addChildItem(cp)\r\n//     }\r\n\r\n\r\n//     render() {\r\n\r\n//         if (!this.props.parent1 || !this.props.parent2) {\r\n//             return null;\r\n//         }\r\n\r\n//         let MyGenotypes = Object.entries(this.state).map((entry, i) => {\r\n//             let cellName = entry[0]\r\n//             let sameThing = false\r\n//             let p1 = this.props.parent1\r\n//             let p2 = this.props.parent2\r\n//             // let g1 = dec2binList(this.props.nrBits, p1)\r\n//             // let g2 = dec2binList(this.props.nrBits, p2)\r\n//             // console.log(\"cellName: \", entry)\r\n//             // console.log(\"cellName: \", cellName)\r\n\r\n\r\n//             if (this.props.g1[i] === this.props.g2[i]) {\r\n//                 sameThing = true\r\n//             }\r\n\r\n//             return (\r\n//                 <RadioHook\r\n//                     bitName={cellName}\r\n//                     // bit1={this.props.g1[i]}\r\n//                     // bit2={this.props.g2[i]}\r\n//                     bit1={g1[i]}\r\n//                     bit2={g2[i]}\r\n//                     chosenBit={parseInt(this.state[[cellName]])}\r\n//                     equal={sameThing}\r\n//                     onChange={this.onChange}\r\n\r\n//                 />\r\n//             )\r\n//         })\r\n\r\n\r\n\r\n//         let ChildPhenotype = this.computeChildPhenotype()\r\n\r\n\r\n//         return (\r\n\r\n//             <div\r\n//                 key={nanoid()}\r\n//                 style={{\r\n//                     display: \"flex\",\r\n//                     flexDirection: \"row\",\r\n//                     width: \"100%\",\r\n//                     margn: \"auto\",\r\n//                 }}\r\n//             >\r\n\r\n//                 {/* <button\r\n//                     disabled={false}\r\n//                     //id={pairId}\r\n//                     //value={pair}\r\n//                     key={nanoid()}\r\n//                     className=\"btn-pair\"\r\n//                 //onClick={this.recombinePair}\r\n//                 >\r\n//                     <span\r\n//                         key={nanoid()}\r\n//                         value={this.props.parent1}\r\n//                     // style={{\r\n//                     //     margin: \"auto\",\r\n//                     //     width: \"70px\"\r\n//                     // }}\r\n//                     >\r\n//                         {this.props.parent1 ? this.props.parent1 : this.props.low}\r\n//                     </span>\r\n\r\n//                     <span\r\n//                         key={nanoid()}\r\n//                         value={this.props.parent2}\r\n//                     // style={{\r\n//                     //     margin: \"auto\",\r\n//                     //     width: \"70px\"\r\n//                     // }}\r\n//                     >\r\n//                         {this.props.parent2 ? this.props.parent2 : this.props.high}\r\n//                     </span>\r\n\r\n//                 </button>\r\n\r\n\r\n//                 <button\r\n//                     value={ChildPhenotype}\r\n//                     key={nanoid()}\r\n//                     className=\"btn-child\"\r\n//                 >\r\n//                     {ChildPhenotype}\r\n\r\n//                 </button>\r\n\r\n\r\n\r\n//                 <div\r\n//                     key={nanoid()}\r\n//                     style={{\r\n//                         display: \"flex\",\r\n//                         flexDirection: \"column\",\r\n//                         //border: \"1px solid blue\",\r\n//                         //width: \"100%\",\r\n//                         margin: \"auto\",\r\n//                     }}>\r\n\r\n\r\n//                     <div\r\n//                         key={nanoid()}\r\n//                         style={{\r\n//                             textAlign: \"left\",\r\n//                             display: \"inline-flex\",\r\n//                             margin: \"0px auto 10px auto\",\r\n//                             //width: \"100%\",\r\n//                             //border: \"1px solid orange\"\r\n\r\n//                         }}\r\n//                     >\r\n//                         {MyGenotypes}\r\n\r\n//                     </div>\r\n\r\n\r\n\r\n//                     <div\r\n//                         key={nanoid()}\r\n//                         style={{\r\n//                             display: \"flex\",\r\n//                             flexDirection: \"row\",\r\n//                             width: \"100%\",\r\n//                             justifyContent: \"space-beteen\",\r\n//                             margin: \"10px auto auto auto\",\r\n//                             height: \"fit-content\",\r\n//                             //border: \"1px solid lime\"\r\n\r\n//                         }}\r\n//                     >\r\n\r\n\r\n//                         <Button\r\n//                             onClick={this.submitChildPhenotype}\r\n//                             variant=\"outline-success\"\r\n//                             key={nanoid()}\r\n//                             style={{\r\n//                                 width: \"70px\",\r\n//                                 height: \"30px\",\r\n//                                 fontSize: \"10px\",\r\n//                                 margin: \"auto\",\r\n//                                 padding: \"2px\",\r\n//                                 marginLeft: \"0px\",\r\n//                             }}\r\n//                         >\r\n//                             next pair\r\n\r\n//                         </Button>\r\n\r\n\r\n\r\n//                     </div>\r\n\r\n//                 </div> */}\r\n\r\n//                 <div\r\n//                     className=\"div_radio_bit1 div_labels1\"\r\n//                     key={nanoid()}\r\n//                     style={{\r\n//                         margin: \"auto\",\r\n//                         width: \"60px\",\r\n//                         color: \"#ddd\",\r\n\r\n//                     }}\r\n//                 >\r\n\r\n//                     <label\r\n//                         className=\"radio_bit1\"\r\n//                         key={nanoid()}\r\n//                         style={{\r\n//                             backgroundColor: '#0063cc2f',\r\n//                             marginBottom: \"0px\",\r\n//                         }}\r\n//                     >\r\n//                         <div\r\n//                             value={this.props.parent1}\r\n//                             className=\"radio_text1\"\r\n//                             key={nanoid()}\r\n//                             style={{\r\n//                                 color: \"#ddd\",\r\n//                                 fontSize: \"14px\",\r\n//                             }}\r\n//                         >\r\n//                             {this.props.parent1}\r\n\r\n//                         </div>\r\n//                     </label>\r\n\r\n\r\n//                     <label\r\n//                         className=\"radio_bit1\"\r\n//                         key={nanoid()}\r\n//                         style={{\r\n//                             borderTop: \"0px solid #0063cc2f\",\r\n//                             backgroundColor: '#0063cc2f',\r\n//                             marginTop: \"0px\",\r\n//                         }}\r\n//                     >\r\n//                         <div\r\n//                             value={this.props.parent2}\r\n//                             className=\"radio_text1\"\r\n//                             key={nanoid()}\r\n//                             style={{\r\n//                                 color: \"#ddd\",\r\n//                                 fontSize: \"14px\",\r\n//                             }}\r\n//                         >\r\n//                             {this.props.parent2}\r\n//                         </div>\r\n//                     </label>\r\n\r\n\r\n\r\n\r\n//                     <label\r\n//                         //className=\"radio_bit1\"\r\n//                         key={nanoid()}\r\n//                         style={{\r\n//                             marginTop: \"20px\",\r\n//                             width: \"60px\",\r\n//                             borderRadius: \"0px\",\r\n//                         }}\r\n//                     >\r\n//                         <div\r\n//                             //className=\"radio_text1\"\r\n//                             key={nanoid()}\r\n//                             style={{\r\n//                                 border: \"1px solid #0063cc90\",\r\n//                                 //color: \"#ddd\",\r\n//                                 textAlign: \"center\",\r\n//                                 height: \"100%\",\r\n//                                 fontSize: \"14px\",\r\n//                                 width: \"100%\",\r\n//                                 padding: \"2px\"\r\n//                             }}\r\n//                         >\r\n//                             {ChildPhenotype}\r\n//                         </div>\r\n//                     </label>\r\n\r\n\r\n//                 </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//                 <div\r\n//                     key={nanoid()}\r\n//                     style={{\r\n//                         display: \"flex\",\r\n//                         flexDirection: \"column\",\r\n//                         //border: \"1px solid blue\",\r\n//                         //width: \"100%\",\r\n//                         margin: \"auto\",\r\n//                     }}>\r\n\r\n\r\n//                     <div\r\n//                         key={nanoid()}\r\n//                         style={{\r\n//                             textAlign: \"left\",\r\n//                             display: \"inline-flex\",\r\n//                             margin: \"0px auto 10px auto\",\r\n//                             //width: \"100%\",\r\n//                             //border: \"1px solid orange\"\r\n\r\n//                         }}\r\n//                     >\r\n//                         {MyGenotypes}\r\n\r\n//                     </div>\r\n\r\n\r\n\r\n//                     <div\r\n//                         key={nanoid()}\r\n//                         style={{\r\n//                             display: \"flex\",\r\n//                             flexDirection: \"row\",\r\n//                             width: \"100%\",\r\n//                             justifyContent: \"space-beteen\",\r\n//                             margin: \"10px auto auto auto\",\r\n//                             height: \"fit-content\",\r\n//                             //border: \"1px solid lime\"\r\n\r\n//                         }}\r\n//                     >\r\n\r\n\r\n//                         <Button\r\n//                             onClick={this.submitChildPhenotype}\r\n//                             variant=\"outline-success\"\r\n//                             key={nanoid()}\r\n//                             style={{\r\n//                                 width: \"70px\",\r\n//                                 height: \"30px\",\r\n//                                 fontSize: \"10px\",\r\n//                                 margin: \"auto\",\r\n//                                 padding: \"2px\",\r\n//                                 marginLeft: \"0px\",\r\n//                             }}\r\n//                         >\r\n//                             next pair\r\n\r\n//                         </Button>\r\n\r\n\r\n\r\n//                     </div>\r\n\r\n//                 </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//             </div>\r\n//         )\r\n\r\n//     }\r\n// }","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\mutation\\CbxMutation.jsx",["617"],"import React from \"react\"\r\nimport { nanoid } from \"nanoid\"\r\nimport parse from \"html-react-parser\"\r\n\r\nexport default class CbxMutation extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n\r\n            <React.Fragment>\r\n\r\n\r\n                <label\r\n                    className='bit'\r\n                    key={nanoid()}\r\n                    title={2 ** this.props.bitName[this.props.bitName.length - 1]}\r\n\r\n                    data-power2={this.props.power2}\r\n\r\n                >\r\n\r\n                    2<sup>{this.props.bitName[this.props.bitName.length - 1]}</sup>\r\n\r\n\r\n                    <input\r\n                        key={nanoid()}\r\n                        className=\"cbx_input\"\r\n                        type=\"checkbox\"\r\n                        //type=\"radio\"\r\n                        checked={this.props.mutant}\r\n                        value={this.props.bitState}\r\n                        name={this.props.bitName}\r\n                        onChange={this.props.onChange}\r\n                    />\r\n\r\n\r\n                    <div\r\n                        value={this.props.bitState}\r\n\r\n                        class=\"cbx_text\"\r\n                        key={nanoid()}\r\n                    >\r\n                        {this.props.bitState}\r\n                    </div>\r\n\r\n                </label>\r\n\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\recombination\\RadioHook.jsx",[],"F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\EmergenceMain2.jsx",["618","619","620","621","622","623","624","625","626","627"],"import \"./emergence.sass\";\r\nimport \"./emergence22.sass\";\r\n\r\nimport './fitness/_btn-set-fitness.sass'\r\n\r\nimport React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport * as d3 from \"d3\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\n\r\nimport etbdState from \"../etbd/etbdState\";\r\nimport { dec2binList } from \"../etbd_hamming/hammingFunctions\";\r\n\r\nimport { NeonCreateNewPopulation, NeonSelection, NeonRecombination, NeonMutation } from \"./NeonsSigns\";\r\n\r\nimport NeonEmitBehavior from './emission/NeonEmitBehavior';\r\nimport AvailableOptions from \"./emission/AvailableOptions\";\r\n\r\nimport SelectionPressure from \"./fitness/SelectionPressure\";\r\nimport FitnessD3 from \"./fitness/FitnessD3\";\r\n\r\nimport SelectParents from \"./selection/SelectParents\";\r\n\r\nimport RecombineGenotypes from \"./recombination/RecombineGenotypes\";\r\n\r\nimport MutationDemo from \"./mutation/MutationDemo\";\r\n\r\nimport { createAgentHistory, gLength } from './littleHelpers'\r\n// import SetFitnessCriterion from \"./fitness/SetFitnessCriterion\";\r\n\r\n\r\n\r\n// var defaultGeneration = []\r\n// etbdState.defaultPopulation.forEach((item) => {\r\n//     defaultGeneration.push(\r\n//         {\r\n//             phenotype: item,\r\n//             genotype: \"\",\r\n//             status: \"\",      // emited, reinforced, or empty; used in emergence22.sass for styling;\r\n//             fitness: 0,\r\n//             mutant: false\r\n//         }\r\n//     )\r\n// })\r\n\r\n\r\nexport default class EmergenceMain2 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            // agentHistory: [\r\n            //     { tn: -2, population: defaultGeneration },\r\n            //     { tn: -1, population: defaultGeneration }\r\n            // ],\r\n            agentHistory: createAgentHistory(),\r\n            popSize: 5,\r\n            nrBits: gLength()[0],\r\n            demoState: \"start\",\r\n            low: d3.min(etbdState.repertoire),\r\n            high: d3.max(etbdState.repertoire),\r\n            ems: '',\r\n            emsid: '',\r\n            reinforced: false,\r\n\r\n            rnfMessage: \"Reinforce it\",\r\n            rnfColor: \"#555\",\r\n\r\n            p1: null,\r\n            p2: null,\r\n            cp: null,\r\n\r\n            g1: gLength()[1],\r\n            g2: gLength()[1],\r\n            cg: gLength()[1],\r\n            genotype1: [0, 0, 0, 0, 0, 0],\r\n            genotype2: [1, 1, 1, 1, 1, 1],\r\n\r\n            childPhenotype: 57,\r\n            childGenotype: [0, 1, 0, 1, 1, 1, 1],\r\n\r\n            mutatedPhenotype: \"?\",\r\n            mutatedGenotype: [\"?\", \"?\", \"?\", \"?\"],\r\n\r\n            fitnessZero: \"\",\r\n            allParents: [],\r\n            allChildren: [],\r\n\r\n            fitness_colors: [\"#000\", \"#ff6200\"],\r\n            responses: 0,\r\n\r\n            miu1: 6\r\n        }\r\n\r\n        this.initializeAgent = this.initializeAgent.bind(this)\r\n        this.doSomething = this.doSomething.bind(this)\r\n        this.recombinePair = this.recombinePair.bind(this)\r\n        this.addChildItem = this.addChildItem.bind(this)\r\n        this.automateRecombination = this.automateRecombination.bind(this)\r\n    }\r\n\r\n\r\n    componentWillMount() {\r\n        let binaryHigh = this.state.high.toString(2)\r\n        // this.setState({ nrBits: binaryHigh.length })\r\n        let cg = Array.apply(null, Array(binaryHigh.length)).map(function (x, i) { return \"\"; })\r\n        this.setState({ childGenotype: cg })\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.initializeAgent()\r\n    }\r\n\r\n    initializeAgent = () => {\r\n\r\n        this.setState({ demoState: \"emission\" })\r\n\r\n        let bits = this.state.nrBits\r\n\r\n        let population = etbdState.defaultPopulation\r\n        let generation = []\r\n        let n = this.state.popSize\r\n\r\n        // population.sort((a, b) => a > b)\r\n\r\n        this.setState({ parentPopulation: population })\r\n        this.setState({ population: population })\r\n        // this.setState({ parent1: d3.min(population) })\r\n        // this.setState({ parent2: d3.max(population) })\r\n        this.setState({ parents: [d3.min(population), d3.max(population)] })\r\n\r\n        this.setState({ childG: d3.min(population) })\r\n\r\n\r\n        // AGENT HISTORY:\r\n        let history = this.state.agentHistory\r\n\r\n        population.forEach((item) => {\r\n            let bitString = dec2binList(bits, parseInt(item))\r\n            generation.push({\r\n                phenotype: parseInt(item),\r\n                genotype: bitString,\r\n                status: \"\"\r\n            })\r\n        })\r\n\r\n        history.push({\r\n            tn: 0,\r\n            population: generation\r\n        })\r\n\r\n        this.setState({ agentHistory: history })\r\n    }\r\n\r\n\r\n\r\n    // EMIT A RESPONSE\r\n\r\n    doSomething = (eventTarget) => {\r\n        // console.log(value, id.id)\r\n        this.setState({ emsid: eventTarget.id })\r\n\r\n        let history = this.state.agentHistory\r\n        let gen = history[history.length - 1]\r\n        let pop = gen.population\r\n\r\n        let individual = pop.filter(item => item.phenotype === parseInt(eventTarget.value))\r\n\r\n        individual[0].status = \"emited\"\r\n\r\n        this.setState({ ems: parseInt(eventTarget.value) })\r\n        this.setState({ agentHistory: history })\r\n        this.setState({ demoState: 'selection' })\r\n    }\r\n\r\n\r\n\r\n\r\n    reinforceResponse = () => {\r\n\r\n        let ah = this.state.agentHistory\r\n        console.log(ah)\r\n        let gn = ah[ah.length - 1]\r\n\r\n        if (this.state.reinforced === false) {\r\n            let ems = gn.population.filter(item => item.status === \"emited\")[0]\r\n            ems.status = \"reinforced\"\r\n\r\n            this.setState({ fitnessZero: ems.phenotype })\r\n\r\n            gn.population.forEach((item) => {\r\n                // let rf = Math.abs(item.phenotype - ems.phenotype)\r\n                // item.fitness = rf\r\n\r\n                let rd = Math.abs(item.phenotype - ems.phenotype)\r\n                let a = 1 / this.state.miu1\r\n                let rf = a * Math.E ** (-a * item.phenotype)\r\n                let rf1 = 1 - Math.E ** (-a * item.phenotype)\r\n\r\n                item.fitness = rf.toFixed(3)\r\n\r\n                // console.log('-------------')                \r\n                // console.log(\"rd: \", rd)\r\n                // console.log(\"miu1: \", this.state.miu1)\r\n                // console.log(\"a: \", a)\r\n                // console.log(\"rf: \", rf)\r\n            })\r\n\r\n            let chosenFitness = d3.randomExponential(1 / this.state.miu1)(this.state.low, this.state.high)\r\n\r\n            // console.log(\"chosenFitness: \", parseInt(chosenFitness))\r\n\r\n            // let myVals = []\r\n            // for (let i = 0; i < 1000000; i++) {\r\n            //     // let chosenFitness = d3.randomExponential(1, 5)(this.state.miu1)\r\n            //     let chosenFitness = d3.randomExponential(1 / this.state.miu1)(this.state.low, this.state.high)\r\n\r\n            //     let cf = parseInt(chosenFitness)\r\n            //     myVals.push(1 / chosenFitness)\r\n            // }\r\n\r\n            // console.log(\"miu = 5, (1, 5): \", d3.mean(myVals), d3.median(myVals))\r\n\r\n            // let chosenFitness = d3.randomExponential(1, 5)(this.state.miu1) * 1000\r\n            // let cf = parseInt(chosenFitness)\r\n\r\n\r\n\r\n\r\n        } else {\r\n            let ems = gn.population.filter(item => item.status === \"reinforced\")[0]\r\n            ems.status = \"emited\"\r\n        }\r\n\r\n\r\n        this.setState({ agentHistory: ah })\r\n\r\n        if (this.state.reinforced === false) {\r\n            this.setState({\r\n                reinforced: true,\r\n                rnfMessage: `${this.state.ems} is now the \"fitness ideal\".`,\r\n                rnfColor: \"yellow\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                reinforced: false,\r\n                rnfMessage: \"reinforce it\",\r\n                rnfColor: \"#555\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //  SELECT PARENTS:\r\n\r\n    doSomethingSelect = (event) => {\r\n        let value = event.currentTarget.value\r\n        let bits = this.state.nrBits\r\n        let gn = dec2binList(bits, parseInt(value))\r\n        let ppp = this.state.parents\r\n        let allP = this.state.allParents\r\n\r\n        ppp.push(parseInt(value))\r\n\r\n        if (ppp.length === 1) {\r\n            this.setState({ parents: ppp })\r\n            allP.unshift(ppp)\r\n        }\r\n\r\n        if (ppp.length === 2) {\r\n            ppp.sort((a, b) => a > b)\r\n            allP[0] = ppp\r\n            this.setState({ allParents: allP, parents: [] })\r\n        }\r\n\r\n        if (allP.length >= this.state.popSize && ppp.length === 2) {\r\n            let pair = allP[0]\r\n            let idx = 0\r\n\r\n            let p1 = parseInt(pair[0])\r\n            let p2 = parseInt(pair[1])\r\n            let g1 = dec2binList(this.state.nrBits, p1)\r\n            let g2 = dec2binList(this.state.nrBits, p2)\r\n\r\n            allP[idx] = []\r\n\r\n            this.setState({\r\n                parents: [p1, p2],\r\n                genotype1: g1,\r\n                genotype2: g2,\r\n                allParents: allP,\r\n                demoState: \"recombination\"\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n\r\n    twoFitParents = () => {\r\n        let parents = []\r\n\r\n        let miu = 15\r\n        let fitnessZero = this.state.ems\r\n        let range = [this.state.low, this.state.high]\r\n\r\n        let parentPopulation = this.state.agentHistory[this.state.agentHistory.length - 1].population\r\n        let population = []\r\n\r\n        parentPopulation.forEach((item) => {\r\n            population.push(item.phenotype)\r\n        })\r\n\r\n        while (parents.length < 2) {\r\n            let randomFitness = parseInt(d3.randomExponential(1 / miu)(range[0], range[1]))\r\n            let phen1 = fitnessZero - randomFitness\r\n            let phen2 = fitnessZero + randomFitness\r\n\r\n            if (population.includes(phen1) && !parents.includes(phen1) && parents.length < 2) {\r\n                parents.push(phen1)\r\n            }\r\n\r\n            if (population.includes(phen2) && !parents.includes(phen2) && parents.length < 2) {\r\n                parents.push(phen2)\r\n            }\r\n        }\r\n\r\n        return parents\r\n    }\r\n\r\n\r\n\r\n\r\n    automateSelection = () => {\r\n        let parentPopulation = this.state.agentHistory[this.state.agentHistory.length - 1].population\r\n        let bits = this.state.nrBits\r\n        let allP = this.state.allParents\r\n        let i = 0\r\n\r\n\r\n        for (i; i < this.state.popSize; i++) {\r\n\r\n            let pair = []\r\n\r\n            if (this.state.reinforced === true) {\r\n                pair = this.twoFitParents()\r\n            } else {\r\n                let p1 = parentPopulation[Math.floor(Math.random() * parentPopulation.length)]\r\n                let p2 = parentPopulation[Math.floor(Math.random() * parentPopulation.length)]\r\n                pair = [p1.phenotype, p2.phenotype]\r\n            }\r\n\r\n            pair.sort((a, b) => a > b)\r\n            allP.unshift(pair)\r\n        }\r\n\r\n        this.setState({\r\n            allParents: allP,\r\n            demoState: \"recombination\"\r\n        })\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    recombinePair = (event) => {\r\n        let x0 = event.currentTarget.id\r\n        let x = event.currentTarget.id.split(\"_\")\r\n        let idx = parseInt(x[1]) - 1\r\n        let allPairs = this.state.allParents\r\n\r\n        allPairs[idx] = []\r\n\r\n        let v = event.currentTarget.value.split(\",\")\r\n        let p1 = parseInt(v[0])\r\n        let p2 = parseInt(v[1])\r\n        let g1 = dec2binList(this.state.nrBits, p1)\r\n        let g2 = dec2binList(this.state.nrBits, p2)\r\n\r\n        this.setState({\r\n            parents: [p1, p2],\r\n            genotype1: g1,\r\n            genotype2: g2,\r\n            allParents: allPairs\r\n        })\r\n    };\r\n\r\n\r\n\r\n    automateRecombination = () => {\r\n        let bits = this.state.nrBits\r\n        let allP = this.state.allParents\r\n        let allC = []\r\n\r\n        allP.forEach(pair => {\r\n            let p1 = pair[0]\r\n            let p2 = pair[1]\r\n            let g1 = dec2binList(bits, p1)\r\n            let g2 = dec2binList(bits, p2)\r\n\r\n            let cg = []\r\n            let cp = 0\r\n\r\n            for (let i = 0; i < g1.length; i++) {\r\n                let gene = \"\"\r\n                let power = g1.length - i - 1\r\n\r\n\r\n                let rnd = Math.random()\r\n                if (rnd < .5) {\r\n                    gene = parseInt(g1[i])\r\n                } else {\r\n                    gene = parseInt(g2[i])\r\n                }\r\n\r\n                cg.push(gene)\r\n                let slotValue = gene * 2 ** power\r\n                cp = cp + slotValue\r\n            }\r\n\r\n\r\n            let childItem = this.createChildItem(cp)\r\n            allC.push(childItem)\r\n        })\r\n\r\n\r\n        this.setState({\r\n            allChildren: allC,\r\n            demoState: \"mutation\"\r\n        })\r\n    };\r\n\r\n\r\n\r\n\r\n    createChildItem = (value) => {\r\n        let a = parseInt(value)\r\n        let b = dec2binList(this.state.nrBits, a)\r\n        let rf = Math.abs(a - this.state.fitnessZero)\r\n        return (\r\n            {\r\n                phenotype: a,\r\n                genotype: b,\r\n                fitness: rf,\r\n                mutant: false,\r\n                status: \"\"\r\n            }\r\n        )\r\n    };\r\n\r\n    addChildItem = (newChild) => {\r\n        let childItem = this.createChildItem(newChild)\r\n        let ac = this.state.allChildren\r\n        ac.push(childItem)\r\n\r\n        if (ac.length >= this.state.popSize) {\r\n            this.setState({\r\n                parents: [],\r\n                allChildren: ac,\r\n                demoState: \"mutation\"\r\n            })\r\n        }\r\n\r\n        let allPairs = this.state.allParents\r\n        let pair = allPairs.find(item => item.length === 2)\r\n\r\n        if (pair) {\r\n            let idx = allPairs.indexOf(pair)\r\n            let p1 = parseInt(pair[0])\r\n            let p2 = parseInt(pair[1])\r\n            let g1 = dec2binList(this.state.nrBits, p1)\r\n            let g2 = dec2binList(this.state.nrBits, p2)\r\n\r\n            allPairs[idx] = []\r\n\r\n            this.setState({ parents: [p1, p2], genotype1: g1, genotype2: g2, allParents: allPairs, allChildren: ac })\r\n        }\r\n    };\r\n\r\n    mutateChild = (event) => {\r\n        let x = event.currentTarget.id.split(\"_\")\r\n        let idx = parseInt(x[1]) - 1\r\n        let childItem = this.state.allChildren[idx]\r\n\r\n        this.setState({ childPhenotype: childItem.phenotype })\r\n        this.setState({ childGenotype: childItem.genotype })\r\n        this.setState({ mutatedGenotype: childItem.genotype })\r\n        this.setState({ mutantIndex: idx })\r\n    }\r\n\r\n\r\n    mutateChildAutomatic = (event) => {\r\n        let x = event.currentTarget.id.split(\"_\")\r\n        let idx = parseInt(x[1]) - 1\r\n        let childItem = this.state.allChildren[idx]\r\n\r\n        this.setState({ childPhenotype: childItem.phenotype })\r\n        this.setState({ childGenotype: childItem.genotype })\r\n        this.setState({ mutatedGenotype: childItem.genotype })\r\n        this.setState({ mutantIndex: idx })\r\n    }\r\n\r\n\r\n    replaceOriginal = (mutatedChild) => {\r\n        let ac = this.state.allChildren\r\n\r\n        let p = parseInt(mutatedChild)\r\n        let g = dec2binList(this.state.nrBits, p)\r\n        let childIndex = this.state.mutantIndex\r\n\r\n        ac[childIndex].phenotype = p\r\n        ac[childIndex].genotype = g\r\n        ac[childIndex].mutant = true\r\n        ac[childIndex].status = \"mutant\"\r\n\r\n        this.setState({ allChildren: ac })\r\n    }\r\n\r\n\r\n\r\n    automateMutation = () => {\r\n        let ac = this.state.allChildren\r\n        let idx1 = Math.floor(Math.random() * this.state.popSize)\r\n        let idx2 = Math.floor(Math.random() * this.state.nrBits)\r\n\r\n        this.setState({ mutantIndex: idx1 })\r\n\r\n        let child = ac[idx1]\r\n\r\n        let childP = child.phenotype\r\n        let childG = child.genotype\r\n\r\n        this.setState({\r\n            childPhenotype: childP,\r\n            childGenotype: childG,\r\n            //mutantGenotype: child.genotype,\r\n        })\r\n\r\n        let mg = []\r\n        let mutant = 0\r\n\r\n        // Re-create the original genotype; when it reaches the bit\r\n        //  with index === idx2, flip it; results in a mutated genotype. \r\n        child.genotype.forEach((bit, i) => {\r\n            if (i !== idx2) {\r\n                mg.push(bit)\r\n            } else {\r\n                mg.push(Math.abs(1 - bit))\r\n            }\r\n        })\r\n\r\n\r\n        // Compute the mutated phenotype:\r\n        mg.forEach((bit, i) => {\r\n            let power = mg.length - 1 - i\r\n            let slotValue = bit * 2 ** power\r\n            mutant += slotValue\r\n        })\r\n\r\n        child.genotype = mg\r\n        child.phenotype = mutant\r\n        child.status = \"mutant\"\r\n        this.setState({\r\n            allChildren: ac,\r\n        })\r\n    };\r\n\r\n\r\n    swapPopulations = () => {\r\n        let ah = this.state.agentHistory\r\n        let ac = this.state.allChildren\r\n        let tn = ah[ah.length - 1].tn\r\n\r\n        let newPopulation = {\r\n            tn: tn + 1,\r\n            population: ac\r\n        }\r\n\r\n        ah.push(newPopulation)\r\n\r\n        // if (tn > 0) {\r\n        //     ah = ah,slice(1)\r\n        // }\r\n\r\n        this.setState({\r\n            agentHistory: ah,\r\n            allParents: [],\r\n            allChildren: [],\r\n            ems: \"\",\r\n            reinforced: false,\r\n            demoState: \"emission\",\r\n        })\r\n    };\r\n\r\n\r\n\r\n    automateOneGeneration = () => {\r\n        let ah = this.state.agentHistory\r\n        let gn = ah[ah.length - 1]\r\n        let tn = gn.tn\r\n\r\n        // RANDOM EMISSION:\r\n        let myEms = gn.population[Math.floor(Math.random() * gn.population.length)]\r\n        myEms.status = \"emited\"\r\n        this.setState({ ems: myEms.phenotype })\r\n        this.setState({ demoState: \"selection\" })\r\n\r\n        // SELECT PARENTS:\r\n        this.automateSelection()\r\n\r\n        // RECOMBINE:\r\n        this.automateRecombination()\r\n\r\n        // MUTATE ONE GENOTYPE:\r\n        setTimeout(() => {\r\n            this.automateMutation()\r\n            this.swapPopulations()\r\n        }, 1000)\r\n    };\r\n\r\n\r\n\r\n    automateMultiple = () => {\r\n        let x = 5\r\n        for (let i = 0; i < x; i++) {\r\n            setTimeout(this.automateOneGeneration())\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    // sliderChange = (e) => {\r\n    //     this.setState({ cod1_duration: e.currentTarget.value * 1000 })\r\n    //     this.setState({ cod2_duration: e.currentTarget.value * 1000 })\r\n\r\n    //     var p0sec = document.getElementById(\"p0sec\")\r\n    //     var p2sec = document.getElementById(\"p2sec\")\r\n\r\n    //     if (e.currentTarget.value > 0) {\r\n    //         p0sec.classList.remove(\"inEffect\")\r\n    //         p0sec.classList.add(\"notInEffect\")\r\n    //         p2sec.classList.remove(\"notInEffect\")\r\n    //         p2sec.classList.add(\"inEffect\")\r\n    //     } else {\r\n    //         p2sec.classList.remove(\"inEffect\")\r\n    //         p2sec.classList.add(\"notInEffect\")\r\n    //         p0sec.classList.add(\"inEffect\")\r\n    //         p0sec.classList.remove(\"notInEffect\")\r\n\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n    handleMiu1 = () => {\r\n        console.log(\"handle miu1: this.state.miu1, not bind: \", this.state.miu1)\r\n        // this.setState({miu1: 5})\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let AllTheParents = []\r\n        let AllTheChildren = []\r\n        // let fitness_gradient = d3.scaleLinear()\r\n        //     .domain([1, 99])\r\n        //     .range([this.state.fitness_colors[0], this.state.fitness_colors[1]])\r\n\r\n\r\n        if (this.state.allParents) {\r\n            for (let i = 0; i < this.state.popSize; i++) {\r\n                let pairId = `pair_${i + 1}`\r\n                let pair = this.state.allParents[i] ? this.state.allParents[i] : [\"\", \"\"]\r\n\r\n                // let pair = [\"\", \"\"]\r\n                // if (this.state.allParents[i]) {\r\n                //     pair = this.state.allParents[i]\r\n                // }\r\n\r\n                AllTheParents.push(\r\n\r\n                    <button\r\n                        disabled={false}\r\n                        id={pairId}\r\n                        value={pair}\r\n                        key={nanoid()}\r\n                        className=\"btn-pair\"\r\n                        onClick={this.recombinePair}\r\n                    >\r\n                        <span>{pair[0]}</span>\r\n                        <span>{pair[1]}</span>\r\n\r\n                    </button>\r\n                )\r\n            }\r\n        };\r\n\r\n\r\n\r\n        if (this.state.allChildren) {\r\n            for (let i = 0; i < this.state.popSize; i++) {\r\n                let childId = `child_${i + 1}`\r\n                let childPhen = this.state.allChildren[i] ? this.state.allChildren[i].phenotype : \"\"\r\n                let childStatus = this.state.allChildren[i] ? this.state.allChildren[i].status : \"\"\r\n\r\n                // let childPhen = \"\"\r\n                // let childStatus = \"\"\r\n\r\n                // if (this.state.allChildren[i]) {\r\n                //     childPhen = this.state.allChildren[i].phenotype\r\n                //     childStatus = this.state.allChildren[i].status\r\n                // }\r\n\r\n                AllTheChildren.push(\r\n                    <button\r\n                        title={childStatus}\r\n                        id={childId}\r\n                        value={childPhen}\r\n                        key={nanoid()}\r\n                        className=\"btn-child\"\r\n                        onClick={this.mutateChild}\r\n                    // style={{\r\n                    //     background: fitness_gradient(i * 10),\r\n                    //     border: `1px solid ${fitness_gradient(i * 10)}`\r\n                    // }}\r\n\r\n                    >\r\n                        {childPhen}\r\n                    </button>\r\n                )\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        return (\r\n\r\n\r\n            <div id='EmergenceSection'>\r\n\r\n                <div className='emergence-main'>\r\n\r\n                    <div className='left'>\r\n\r\n\r\n                        <div className='row' key={nanoid()}>\r\n                            <FitnessD3\r\n                                population={etbdState.defaultPopulation}\r\n                                // ems={this.state.ems !== '?' ? this.state.ems : etbdState.defaultEms}\r\n\r\n                                ems={this.state.ems !== '?' ? this.state.ems : null}\r\n\r\n                                populationAgentHist={this.state.agentHistory[this.state.agentHistory.length - 1].population}\r\n\r\n                                rnf={this.state.reinforced}\r\n                                miu={this.state.miu1}\r\n\r\n                            // onChange={this.handleMiu1()}\r\n                            />\r\n\r\n                        </div>\r\n\r\n\r\n                        <div className='row' key={nanoid()} >\r\n                            <NeonEmitBehavior demoState={this.state.demoState} />\r\n\r\n                            <AvailableOptions\r\n                                population={this.state.agentHistory[this.state.agentHistory.length - 1].population}\r\n                                emsid={this.state.emsid}\r\n                                doSomething={this.doSomething}\r\n                            />\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className='row' key={nanoid()} >\r\n                            <button\r\n                                id='btn-set-fitness'\r\n                                className={this.state.reinforced === true ? 'sunk' : ' raised'}\r\n                                key={nanoid()}\r\n                                disabled={this.state.demoState === \"selection\" ? false : true}\r\n                                title=\"Click to reinforce it\"\r\n                                onClick={this.reinforceResponse}\r\n                            >\r\n                                {this.state.rnfMessage}\r\n                            </button>\r\n\r\n                            <SelectionPressure\r\n                                varName={'Selection pressure'}\r\n                                miu={this.state.miu1}\r\n                                bgColor={d3.scaleLinear().domain([5, 15]).range(['grey', 'red'])}\r\n                                decrement={() => this.setState({ miu1: this.state.miu1 + 1 })}\r\n                                increment={() => this.setState({ miu1: this.state.miu1 - 1 })}\r\n                                ems={this.state.ems}\r\n                            />\r\n\r\n                        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    <div className='rulz-column' key={nanoid()} >\r\n\r\n                        <div className='selection' key={nanoid()}  >\r\n\r\n                            <div className='row' key={nanoid()}   >\r\n                                <NeonSelection\r\n                                    demoState={this.state.demoState}\r\n                                    reinforced={this.state.reinforced}\r\n                                    allParents={this.state.allParents}\r\n                                    popSize={this.state.popSize}\r\n                                />\r\n                                <button\r\n                                    className='btn-automate'\r\n                                    key={nanoid()}\r\n                                    onClick={this.automateSelection}\r\n                                    title='automate it'\r\n                                >\r\n                                    automate\r\n                                </button>\r\n                                <button\r\n                                    className='btn-continue'\r\n                                    key={nanoid()}\r\n                                    onClick={this.automateSelection}\r\n                                    title='next rule'\r\n                                >\r\n                                    continue\r\n                                </button>\r\n                            </div>\r\n\r\n\r\n\r\n                            <div className='row' key={nanoid()}   >\r\n                                <SelectParents\r\n                                    demoState={this.state.demoState}\r\n                                    population={this.state.agentHistory[this.state.agentHistory.length - 1].population}\r\n                                    doSomethingSelect={this.doSomethingSelect}\r\n                                    reinforced={this.state.reinforced}\r\n                                />\r\n                            </div>\r\n\r\n\r\n                            <div className='row' key={nanoid()}   >\r\n                                <div className=\"parents-wrapper\" key={nanoid()}>\r\n                                    {AllTheParents}\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className='recombination' key={nanoid()} >\r\n\r\n                            <div className='row' key={nanoid()}>\r\n\r\n                                < NeonRecombination demoState={this.state.demoState} />\r\n\r\n                                <button\r\n                                    className=\"btn-automate\"\r\n                                    onClick={this.automateRecombination}\r\n                                    key={nanoid()}\r\n                                    title=\"automate it\"\r\n                                >\r\n                                    auto\r\n                                </button>\r\n\r\n                            </div>\r\n\r\n\r\n                            <div className='row' key={nanoid()}>\r\n                                <RecombineGenotypes\r\n                                    nrBits={this.state.nrBits}\r\n                                    demoState={this.state.demoState}\r\n                                    parent1={this.state.p1}\r\n                                    parent2={this.state.p2}\r\n\r\n                                    // parent1={this.state.parents[0]}\r\n                                    // parent2={this.state.parents[1]}\r\n                                    g1={this.state.genotype1}\r\n                                    g2={this.state.genotype2}\r\n\r\n                                    low={this.state.low}\r\n                                    high={this.state.high}\r\n\r\n                                    addChildItem={this.addChildItem}\r\n                                />\r\n                            </div>\r\n\r\n\r\n\r\n\r\n\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                        <div className='mutation' key={nanoid()} >\r\n\r\n                            <div className='row' key={nanoid()} >\r\n                                <NeonMutation demoState={this.state.demoState} />\r\n                            </div>\r\n\r\n                            <div className='row' key={nanoid()}>\r\n                                <div className='children-wrapper' key={nanoid()}  >\r\n                                    {AllTheChildren}\r\n                                    <button\r\n                                        className=\"btn-swap\"\r\n                                        onClick={this.swapPopulations}\r\n                                        key={nanoid()}\r\n                                        title=\"Replace parents with children and start again.\"\r\n                                    >\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <div className='row' key={nanoid()}>\r\n                                <MutationDemo\r\n                                    nrBits={this.state.nrBits}\r\n                                    demoState={this.state.demoState}\r\n                                    genotype={this.state.childGenotype}\r\n                                    childPhenotype={this.state.childPhenotype}\r\n                                    addToNext={this.replaceOriginal}\r\n\r\n                                />\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div >\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","F:\\react_portfolio\\src\\COMPONENTS\\emergence2\\littleHelpers.js",[],{"ruleId":"628","severity":1,"message":"629","line":2,"column":10,"nodeType":"630","messageId":"631","endLine":2,"endColumn":16},{"ruleId":"628","severity":1,"message":"632","line":29,"column":8,"nodeType":"630","messageId":"631","endLine":29,"endColumn":22},{"ruleId":"628","severity":1,"message":"633","line":5,"column":8,"nodeType":"630","messageId":"631","endLine":5,"endColumn":13},{"ruleId":"634","replacedBy":"635"},{"ruleId":"636","replacedBy":"637"},{"ruleId":"628","severity":1,"message":"638","line":7,"column":8,"nodeType":"630","messageId":"631","endLine":7,"endColumn":12},{"ruleId":"628","severity":1,"message":"639","line":1,"column":8,"nodeType":"630","messageId":"631","endLine":1,"endColumn":19},{"ruleId":"628","severity":1,"message":"640","line":2,"column":8,"nodeType":"630","messageId":"631","endLine":2,"endColumn":23},{"ruleId":"628","severity":1,"message":"641","line":10,"column":20,"nodeType":"630","messageId":"631","endLine":10,"endColumn":29},{"ruleId":"642","severity":1,"message":"643","line":301,"column":8,"nodeType":"644","endLine":301,"endColumn":10,"suggestions":"645"},{"ruleId":"628","severity":1,"message":"629","line":1,"column":10,"nodeType":"630","messageId":"631","endLine":1,"endColumn":16},{"ruleId":"628","severity":1,"message":"646","line":3,"column":10,"nodeType":"630","messageId":"631","endLine":3,"endColumn":14},{"ruleId":"628","severity":1,"message":"633","line":4,"column":8,"nodeType":"630","messageId":"631","endLine":4,"endColumn":13},{"ruleId":"628","severity":1,"message":"647","line":17,"column":13,"nodeType":"630","messageId":"631","endLine":17,"endColumn":20},{"ruleId":"628","severity":1,"message":"629","line":1,"column":10,"nodeType":"630","messageId":"631","endLine":1,"endColumn":16},{"ruleId":"628","severity":1,"message":"646","line":3,"column":10,"nodeType":"630","messageId":"631","endLine":3,"endColumn":14},{"ruleId":"628","severity":1,"message":"648","line":5,"column":10,"nodeType":"630","messageId":"631","endLine":5,"endColumn":14},{"ruleId":"649","severity":1,"message":"650","line":33,"column":29,"nodeType":"651","messageId":"652","endLine":33,"endColumn":34},{"ruleId":"628","severity":1,"message":"653","line":16,"column":8,"nodeType":"630","messageId":"631","endLine":16,"endColumn":15},{"ruleId":"654","severity":1,"message":"655","line":104,"column":17,"nodeType":"656","messageId":"657","endLine":104,"endColumn":23},{"ruleId":"634","replacedBy":"658"},{"ruleId":"636","replacedBy":"659"},{"ruleId":"628","severity":1,"message":"660","line":62,"column":13,"nodeType":"630","messageId":"631","endLine":62,"endColumn":18},{"ruleId":"628","severity":1,"message":"661","line":63,"column":13,"nodeType":"630","messageId":"631","endLine":63,"endColumn":19},{"ruleId":"628","severity":1,"message":"662","line":26,"column":12,"nodeType":"630","messageId":"631","endLine":26,"endColumn":18},{"ruleId":"628","severity":1,"message":"663","line":27,"column":12,"nodeType":"630","messageId":"631","endLine":27,"endColumn":19},{"ruleId":"628","severity":1,"message":"664","line":28,"column":12,"nodeType":"630","messageId":"631","endLine":28,"endColumn":18},{"ruleId":"628","severity":1,"message":"665","line":35,"column":21,"nodeType":"630","messageId":"631","endLine":35,"endColumn":31},{"ruleId":"642","severity":1,"message":"666","line":294,"column":8,"nodeType":"644","endLine":294,"endColumn":14,"suggestions":"667"},{"ruleId":"628","severity":1,"message":"660","line":316,"column":13,"nodeType":"630","messageId":"631","endLine":316,"endColumn":18},{"ruleId":"642","severity":1,"message":"668","line":419,"column":8,"nodeType":"644","endLine":419,"endColumn":14,"suggestions":"669"},{"ruleId":"628","severity":1,"message":"670","line":6,"column":19,"nodeType":"630","messageId":"631","endLine":6,"endColumn":25},{"ruleId":"628","severity":1,"message":"671","line":6,"column":27,"nodeType":"630","messageId":"631","endLine":6,"endColumn":34},{"ruleId":"628","severity":1,"message":"672","line":18,"column":18,"nodeType":"630","messageId":"631","endLine":18,"endColumn":25},{"ruleId":"628","severity":1,"message":"662","line":19,"column":12,"nodeType":"630","messageId":"631","endLine":19,"endColumn":18},{"ruleId":"628","severity":1,"message":"663","line":20,"column":12,"nodeType":"630","messageId":"631","endLine":20,"endColumn":19},{"ruleId":"628","severity":1,"message":"664","line":21,"column":12,"nodeType":"630","messageId":"631","endLine":21,"endColumn":18},{"ruleId":"642","severity":1,"message":"673","line":111,"column":8,"nodeType":"644","endLine":111,"endColumn":10,"suggestions":"674"},{"ruleId":"628","severity":1,"message":"629","line":3,"column":10,"nodeType":"630","messageId":"631","endLine":3,"endColumn":16},{"ruleId":"628","severity":1,"message":"641","line":14,"column":20,"nodeType":"630","messageId":"631","endLine":14,"endColumn":29},{"ruleId":"642","severity":1,"message":"675","line":285,"column":8,"nodeType":"644","endLine":285,"endColumn":10,"suggestions":"676"},{"ruleId":"628","severity":1,"message":"677","line":1,"column":17,"nodeType":"630","messageId":"631","endLine":1,"endColumn":26},{"ruleId":"628","severity":1,"message":"629","line":2,"column":10,"nodeType":"630","messageId":"631","endLine":2,"endColumn":16},{"ruleId":"649","severity":1,"message":"650","line":46,"column":37,"nodeType":"651","messageId":"652","endLine":46,"endColumn":42},{"ruleId":"649","severity":1,"message":"650","line":47,"column":37,"nodeType":"651","messageId":"652","endLine":47,"endColumn":42},{"ruleId":"634","replacedBy":"678"},{"ruleId":"636","replacedBy":"679"},{"ruleId":"628","severity":1,"message":"680","line":15,"column":8,"nodeType":"630","messageId":"631","endLine":15,"endColumn":20},{"ruleId":"628","severity":1,"message":"677","line":59,"column":17,"nodeType":"630","messageId":"631","endLine":59,"endColumn":26},{"ruleId":"628","severity":1,"message":"633","line":62,"column":8,"nodeType":"630","messageId":"631","endLine":62,"endColumn":13},{"ruleId":"649","severity":1,"message":"681","line":197,"column":45,"nodeType":"651","messageId":"652","endLine":197,"endColumn":51},{"ruleId":"649","severity":1,"message":"681","line":215,"column":45,"nodeType":"651","messageId":"652","endLine":215,"endColumn":51},{"ruleId":"628","severity":1,"message":"682","line":25,"column":8,"nodeType":"630","messageId":"631","endLine":25,"endColumn":27},{"ruleId":"628","severity":1,"message":"683","line":28,"column":8,"nodeType":"630","messageId":"631","endLine":28,"endColumn":27},{"ruleId":"628","severity":1,"message":"684","line":29,"column":8,"nodeType":"630","messageId":"631","endLine":29,"endColumn":23},{"ruleId":"628","severity":1,"message":"685","line":31,"column":8,"nodeType":"630","messageId":"631","endLine":31,"endColumn":23},{"ruleId":"628","severity":1,"message":"686","line":48,"column":8,"nodeType":"630","messageId":"631","endLine":48,"endColumn":26},{"ruleId":"628","severity":1,"message":"640","line":50,"column":8,"nodeType":"630","messageId":"631","endLine":50,"endColumn":23},{"ruleId":"628","severity":1,"message":"687","line":12,"column":8,"nodeType":"630","messageId":"631","endLine":12,"endColumn":35},{"ruleId":"628","severity":1,"message":"688","line":13,"column":8,"nodeType":"630","messageId":"631","endLine":13,"endColumn":35},{"ruleId":"628","severity":1,"message":"689","line":18,"column":8,"nodeType":"630","messageId":"631","endLine":18,"endColumn":18},{"ruleId":"628","severity":1,"message":"690","line":19,"column":8,"nodeType":"630","messageId":"631","endLine":19,"endColumn":18},{"ruleId":"628","severity":1,"message":"691","line":21,"column":8,"nodeType":"630","messageId":"631","endLine":21,"endColumn":25},{"ruleId":"628","severity":1,"message":"692","line":22,"column":8,"nodeType":"630","messageId":"631","endLine":22,"endColumn":23},{"ruleId":"628","severity":1,"message":"682","line":23,"column":8,"nodeType":"630","messageId":"631","endLine":23,"endColumn":27},{"ruleId":"628","severity":1,"message":"693","line":24,"column":8,"nodeType":"630","messageId":"631","endLine":24,"endColumn":25},{"ruleId":"628","severity":1,"message":"694","line":25,"column":8,"nodeType":"630","messageId":"631","endLine":25,"endColumn":23},{"ruleId":"628","severity":1,"message":"683","line":26,"column":8,"nodeType":"630","messageId":"631","endLine":26,"endColumn":27},{"ruleId":"628","severity":1,"message":"684","line":27,"column":8,"nodeType":"630","messageId":"631","endLine":27,"endColumn":23},{"ruleId":"628","severity":1,"message":"695","line":28,"column":8,"nodeType":"630","messageId":"631","endLine":28,"endColumn":25},{"ruleId":"628","severity":1,"message":"685","line":29,"column":8,"nodeType":"630","messageId":"631","endLine":29,"endColumn":23},{"ruleId":"628","severity":1,"message":"696","line":30,"column":8,"nodeType":"630","messageId":"631","endLine":30,"endColumn":25},{"ruleId":"628","severity":1,"message":"697","line":31,"column":8,"nodeType":"630","messageId":"631","endLine":31,"endColumn":26},{"ruleId":"628","severity":1,"message":"698","line":33,"column":8,"nodeType":"630","messageId":"631","endLine":33,"endColumn":19},{"ruleId":"628","severity":1,"message":"699","line":34,"column":8,"nodeType":"630","messageId":"631","endLine":34,"endColumn":19},{"ruleId":"628","severity":1,"message":"700","line":35,"column":8,"nodeType":"630","messageId":"631","endLine":35,"endColumn":19},{"ruleId":"628","severity":1,"message":"701","line":36,"column":8,"nodeType":"630","messageId":"631","endLine":36,"endColumn":19},{"ruleId":"628","severity":1,"message":"702","line":37,"column":8,"nodeType":"630","messageId":"631","endLine":37,"endColumn":19},{"ruleId":"628","severity":1,"message":"703","line":39,"column":8,"nodeType":"630","messageId":"631","endLine":39,"endColumn":16},{"ruleId":"628","severity":1,"message":"686","line":46,"column":8,"nodeType":"630","messageId":"631","endLine":46,"endColumn":26},{"ruleId":"628","severity":1,"message":"639","line":47,"column":8,"nodeType":"630","messageId":"631","endLine":47,"endColumn":19},{"ruleId":"628","severity":1,"message":"640","line":48,"column":8,"nodeType":"630","messageId":"631","endLine":48,"endColumn":23},{"ruleId":"628","severity":1,"message":"704","line":57,"column":8,"nodeType":"630","messageId":"631","endLine":57,"endColumn":34},{"ruleId":"628","severity":1,"message":"705","line":66,"column":8,"nodeType":"630","messageId":"631","endLine":66,"endColumn":24},{"ruleId":"628","severity":1,"message":"706","line":67,"column":8,"nodeType":"630","messageId":"631","endLine":67,"endColumn":24},{"ruleId":"628","severity":1,"message":"707","line":71,"column":8,"nodeType":"630","messageId":"631","endLine":71,"endColumn":41},{"ruleId":"628","severity":1,"message":"708","line":73,"column":8,"nodeType":"630","messageId":"631","endLine":73,"endColumn":25},{"ruleId":"649","severity":1,"message":"709","line":503,"column":9,"nodeType":"651","messageId":"652","endLine":503,"endColumn":17},{"ruleId":"649","severity":1,"message":"709","line":528,"column":9,"nodeType":"651","messageId":"652","endLine":528,"endColumn":17},{"ruleId":"649","severity":1,"message":"709","line":554,"column":9,"nodeType":"651","messageId":"652","endLine":554,"endColumn":17},{"ruleId":"649","severity":1,"message":"709","line":885,"column":9,"nodeType":"651","messageId":"652","endLine":885,"endColumn":17},{"ruleId":"628","severity":1,"message":"710","line":4,"column":20,"nodeType":"630","messageId":"631","endLine":4,"endColumn":26},{"ruleId":"628","severity":1,"message":"677","line":2,"column":17,"nodeType":"630","messageId":"631","endLine":2,"endColumn":26},{"ruleId":"628","severity":1,"message":"711","line":23,"column":7,"nodeType":"630","messageId":"631","endLine":23,"endColumn":10},{"ruleId":"628","severity":1,"message":"712","line":134,"column":17,"nodeType":"630","messageId":"631","endLine":134,"endColumn":25},{"ruleId":"628","severity":1,"message":"633","line":4,"column":8,"nodeType":"630","messageId":"631","endLine":4,"endColumn":13},{"ruleId":"628","severity":1,"message":"713","line":7,"column":8,"nodeType":"630","messageId":"631","endLine":7,"endColumn":16},{"ruleId":"628","severity":1,"message":"646","line":3,"column":10,"nodeType":"630","messageId":"631","endLine":3,"endColumn":14},{"ruleId":"628","severity":1,"message":"714","line":29,"column":10,"nodeType":"630","messageId":"631","endLine":29,"endColumn":19},{"ruleId":"628","severity":1,"message":"715","line":29,"column":21,"nodeType":"630","messageId":"631","endLine":29,"endColumn":24},{"ruleId":"628","severity":1,"message":"716","line":29,"column":26,"nodeType":"630","messageId":"631","endLine":29,"endColumn":29},{"ruleId":"654","severity":1,"message":"717","line":89,"column":52,"nodeType":"718","messageId":"719","endLine":89,"endColumn":54},{"ruleId":"628","severity":1,"message":"720","line":93,"column":25,"nodeType":"630","messageId":"631","endLine":93,"endColumn":27},{"ruleId":"628","severity":1,"message":"721","line":107,"column":9,"nodeType":"630","messageId":"631","endLine":107,"endColumn":16},{"ruleId":"628","severity":1,"message":"722","line":108,"column":9,"nodeType":"630","messageId":"631","endLine":108,"endColumn":12},{"ruleId":"628","severity":1,"message":"723","line":142,"column":9,"nodeType":"630","messageId":"631","endLine":142,"endColumn":18},{"ruleId":"628","severity":1,"message":"724","line":6,"column":8,"nodeType":"630","messageId":"631","endLine":6,"endColumn":9},{"ruleId":"628","severity":1,"message":"725","line":7,"column":18,"nodeType":"630","messageId":"631","endLine":7,"endColumn":27},{"ruleId":"642","severity":1,"message":"726","line":557,"column":9,"nodeType":"644","endLine":557,"endColumn":27,"suggestions":"727"},{"ruleId":"642","severity":1,"message":"728","line":52,"column":8,"nodeType":"644","endLine":52,"endColumn":40,"suggestions":"729"},{"ruleId":"634","replacedBy":"730"},{"ruleId":"636","replacedBy":"731"},{"ruleId":"628","severity":1,"message":"633","line":3,"column":8,"nodeType":"630","messageId":"631","endLine":3,"endColumn":13},{"ruleId":"628","severity":1,"message":"732","line":60,"column":13,"nodeType":"630","messageId":"631","endLine":60,"endColumn":17},{"ruleId":"628","severity":1,"message":"733","line":192,"column":13,"nodeType":"630","messageId":"631","endLine":192,"endColumn":14},{"ruleId":"628","severity":1,"message":"734","line":193,"column":13,"nodeType":"630","messageId":"631","endLine":193,"endColumn":14},{"ruleId":"628","severity":1,"message":"735","line":216,"column":13,"nodeType":"630","messageId":"631","endLine":216,"endColumn":22},{"ruleId":"628","severity":1,"message":"736","line":264,"column":17,"nodeType":"630","messageId":"631","endLine":264,"endColumn":19},{"ruleId":"634","replacedBy":"737"},{"ruleId":"636","replacedBy":"738"},{"ruleId":"628","severity":1,"message":"629","line":5,"column":10,"nodeType":"630","messageId":"631","endLine":5,"endColumn":16},{"ruleId":"628","severity":1,"message":"724","line":6,"column":8,"nodeType":"630","messageId":"631","endLine":6,"endColumn":9},{"ruleId":"628","severity":1,"message":"725","line":7,"column":18,"nodeType":"630","messageId":"631","endLine":7,"endColumn":27},{"ruleId":"628","severity":1,"message":"739","line":7,"column":46,"nodeType":"630","messageId":"631","endLine":7,"endColumn":54},{"ruleId":"628","severity":1,"message":"740","line":9,"column":8,"nodeType":"630","messageId":"631","endLine":9,"endColumn":17},{"ruleId":"628","severity":1,"message":"741","line":10,"column":8,"nodeType":"630","messageId":"631","endLine":10,"endColumn":17},{"ruleId":"628","severity":1,"message":"742","line":11,"column":8,"nodeType":"630","messageId":"631","endLine":11,"endColumn":16},{"ruleId":"642","severity":1,"message":"743","line":285,"column":9,"nodeType":"644","endLine":285,"endColumn":27,"suggestions":"744"},{"ruleId":"628","severity":1,"message":"745","line":4,"column":39,"nodeType":"630","messageId":"631","endLine":4,"endColumn":54},{"ruleId":"628","severity":1,"message":"746","line":47,"column":5,"nodeType":"630","messageId":"631","endLine":47,"endColumn":12},{"ruleId":"628","severity":1,"message":"747","line":81,"column":12,"nodeType":"630","messageId":"631","endLine":81,"endColumn":17},{"ruleId":"628","severity":1,"message":"660","line":91,"column":11,"nodeType":"630","messageId":"631","endLine":91,"endColumn":16},{"ruleId":"628","severity":1,"message":"661","line":92,"column":11,"nodeType":"630","messageId":"631","endLine":92,"endColumn":17},{"ruleId":"628","severity":1,"message":"748","line":96,"column":11,"nodeType":"630","messageId":"631","endLine":96,"endColumn":17},{"ruleId":"642","severity":1,"message":"749","line":254,"column":9,"nodeType":"644","endLine":254,"endColumn":22,"suggestions":"750"},{"ruleId":"642","severity":1,"message":"751","line":435,"column":9,"nodeType":"644","endLine":435,"endColumn":17,"suggestions":"752"},{"ruleId":"634","replacedBy":"753"},{"ruleId":"636","replacedBy":"754"},{"ruleId":"628","severity":1,"message":"755","line":4,"column":10,"nodeType":"630","messageId":"631","endLine":4,"endColumn":16},{"ruleId":"628","severity":1,"message":"745","line":4,"column":39,"nodeType":"630","messageId":"631","endLine":4,"endColumn":54},{"ruleId":"628","severity":1,"message":"756","line":19,"column":12,"nodeType":"630","messageId":"631","endLine":19,"endColumn":18},{"ruleId":"628","severity":1,"message":"660","line":48,"column":11,"nodeType":"630","messageId":"631","endLine":48,"endColumn":16},{"ruleId":"628","severity":1,"message":"661","line":49,"column":11,"nodeType":"630","messageId":"631","endLine":49,"endColumn":17},{"ruleId":"757","severity":1,"message":"758","line":98,"column":39,"nodeType":"759","messageId":"652","endLine":98,"endColumn":41},{"ruleId":"642","severity":1,"message":"760","line":123,"column":9,"nodeType":"644","endLine":123,"endColumn":22,"suggestions":"761"},{"ruleId":"642","severity":1,"message":"762","line":148,"column":9,"nodeType":"644","endLine":148,"endColumn":16,"suggestions":"763"},{"ruleId":"642","severity":1,"message":"764","line":185,"column":9,"nodeType":"644","endLine":185,"endColumn":16,"suggestions":"765"},{"ruleId":"642","severity":1,"message":"766","line":239,"column":9,"nodeType":"644","endLine":239,"endColumn":16,"suggestions":"767"},{"ruleId":"642","severity":1,"message":"768","line":284,"column":9,"nodeType":"644","endLine":284,"endColumn":16,"suggestions":"769"},{"ruleId":"642","severity":1,"message":"770","line":360,"column":9,"nodeType":"644","endLine":360,"endColumn":16,"suggestions":"771"},{"ruleId":"628","severity":1,"message":"745","line":4,"column":39,"nodeType":"630","messageId":"631","endLine":4,"endColumn":54},{"ruleId":"628","severity":1,"message":"772","line":10,"column":10,"nodeType":"630","messageId":"631","endLine":10,"endColumn":23},{"ruleId":"628","severity":1,"message":"646","line":11,"column":10,"nodeType":"630","messageId":"631","endLine":11,"endColumn":14},{"ruleId":"628","severity":1,"message":"746","line":53,"column":5,"nodeType":"630","messageId":"631","endLine":53,"endColumn":12},{"ruleId":"628","severity":1,"message":"756","line":73,"column":12,"nodeType":"630","messageId":"631","endLine":73,"endColumn":18},{"ruleId":"628","severity":1,"message":"747","line":87,"column":12,"nodeType":"630","messageId":"631","endLine":87,"endColumn":17},{"ruleId":"628","severity":1,"message":"660","line":97,"column":11,"nodeType":"630","messageId":"631","endLine":97,"endColumn":16},{"ruleId":"628","severity":1,"message":"661","line":98,"column":11,"nodeType":"630","messageId":"631","endLine":98,"endColumn":17},{"ruleId":"628","severity":1,"message":"748","line":102,"column":11,"nodeType":"630","messageId":"631","endLine":102,"endColumn":17},{"ruleId":"642","severity":1,"message":"749","line":273,"column":9,"nodeType":"644","endLine":273,"endColumn":22,"suggestions":"773"},{"ruleId":"642","severity":1,"message":"774","line":466,"column":9,"nodeType":"644","endLine":466,"endColumn":17,"suggestions":"775"},{"ruleId":"642","severity":1,"message":"776","line":523,"column":9,"nodeType":"644","endLine":523,"endColumn":12,"suggestions":"777"},{"ruleId":"628","severity":1,"message":"778","line":534,"column":17,"nodeType":"630","messageId":"631","endLine":534,"endColumn":25},{"ruleId":"628","severity":1,"message":"779","line":539,"column":17,"nodeType":"630","messageId":"631","endLine":539,"endColumn":28},{"ruleId":"628","severity":1,"message":"780","line":546,"column":17,"nodeType":"630","messageId":"631","endLine":546,"endColumn":21},{"ruleId":"628","severity":1,"message":"781","line":550,"column":17,"nodeType":"630","messageId":"631","endLine":550,"endColumn":21},{"ruleId":"642","severity":1,"message":"776","line":558,"column":9,"nodeType":"644","endLine":558,"endColumn":12,"suggestions":"782"},{"ruleId":"783","severity":1,"message":"784","line":652,"column":57,"nodeType":"785","endLine":652,"endColumn":85},{"ruleId":"628","severity":1,"message":"786","line":12,"column":8,"nodeType":"630","messageId":"631","endLine":12,"endColumn":20},{"ruleId":"628","severity":1,"message":"787","line":13,"column":8,"nodeType":"630","messageId":"631","endLine":13,"endColumn":23},{"ruleId":"628","severity":1,"message":"660","line":44,"column":11,"nodeType":"630","messageId":"631","endLine":44,"endColumn":16},{"ruleId":"628","severity":1,"message":"661","line":45,"column":11,"nodeType":"630","messageId":"631","endLine":45,"endColumn":17},{"ruleId":"642","severity":1,"message":"788","line":147,"column":9,"nodeType":"644","endLine":147,"endColumn":17,"suggestions":"789"},{"ruleId":"642","severity":1,"message":"790","line":164,"column":9,"nodeType":"644","endLine":164,"endColumn":19,"suggestions":"791"},{"ruleId":"642","severity":1,"message":"792","line":183,"column":9,"nodeType":"644","endLine":183,"endColumn":19,"suggestions":"793"},{"ruleId":"642","severity":1,"message":"794","line":212,"column":9,"nodeType":"644","endLine":212,"endColumn":19,"suggestions":"795"},{"ruleId":"642","severity":1,"message":"796","line":239,"column":9,"nodeType":"644","endLine":239,"endColumn":19,"suggestions":"797"},{"ruleId":"642","severity":1,"message":"798","line":284,"column":9,"nodeType":"644","endLine":284,"endColumn":19,"suggestions":"799"},{"ruleId":"642","severity":1,"message":"800","line":311,"column":9,"nodeType":"644","endLine":311,"endColumn":19,"suggestions":"801"},{"ruleId":"642","severity":1,"message":"802","line":328,"column":9,"nodeType":"644","endLine":328,"endColumn":19,"suggestions":"803"},{"ruleId":"642","severity":1,"message":"804","line":469,"column":9,"nodeType":"644","endLine":469,"endColumn":17,"suggestions":"805"},{"ruleId":"642","severity":1,"message":"776","line":522,"column":9,"nodeType":"644","endLine":522,"endColumn":12,"suggestions":"806"},{"ruleId":"628","severity":1,"message":"807","line":4,"column":13,"nodeType":"630","messageId":"631","endLine":4,"endColumn":15},{"ruleId":"783","severity":1,"message":"784","line":48,"column":37,"nodeType":"785","endLine":48,"endColumn":65},{"ruleId":"628","severity":1,"message":"741","line":4,"column":8,"nodeType":"630","messageId":"631","endLine":4,"endColumn":17},{"ruleId":"628","severity":1,"message":"772","line":5,"column":10,"nodeType":"630","messageId":"631","endLine":5,"endColumn":23},{"ruleId":"628","severity":1,"message":"725","line":4,"column":20,"nodeType":"630","messageId":"631","endLine":4,"endColumn":29},{"ruleId":"628","severity":1,"message":"808","line":10,"column":21,"nodeType":"630","messageId":"631","endLine":10,"endColumn":33},{"ruleId":"628","severity":1,"message":"809","line":20,"column":20,"nodeType":"630","messageId":"631","endLine":20,"endColumn":31},{"ruleId":"628","severity":1,"message":"633","line":3,"column":10,"nodeType":"630","messageId":"631","endLine":3,"endColumn":15},{"ruleId":"628","severity":1,"message":"810","line":11,"column":5,"nodeType":"630","messageId":"631","endLine":11,"endColumn":13},{"ruleId":"628","severity":1,"message":"811","line":75,"column":12,"nodeType":"630","messageId":"631","endLine":75,"endColumn":14},{"ruleId":"628","severity":1,"message":"739","line":2,"column":10,"nodeType":"630","messageId":"631","endLine":2,"endColumn":18},{"ruleId":"628","severity":1,"message":"725","line":2,"column":20,"nodeType":"630","messageId":"631","endLine":2,"endColumn":29},{"ruleId":"628","severity":1,"message":"741","line":2,"column":8,"nodeType":"630","messageId":"631","endLine":2,"endColumn":17},{"ruleId":"628","severity":1,"message":"741","line":2,"column":8,"nodeType":"630","messageId":"631","endLine":2,"endColumn":17},{"ruleId":"628","severity":1,"message":"812","line":7,"column":21,"nodeType":"630","messageId":"631","endLine":7,"endColumn":33},{"ruleId":"628","severity":1,"message":"812","line":72,"column":21,"nodeType":"630","messageId":"631","endLine":72,"endColumn":33},{"ruleId":"628","severity":1,"message":"812","line":98,"column":21,"nodeType":"630","messageId":"631","endLine":98,"endColumn":33},{"ruleId":"628","severity":1,"message":"812","line":129,"column":21,"nodeType":"630","messageId":"631","endLine":129,"endColumn":33},{"ruleId":"628","severity":1,"message":"812","line":159,"column":21,"nodeType":"630","messageId":"631","endLine":159,"endColumn":33},{"ruleId":"628","severity":1,"message":"739","line":4,"column":10,"nodeType":"630","messageId":"631","endLine":4,"endColumn":18},{"ruleId":"628","severity":1,"message":"813","line":102,"column":15,"nodeType":"630","messageId":"631","endLine":102,"endColumn":21},{"ruleId":"628","severity":1,"message":"814","line":108,"column":15,"nodeType":"630","messageId":"631","endLine":108,"endColumn":31},{"ruleId":"628","severity":1,"message":"815","line":174,"column":15,"nodeType":"630","messageId":"631","endLine":174,"endColumn":23},{"ruleId":"642","severity":1,"message":"726","line":291,"column":9,"nodeType":"644","endLine":291,"endColumn":28,"suggestions":"816"},{"ruleId":"628","severity":1,"message":"812","line":7,"column":23,"nodeType":"630","messageId":"631","endLine":7,"endColumn":35},{"ruleId":"628","severity":1,"message":"817","line":18,"column":13,"nodeType":"630","messageId":"631","endLine":18,"endColumn":14},{"ruleId":"628","severity":1,"message":"818","line":32,"column":13,"nodeType":"630","messageId":"631","endLine":32,"endColumn":28},{"ruleId":"654","severity":1,"message":"655","line":42,"column":25,"nodeType":"718","messageId":"819","endLine":42,"endColumn":27},{"ruleId":"654","severity":1,"message":"655","line":58,"column":48,"nodeType":"718","messageId":"819","endLine":58,"endColumn":50},{"ruleId":"820","severity":1,"message":"821","line":31,"column":29,"nodeType":"822","endLine":31,"endColumn":41},{"ruleId":"654","severity":1,"message":"655","line":81,"column":48,"nodeType":"718","messageId":"819","endLine":81,"endColumn":50},{"ruleId":"628","severity":1,"message":"633","line":3,"column":8,"nodeType":"630","messageId":"631","endLine":3,"endColumn":13},{"ruleId":"628","severity":1,"message":"710","line":9,"column":10,"nodeType":"630","messageId":"631","endLine":9,"endColumn":16},{"ruleId":"628","severity":1,"message":"823","line":15,"column":10,"nodeType":"630","messageId":"631","endLine":15,"endColumn":33},{"ruleId":"628","severity":1,"message":"824","line":125,"column":13,"nodeType":"630","messageId":"631","endLine":125,"endColumn":14},{"ruleId":"628","severity":1,"message":"825","line":198,"column":21,"nodeType":"630","messageId":"631","endLine":198,"endColumn":23},{"ruleId":"628","severity":1,"message":"826","line":201,"column":21,"nodeType":"630","messageId":"631","endLine":201,"endColumn":24},{"ruleId":"628","severity":1,"message":"827","line":212,"column":17,"nodeType":"630","messageId":"631","endLine":212,"endColumn":30},{"ruleId":"628","severity":1,"message":"828","line":263,"column":13,"nodeType":"630","messageId":"631","endLine":263,"endColumn":15},{"ruleId":"628","severity":1,"message":"829","line":339,"column":13,"nodeType":"630","messageId":"631","endLine":339,"endColumn":17},{"ruleId":"628","severity":1,"message":"830","line":375,"column":13,"nodeType":"630","messageId":"631","endLine":375,"endColumn":15},{"ruleId":"628","severity":1,"message":"831","line":608,"column":13,"nodeType":"630","messageId":"631","endLine":608,"endColumn":15},"no-unused-vars","'nanoid' is defined but never used.","Identifier","unusedVar","'TeaserPopa2019' is defined but never used.","'parse' is defined but never used.","no-native-reassign",["832"],"no-negated-in-lhs",["833"],"'data' is defined but never used.","'pure_refuge' is defined but never used.","'aquerous_plains' is defined but never used.","'setMargin' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'X', 'Y', 'Y2', 'height', 'margin.left', 'margin.top', and 'width'. Either include them or remove the dependency array.","ArrayExpression",["834"],"'Fade' is defined but never used.","'fontClr' is assigned a value but never used.","'Card' is defined but never used.","no-dupe-keys","Duplicate key 'color'.","ObjectExpression","unexpected","'TableHD' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue",["832"],["833"],"'width' is assigned a value but never used.","'height' is assigned a value but never used.","'class1' is assigned a value but never used.","'classes' is assigned a value but never used.","'class2' is assigned a value but never used.","'setPlotAvg' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hd_cod', 'hd_other', 'hd_self', 'plotAvg', and 'props.boundary1'. Either include them or remove the dependency array.",["835"],"React Hook useEffect has missing dependencies: 'hd_cod', 'hd_other', 'hd_self', 'props.boundary1', 'props.boundary2', 'props.limit1', and 'props.limit2'. Either include them or remove the dependency array.",["836"],"'hdSelf' is defined but never used.","'hdOther' is defined but never used.","'setData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["837"],"React Hook useEffect has missing dependencies: 'X', 'Y', 'biasData', 'height', 'margin.left', and 'margin.top'. Either include them or remove the dependency array.",["838"],"'Component' is defined but never used.",["832"],["833"],"'CollapseHook' is defined but never used.","Duplicate key 'margin'.","'SpARC_06_1_Adekunle' is defined but never used.","'SpARC_10_1_Adekunle' is defined but never used.","'SpARC_11_1_Shen' is defined but never used.","'SpARC_14_1_Shen' is defined but never used.","'projectCardSorting' is defined but never used.","'phd_etbd_humans_sensitivity' is defined but never used.","'phd_etbd_humans_bout_length' is defined but never used.","'jeab2016_0' is defined but never used.","'jeab2016_1' is defined but never used.","'SpARC_01_Adekunle' is defined but never used.","'SpARC_02_1_Tang' is defined but never used.","'SpARC_05_1_Forbes' is defined but never used.","'SpARC_07_1_Shen' is defined but never used.","'SpARC_12_1_Booher' is defined but never used.","'SpARC_15_1_Waithe' is defined but never used.","'SpARC_16_1_Grissom' is defined but never used.","'Pos01_1_pos' is defined but never used.","'Neg04_1_neg' is defined but never used.","'Trn04_2_pos' is defined but never used.","'Trn04_3_neg' is defined but never used.","'Trn04_4_ext' is defined but never used.","'nbt_fig1' is defined but never used.","'abai_2014_radars_originals' is defined but never used.","'abai_2014_slide1' is defined but never used.","'abai_2014_slide2' is defined but never used.","'sch6_02_prob_same_impulsive_agent' is defined but never used.","'placeholder_blank' is defined but never used.","Duplicate key 'keywords'.","'Button' is defined but never used.","'kws' is assigned a value but never used.","'Abstract' is assigned a value but never used.","'ReadMore' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'xx' is assigned a value but never used.","'fitDiad' is assigned a value but never used.","'miu' is assigned a value but never used.","'leftOvers' is assigned a value but never used.","'_' is defined but never used.","'useEffect' is defined but never used.","React Hook useLayoutEffect has missing dependencies: 'height', 'margin.left', 'margin.top', and 'width'. Either include them or remove the dependency array.",["839"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["840"],["832"],["833"],"'int1' is assigned a value but never used.","'x' is assigned a value but never used.","'y' is assigned a value but never used.","'magnitude' is assigned a value but never used.","'co' is assigned a value but never used.",["832"],["833"],"'useState' is defined but never used.","'PopOverV2' is defined but never used.","'etbdState' is defined but never used.","'myColors' is defined but never used.","React Hook useLayoutEffect has missing dependencies: 'X', 'Y', 'height', 'margin.left', 'margin.top', and 'width'. Either include them or remove the dependency array.",["841"],"'useLayoutEffect' is defined but never used.","'arcSize' is assigned a value but never used.","'agent' is assigned a value but never used.","'radius' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cls', 'co', 'etbdEvents', 'g', 'r1etbd', 'r2etbd', and 'rnf'. Either include them or remove the dependency array.",["842"],"React Hook useEffect has missing dependencies: 'cls', 'ems', 'etbdEvents', 'g', 'props.agentType', 'props.recordHeight', and 'rnf'. Either include them or remove the dependency array.",["843"],["832"],["833"],"'useRef' is defined but never used.","'emsidx' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook useEffect has a missing dependency: 'phase'. Either include it or remove the dependency array.",["844"],"React Hook useEffect has missing dependencies: 'ems' and 'paused'. Either include them or remove the dependency array.",["845"],"React Hook useEffect has missing dependencies: 'cls' and 'paused'. Either include them or remove the dependency array.",["846"],"React Hook useEffect has missing dependencies: 'cls', 'paused', 'r1etbd', and 'r2etbd'. Either include them or remove the dependency array.",["847"],"React Hook useEffect has missing dependencies: 'cls', 'ems', 'etbdEvents', 'g', 'paused', 'ppl', and 'rnf'. Either include them or remove the dependency array.",["848"],"React Hook useEffect has missing dependencies: 'cls', 'ems', 'paused', 'ppl', and 'rnf'. Either include them or remove the dependency array.",["849"],"'CSSTransition' is defined but never used.",["850"],"React Hook useEffect has missing dependencies: 'cls', 'ems', 'etbdEvents', 'g', 'props.recordHeight', and 'rnf'. Either include them or remove the dependency array.",["851"],"React Hook useEffect has a missing dependency: 'props.recordHeight'. Either include it or remove the dependency array.",["852"],"'etbdPath' is assigned a value but never used.","'gEtbdRecord' is assigned a value but never used.","'xrec' is assigned a value but never used.","'yrec' is assigned a value but never used.",["853"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'EmissionSign' is defined but never used.","'ConsequenceSign' is defined but never used.","React Hook useLayoutEffect has a missing dependency: 'g'. Either include it or remove the dependency array.",["854"],"React Hook useLayoutEffect has a missing dependency: 'paused'. Either include it or remove the dependency array.",["855"],"React Hook useLayoutEffect has missing dependencies: 'emsidx', 'paused', and 'ppl'. Either include them or remove the dependency array.",["856"],"React Hook useLayoutEffect has missing dependencies: 'ems' and 'paused'. Either include them or remove the dependency array.",["857"],"React Hook useLayoutEffect has missing dependencies: 'cls', 'paused', 'r1etbd', and 'r2etbd'. Either include them or remove the dependency array.",["858"],"React Hook useLayoutEffect has missing dependencies: 'cls', 'ems', 'etbdEvents', 'g', 'paused', 'ppl', and 'rnf'. Either include them or remove the dependency array.",["859"],"React Hook useLayoutEffect has missing dependencies: 'g' and 'paused'. Either include them or remove the dependency array.",["860"],"React Hook useLayoutEffect has missing dependencies: 'etbdEvents' and 'paused'. Either include them or remove the dependency array.",["861"],"React Hook useEffect has missing dependencies: 'cls', 'etbdEvents', 'g', 'props.recordHeight', and 'rnf'. Either include them or remove the dependency array.",["862"],["863"],"'d3' is defined but never used.","'setneonclass' is assigned a value but never used.","'setneontext' is assigned a value but never used.","'unicodes' is assigned a value but never used.","'bg' is assigned a value but never used.","'setNeonClass' is assigned a value but never used.","'getNbt' is assigned a value but never used.","'fontSizeGradient' is assigned a value but never used.","'probPath' is assigned a value but never used.",["864"],"'a' is assigned a value but never used.","'defaultGenotype' is assigned a value but never used.","expectedInside","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","'NeonCreateNewPopulation' is defined but never used.","'n' is assigned a value but never used.","'rd' is assigned a value but never used.","'rf1' is assigned a value but never used.","'chosenFitness' is assigned a value but never used.","'gn' is assigned a value but never used.","'bits' is assigned a value but never used.","'x0' is assigned a value but never used.","'tn' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"865","fix":"866"},{"desc":"867","fix":"868"},{"desc":"869","fix":"870"},{"desc":"871","fix":"872"},{"desc":"873","fix":"874"},{"desc":"875","fix":"876"},{"desc":"877","fix":"878"},{"desc":"879","fix":"880"},{"desc":"881","fix":"882"},{"desc":"883","fix":"884"},{"desc":"885","fix":"886"},{"desc":"887","fix":"888"},{"desc":"889","fix":"890"},{"desc":"891","fix":"892"},{"desc":"893","fix":"894"},{"desc":"895","fix":"896"},{"desc":"881","fix":"897"},{"desc":"898","fix":"899"},{"desc":"900","fix":"901"},{"desc":"900","fix":"902"},{"desc":"903","fix":"904"},{"desc":"905","fix":"906"},{"desc":"907","fix":"908"},{"desc":"909","fix":"910"},{"desc":"911","fix":"912"},{"desc":"913","fix":"914"},{"desc":"915","fix":"916"},{"desc":"917","fix":"918"},{"desc":"919","fix":"920"},{"desc":"900","fix":"921"},{"desc":"922","fix":"923"},"Update the dependencies array to be: [X, Y, Y2, height, margin.left, margin.top, width]",{"range":"924","text":"925"},"Update the dependencies array to be: [data, hd_cod, hd_other, hd_self, plotAvg, props.boundary1]",{"range":"926","text":"927"},"Update the dependencies array to be: [data, hd_cod, hd_other, hd_self, props.boundary1, props.boundary2, props.limit1, props.limit2]",{"range":"928","text":"929"},"Update the dependencies array to be: [data]",{"range":"930","text":"931"},"Update the dependencies array to be: [X, Y, biasData, height, margin.left, margin.top]",{"range":"932","text":"933"},"Update the dependencies array to be: [refRecord, props, width, height, margin.left, margin.top]",{"range":"934","text":"935"},"Update the dependencies array to be: [minVal, maxVal, props.onChange, props]",{"range":"936","text":"937"},"Update the dependencies array to be: [refRecord, props, margin.left, margin.top, height, X, Y, width]",{"range":"938","text":"939"},"Update the dependencies array to be: [cls, co, etbdEvents, g, paused, ppl, r1etbd, r2etbd, rnf]",{"range":"940","text":"941"},"Update the dependencies array to be: [b1, b2, cls, ems, etbdEvents, g, props.agentType, props.recordHeight, rnf]",{"range":"942","text":"943"},"Update the dependencies array to be: [paused, phase, ppl]",{"range":"944","text":"945"},"Update the dependencies array to be: [ems, paused, phase]",{"range":"946","text":"947"},"Update the dependencies array to be: [cls, paused, phase]",{"range":"948","text":"949"},"Update the dependencies array to be: [cls, paused, phase, r1etbd, r2etbd]",{"range":"950","text":"951"},"Update the dependencies array to be: [cls, ems, etbdEvents, g, paused, phase, ppl, rnf]",{"range":"952","text":"953"},"Update the dependencies array to be: [cls, ems, paused, phase, ppl, rnf]",{"range":"954","text":"955"},{"range":"956","text":"941"},"Update the dependencies array to be: [b1, b2, cls, ems, etbdEvents, g, props.recordHeight, rnf]",{"range":"957","text":"958"},"Update the dependencies array to be: [g, props.recordHeight]",{"range":"959","text":"960"},{"range":"961","text":"960"},"Update the dependencies array to be: [g, paused]",{"range":"962","text":"963"},"Update the dependencies array to be: [paused, simstate]",{"range":"964","text":"965"},"Update the dependencies array to be: [emsidx, paused, ppl, simstate]",{"range":"966","text":"967"},"Update the dependencies array to be: [ems, paused, simstate]",{"range":"968","text":"969"},"Update the dependencies array to be: [cls, paused, r1etbd, r2etbd, simstate]",{"range":"970","text":"971"},"Update the dependencies array to be: [cls, ems, etbdEvents, g, paused, ppl, rnf, simstate]",{"range":"972","text":"973"},"Update the dependencies array to be: [g, paused, simstate]",{"range":"974","text":"975"},"Update the dependencies array to be: [etbdEvents, paused, simstate]",{"range":"976","text":"977"},"Update the dependencies array to be: [b1, b2, cls, etbdEvents, g, props.recordHeight, rnf]",{"range":"978","text":"979"},{"range":"980","text":"960"},"Update the dependencies array to be: [refFitness, props, width, height, margin.left, margin.top]",{"range":"981","text":"982"},[10035,10037],"[X, Y, Y2, height, margin.left, margin.top, width]",[8573,8579],"[data, hd_cod, hd_other, hd_self, plotAvg, props.boundary1]",[12301,12307],"[data, hd_cod, hd_other, hd_self, props.boundary1, props.boundary2, props.limit1, props.limit2]",[3473,3475],"[data]",[8779,8781],"[X, Y, biasData, height, margin.left, margin.top]",[17250,17268],"[refRecord, props, width, height, margin.left, margin.top]",[1696,1728],"[minVal, maxVal, props.onChange, props]",[9935,9953],"[refRecord, props, margin.left, margin.top, height, X, Y, width]",[7291,7304],"[cls, co, etbdEvents, g, paused, ppl, r1etbd, r2etbd, rnf]",[13097,13105],"[b1, b2, cls, ems, etbdEvents, g, props.agentType, props.recordHeight, rnf]",[3269,3282],"[paused, phase, ppl]",[3811,3818],"[ems, paused, phase]",[4593,4600],"[cls, paused, phase]",[6049,6056],"[cls, paused, phase, r1etbd, r2etbd]",[7096,7103],"[cls, ems, etbdEvents, g, paused, phase, ppl, rnf]",[9002,9009],"[cls, ems, paused, phase, ppl, rnf]",[8010,8023],[14112,14120],"[b1, b2, cls, ems, etbdEvents, g, props.recordHeight, rnf]",[15506,15509],"[g, props.recordHeight]",[16104,16107],[4440,4448],"[g, paused]",[4916,4926],"[paused, simstate]",[5365,5375],"[emsidx, paused, ppl, simstate]",[6086,6096],"[ems, paused, simstate]",[6997,7007],"[cls, paused, r1etbd, r2etbd, simstate]",[8396,8406],"[cls, ems, etbdEvents, g, paused, ppl, rnf, simstate]",[9051,9061],"[g, paused, simstate]",[9532,9542],"[etbdEvents, paused, simstate]",[13910,13918],"[b1, b2, cls, etbdEvents, g, props.recordHeight, rnf]",[15270,15273],[9389,9408],"[refFitness, props, width, height, margin.left, margin.top]"]
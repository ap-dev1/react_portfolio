[{"/home/jnfri/Documents/react_portfolio/src/index.js":"1","/home/jnfri/Documents/react_portfolio/src/App.js":"2","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/Chapter04.js":"3","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/Chapter01.js":"4","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/FastMatchingDemo.js":"5","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/MyTimeline.js":"6","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ReadMore.js":"7","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ImagesCarousel.js":"8","/home/jnfri/Documents/react_portfolio/src/DATA/infoReferences.js":"9","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/about_files/AboutSection.js":"10","/home/jnfri/Documents/react_portfolio/src/DATA/myData.js":"11","/home/jnfri/Documents/react_portfolio/src/DATA/infoSkills.js":"12","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/header_files/HeaderSection.js":"13","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/header_files/NavMain.js":"14","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/header_files/NavAcronyms.js":"15","/home/jnfri/Documents/react_portfolio/src/DATA/infoTimeline.js":"16","/home/jnfri/Documents/react_portfolio/src/DATA/infoNav.js":"17","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/recent/RecentProjects.js":"18","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/teaching/TeachingSection.js":"19","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/contact/ContactSection.js":"20","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/recent/recentProject.js":"21","/home/jnfri/Documents/react_portfolio/src/DATA/infoContact.js":"22","/home/jnfri/Documents/react_portfolio/src/DATA/infoRecent.js":"23","/home/jnfri/Documents/react_portfolio/src/DATA/infoTeaching.js":"24","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/references/ReferencesSection.js":"25","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/ShapeOfWill.js":"26","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ResearchStudy.js":"27","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/dataManipulation.js":"28","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/matchingState.js":"29","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/MatchingDemo.js":"30","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/hookToggleCOD.js":"31","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/svgMatching.js":"32","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/ETBD.js":"33","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/recombineAndMutate.js":"34","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/etbdState.js":"35","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/ChartPhenotypes.js":"36","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/drawETBD.js":"37","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/HistogramETBD.js":"38","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/Qual.js":"39","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ImagesContainer.js":"40","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/teaching/OrderFellowship.js":"41","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/vitae/infoPublications.js":"42","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/vitae/infoConferences.js":"43","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/vitae/MyVitae.js":"44","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/CollapseHook.js":"45","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HammingDemo.js":"46","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/hammingFunctions.js":"47","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HeatmapTemplate.js":"48","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_input/InputClasses.js":"49","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_input/InputTemplate.js":"50","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/defaultDataPhens.js":"51","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/hdValues.js":"52","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/drawPhenotypes.js":"53","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/hdCodValues.js":"54","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HeatmapHook.js":"55","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/inputNumberHook.js":"56","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/TableHook.js":"57","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HammingDistances.js":"58","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_input/InputRange.js":"59","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/MathematicalModels.js":"60","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/D3ScatterRatios.js":"61","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/BasicSummaryTable.js":"62","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/D3ScatterLogs.js":"63","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/MatchingEquations.js":"64","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/EtbdEmergence.js":"65","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_emergence/DrawEtbdInteractive.js":"66","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/EmergenceMain.js":"67","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/AgentHistory.js":"68","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/ButtonNext.jsx":"69","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/mutation/MutationDemo.jsx":"70","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/mutation/CheckProps.js":"71","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/HammingDistances.js":"72","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/recombination/RecombinationDemo.jsx":"73","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/recombination/RadioBit.jsx":"74","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/NeonsFunctionality.js":"75","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/emission/Emission.jsx":"76","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/selection/ToggleReinforcement.jsx":"77","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/selection/Selection.js":"78","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/EmergenceSettings.js":"79","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/rechooks/Rec2.js":"80","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/rechooks/RadioHook.js":"81","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/SvgRecord.js":"82","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/ResearchTrajectory.jsx":"83","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/teaching/TeachingCard.jsx":"84","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/teaching/TeachingAssistant.jsx":"85","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/radar/RadarChart.jsx":"86","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/radar/radarData.jsx":"87","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/radar/RadarFunction.jsx":"88","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/radar/PseudoRadar.jsx":"89","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/ResearchBegins.jsx":"90","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/LovelyOgive.jsx":"91"},{"size":219,"mtime":1621274560604,"results":"92","hashOfConfig":"93"},{"size":6141,"mtime":1643893031228,"results":"94","hashOfConfig":"93"},{"size":5439,"mtime":1639799428030,"results":"95","hashOfConfig":"93"},{"size":7250,"mtime":1643683410749,"results":"96","hashOfConfig":"93"},{"size":31521,"mtime":1629497592262,"results":"97","hashOfConfig":"98"},{"size":8587,"mtime":1643925860936,"results":"99","hashOfConfig":"93"},{"size":1137,"mtime":1632481584177,"results":"100","hashOfConfig":"93"},{"size":1366,"mtime":1632481358675,"results":"101","hashOfConfig":"93"},{"size":12133,"mtime":1630708098586,"results":"102","hashOfConfig":"98"},{"size":3750,"mtime":1640737293984,"results":"103","hashOfConfig":"93"},{"size":3805,"mtime":1641520201308,"results":"104","hashOfConfig":"93"},{"size":2648,"mtime":1640312117152,"results":"105","hashOfConfig":"93"},{"size":1004,"mtime":1640723299618,"results":"106","hashOfConfig":"93"},{"size":2290,"mtime":1632436436382,"results":"107","hashOfConfig":"93"},{"size":3139,"mtime":1632487435145,"results":"108","hashOfConfig":"93"},{"size":52415,"mtime":1643937184422,"results":"109","hashOfConfig":"93"},{"size":3533,"mtime":1643380794425,"results":"110","hashOfConfig":"93"},{"size":1588,"mtime":1628382977829,"results":"111","hashOfConfig":"93"},{"size":2602,"mtime":1643192480694,"results":"112","hashOfConfig":"93"},{"size":4453,"mtime":1640312440133,"results":"113","hashOfConfig":"93"},{"size":1185,"mtime":1627845351159,"results":"114","hashOfConfig":"93"},{"size":2265,"mtime":1632487714203,"results":"115","hashOfConfig":"93"},{"size":3767,"mtime":1629054348968,"results":"116","hashOfConfig":"93"},{"size":9256,"mtime":1643071769952,"results":"117","hashOfConfig":"93"},{"size":2383,"mtime":1628382921104,"results":"118","hashOfConfig":"98"},{"size":5405,"mtime":1628624048361,"results":"119","hashOfConfig":"98"},{"size":4567,"mtime":1639954383163,"results":"120","hashOfConfig":"93"},{"size":722,"mtime":1632488446595,"results":"121","hashOfConfig":"93"},{"size":2268,"mtime":1643591909243,"results":"122","hashOfConfig":"93"},{"size":24785,"mtime":1643652866857,"results":"123","hashOfConfig":"93"},{"size":602,"mtime":1629573728781,"results":"124","hashOfConfig":"98"},{"size":1432,"mtime":1643675452668,"results":"125","hashOfConfig":"93"},{"size":23549,"mtime":1642793325586,"results":"126","hashOfConfig":"93"},{"size":1172,"mtime":1629754669365,"results":"127","hashOfConfig":"93"},{"size":1171,"mtime":1630448793680,"results":"128","hashOfConfig":"93"},{"size":3184,"mtime":1629743839354,"results":"129","hashOfConfig":"98"},{"size":4386,"mtime":1634760685842,"results":"130","hashOfConfig":"93"},{"size":2093,"mtime":1630342691697,"results":"131","hashOfConfig":"98"},{"size":5322,"mtime":1643925491784,"results":"132","hashOfConfig":"93"},{"size":979,"mtime":1639879154928,"results":"133","hashOfConfig":"93"},{"size":1940,"mtime":1631044912234,"results":"134","hashOfConfig":"98"},{"size":15978,"mtime":1632487670644,"results":"135","hashOfConfig":"93"},{"size":26892,"mtime":1632487632992,"results":"136","hashOfConfig":"93"},{"size":3464,"mtime":1632487686396,"results":"137","hashOfConfig":"93"},{"size":1194,"mtime":1631220950041,"results":"138","hashOfConfig":"93"},{"size":8684,"mtime":1633119169994,"results":"139","hashOfConfig":"93"},{"size":2424,"mtime":1637336752687,"results":"140","hashOfConfig":"93"},{"size":12353,"mtime":1632471406928,"results":"141","hashOfConfig":"98"},{"size":1756,"mtime":1632005327896,"results":"142","hashOfConfig":"98"},{"size":713,"mtime":1632971929892,"results":"143","hashOfConfig":"93"},{"size":15779,"mtime":1631906055564,"results":"144","hashOfConfig":"98"},{"size":197239,"mtime":1632062791648,"results":"145","hashOfConfig":"93"},{"size":16372,"mtime":1632794400471,"results":"146","hashOfConfig":"98"},{"size":564934,"mtime":1632395169570,"results":"147","hashOfConfig":"93"},{"size":12797,"mtime":1637690878954,"results":"148","hashOfConfig":"93"},{"size":1204,"mtime":1632971218456,"results":"149","hashOfConfig":"98"},{"size":6742,"mtime":1633119321282,"results":"150","hashOfConfig":"93"},{"size":5344,"mtime":1633118783126,"results":"151","hashOfConfig":"93"},{"size":0,"mtime":1632856187981,"results":"152","hashOfConfig":"98"},{"size":5407,"mtime":1634610056383,"results":"153","hashOfConfig":"93"},{"size":7270,"mtime":1634348964155,"results":"154","hashOfConfig":"93"},{"size":4596,"mtime":1635159429891,"results":"155","hashOfConfig":"93"},{"size":9470,"mtime":1635991950941,"results":"156","hashOfConfig":"93"},{"size":1410,"mtime":1635159521144,"results":"157","hashOfConfig":"93"},{"size":2018,"mtime":1636085576177,"results":"158","hashOfConfig":"93"},{"size":3503,"mtime":1636023499430,"results":"159","hashOfConfig":"93"},{"size":28863,"mtime":1639595727138,"results":"160","hashOfConfig":"93"},{"size":3960,"mtime":1639182549056,"results":"161","hashOfConfig":"93"},{"size":363,"mtime":1637158824684,"results":"162","hashOfConfig":"93"},{"size":3590,"mtime":1638878433125,"results":"163","hashOfConfig":"93"},{"size":1599,"mtime":1638573695894,"results":"164","hashOfConfig":"93"},{"size":4490,"mtime":1643894766593,"results":"165","hashOfConfig":"93"},{"size":6385,"mtime":1638301050499,"results":"166","hashOfConfig":"93"},{"size":2504,"mtime":1637888039976,"results":"167","hashOfConfig":"93"},{"size":5441,"mtime":1638916456441,"results":"168","hashOfConfig":"93"},{"size":2474,"mtime":1638275739883,"results":"169","hashOfConfig":"93"},{"size":1259,"mtime":1637845543548,"results":"170","hashOfConfig":"93"},{"size":2292,"mtime":1639184189416,"results":"171","hashOfConfig":"93"},{"size":1042,"mtime":1637918957305,"results":"172","hashOfConfig":"93"},{"size":11700,"mtime":1638906410200,"results":"173","hashOfConfig":"93"},{"size":1376,"mtime":1638361488528,"results":"174","hashOfConfig":"93"},{"size":5699,"mtime":1638814210726,"results":"175","hashOfConfig":"93"},{"size":7799,"mtime":1643681799133,"results":"176","hashOfConfig":"93"},{"size":2305,"mtime":1643070445225,"results":"177","hashOfConfig":"93"},{"size":3089,"mtime":1642929891137,"results":"178","hashOfConfig":"93"},{"size":404,"mtime":1641931169016,"results":"179","hashOfConfig":"93"},{"size":3285,"mtime":1642726501157,"results":"180","hashOfConfig":"93"},{"size":13265,"mtime":1642727279525,"results":"181","hashOfConfig":"93"},{"size":2474,"mtime":1641945525826,"results":"182","hashOfConfig":"93"},{"size":6689,"mtime":1643681840726,"results":"183","hashOfConfig":"93"},{"size":7896,"mtime":1643906509452,"results":"184","hashOfConfig":"93"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},"1x1ednu",{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"187"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1nrx25",{"filePath":"197","messages":"198","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"187"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"187"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"187"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"187"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"187"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"187"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"187"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"272"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"187"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"306"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"187"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"314","messages":"315","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"187"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"187"},{"filePath":"320","messages":"321","errorCount":4,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"187"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"187"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"187"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"339","messages":"340","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"187"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"187"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"187"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"187"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"355","messages":"356","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"358"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"187"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"187"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"370"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"187"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"187"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"187"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"187"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"187"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"187"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"395","messages":"396","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"398"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"398"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"404","messages":"405","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"187"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/jnfri/Documents/react_portfolio/src/index.js",[],["409","410"],"/home/jnfri/Documents/react_portfolio/src/App.js",["411"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/Chapter04.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/Chapter01.js",["412","413","414","415","416"],"import \"./chapters.sass\"\n\nimport React, { Component } from \"react\";\nimport parse from \"html-react-parser\";\nimport { nanoid } from \"nanoid\"\n\nimport MatchingDemo from \"../matching/MatchingDemo.js\";\n//import ETBD from \"../etbd/ETBD.js\"\n\n\n\n\n\nclass Chapter01 extends Component {\n\n    render() {\n\n        var skills = [\n            \"Excel/VBA\",\n            \"syntethic data\",\n            \"research design\",\n            \"hypothesis testing\",\n            \"exploratory analysis\",\n            \"model selection\",\n            \"ensemble fitting\",\n            \"residual analysis\",\n            \"regression analysis\",\n        ];\n\n\n        var Skills = skills.map((s) => {\n            return <label key={s}>{s}</label>;\n        });\n\n\n        return (\n            <div\n                id=\"ChoiceDemo\"\n                className=\"chapter\"\n                style={{\n                    //backgroundColor: \"#1D2731\", \n                    minHeight: \"100vh\",\n                    //backgroundColor: \"#bdd4e7\",\n                    //backgroundImage: \"linear-gradient(315deg, #bdd4e7 0%, #8693ab 74%)\",\n                    //backgroundImage: \"linear-gradient(315deg, #0cbaba 0%, #380036 74%)\",\n                    //backgroundColor: \"#7f5a83\",\n                    //backgroundImage: \"linear-gradient(315deg, #7f5a83  0%, #0d324d 74%)\",\n                    backgroundColor: \"#17171b\",\n                    backgroundColor: \"#0d324d\",  //1d2731\n                    backgroundColor: \"#1d2731\",\n\n                }}\n            >\n\n                <div className=\"chapterRow\">\n                    <div className=\"chapterCol\">\n\n\n\n\n\n\n\n                        <h2\n                            className=\"chapter-title\"\n                            style={{\n                                fontSize: \"16px\",\n                                margin: \"2rem 0rem 1rem 0rem\",\n                                fontFamily: \"Montserrat\"\n\n                            }}\n                        >\n                            Experience the magic!\n\n                        </h2>\n\n\n                        <p\n                            // id=\"ch01_p3\"\n                            className=\"p-left\"\n                            style={{\n                                fontSize: \"14px\",\n                                fontFamily: \"Montserrat\"\n                            }}\n                        >\n                            The demo simulates the procedure I designed to verify if synthetic data can predict human behavior (Popa, 2013; Popa & McDowell, 2016).\n                        </p>\n\n\n                        <p\n                            // id=\"ch01_p3\"\n                            className=\"p-left matching-instructions\"\n                            style={{\n                                fontSize: \"12px\",\n                                fontStyle: \"italic\",\n                                fontFamily: \"mono\",\n                                width: \"350px\",\n                                fontWeight: 500,\n                                padding: \"14px 20px\",\n                                margin: \"10px auto\",\n                                color: \"#333\",\n                                backgroundColor: \"#ccc\",\n                                borderRadius: \"5px\",\n\n\n                            }}\n                        >\n                            Clicking inside the marked regions may result in points. Obtain as many as you can. You have 15 seconds. When ready, click START.\n                        </p>\n\n                        <h2\n                            className=\"chapter-title\"\n                            style={{\n                                fontSize: \"14px\",\n                                margin: \"2rem 0rem 1rem 0rem\",\n                                fontFamily: \"Montserrat\"\n\n                            }}\n                        >\n                            Modelling behavior\n\n                        </h2>\n\n\n                        <p\n                            // id=\"ch01_p3\"\n                            className=\"p-left\"\n                            style={{\n                                fontSize: \"14px\",\n                                fontFamily: \"Montserrat\"\n\n                            }}\n                        >\n                            Computational theories implement agents, experimental environments, and theoretical principles proposed to explain their interaction.\n                        </p>\n\n                        <p\n                            // id=\"ch01_p3\"\n                            className=\"p-left\"\n                            style={{\n                                fontSize: \"14px\",\n                                fontFamily: \"Montserrat\"\n\n                            }}\n                        >\n                            The harder it is to tell the difference between synthetic and live data, the better the theory.\n                        </p>\n\n\n                        {/* <h2\n                            className=\"chapter-title\"\n                            style={{\n                                fontSize: \"16px\",\n                                margin: \"2rem 0rem 1rem 0rem\"\n                            }}\n                        >\n                            Computational ETBDs\n                        </h2> */}\n\n\n                        {/* <p\n                            id=\"ch01_p3\"\n                            className=\"p-left\"\n                            style={{\n                                fontSize: \"16px\"\n                            }}\n                        >\n                            Behavioral repertoires are represented by a range integers. Target classes are sub-ranges, equivalent to lever presses or mouse clicks. A naive agent is a population of integers chosen at random from this range.\n                        </p> */}\n\n\n\n\n                        {/* <p\n                            className=\"p-left\"\n                            style={{\n                                fontSize: \"16px\"\n                            }}\n                        >\n                            Learning is represented by a set of Darwinian rules that transform this population into a new one, again and again.\n\n                            A skinner box is a functional representation of the real world. A computational theory is a functional representation of a skinner box.\n\n                            ... ....  Behaviors are represented by a range of integers, response classes are sub-ranges, and 'agents' are populations of integers that are transformed, generation after generation, by Darwinian rules of <span style={{ color: 'yellow' }} >selection</span>, <span style={{ color: 'yellow' }} >recombination</span>, and <span style={{ color: 'yellow' }} >mutation</span>.\n                        </p> */}\n\n\n\n                        {/* <div className=\"chapterSkills\">{Skills}</div> */}\n\n\n                    </div>\n\n\n\n                    <div className=\"chapterCol\">\n\n                        <div className=\"projectColumnImagesMatching\">\n\n                            <MatchingDemo />\n\n                            {/* <ETBD /> */}\n\n                        </div>\n                    </div>\n\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Chapter01;\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/FastMatchingDemo.js",["417","418","419","420","421","422","423","424","425"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/MyTimeline.js",["426","427","428","429","430","431"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ReadMore.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ImagesCarousel.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoReferences.js",[],["432","433"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/about_files/AboutSection.js",["434"],"import React, { Component } from 'react'\nimport data from '../../DATA/myData'\nimport parse from 'html-react-parser'\n\nimport infoSkills from \"../../DATA/infoSkills\"\n\nimport \"./about.sass\"\n\n\nclass About extends Component {\n\n\n    render() {\n\n        var Skills = infoSkills.skills.map((item) => {\n            return (\n                <label\n                    style={{\n                        opacity: item.opacity,\n                        color: item.color,\n                    }}\n                    key={item.name + Math.random()}\n                >\n                    { item.name}\n                </label >\n            )\n        })\n\n\n        return (\n\n            <div\n                id='About'\n                className='fullscreen darker'\n                style={{\n                    marginBottom: \"0rem\",\n                    // backgroundColor: \"#233D46\",\n                    backgroundColor: \"#1d2731\", // ivory black\n\n                }}\n            >\n\n                <h1 >About me</h1>\n\n                <div className=\"AboutRow\">\n\n                    <div\n                        id='divProfilePic'\n                    //className=\"AboutColumn\"\n                    >\n\n                        {\n                            data.ShowAboutImage ?\n                                <img\n                                    src={data.aboutImage}\n                                    alt='Dr. Andrei Popa'\n                                    //height='450px'\n                                    style={{\n                                        borderRadius: \"5px\"\n                                    }}\n                                >\n\n                                </img> : null\n                        }\n\n                    </div>\n\n\n\n                    <div className=\"AboutColumn\">\n                        {\n                            data.aboutText.map((item) => {\n                                return (\n                                    <p className=\"narrative\" >\n                                        {item}\n                                    </p>\n                                )\n                            })\n                        }\n\n\n                        <div className=\"divSkills\" >\n                            {Skills}\n                        </div>\n\n                        <div className=\"wrapperEducation\">\n\n                            {/* <table\n                                id=\"tableEducation\"\n                                style={{\n                                    fontSize: \"12px\"\n                                }}\n                            >\n                                <tbody>\n                                    <tr>\n                                        <td>2003</td>\n                                        <td>B.A. in Psychology</td>\n                                        <td>Alexandru Ioan Cuza University, Iasi, Romania</td>\n                                    </tr>\n\n                                    <tr>\n                                        <td>2009</td>\n                                        <td>M.A. in Psychology</td>\n                                        <td>Emory University, Atlanta, GA, USA</td>\n                                    </tr>\n\n                                    <tr>\n                                        <td>2013</td>\n                                        <td>Ph.D. in Psychology</td>\n                                        <td>Emory University, Atlanta, GA, USA</td>\n                                    </tr>\n                                </tbody>\n                            </table> */}\n\n                        </div>\n                    </div>\n\n\n\n\n\n                </div>\n\n\n\n\n            </div>\n\n\n\n        );\n    }\n}\n\nexport default About;","/home/jnfri/Documents/react_portfolio/src/DATA/myData.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoSkills.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/header_files/HeaderSection.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/header_files/NavMain.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/header_files/NavAcronyms.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoTimeline.js",["435"],"/home/jnfri/Documents/react_portfolio/src/DATA/infoNav.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/recent/RecentProjects.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/teaching/TeachingSection.js",["436"],"import React, { Component } from \"react\";\nimport \"./teaching.sass\";\n\nimport parse from \"html-react-parser\";\nimport { Card } from \"react-bootstrap\";\n\nimport { instructorRoles } from \"../../DATA/infoTeaching\"\n\n//import OrderFellowship from \"./OrderFellowship\"\n\n\nimport { nanoid } from \"nanoid\"\n\nimport TeachingCard from \"./TeachingCard\"\nimport TeachingAssistant from \"./TeachingAssistant\"\n\nexport default class TeachingExperience extends Component {\n\n\n    state = {\n        teachingDetails: false,\n        schools: [\"emory\", \"oxford\", \"gsu\", \"agnes\"],\n    }\n\n\n    showDetails = () => {\n        this.state.teachingDetails === false ? this.setState({ teachingDetails: true }) : this.setState({ teachingDetails: false })\n    }\n\n\n\n    render() {\n\n        const infoTeaching = instructorRoles()\n        var TeachingCards = infoTeaching.map((item) => {\n\n            var muie = item.semesters\n\n            var Muie1 = muie.map((s) => {\n                return (\n                    <TeachingCard\n                        institution={s.institution}\n                        semester={s.semester}\n                        sectionSize={s.sectionSize}\n                        sections={s.sections}\n                        teachingDetails={this.state.teachingDetails}\n                        schools={this.state.schools}\n                        schoolCode={s.schoolCode}\n                        role={s.role}\n\n                    />\n                )\n            })\n\n\n\n\n            return (\n                <Card\n                    text={\"Dark\".toLowerCase() === 'light' ? 'dark' : 'white'}\n                    className=\"card\"\n                    key={nanoid()}\n                >\n\n                    <Card.Title\n                        className=\"title\"\n                        style={{\n                            fontFamily: 'Architects Daughter, cursive',\n                            // fontFamily: 'Annie Use Your Telescope, cursive',\n                            fontSize: \"16px\",\n                        }}\n                    >\n                        {parse(item.name)}\n\n                    </Card.Title>\n\n                    {Muie1}\n\n                </Card>)\n        }\n        )\n\n\n        return (\n\n            <div id=\"teachingSection\" >\n\n\n\n                <div className=\"teachingCards\">\n\n\n                    {TeachingCards}\n\n                    <button\n                        id='teachingDetails'\n                        onClick={this.showDetails}\n                    >\n                        DETAILS\n                        </button>\n\n                </div>\n\n\n\n            </div>\n\n\n        )\n    }\n}\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/contact/ContactSection.js",["437"],"import React, { Component } from \"react\";\n//import { Button } from \"react-bootstrap\";\nimport parse from \"html-react-parser\";\nimport infoContact from \"../../DATA/infoContact\";\nimport data from '../../DATA/myData'\n\nimport \"./contact.sass\";\n\n\nclass Contact extends Component {\n    goToLink = (e) => {\n        e.preventDefault();\n        let a = e.currentTarget.name;\n        window.open(a, \"_blank\");\n    };\n\n    render() {\n        return (\n            <div\n                id=\"Contact\"\n                className=\"fullscreen darker\"\n                style={{\n                    backgroundColor: \"#1D2731\",\n                    marginBottom: \"0rem\"\n                }}\n            >\n\n\n                <h1\n                    className=\"section_title\"\n                    style={{\n                        marginBottom: \"2rem\"\n                    }}\n                >\n                    Contact\n                </h1>\n\n\n\n                {/* <div\n                    id='divProfilePic'\n                    className=\"AboutColumn\"\n                >\n\n                    {\n                        data.ShowAboutImage ?\n                            <img\n                                src={data.aboutImage}\n                                alt='Dr. Andrei Popa'\n                                height='400px'\n                                style={{\n                                    borderRadius: \".5rem\"\n                                }}\n                            >\n\n                            </img> : null\n                    }\n\n                </div> */}\n\n\n\n                <div className=\"section_column\">\n                    <button\n                        id=\"btnEmail\"\n                        className=\"btnContactLink\"\n                        style={{\n                            width: \"300px\",\n                            //color: \"#02aab0\",\n                            fontSize: \"1rem\",\n                            fontWeight: 400,\n                        }}\n                        title={\"click to copy\"}\n                        onClick={() =>\n                            navigator.clipboard\n                                .writeText(\"andrei.popa.dev@gmail.com\")\n                                .then(() => alert(\"Copied to clipboard. Use it only for good.\"))\n                        }\n                    >\n                        andrei.popa.dev@gmail.com\n                    </button>\n\n\n                </div>\n\n\n\n\n                <table style={{ width: \"800px\", margin: \"1rem auto 1rem auto\" }}>\n                    <tbody>\n                        {infoContact.slice(1).map((link, index) => (\n                            <tr\n                                key={index}\n                            >\n                                <td\n                                    style={{\n                                        //border: \"1px solid red\",\n                                        padding: \".1rem .2rem\",\n                                        verticalAlign: \"top\",\n                                        textAlign: \"center\"\n                                    }}\n                                >\n                                    <button\n                                        className=\"btnContactLink\"\n                                        name={link.url}\n                                        title={link.url}\n                                        onClick={this.goToLink}\n                                    >\n                                        {link.name}\n                                    </button>\n                                </td>\n\n                                <td style={{ padding: \".1rem .5rem\" }}>\n                                    <p style={{ width: \"500px\", color: \"#ccc\", fontSize: \".9rem\", fontFamily: \"Roboto\" }}\n                                    >{parse(link.info)}</p>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n\n                </table>\n\n\n\n                <div\n                    id=\"myFooter\"\n                    className=\"footer\"\n                    fixed=\"bottom\"\n                //style={{ color: \"#FF652F\", color: \"#14A76C\" }}\n                >\n                    <span>\n                        End of site.<br />\n            Made with React and ❤ (but mostly React) | Andrei Popa 2020\n          </span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Contact;\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/recent/recentProject.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoContact.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoRecent.js",[],"/home/jnfri/Documents/react_portfolio/src/DATA/infoTeaching.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/references/ReferencesSection.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/ShapeOfWill.js",["438","439"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ResearchStudy.js",["440"],"import React, { Component } from \"react\"\n//import parse from \"html-react-parser\"\nimport ReadMore from \"./ReadMore\";\nimport \"./study.sass\"\nimport { nanoid } from \"nanoid\"\n\nimport ImagesContainer from \"./ImagesContainer\";\n\n\nexport default class ResearchStudy extends Component {\n\n    render() {\n\n        return (\n            <div\n                className=\"item\"\n                content1={this.props.nickname}\n                key={Date.now() + Math.random()}\n                id={this.props.date}\n            >\n                <div className=\"itemContent item_study\" key={Math.random()}>\n\n                    {/* -------------------       RESEARCH STUDY      ---------------------- */}\n\n                    <div className=\"outer_column\" key={Date.now() + Math.random()}>\n\n                        <div className=\"row\" key={Math.random() + Date.now()}>\n\n                            <div className=\"study_info\" key={Math.random()}>\n\n                                <div className=\"titles\" key={Math.random()} >\n                                    <h1 className=\"title\" key={Math.random()}>\n                                        {this.props.title[0].toUpperCase()}\n\n                                    </h1>\n                                    <h2 className=\"subtitle\" key={Math.random()}>\n                                        {this.props.title[1]}\n                                    </h2>\n                                </div>\n\n\n                                <div className=\"summary\" key={Math.random()}  >\n                                    {this.props.description}\n                                </div>\n\n                                {/* <div className=\"divTech tech\" key={Math.random()} >  {this.props.tech}  </div> */}\n\n                            </div>\n\n\n                            <div className=\"study_info\" key={nanoid()}>\n\n                                <div className=\"irb\" key={nanoid()}>\n                                    <table key={nanoid()}>\n                                        <tbody>\n\n                                            {\n                                                this.props.studyInfo.map((item) =>\n\n                                                    < tr key={nanoid()}>\n                                                        <th key={nanoid()}>{Object.entries(item)[0][0]}:</th>\n                                                        <td key={nanoid()}>{Object.entries(item)[0][1]}</td>\n                                                    </tr>\n                                                )\n                                            }\n\n                                            < tr\n                                                key={nanoid()}\n\n                                            >\n                                                <th\n                                                    style={{ color: \"#fcbf6a\" }}\n                                                    key={nanoid()}\n                                                >\n                                                    <i>Tech:</i>\n                                                </th>\n\n                                                <td\n                                                    style={{ color: \"#fcbf6a\" }}\n                                                    key={nanoid()}\n                                                >\n                                                    <i>VB.Net, Excel/VBA</i>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n\n\n                                <div\n                                    style={{ display: \"flex\", flexDirection: \"row\" }}\n                                >\n                                    {/* <div className=\"divTech tech\" key={Math.random()} >  {this.props.tech}  </div> */}\n\n                                    <div className=\"links_col\" key={nanoid()} >  {this.props.links}</div>\n                                </div>\n\n\n                            </div>\n                        </div>\n\n\n\n                        <div className=\"rowImages\" key={nanoid()}>\n                            <div className=\"rowImages\" key={nanoid()}>\n                                <ImagesContainer props={this.props.img} />\n                            </div>\n\n                        </div>\n\n\n\n                    </div>\n\n\n\n\n\n\n\n\n\n\n                </div>\n            </div >\n        )\n    }\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/dataManipulation.js",["441"],"//import * as d3 from \"d3\"\n\nexport function findLastTarget(array1) {\n\n\n    // This works fine, use it after fixing the events.\n    // for now, it starts with one empty event, so this \n    // needs addressed. \n\n    let array2 = array1.filter((item) => {\n        if (item.class === \"b1\" | item.class === \"b2\") {\n            return item\n        }\n    })\n\n\n    //console.log(\"original: \", array1)\n    //console.log(\"filtered: \", array2)\n\n    if (array2.length === 0) {\n\n        //console.log(\"return original: \", array1[(array1.length - 1)])\n\n        return array1[(array1.length - 1)]\n\n    } else {\n\n        //console.log(\"return filtered: \", array2[(array2.length - 1)])\n\n        return array2[(array2.length - 1)]\n    }\n\n\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/matchingState.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/MatchingDemo.js",["442","443","444","445","446","447","448","449"],"\n// More elegant version than FastMatchingDemo;\n\nimport React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n//import parse from \"html-react-parser\";\nimport \"./matching.sass\";\n\nimport { findLastTarget } from \"./dataManipulation\";\nimport { setMatchingState } from \"./matchingState\";\nimport { createSVG_Matching } from \"./svgMatching\";\n\nimport ETBD from \"../etbd/ETBD\"\nimport { nanoid } from \"nanoid\";\n\n\n\nexport default class MatchingDemo extends Component {\n\n    constructor() {\n        super();\n        let myState = setMatchingState();\n        this.state = myState;\n    };\n\n\n\n    beginSession = () => {\n\n        d3.select(\"#svgMatching\").on(\"click\", this.evaluateResponse);\n\n\n        let thisEvent = {\n            timestamp: performance.now(),\n            x: 0,\n            y: 0,\n            class: \"\",\n            co: 0,\n            points: 0,\n        }\n\n        var myEvents = [thisEvent]\n\n        this.setState({\n            timeStart: performance.now(),\n            events: myEvents,\n        })\n\n\n        d3.selectAll(\".introTexts\").remove()\n\n        let scaleTime = d3\n            .scaleLinear()\n            .domain([0, this.state.timeLimit])\n            .range([0, 350]);\n\n        let scaleResponses = d3\n            .scaleLinear()\n            .domain([0, this.state.recordHeight])\n            .range([0, 250]);\n\n        let recordHeight = this.state.recordHeight\n\n\n\n        let overallInterval = d3.interval((te) => {\n\n            let x1 = 35 + scaleTime((te - 250) / 1000)\n            let x2 = 35 + scaleTime(te / 1000)\n            let B1 = this.state.B1\n            let B2 = this.state.B2\n\n            let y = scaleResponses(\n                recordHeight - ((B1 + B2) % recordHeight)\n            );\n\n            d3.select('#svgRecord').append(\"line\")\n                .attr(\"class\", \"dataLine\")\n                .attr(\"x1\", x1)\n                .attr(\"y1\", y)\n                .attr(\"x2\", x2)\n                .attr(\"y2\", y)\n                .attr(\"stroke\", this.state.responseColor)\n                .attr(\"stroke-width\", 1)\n\n\n            this.setState({ progress: te })\n\n            if (te > this.state.timeLimit * 1000) {\n\n                let svgMatching = d3.select(\"#svgMatching\")\n                svgMatching.on(\"click\", null);\n                overallInterval.stop()\n            }\n        }, 250);\n\n\n        // The first two Random Intervals, between 1000 and 5000 ms, from an exponential with mean 1/RI mean. I use integers here to remove the microseconds. When the timers exceed the intervals, reinforcement becomes available.\n\n        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\n        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\n        d3.timeout((elapsed1) => {\n            this.setState({ r1ready: 1 });\n        }, int1);\n        d3.timeout((elapsed2) => {\n            this.setState({ r2ready: 1 });\n        }, int2);\n\n\n        // EVENTS PER SESSION (15s):\n        let r1min = `${1 / this.state.RI1 * this.state.timeLimit}`\n        let r2min = `${1 / this.state.RI2 * this.state.timeLimit}`\n\n    };\n\n\n\n    evaluateResponse = (e) => {\n        var timeStart = this.state.timeStart;\n        var eventTimeStamp = performance.now()\n        var events = this.state.events;\n\n        this.setState({\n            timeElapsed: eventTimeStamp - timeStart\n        });\n\n\n        // DEFAULT VALUES FOR THE NEW EVENT:\n        var respClass = \"be\",\n            co = 0,\n            // b1 = 0,\n            // b2 = 0,\n            // points1 = 0,\n            // points2 = 0,\n            newID = 0,\n            reinforced = false;\n\n\n        // PE: \n        var pe = events[events.length - 1]\n        newID = pe.id + 1\n\n        // CUMULATIVE FREQUENCIES:\n        var B1 = this.state.B1;\n        var B2 = this.state.B2;\n        var Be = this.state.Be;\n        var Points1 = this.state.Points1;\n        var Points2 = this.state.Points2;\n        //var Points3 = this.state.Points2;\n        var CO = this.state.CO;\n\n        // VARIABLES RELATED TO CHANGEOVER DELAYS:\n        var cod1_duration = this.state.cod1_duration\n        var cod1_status = this.state.cod1_status\n        var cod2_duration = this.state.cod2_duration\n        var cod2_status = this.state.cod2_status\n\n\n        // EVENT COORDINATES:\n        var x = e.offsetX;\n        var y = e.offsetY;\n\n\n\n\n\n        //                            EVALUATE EVENT CLASS: B1, B2, Be\n\n\n\n\n        // --------------------------------------------------------------   B1\n\n        if (d3.polygonContains(this.state.class1, [x, y])) {\n\n            respClass = \"b1\";\n            //b1 = events[events.length - 1].b1 + 1;\n            //b2 = events[events.length - 1].b2 + 0;\n\n            this.setState({\n                B1: B1 + 1,\n                //B2: B2,\n                //Be: Be,\n                responseColor: this.state.color1\n            })\n\n\n            // CHANGEOVER? \n            if (pe.class === \"b2\") {\n                co = 1;\n                // CO = CO + 1\n                this.setState({\n                    CO: CO + 1,\n                    responseColor: this.state.colorCO\n                })\n\n\n                // CODE ENABLED? \n                if (cod1_duration > 0) {\n                    cod2_status = \"off\"\n                    cod1_status = \"on\"\n                    reinforced = false\n                    this.setState({ cod1_status: \"on\", cod2_status: \"off\", codColor: \"#61DAFB\" })\n\n                    // START TIMER FOR COD 1\n                    let cod1 = d3.timeout((elapsedCOD1) => {\n                        cod1_status = \"off\"\n\n                        this.setState({ cod1_status: \"off\" })\n\n                        if (this.state.cod2_status === \"off\") {\n                            this.setState({ codColor: \"#282c34\" })\n                        }\n\n                        cod1.stop()\n\n                    }, cod1_duration);\n\n\n                    // IF NO COD IN EFFECT, CHECK FOR REINFORCEMENT: \n                } else {\n\n                    if (this.state.r1ready !== 0) {\n                        reinforced = true\n\n                        this.setState({\n                            Points1: Points1 + this.state.r1ready,\n                            Points2: Points2\n                        })\n\n                        this.setState({ r1ready: 0 });\n\n                        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\n\n                        let t1 = d3.timeout((elapsed1) => {\n                            this.setState({ r1ready: 1 });\n                        }, int1);\n                    }\n                }\n\n\n                // IF NOT CHANGEOVER, CHECK IF COD IS ON:\n            } else {\n\n                if (cod1_status === \"off\" & this.state.cod1_status === \"off\") {\n                    if (this.state.r1ready !== 0) {\n                        reinforced = true\n                        this.setState({\n                            Points1: Points1 + this.state.r1ready,\n                            Points2: Points2\n                        })\n                        this.setState({ r1ready: 0 });\n\n                        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\n\n                        let t1 = d3.timeout((elapsed1) => {\n                            this.setState({ r1ready: 1 });\n                        }, int1);\n                    }\n                } else {\n                    reinforced = false\n                    this.setState({\n                        Points1: Points1,\n                        Points2: Points2\n                    })\n                }\n            }\n        };  // _____ END of B1 ________\n\n\n\n        // --------------------------------------------------------------   B2\n        if (d3.polygonContains(this.state.class2, [x, y])) {\n            respClass = \"b2\";\n            //b1 = events[events.length - 1].b1 + 0;\n            //b2 = events[events.length - 1].b2 + 1;\n\n            this.setState({\n                //B1: B1,\n                B2: B2 + 1,\n                //Be: Be,\n                responseColor: this.state.color2\n            })\n\n\n            if (pe.class === \"b1\") {\n                co = 1;\n                CO += 1\n\n                this.setState({\n                    CO: CO,\n                    responseColor: this.state.colorCO\n                })\n\n                if (cod2_duration > 0) {\n                    cod1_status = \"off\"\n                    cod2_status = \"on\"\n                    reinforced = false\n                    this.setState({ cod1_status: \"off\", cod2_status: \"on\", codColor: \"#61DAFB\" })\n\n                    let cod2 = d3.timeout((elapsedCOD2) => {\n                        cod2_status = \"off\"\n                        this.setState({ cod2_status: \"off\" })\n\n                        if (this.state.cod1_status === \"off\") {\n                            this.setState({ codColor: \"#282c34\" })\n                        }\n\n                        cod2.stop()\n\n                    }, cod2_duration);\n\n                } else {\n\n                    if (this.state.r2ready !== 0) {\n                        reinforced = true\n                        this.setState({\n                            Points1: Points1,\n                            Points2: Points2 + this.state.r2ready\n                        })\n                        this.setState({ r2ready: 0 });\n\n                        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\n                        let t2 = d3.timeout((elapsed2) => {\n                            this.setState({ r2ready: 1 });\n                        }, int2);\n                    }\n                };\n\n\n            } else {\n\n                if (cod2_status === \"off\" & this.state.cod2_status === \"off\") {\n                    if (this.state.r2ready !== 0) {\n                        reinforced = true\n                        this.setState({\n                            Points1: Points1,\n                            Points2: Points2 + this.state.r2ready\n                        })\n                        this.setState({ r2ready: 0 });\n\n                        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\n                        let t2 = d3.timeout((elapsed2) => {\n                            this.setState({ r2ready: 1 });\n                        }, int2);\n                    }\n                } else {\n                    reinforced = false\n                    this.setState({\n                        Points1: Points1 + this.state.r1ready,\n                        Points2: Points2\n                    })\n                }\n            }\n        }  // _____ END of B2 ________\n\n\n\n        // DRAW ONLY IF TARGET RESPONSE: -----------------------------------\n\n        if (respClass === \"b1\" | respClass === \"b2\") {\n\n            // CUMULATIVE RECORD:  SVG, SCALES ---------------------------- \n            let svgRecord = d3.select(\"#svgRecord\");\n\n            let scaleTime = d3\n                .scaleLinear()\n                .domain([0, this.state.timeLimit])\n                .range([0, 350]);\n\n            let scaleResponses = d3\n                .scaleLinear()\n                .domain([0, this.state.recordHeight])\n                .range([0, 250]);\n\n\n\n            // LINE COORDINATES:\n\n            let LTR = findLastTarget(events)  // Last Target Response\n            let delta_t = LTR.timestamp - this.state.timeStart\n\n            //console.log(\"LTR: \", LTR)\n            //console.log(\"LTR.delta_t: \", delta_t / 1000)\n            // console.log(\"this.state.timeElapsed: \", this.state.timeElapsed / 1000)\n            // console.log(\"--------------------------------------------\")\n\n            //let px = 35 + scaleTime(timeElapsed / 1000);\n\n            //let px = 35 + scaleTime(delta_t / 1000)\n\n            //let px1 = 35 + scaleTime(this.state.timeElapsed / 1000);\n            let px = 35 + scaleTime(this.state.progress / 1000);\n\n            // let myBehavior = this.state.B1\n            // let myColor = this.state.color1\n\n            // if (respClass === \"b2\") {\n            //     myBehavior = this.state.B2\n            //     myColor = this.state.color2\n\n            // }\n\n            let myBehavior = this.state.B1 + this.state.B2\n            let py = scaleResponses(\n                this.state.recordHeight - ((myBehavior - 1) % this.state.recordHeight)\n            );\n\n            let py1 = scaleResponses(\n                this.state.recordHeight - ((myBehavior) % this.state.recordHeight)\n            );\n\n\n            // if (respClass === \"b2\") {\n            //     py = scaleResponses(\n            //         this.state.recordHeight - ((B2) % this.state.recordHeight)\n            //     );\n\n            //     py1 = scaleResponses(\n            //         this.state.recordHeight - ((B2 + 1) % this.state.recordHeight)\n            //     );\n            // }\n\n            // let py = scaleResponses(\n            //     this.state.recordHeight - ((B1 + B2) % this.state.recordHeight)\n            // );\n\n            // let py1 = scaleResponses(\n            //     this.state.recordHeight - ((B1 + B2 + 1) % this.state.recordHeight)\n            // );\n\n\n            // DRAW LINE     (but not if the needle needs reset):\n            if ((B1 + B2 + 1) % this.state.recordHeight !== 0) {\n\n                //if ((myBehavior + 1) % this.state.recordHeight !== 0) {\n                // simple line:\n                // svgRecord.append(\"line\").attr(\"class\", \"dataLine\")\n                //     .attr(\"x1\", px)\n                //     .attr(\"y1\", py)\n                //     .attr(\"x2\", px1)\n                //     .attr(\"y2\", py1)\n                //     .attr(\"stroke\", this.state.responseColor)\n                //     .attr(\"stroke-width\", 1)\n\n                svgRecord.append(\"line\").attr(\"class\", \"dataLine\")\n                    .attr(\"x1\", px)\n                    .attr(\"y1\", py)\n                    .attr(\"x2\", px)\n                    .attr(\"y2\", py1)\n                    .attr(\"stroke\", this.state.responseColor)\n                    .attr(\"stroke-width\", 1)\n            }\n\n\n\n            // DRAW CIRCLE:\n            svgRecord\n                .append(\"circle\").attr(\"class\", \"dataCircle\")\n                //.attr(\"cx\", 35 + scaleTime(this.state.timeElapsed / 1000))\n                .attr(\"cx\", 35 + scaleTime(this.state.progress / 1000))\n                .attr(\n                    \"cy\",\n                    scaleResponses(\n                        this.state.recordHeight - ((B1 + B2 + 1) % this.state.recordHeight)\n                    )\n                )\n                .attr(\"stroke\", this.state.responseColor)\n                .attr(\"stroke-width\", 1)\n                .attr(\"r\", () => {\n                    if (reinforced === false) {\n                        return 1\n                    } else {\n                        return 3\n                    }\n                })\n                .attr(\"fill\", () => {\n                    if (reinforced === false) {\n                        return '#282c34'\n                    } else {\n                        return this.state.responseColor\n                    }\n                })\n\n\n        }\n\n\n\n        //  PUSH NEW RESPONSE:  -----------------------------------\n        let newResponse = {\n            id: newID,\n            timestamp: eventTimeStamp,\n            delta_t: eventTimeStamp - timeStart,\n            class: respClass,\n            x: x,\n            y: y,\n            co: co,\n        };\n        events.push(newResponse);\n        this.setState({ events: events });\n\n    };\n\n\n\n\n    resetDemo = () => {\n\n        // RESET ALL TIMERS: \n\n\n        // CLEAR CUMULATIVE RECORD:\n        let svgRecord = d3.select(\"#svgRecord\");\n        svgRecord.selectAll(\".dataLine\").remove();\n        svgRecord.selectAll(\".dataCircle\").remove();\n\n\n        // CLEAR SKINNER BOX :)\n        let svgMatching = d3.select(\"#svgMatching\");\n        svgMatching\n            .append(\"text\")\n            .attr(\"class\", \"introTexts\")\n            .attr(\"x\", 220)\n            .attr(\"y\", 70)\n            .attr(\"fill\", 'rgb(50, 50, 50)')\n            .attr(\"font-size\", \".9rem\")\n            .attr(\"font-family\", 'Montserrat')\n            .text(\"When ready, click START.\");\n\n\n        // RESET STATE: \n        let myState = setMatchingState();\n        this.setState(myState)\n    };\n\n\n\n\n\n\n    componentDidMount() {\n\n        let recMargin = { top: 40, right: 40, bottom: 40, left: 40 }\n        let svgWidth = document.getElementById('svgRecord').clientWidth\n        let svgHeight = document.getElementById('svgRecord').clientHeight\n\n\n        var recWidth = svgWidth - recMargin.left - recMargin.right\n        var recHeight = svgHeight - recMargin.top - recMargin.bottom\n\n\n        let svgRecord = d3.select('#svgRecord');\n\n        let gRec = svgRecord.append('g')\n            .attr(\"transform\", `translate(${recMargin.left}, ${recMargin.top})`)\n            .style(\"font\", \"12px sans-serif\")\n\n\n        let scaleTime = d3\n            .scaleLinear()\n            .domain([0, this.state.timeLimit])\n            .range([0, recWidth]);\n\n        let scaleResponses = d3\n            .scaleLinear()\n            .domain([this.state.recordHeight, 0])\n            .range([recHeight, 0]);\n\n\n        let axisTime = d3.axisBottom(scaleTime)\n        axisTime.ticks(3)\n        axisTime.tickValues([5, 10, 15])\n\n        let axisResponses = d3.axisLeft(scaleResponses)\n\n        gRec.call(axisTime)\n        gRec.call(axisResponses)\n\n        // let gTime = svgRecord\n        //     .append(\"g\")\n        //     .style(\"font\", \"12px sans-serif\")\n        // .attr(\"transform\", `translate(${recMargin.left}, ${recMargin.top})`)\n\n\n\n        // let gResponses = svgRecord\n        //     .append(\"g\")\n        //     .attr(\"transform\", `translate(35, 10)`);\n\n        //================================\n\n        svgRecord.append(\"text\").text(\"responses\")\n            .attr(\"x\", 50).attr(\"y\", 20).attr(\"font-size\", \"1rem\").attr(\"fill\", 'rgb(200, 200, 200').attr(\"font-weight\", 300)\n\n        svgRecord.append(\"text\").text(\"time (s)\")\n            .attr(\"x\", 350).attr(\"y\", 250).attr(\"font-size\", \"1rem\").attr(\"fill\", 'rgb(200, 200, 200').attr(\"font-weight\", 300)\n\n\n        // svgRecord.append(\"text\").text(\"responses\")\n        //     .attr(\"x\", 50).attr(\"y\", 20).attr(\"font-size\", \"1rem\").attr(\"fill\", 'rgb(200, 200, 200').attr(\"font-weight\", 300)\n\n        // svgRecord.append(\"text\").text(\"time (s)\")\n        //     .attr(\"x\", 350).attr(\"y\", 250).attr(\"font-size\", \"1rem\").attr(\"fill\", 'rgb(200, 200, 200').attr(\"font-weight\", 300)\n\n\n\n        let svgMatching = createSVG_Matching()\n\n        // svgMatching\n        //     .append(\"rect\").attr(\"class\", \"lever\").attr(\"id\", 'lever1')\n        //     .attr(\"x\", this.state.lever1[0])\n        //     .attr(\"y\", this.state.lever1[1])\n        //     .attr(\"width\", this.state.lever1[2])\n        //     .attr(\"height\", this.state.lever1[3])\n        //     .attr(\"fill\", \"rgb(121, 47, 0)\")\n\n        // svgMatching\n        //     .append(\"rect\").attr(\"class\", \"lever\").attr(\"id\", 'lever2')\n        //     .attr(\"x\", this.state.lever2[0])\n        //     .attr(\"y\", this.state.lever2[1])\n        //     .attr(\"width\", this.state.lever2[2])\n        //     .attr(\"height\", this.state.lever2[3])\n        //     .attr(\"fill\", \"rgb(6, 45, 6)\")\n\n\n        // var circle = svg.append('polygon')\n        //     .attr('points', \"50,50 200,50 250,100 250,150 20,50\")\n        //     .attr('stroke', '#f00')\n        //     .attr('fill', 'none');\n\n\n        svgMatching\n            .append('polygon')\n            .attr(\"class\", \"lever\")\n            .attr(\"id\", 'lever1')\n            .attr('points', this.state.polygon1)\n            .attr(\"stroke\", \"rgb(121, 47, 0)\")\n            .attr(\"fill\", \"rgb(121, 47, 0)\")\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke-width\", 5)\n\n\n        svgMatching\n            .append('polygon')\n            .attr(\"class\", \"lever\")\n            .attr(\"id\", 'lever2')\n            .attr('points', this.state.polygon2)\n            .attr(\"stroke\", \"rgb(6, 45, 6)\")\n            .attr(\"fill\", \"rgb(6, 45, 6)\")\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke-width\", 5)\n\n\n    }\n\n\n\n\n\n\n    sliderChange = (e) => {\n        this.setState({ cod1_duration: e.currentTarget.value * 1000 })\n        this.setState({ cod2_duration: e.currentTarget.value * 1000 })\n\n        var p0sec = document.getElementById(\"p0sec\")\n        var p2sec = document.getElementById(\"p2sec\")\n\n        if (e.currentTarget.value > 0) {\n            p0sec.classList.remove(\"inEffect\")\n            p0sec.classList.add(\"notInEffect\")\n            p2sec.classList.remove(\"notInEffect\")\n            p2sec.classList.add(\"inEffect\")\n        } else {\n            p2sec.classList.remove(\"inEffect\")\n            p2sec.classList.add(\"notInEffect\")\n            p0sec.classList.add(\"inEffect\")\n            p0sec.classList.remove(\"notInEffect\")\n\n        }\n    }\n\n\n\n\n\n\n\n\n    render() {\n        return (\n\n            <div className=\"matchingMetaWrapper\">\n\n                <div id=\"FastMatchingDemo\" className=\"matchingWrapper\">\n\n                    <div className=\"top\">\n\n\n                        <div className=\"matching-results\" id=\"charts\">\n                            <svg\n                                id='svgRecord'\n                                style={{\n                                    width: \"100%\",\n                                    height: \"100%\",\n                                    backgroundColor: \"#282c34\",\n                                    color: \"rgb(179,179,179)\",\n                                    fontSize: \"22px\",\n                                }}\n                            >\n                            </svg>\n\n                        </div>\n\n\n\n\n                    </div>\n\n\n\n\n                    <div className=\"bottom\">\n                        <div id='demo'></div>\n                    </div>\n\n\n                    <div\n                        className=\"top-parameters\"\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'row',\n                            width: \"100%\",\n                            margin: \"auto\",\n                            border: \"0px solid #ff0000\",\n                            backgroundColor: 'transparent',\n                            justifyContent: 'space-between',\n                            justifyItems: 'space-between',\n\n\n                        }}\n                    >\n\n\n\n\n                        {/* <button\n                                id=\"btnCOD\"\n                                style={{\n                                    backgroundColor: this.state.codColor\n                                }}\n                            >\n                                COD\n                            </button>\n\n\n                            <div className=\"divSlider\">\n\n                                <p\n                                    className=\"inEffect\"\n                                    id=\"p0sec\"\n                                    title=\"No changeover delay\"\n                                >\n                                    0s\n                                </p>\n\n\n                                <input\n                                    type=\"range\"\n                                    id=\"codSlider\"\n                                    title=\"COD duration\"\n                                    min=\"0\"\n                                    max=\"2\"\n                                    step=\"2\"\n                                    value={this.state.cod1_duration}\n                                    list=\"codSliderList\"\n                                    onInput={this.sliderChange}\n                                >\n                                    {this.value}\n                                </input>\n\n                                <p\n                                    className=\"notInEffect\"\n                                    id=\"p2sec\"\n                                >\n                                    2s\n                                </p>\n\n                            </div> */}\n\n\n\n                        <div className='divStartReset'>\n                            <button\n                                id='btnStartMatching'\n                                onClick={this.beginSession}\n                                key={nanoid()}\n                            >\n                                START\n                                </button>\n                            <button\n                                id='btnResetMatching'\n                                onClick={this.resetDemo}\n                                key={nanoid()}\n                            >\n                                CLR\n                                </button>\n                        </div>\n\n\n                        <ETBD />\n\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/hookToggleCOD.js",["450"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/matching/svgMatching.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/ETBD.js",["451","452","453","454","455","456"],"import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n//import { axisBottom, range, svg } from \"d3\";\nimport { recombineAndMutate } from \"./recombineAndMutate.js\"\n//import DrawChartPhenotypes from \"./ChartPhenotypes\"\nimport etbdState from \"./etbdState\"\nimport \"./etbd.sass\";\n\nimport { findLastTarget } from \"../matching/dataManipulation\"\n\nimport { drawETBD, addData } from \"./drawETBD\";\n//import { HistogramETBD } from \"./HistogramETBD\";\n\nexport default class ETBD extends Component {\n\n    constructor() {\n        super();\n\n        this.state = etbdState\n    }\n\n\n    showETBD = () => {\n        d3.selectAll(\".introTexts\").remove()\n\n        drawETBD(this.state.population);\n        //HistogramETBD(this.state.population);\n\n        d3.selectAll(\".lever\").style(\"opacity\", .15)\n\n\n        //  button to run ETBD:\n\n        let btnRunETBD = d3.select(\"#svgMatching\").append('g').attr(\"id\", \"btnRunETBD\")\n\n        btnRunETBD.append('text').text(\"run ETBD\")\n            .attr(\"x\", 505)\n            .attr(\"y\", 35)\n            .attr(\"width\", 100)\n            .attr(\"height\", 40)\n            .attr(\"color\", \"#222\")\n\n        btnRunETBD.append('rect').on(\"click\", this.beginSimulation)\n            .attr(\"x\", 480)\n            .attr(\"y\", 10)\n            .attr(\"width\", 120)\n            .attr(\"height\", 40)\n            .attr(\"fill\", \"#ccc\")\n            .attr(\"stroke\", \"#111\")\n            .attr(\"stroke-width\", 2)\n            .style(\"cursor\", \"pointer\")\n            .style(\"opacity\", .3)\n            .style(\"font-family\", 'Iceland')\n            .style(\"border\", '1 px solid #111')\n\n        // d3.select(\"#svgMatching\").append('text').text(\"run ETBD\")\n        //     .attr(\"x\", 505)\n        //     .attr(\"y\", 35)\n        //     .attr(\"width\", 100)\n        //     .attr(\"height\", 40)\n        //     .attr(\"color\", \"#222\")\n\n        // d3.select(\"#svgMatching\").append('rect').on(\"click\", this.beginSimulation)\n        //     .attr(\"x\", 480)\n        //     .attr(\"y\", 10)\n        //     .attr(\"width\", 120)\n        //     .attr(\"height\", 40)\n        //     .attr(\"fill\", \"#ccc\")\n        //     .attr(\"stroke\", \"#222\")\n        //     .attr(\"stroke-width\", 1)\n        //     .style(\"cursor\", \"pointer\")\n        //     .style(\"opacity\", .3)\n        //     .style(\"font-family\", 'Iceland')\n\n\n        // // display responses and reinforcers:\n\n        // // B1, r1\n        // d3.select(\"#svgMatching\").append('text').text(`${this.state.B1}`)\n        //     .attr(\"x\", 200)\n        //     .attr(\"y\", 100)\n        //     .attr(\"fill\", 'rgb(255, 128, 49)')\n\n        // d3.select(\"#svgMatching\").append('text').text(() => this.state.Points1)\n        //     .attr(\"x\", 200)\n        //     .attr(\"y\", 130)\n        //     .attr(\"stroke\", 'rgb(255, 128, 49)')\n\n        // // B2, r2\n        // d3.select(\"#svgMatching\").append('text').text(`${this.state.B2}`)\n        //     .attr(\"x\", 350)\n        //     .attr(\"y\", 100)\n        //     .attr(\"fill\", '#0c6e0c')\n\n        // d3.select(\"#svgMatching\").append('text').text(`${this.state.Points2}`)\n        //     .attr(\"x\", 350)\n        //     .attr(\"y\", 130)\n        //     .attr(\"stroke\", '#0c6e0c')\n\n\n    };\n\n\n    hideETBD = () => {\n        //d3.selectAll(\".axisLine\").remove()\n        d3.select(\"#groupHistogram\").remove()\n        d3.select(\"#btnRunETBD\").remove()\n        d3.selectAll(\".lever\").style(\"opacity\", .5)\n\n        d3.select(\"#svgMatching\").append(\"text\").text(\"When ready, click START.\")\n            .attr(\"class\", \"introTexts\")\n            .attr(\"x\", 220)\n            .attr(\"y\", 230)\n            .attr(\"fill\", 'rgb(50, 50, 50)')\n            .attr(\"font-size\", \".9rem\")\n            .attr(\"font-family\", 'Montserrat')\n\n    };\n\n\n    beginSimulation = () => {\n\n        //d3.select(\"#svgMatching\").on(\"click\", this.evaluateResponse);\n\n        let thisEvent = {\n            timestamp: performance.now(),\n            //population: genZero,\n            emission: 0,\n            class: \"\",\n            co: 0,\n            points: 0,\n        }\n\n        var myEvents = [thisEvent]\n\n        this.setState({\n            timeStart: performance.now(),\n            events: myEvents,\n        })\n\n\n        d3.selectAll(\".introTexts\").remove()\n\n        let scaleTime = d3\n            .scaleLinear()\n            .domain([0, this.state.timeLimit])\n            .range([0, 350]);\n\n        let scaleResponses = d3\n            .scaleLinear()\n            .domain([0, this.state.recordHeight])\n            .range([0, 250]);\n\n        let recordHeight = this.state.recordHeight\n\n\n\n\n        // The first two Random Intervals, between 1000 and 5000 ms, from an exponential with mean 1/RI mean. I use integers here to remove the microseconds. When the timers exceed the intervals, reinforcement becomes available.\n\n        let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\n        let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\n        d3.timeout((elapsed1) => {\n            this.setState({ r1ready: 1 });\n        }, int1);\n        d3.timeout((elapsed2) => {\n            this.setState({ r2ready: 1 });\n        }, int2);\n\n\n        // EVENTS PER SESSION (15s):\n        let r1min = `${1 / this.state.RI1 * this.state.timeLimit}`\n        let r2min = `${1 / this.state.RI2 * this.state.timeLimit}`\n\n\n\n        let overallInterval = d3.interval((te) => {\n\n            //addData(this.state.allPopulations);\n            //addData(this.state.population);\n\n            let x1 = 35 + scaleTime((te - this.state.irt) / 1000)\n            let x2 = 35 + scaleTime(te / 1000)\n            let B1 = this.state.B1\n            let B2 = this.state.B2\n\n            let y = scaleResponses(\n                recordHeight - ((B1 + B2) % recordHeight)\n            );\n\n            d3.select('#svgRecord').append(\"line\")\n                .attr(\"class\", \"dataLine\")\n                .attr(\"x1\", x1)\n                .attr(\"y1\", y)\n                .attr(\"x2\", x2)\n                .attr(\"y2\", y)\n                .attr(\"stroke\", this.state.responseColor)\n                .attr(\"stroke-width\", 1)\n\n\n            this.setState({ progress: te })\n\n\n            if (te > this.state.timeLimit * 1000) {\n                //let svgMatching = d3.select(\"#svgMatching\")\n                //svgMatching.on(\"click\", null);\n                overallInterval.stop()\n                console.log(\"etbd_state = \", this.state)\n\n            } else {\n\n                this.runETBD();\n\n            }\n\n        }, this.state.irt);\n\n\n\n\n    };\n\n\n\n\n    //-----------------------________________________\n    runETBD = () => {\n        var timeStart = this.state.timeStart;\n        var eventTimeStamp = performance.now()\n        var events = this.state.events;\n\n        this.setState({\n            timeElapsed: eventTimeStamp - timeStart\n        });\n\n\n        // RANDOM EMISSION:\n        var population = this.state.population;\n        var allPopulations = this.state.allPopulations;\n\n        var randomEmission = 0;\n        let idx = d3.randomInt(0, 9)()\n        randomEmission = population[idx]\n\n        var respClass = \"be\";\n        var co = 0;\n        var newID = 0;\n        var reinforced = false;\n        //gen = this.state.gen;\n\n\n        // PE: \n        var pe = events[events.length - 1]\n        newID = pe.id + 1\n\n        // CUMULATIVE FREQUENCIES:\n        var B1 = this.state.B1;\n        var B2 = this.state.B2;\n        var Be = this.state.Be;\n        var Points1 = this.state.Points1;\n        var Points2 = this.state.Points2;\n        var CO = this.state.CO;\n\n        var class1 = this.state.class1;\n        var class2 = this.state.class2;\n\n\n        //                             EMISSION CLASS: B1, B2, Be\n\n        // -------------------------------------------------------------- Class 1\n\n        //if (randomEmission >= class1[0] & randomEmission <= class1[-1]) {\n        if (class1.includes(randomEmission)) {\n\n            let svgMatching = d3.select(\"#svgMatching\")\n            let lv1 = svgMatching.select(\"#lever1\")\n\n            lv1\n                .style(\"opacity\", .9)\n                .attr(\"transform\", \"scale(0.98)\")\n                .attr(\"transform\", \"translate(2, 2)\")\n                .attr(\"box-shadow\", \"3px 2px 22px 1px rgba(0, 0, 0, 0.24)\")\n\n\n\n            respClass = \"b1\";\n            this.setState({\n                B1: B1 + 1,\n                responseColor: this.state.color1\n            })\n\n            // CHANGEOVER? \n            if (pe.class === \"b2\") {\n                co = 1;\n                this.setState({\n                    CO: CO + 1,\n                    responseColor: this.state.colorCO\n                })\n            }\n\n            // CHECK FOR REINFORCEMENT: \n            if (this.state.r1ready !== 0) {\n                reinforced = true\n\n                this.setState({\n                    Points1: Points1 + this.state.r1ready,\n                    r1ready: 0,\n                });\n\n                let int1 = parseInt(d3.randomExponential(1, 5)(this.state.RI1) * 1000);\n\n                d3.timeout((elapsed1) => {\n                    this.setState({ r1ready: 1 });\n                }, int1);\n            };\n\n\n\n            lv1\n                .transition().duration(300).style(\"opacity\", .5)\n                .attr(\"transform\", \"scale(1)\")\n                .attr(\"transform\", \"translate(-2, -2)\")\n                .attr(\"box-shadow\", \"none\")\n\n        };\n\n\n\n\n        // -------------------------------------------------------------- Class 2\n\n        if (class2.includes(randomEmission)) {\n\n            let svgMatching = d3.select(\"#svgMatching\")\n            let lv2 = svgMatching.select(\"#lever2\")\n\n            lv2\n                .style(\"opacity\", .9)\n                .attr(\"transform\", \"scale(0.98)\")\n                .attr(\"transform\", \"translate(2, 2)\")\n                .attr(\"box-shadow\", \"3px 2px 22px 1px rgba(0, 0, 0, 0.24)\")\n\n\n            respClass = \"b2\";\n            this.setState({\n                B2: B2 + 1,\n                responseColor: this.state.color2\n            });\n\n            // CHANGEOVER? \n            if (pe.class === \"b1\") {\n                co = 1;\n                this.setState({\n                    CO: CO + 1,\n                    responseColor: this.state.colorCO\n                });\n            }\n\n            // CHECK FOR REINFORCEMENT: \n            if (this.state.r2ready !== 0) {\n                reinforced = true\n\n                this.setState({\n                    Points2: Points2 + this.state.r2ready,\n                    r2ready: 0,\n                });\n\n                let int2 = parseInt(d3.randomExponential(1, 5)(this.state.RI2) * 1000);\n\n                d3.timeout((elapsed2) => {\n                    this.setState({ r2ready: 1 });\n                }, int2);\n            };\n\n            lv2\n                .transition().duration(300).style(\"opacity\", .5)\n                .attr(\"transform\", \"scale(1)\")\n                .attr(\"transform\", \"translate(-2, -2)\")\n                .attr(\"box-shadow\", \"none\")\n        };\n\n\n\n        //    ----------------   CUMULATIVE RECORD  ----------------\n\n\n\n\n        if (respClass === \"b1\" | respClass === \"b2\") {\n\n\n            // SVG CUMULATIVE RECORD:\n            let svgRecord = d3.select(\"#svgRecord\");\n\n            let scaleTime = d3\n                .scaleLinear()\n                .domain([0, this.state.timeLimit])\n                .range([0, 350]);\n\n            let scaleResponses = d3\n                .scaleLinear()\n                .domain([0, this.state.recordHeight])\n                .range([0, 250]);\n\n            // LINE COORDINATES:\n\n            let LTR = findLastTarget(events)  // Last Target Response\n            let delta_t = LTR.timestamp - this.state.timeStart\n\n            let px = 35 + scaleTime(this.state.progress / 1000);\n\n            let myBehavior = this.state.B1 + this.state.B2\n\n            let py = scaleResponses(\n                this.state.recordHeight - ((myBehavior - 1) % this.state.recordHeight)\n            );\n\n            let py1 = scaleResponses(\n                this.state.recordHeight - ((myBehavior) % this.state.recordHeight)\n            );\n\n\n            // DRAW LINE     (but not if the needle needs reset):\n            if ((B1 + B2 + 1) % this.state.recordHeight !== 0) {\n                svgRecord.append(\"line\").attr(\"class\", \"dataLine\")\n                    .attr(\"x1\", px)\n                    .attr(\"y1\", py)\n                    .attr(\"x2\", px)\n                    .attr(\"y2\", py1)\n                    .attr(\"stroke\", this.state.responseColor)\n                    .attr(\"stroke-width\", 1)\n            }\n\n\n            // DRAW CIRCLE:\n            svgRecord\n                .append(\"circle\").attr(\"class\", \"dataCircle\")\n                //.attr(\"cx\", 35 + scaleTime(this.state.timeElapsed / 1000))\n                .attr(\"cx\", 35 + scaleTime(this.state.progress / 1000))\n                .attr(\n                    \"cy\",\n                    scaleResponses(\n                        this.state.recordHeight - ((B1 + B2 + 1) % this.state.recordHeight)\n                    )\n                )\n                .attr(\"stroke\", this.state.responseColor)\n                .attr(\"stroke-width\", 1)\n                .attr(\"r\", () => {\n                    if (reinforced === false) {\n                        return 1\n                    } else {\n                        return 3\n                    }\n                })\n                .attr(\"fill\", () => {\n                    if (reinforced === false) {\n                        return '#282c34'\n                    } else {\n                        return this.state.responseColor\n                    }\n                })\n\n\n            // SVG MATCHING:\n\n            //console.log(randomEmission)\n\n            //let svgMatching = d3.select(\"#svgMatching\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 180).attr(\"y\", 90).attr(\"font-size\", \".7rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 205).attr(\"y\", 90).attr(\"font-size\", \".7rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 180).attr(\"y\", 105).attr(\"font-size\", \".7rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 205).attr(\"y\", 105).attr(\"font-size\", \".8rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 230).attr(\"y\", 90).attr(\"font-size\", \".8rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 230).attr(\"y\", 105).attr(\"font-size\", \".8rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 255).attr(\"y\", 90).attr(\"font-size\", \".7rem\")\n\n            // svgMatching.append(\"text\").text(`${randomEmission}`)\n            //     .attr(\"x\", 255).attr(\"y\", 105).attr(\"font-size\", \".7rem\")\n\n        };\n\n\n\n        //  RECORD THIS EVENT:\n        let newResponse = {\n            id: newID,\n            timestamp: eventTimeStamp,\n            class: respClass,\n            emission: randomEmission,\n            reinforced: reinforced,\n            population: population,\n            co: co,\n            // points1: points1,\n            // points2: points2,\n        };\n\n        events.push(newResponse);\n        this.setState({ events: events });\n\n\n\n\n\n\n\n\n\n        //               CREATE NEW_POPULATION:\n\n\n\n\n        var next_population = []\n\n        if (reinforced === false) {\n\n            for (let j = 0; j < population.length; j++) {\n\n                let idx1 = d3.randomInt(9)()\n                let p1 = population[idx1]\n                let idx2 = d3.randomInt(population.length)()\n                let p2 = population[idx2]\n\n                var phenRandom = recombineAndMutate(p1, p2, this.state.mutation_rate)\n\n                if (this.state.repertoire.includes(phenRandom)) {\n                    next_population.push(phenRandom)\n                } else {\n                    next_population.push(phenRandom % this.state.repertoire.length)\n                }\n\n            }\n\n            addData(next_population)\n            this.setState({ population: next_population })\n\n            // next_population.forEach(item => {\n            //     allPopulations.push(item)\n            // })\n\n            //this.setState({ allPopulations: allPopulations })\n\n            //this.setState({ responseColor: \"grey\" });\n\n\n        } else if (reinforced === true) {\n\n            var fitnessValues = []\n\n            population.forEach(phenotype => {\n                let phen_dif = Math.abs(phenotype - randomEmission)\n                fitnessValues.push(phen_dif)\n            })\n\n\n            // for each behavior in the population:\n            for (let j = 0; j < population.length; j++) {\n\n\n                // Get two parents:\n\n                var parents = []\n\n                while (parents.length < 2) {\n                    var randomFitness = parseInt(d3.randomExponential(1, 300)(this.state.Miu1) * 100);\n                    var relativeFitnessValues = []\n\n                    fitnessValues.forEach(fitness => {\n                        let fitness_dif = Math.abs(fitness - randomFitness)\n                        relativeFitnessValues.push(fitness_dif)\n                    })\n\n\n                    var closestIndex = d3.minIndex(relativeFitnessValues)\n                    var closestPhen = population[closestIndex]\n\n                    if (!parents.includes(closestPhen)) {\n                        parents.push(closestPhen)\n                    }\n                }\n\n\n                // CHILD BEHAVIOR:\n                //var phenFitness = recombineAndMutate(p1, p2, 0.50)\n                var child = recombineAndMutate(parents[0], parents[1], this.state.mutation_rate)\n\n                //console.log(\"emission: \", randomEmission, \"; parents: \", parents, \" --> \", child)\n\n\n                // IS THIS TO WRAP THE REPERTOIRE ... ?? \n                if (this.state.repertoire.includes(child)) {\n                    next_population.push(child)\n                } else {\n                    next_population.push(child % this.state.repertoire.length)\n                }\n\n                /* console.log(\"population: \", population, \"; \", randomEmission)\n                console.log(\"fitnessValues: \", fitnessValues)\n                console.log(\"randomFitness: \", randomFitness)\n                console.log(\"relFitnessVals: \", relativeFitnessValues)\n                console.log(\"closestPhen: \", closestPhen, \"; index: \", closestIndex, \"; parent: \", closestPhen)\n                console.log(\"-----------------------------\") */\n\n\n                // let idx1 = d3.randomInt(9)()\n                // let p1 = population[idx1]\n                // let idx2 = d3.randomInt(population.length)()\n                // let p2 = population[idx2]\n\n                //var phenFitness = recombineAndMutate(p1, p2, 0.50)\n\n                // if (this.state.repertoire.includes(phenFitness)) {\n                //     next_population.push(phenFitness)\n                // } else {\n                //     next_population.push(phenFitness % this.state.repertoire.length)\n                // }\n\n\n            };\n\n            addData(next_population)\n            this.setState({ population: next_population })\n\n            // next_population.forEach(item => {\n            //     allPopulations.push(item)\n            // })\n\n            // this.setState({ allPopulations: allPopulations })\n\n            //this.setState({ responseColor: \"grey\" });\n        };\n\n\n\n\n\n\n\n        //}\n\n        //}, this.state.irt); // END OF TIMER\n\n    } // END OF FUNCTION runETBD()\n\n\n\n\n    resetETBD = () => {\n\n        // RESET ALL TIMERS: \n\n\n        // CLEAR CUMULATIVE RECORD:\n        let svgRecord = d3.select(\"#svgRecord\");\n        svgRecord.selectAll(\".dataLine\").remove();\n        svgRecord.selectAll(\".dataCircle\").remove();\n\n        let svgMatching = d3.select(\"#svgMatching\")\n        svgMatching.selectAll(\".histRect\").remove()\n\n\n        // CLEAR SKINNER BOX :)\n        //let svgMatching = d3.select(\"#svgMatching\");\n\n        // svgMatching\n        //     .append(\"text\")\n        //     .attr(\"class\", \"introTexts\")\n        //     .attr(\"x\", 220)\n        //     .attr(\"y\", 70)\n        //     .attr(\"fill\", 'rgb(50, 50, 50)')\n        //     .attr(\"font-size\", \".9rem\")\n        //     .attr(\"font-family\", 'Montserrat')\n        //     .text(\"When ready, click START.\");\n\n\n        // RESET STATE: \n        this.setState(etbdState)\n\n        let genZero = []\n        let n = this.state.N\n        for (let i = 0; i < n; i++) {\n            let b = d3.randomInt(1000)()\n            genZero.push(b)\n        }\n        this.setState({ population: genZero })\n        this.setState({ allPopulations: genZero })\n    };\n\n\n\n    componentDidMount() {\n        // CREATE RANDOM POPULATION\n        let genZero = []\n        let n = this.state.N\n        for (let i = 0; i < n; i++) {\n            let b = d3.randomInt(1000)()\n            genZero.push(b)\n        }\n        this.setState({ population: genZero })\n        this.setState({ allPopulations: genZero })\n\n        d3.select(\"#btnStartETBD\").on(\"click\", this.beginSimulation)\n        d3.select(\"#btnResetETBD\").on(\"click\", this.resetETBD)\n    };\n\n\n\n\n    // BAR CHART REPERTOIRE ======================================      REPERTOIRE BAR CHART: \n\n\n\n    // var myPhens = phensTest.filter(item => item.present.length > 0)\n    // DrawChartPhenotypes(myPhens, [d3.min(this.state.repertoire), d3.max(this.state.repertoire)])\n\n\n\n\n\n\n    // svgMatching: ===========================================================  svgMatching\n    // var svg = d3\n    //     .select(\"#demo\")\n    //     .append(\"svg\")\n    //     .attr(\"id\", \"svgMatching\")\n    //     .attr(\"width\", \"100%\")\n    //     .attr(\"height\", \"100%\");\n\n    // svg.on(\"click\", this.runETBD);\n\n    // var svgETBD = d3\n    //     .select(\"#demoETBD\")\n    //     .append(\"svg\")\n    //     .attr(\"id\", \"svgETBD\")\n    //     .attr(\"width\", \"100%\")\n    //     .attr(\"height\", \"100%\");\n\n    // svgETBD.on(\"click\", this.runETBD);\n    //}\n\n\n    // sliderChange = (e) => {\n    //     this.setState({ cod1_duration: e.currentTarget.value * 1000 })\n    //     this.setState({ cod2_duration: e.currentTarget.value * 1000 })\n    // }\n\n    // dummyFunc = () => {\n\n    //     d3.select(\"#svgMatching\").append('text').text(`${this.state.B1}`)\n    //         .attr(\"x\", 200)\n    //         .attr(\"y\", 100)\n    //         .attr(\"fill\", 'rgb(255, 128, 49)')\n\n    //     d3.select(\"#svgMatching\").append('text').text(`${this.state.Points1}`)\n    //         .attr(\"x\", 200)\n    //         .attr(\"y\", 130)\n    //         .attr(\"stroke\", 'rgb(255, 128, 49)')\n\n    //     // B2, r2\n    //     d3.select(\"#svgMatching\").append('text').text(`${this.state.B2}`)\n    //         .attr(\"x\", 350)\n    //         .attr(\"y\", 100)\n    //         .attr(\"fill\", '#0c6e0c')\n\n    //     d3.select(\"#svgMatching\").append('text').text(`${this.state.Points2}`)\n    //         .attr(\"x\", 350)\n    //         .attr(\"y\", 130)\n    //         .attr(\"stroke\", '#0c6e0c')\n    // }\n\n    render() {\n\n\n        return (\n\n            <>\n                {/* <div className=\"divShowHideETBD\">\n                    <button id=\"btnShowETBD\" onClick={this.showETBD}>Show ETBD</button>\n                    <button id=\"btnClearETBD\" onClick={this.hideETBD}>Hide</button>\n                </div> */}\n\n                <div className=\"divStartResetETBD\">\n                    <button id=\"btnStartETBD\" onClick={this.beginSimulation}>run ETBD</button>\n                    <button id=\"btnResetETBD\" onClick={this.resetETBD}>reset</button>\n                </div>\n\n            </>\n\n\n\n        );\n    };\n}\n//}\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/recombineAndMutate.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/etbdState.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/ChartPhenotypes.js",["457","458"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/drawETBD.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd/HistogramETBD.js",["459","460","461","462"],"import React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nexport function HistogramETBD(props) {\n\n    //var [data, setData] = useState([])\n    var data = props\n\n    useEffect(() => {\n        var margin = { top: 75, left: 120, bottom: 100, right: 120 }\n        var svgWidth = document.getElementById(\"svgMatching\").clientWidth\n        var svgHeight = document.getElementById(\"svgMatching\").clientHeight\n        var width = svgWidth - margin.left - margin.right\n        var height = svgHeight - margin.top - margin.bottom\n\n\n        var X_scale = d3.scaleLinear().domain([0, 256]).range([0, width]);\n        var Y_scale = d3.scaleLinear().range([height, 0]).domain([0, 20])\n\n        var groupHistogram = d3.select(\"#svgMatching\")\n            .append(\"g\")\n            .attr(\"id\", \"groupHistogram\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        groupHistogram.select(\"#hist_X_axis\")\n            .attr(\"class\", \"axisLine\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(d3.axisBottom(X_scale));\n\n\n\n        // Turn data array into bins; \n        // Must be done before calling the Y_axis.\n        var binGenerator = d3.bin()\n            .value(function (d) { return d; })\n            .domain(X_scale.domain())\n            .thresholds(X_scale.ticks(8));\n\n        var bins = binGenerator(data);\n\n        groupHistogram.select(\"#hist_Y_axis\")\n            .attr(\"class\", \"axisLine\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(d3.axisBottom(X_scale));\n\n        groupHistogram.selectAll(\"rect\")\n            .data(bins)\n            .join(\"rect\")\n            .attr(\"class\", \"histRect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", function (d) { return `translate(${X_scale(d.x0)} , ${Y_scale(d.length)})` })\n            .attr(\"width\", function (d) { return X_scale(d.x1) - X_scale(d.x0) - 1 })\n            .attr(\"height\", function (d) { return height - Y_scale(d.length); })\n            .style(\"fill\", \"#69b3a2\")\n    }, []);\n\n\n\n\n}",["463","464"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/Qual.js",["465"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/ImagesContainer.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/teaching/OrderFellowship.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/vitae/infoPublications.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/vitae/infoConferences.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/vitae/MyVitae.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/CollapseHook.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HammingDemo.js",["466","467"],"import \"./hamming_style.sass\";\nimport '../etbd_input/input_styles.sass'\n\nimport React from \"react\";\n//import parse from \"html-react-parser\"\n\nimport { hdValues } from \"./hdValues\";\nimport { hdCodValues } from \"./hdCodValues\";\n\n\n// import DrawPhenotypes from \"./drawPhenotypes\";\nimport HammingDistances from \"./HammingDistances\"\n\nimport InputTemplate from \"../etbd_input/InputTemplate\";\nimport HeatMapHook from \"./HeatmapHook\";\nimport TableHD from \"./TableHook\"\n\n\nexport default class HammingDemo extends React.Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            range1: 0,\n            limit1: 471,\n            boundary1: 511,\n            boundary2: 512,\n            limit2: 552,\n            range2: 1023,\n            hdValues: hdValues,\n            hdCodValues: hdCodValues,\n            lim1: 471,\n            lim2: 512,\n            lim3: 553,\n            hdSame: 0,\n            hdOther: 0\n        };\n\n\n\n        this.updateValue = this.updateValue.bind(this)\n        // this.decreaseValue = this.decreaseValue.bind(this)\n        // this.increaseValue = this.increaseValue.bind(this)\n\n        //this.handleFieldChange = this.handleFieldChange.bind(this)\n    };\n\n\n    updateValue = (e) => {\n        e.preventDefault();\n        let a22 = e.target.name\n        let b22 = e.target.value\n        this.setState({ [a22]: parseInt(b22) })\n        console.log(\"target name & value: \", a22, b22)\n    };\n\n\n    // handleFieldChange = (e) => {\n    //     //e.preventDefault();\n    //     let a22 = e.target.name\n    //     let b22 = e.target.value\n    //     this.setState({ [a22]: parseInt(b22) })\n    //     console.log(\"target name & value: \", a22, b22)\n    // };\n\n\n    decreaseValue = (e) => {\n        //e.preventDefault();\n        let a22 = e.target.name\n        let b22 = e.target.value\n        this.setState({ [a22]: parseInt(b22) })\n    };\n\n    increaseValue = (e) => {\n        //e.preventDefault();\n        let a22 = e.target.name\n        let b22 = e.target.value\n        this.setState({ [a22]: parseInt(b22) })\n    };\n\n\n    componentDidMount() {\n        // let c1 = d3.range(471, 512)\n        // let c11 = d3.range(471, 553)\n        // let hdScatter = loadHammingDataOriginal(c11, c1)\n        // this.setState({ scatterData: hdScatter })\n        // console.log(this.state.lim1)\n    };\n\n\n    componentDidUpdate() {\n        //console.log(\"HammingDemo did update\")\n    };\n\n\n    render() {\n\n        var formFields = Object.entries(this.state).map((key, value) => {\n\n            let exceptions = ['hdValues', 'range1', 'range2', 'hdCodValues', \"lim1\", \"lim2\", \"lim3\", 'hdSame', 'hdOther', \"\"];\n\n            if (exceptions.includes(key[0]) === true) {\n                return\n            } else {\n                return (\n                    <InputTemplate\n                        key={key[0]}\n                        name={key[0]}\n                        value={key[1]}\n                        updateValue={this.updateValue}\n                    >\n                    </InputTemplate>\n                )\n            }\n        })\n\n        // var hdScatter = this.state.hdCodValues.filter(\n        //     item => item.variable > this.state.boundary1 - 3\n        //         & item.variable <= this.state.boundary1\n        //         & item.group > this.state.boundary1 - 3\n        //         & item.group < this.state.boundary2 + 3\n        // )\n        //console.log(hdScatter)\n\n\n\n        return (\n\n            <>\n                <div id=\"divHamming\">\n\n                    {/* <div\n                        style={{display: \"flex\", flexDirection: \"row\",}}>\n                        <svg id=\"svgHamming\"></svg>\n                    </div> */}\n\n\n\n                    {/* <Scatter2\n                        limit1={this.state.limit1}\n                        limit2={this.state.limit2}\n                        boundary1={this.state.boundary1}\n                        boundary2={this.state.boundary2}\n                    /> */}\n\n\n\n\n                    <HeatMapHook\n                        //myData={hdScatter}\n                        limit1={this.state.limit1}\n                        limit2={this.state.limit2}\n                        boundary1={this.state.boundary1}\n                        boundary2={this.state.boundary2}\n                    />\n\n\n\n                    {/* <TableHD\n                        limit1={this.state.limit1}\n                        limit2={this.state.limit2}\n                        boundary1={this.state.boundary1}\n                        boundary2={this.state.boundary2}\n                    /> */}\n\n                    <HammingDistances\n                        myData={this.state.hdValues}\n                        limit1={this.state.limit1}\n                        limit2={this.state.limit2}\n                        boundary1={this.state.boundary1}\n                        boundary2={this.state.boundary2}\n                    />\n\n\n                    {/* <DrawPhenotypes\n                        myData={this.state.hdValues}\n                        limit1={this.state.limit1}\n                        limit2={this.state.limit2}\n                        boundary1={this.state.boundary1}\n                        boundary2={this.state.boundary2}\n                    /> */}\n\n\n\n\n                    <div className=\"divButtons\">\n                        {formFields}\n                    </div>\n\n\n                    <div className=\"divButtons\">\n\n                        <button\n                            name=\"reset\"\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\n                            onClick={() => {\n                                this.setState({\n                                    limit1: 303,\n                                    boundary1: 343,\n                                    boundary2: 344,\n                                    limit2: 384,\n                                })\n                            }}\n                        >???</button>\n\n\n                        <button\n                            name=\"reset\"\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\n                            onClick={() => {\n                                this.setState({\n                                    limit1: 407,\n                                    boundary1: 447,\n                                    boundary2: 448,\n                                    limit2: 488,\n                                })\n                            }}\n                        >1.4</button>\n\n\n                        <button\n                            name=\"reset\"\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\n                            onClick={() => {\n                                this.setState({\n                                    limit1: 215,\n                                    boundary1: 255,\n                                    boundary2: 256,\n                                    limit2: 296,\n                                })\n                            }}\n                        >3.4</button>\n\n\n                        <button\n                            name=\"reset\"\n                            title=\"historical standard, typical sensitivity, HDcod is about 4.3.\"\n                            onClick={() => {\n                                this.setState({\n                                    limit1: 471,\n                                    boundary1: 511,\n                                    boundary2: 512,\n                                    limit2: 552,\n                                })\n                            }}\n                        >4.4</button>\n\n\n\n                    </div>\n\n\n                    {/* <div\n                        id=\"divHeatMap\"\n                        style={{\n                            //backgroundColor: \"#446b58\",\n\n                        }}\n                    >\n                        <svg id=\"svgHeatMap\"></svg>\n\n                        <div id=\"ttHeatMap\"></div>\n                    </div > */}\n\n\n                    {/* {drawHeatMap(\n                        // this.state.hdCodValues.filter(\n                        //     item => item.variable > 506\n                        //         & item.variable <= 511\n                        //         & item.group > 506\n                        //         & item.group < 517\n                        // ),\n                        hdScatter,\n                        [],\n                        //this.state.tick_values_heat,\n                        [this.state.limit1, this.state.boundary1],\n                    )\n                    } */}\n\n\n                </div>\n            </>\n\n        )\n    }\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/hammingFunctions.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HeatmapTemplate.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_input/InputClasses.js",["468","469","470"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_input/InputTemplate.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/defaultDataPhens.js",[],["471","472"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/hdValues.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/drawPhenotypes.js",["473"],"import \"./hamming_style.sass\";\nimport \"./phenotypes.sass\";\n\n//import parse from \"html-react-parser\"\nimport * as d3 from \"d3\";\n\nimport { useEffect } from \"react\";\n//import { useRef } from \"react\";\n\n\nfunction DrawPhenotypes(props) {\n\n\n    useEffect(() => {\n        let margin = { top: 20, right: 20, bottom: 50, left: 30, }\n        let svgWidth = 550\n        let svgHeight = 150\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n\n        let X_Band = d3.scaleBand()\n            .range([0, width])\n            .domain(\n                props.myData.map((d) => {\n                    return d.hdNext.hdLabel\n                }))\n            .padding(0.0);\n\n\n        // let X_Linear = d3.scaleLinear()\n        //     .range([0, width])\n        //     .domain([props.range1, props.range2])\n\n        let Y_Linear = d3.scaleLinear().range([height, 0]).domain([1, 10]);\n\n\n\n        let chartPhenotypes\n        let xx = document.getElementById('chartPhenotypes')\n\n        if (xx === null) {\n            //console.log(\"no such group\")\n\n            chartPhenotypes = d3.select(\"#svgPhenotypes\").append('g')\n                .attr(\"id\", \"chartPhenotypes\")\n                .attr(\"transform\",\n                    `translate(${margin.left},${margin.top})`);\n\n            chartPhenotypes\n                .append(\"g\")\n                .attr(\"color\", \"yellow\")\n                .attr(\"font-size\", \"10px\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\n                .call(\n                    d3.axisBottom(X_Band)\n                        .tickPadding(5)\n                        .tickSize(0)\n                )\n                .selectAll(\"text\").remove()\n\n            // chartPhenotypes\n            //     .append(\"g\")\n            //     .attr(\"class\", \"hammingLine\")\n            //     .attr(\"transform\", \"translate(0,\" + height + \")\")\n            //     .call(\n            //         d3.axisBottom(X_Linear)\n            //             //.tickPadding(2)\n            //             //.tickSize(0)\n            //             .ticks(5)\n            //     )\n\n            chartPhenotypes\n                .append(\"g\")\n                .attr(\"class\", \"hammingLine\")\n                .call(\n                    d3.axisLeft(Y_Linear)\n                        .tickValues([1, 5, 10])\n                )\n        } else {\n            chartPhenotypes = d3.select(\"#chartPhenotypes\")\n        }\n\n\n        // average HD SELF:\n        chartPhenotypes.append(\"text\")\n            .attr(\"fill\", \"lime\")\n            .attr(\"x\", 100)\n            .attr(\"y\", 0)\n            .text(\"props.hdSelf\")\n\n        // average HD OTHER:\n        chartPhenotypes.append(\"text\")\n            .attr(\"fill\", \"orange\")\n            .attr(\"x\", 300)\n            .attr(\"y\", 0)\n            .text(\"props.hdOther\")\n\n\n        var updateChart = () => {\n            let myBins\n            let bb = document.getElementById(\"#myBins\")\n\n            if (bb === null) {\n                myBins = chartPhenotypes.append('g').attr(\"id\", \"myBins\").attr(\"class\", \"hammingBarPhens\")\n                    .selectAll(\"rect\")\n                    .data(props.myData)\n\n            } else {\n                myBins = d3.select(\"#myBins\").data(props.myData)\n            }\n\n            myBins.enter().append(\"rect\")\n                .attr(\"x\", (d) => X_Band(d.hdNext.hdLabel))\n                .attr(\"y\", (d) => Y_Linear(d.hdNext.hd))\n                .attr(\"width\", X_Band.bandwidth())\n                .attr(\"height\", (d) => height - Y_Linear(d.hdNext.hd))\n                .attr(\"stroke-width\", 1)\n\n            myBins.exit().remove();\n        }\n\n        updateChart()\n\n\n    }, []);\n\n\n\n\n\n    useEffect(() => {\n\n        var updateColors = () => {\n            let groupBins = d3.select(\"#myBins\")\n            let bins1 = groupBins.selectAll(\"rect\")\n\n            bins1.attr(\"fill\", (d) => {\n                if (d.phenotype >= props.limit1 & d.phenotype <= props.boundary1) {\n                    return 'rgb(28, 255, 28)'\n                } else if (d.phenotype >= props.boundary2 & d.phenotype <= props.limit2) {\n                    return 'rgb(255, 128, 49)'\n\n                } else {\n                    return '#fff'\n                }\n            })\n            bins1.attr(\"stroke\", (d) => {\n                if (d.phenotype >= props.limit1 & d.phenotype <= props.boundary1) {\n                    return 'rgb(28, 255, 28)'\n                } else if (d.phenotype >= props.boundary2 & d.phenotype <= props.limit2) {\n                    return 'rgb(255, 128, 49)'\n                } else {\n                    return 'none'\n                }\n            })\n        }\n\n        updateColors()\n\n\n    }, [props.limit1, props.boundary1, props.limit2, props.boundary2]\n    );\n\n\n\n\n\n\n\n\n\n\n\n    return (\n\n        <>\n            <div\n                id=\"divPhenotypes\"\n                style={{\n                    //backgroundColor: \"#446b58\",\n                    position: \"relative\",\n                    marginTop: \"10px\",\n                }}\n            >\n                <svg\n                    id=\"svgPhenotypes\"\n                ></svg>\n\n                {/* <div id=\"ttPhenotypes\"></div> */}\n\n            </div >\n\n        </>\n\n    )\n}\n\n\nexport default DrawPhenotypes;\n\n\n\n\n\n\n    // var highlightClasses = () => {\n\n    //     chartPhenotypes.selectAll(\"text\")\n    //         .attr(\"font-size\", \"14px\")\n    //         .attr(\"transform\", (d) => {\n    //             if (d === limit1) {\n    //                 return \"translate(-20,0)rotate(0)\"\n    //             } else if (d === boundary1) {\n    //                 return \"translate(-10,0)rotate(0)\"\n    //             } else if (d === boundary2) {\n    //                 return \"translate(10,0)rotate(0)\"\n    //             } else if (d === limit2) {\n    //                 return \"translate(20,0)rotate(0)\"\n    //             }\n    //         })\n\n    //     chartPhenotypes.selectAll(\"text\").attr(\"fill\", (d) => {\n    //         if (d === limit1) {\n    //             return \"lime\"\n    //         } else if (d === boundary1) {\n    //             return \"lime\"\n    //         } else if (d === boundary2) {\n    //             return \"orange\"\n    //         } else if (d === limit2) {\n    //             return \"orange\"\n    //         } else {\n    //             return \"#ddd\"\n    //         }\n    //     })\n\n\n    // };\n\n\n    // // X LINEAR\n    // chartPhenotypes\n    //     .append(\"g\")\n    //     .attr(\"class\", \"yellowLine\")\n    //     .attr(\"transform\", \"translate(0,\" + (height + 10) + \")\")\n    //     .call(\n    //         d3.axisBottom(X_Linear)\n    //             .tickPadding(10)\n    //             .tickValues([1, limit1, limit2, 1000,])\n    //             //.ticks(10)\n    //             .tickSize(0)\n    //     )\n    //     .selectAll('text')\n    //     .attr(\"fill\", (d) => {\n    //         if (d === limit1) {\n    //             return \"lime\"\n    //         } else if (d === boundary1) {\n    //             return \"lime\"\n    //         } else if (d === boundary2) {\n    //             return \"orange\"\n    //         } else if (d === limit2) {\n    //             return \"orange\"\n    //         } else {\n    //             return \"#ddd\"\n    //         }\n    //     })\n\n\n\n\n\n\n\n\n    // // // LIMITS AND MOUSE GESTURES: -------------------------------------------------------\n\n    // let gBoundariesPhenotypes = chartPhenotypes.append(\"g\").attr(\"id\", \"gBoundariesPhenotypes\")\n\n    // //LIMIT 1:\n    // gBoundariesPhenotypes.append(\"line\")\n    //     .attr(\"id\", \"L1\")\n    //     .attr(\"class\", \"boundary left\")\n    //     .attr(\"dragging\", true)\n    //     .attr('z-index', 10)\n    //     .attr(\"x1\", X_Linear(this.props.limit1))\n    //     .attr(\"x2\", X_Linear(this.props.limit1))\n    //     .attr(\"y1\", Y_Linear(-7))\n    //     .attr(\"y2\", Y_Linear(-4))\n\n    // //HD BETWEEN:\n    // gBoundariesPhenotypes.append(\"line\")\n    //     .attr(\"id\", \"L2\")\n    //     .attr(\"class\", \"boundary\")\n    //     .attr('z-index', 10)\n    //     .attr(\"dragging\", true)\n    //     .attr(\"x1\", X_Linear(this.props.boundary2))\n    //     .attr(\"x2\", X_Linear(this.props.boundary2))\n    //     .attr(\"y1\", Y_Linear(-7))\n    //     .attr(\"y2\", Y_Linear(-4))\n    //     .attr(\"fill\", \"yellow\")\n    //     .attr(\"stroke\", \"yellow\")\n\n    // //LIMIT 2:\n    // gBoundariesPhenotypes.append(\"line\")\n    //     .attr(\"id\", \"L3\")\n    //     .attr(\"class\", \"boundary right\")\n    //     .attr(\"dragging\", true)\n    //     .attr(\"x1\", X_Linear(this.props.limit2))\n    //     .attr(\"x2\", X_Linear(this.props.limit2))\n    //     .attr(\"y1\", Y_Linear(-7))\n    //     .attr(\"y2\", Y_Linear(-4));\n\n    // // MOUSE OVER:\n    // gBoundariesPhenotypes.selectAll('line').on('mouseover', function (e) {\n    //     //e.preventDefault()\n    //     let id = e.target.id\n    //     let xx = e.layerX\n    //     let yy = e.layerY\n\n    //     // console.log(id)\n    //     // console.log(this)\n    //     // console.log(\"--------------------\")\n    // })\n\n    // // MOUSE OUT:\n    // gBoundariesPhenotypes.selectAll('line').on('mouseout', function (e) {\n    //     //e.preventDefault()\n    //     let id = e.target.id\n    //     let xx = e.layerX\n    //     let yy = e.layerY\n    // })\n\n    // DRAG:\n    //gBoundariesPhenotypes.selectAll(\"line\").call(d3.drag().on('drag', this.props.onDrag))\n\n    // render() {\n    //     return (\n\n    //         <>\n    //             <div\n    //                 id=\"divPhenotypes\"\n    //                 style={{\n    //                     backgroundColor: \"#446b58\",\n    //                     position: \"relative\",\n    //                     marginTop: \"10px\",\n    //                 }}\n    //             >\n    //                 <svg id=\"svgPhenotypes\"></svg>\n    //                 <div id=\"ttPhenotypes\"></div>\n    //             </div >\n\n    //         </>\n\n    //     )\n    // }\n\n\n\n\n\n\n\n\n//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n// FROM hammingDemo.js\n\n\n// drawPhenotypes = () => {\n\n//     let svgHamming, chartClasses;\n//     let svgWidth, svgHeight, width, height;\n//     let margin = { top: 30, left: 30, bottom: 135, right: 300 }\n\n//     if (!document.getElementById('chartClasses')) {\n//         console.log(\"chartClasses doesnt exist.\")\n//         svgWidth = 550\n//         svgHeight = 250\n//         width = svgWidth - margin.left - margin.right\n//         height = svgHeight - margin.top - margin.bottom\n//     } else {\n//         console.log(\"it already exists\")\n//         svgWidth = document.getElementById(\"svgHamming\").clientWidth\n//         svgHeight = document.getElementById(\"svgHamming\").clientHeight\n//         width = svgWidth - margin.left - margin.right\n//         height = svgHeight - margin.top - margin.bottom\n//     };\n\n//     svgHamming = d3.select(\"#svgHamming\")\n\n//     chartClasses = svgHamming\n//         .append('g')\n//         .attr(\"id\", \"chartClasses\")\n//         .attr(\"transform\",\n//             `translate(${margin.left},${margin.top})`);\n\n\n//     let Xscale = d3.scaleBand()\n//         .range([0, width])\n//         .domain(this.state.hdValues.slice(this.state.limit1, this.state.limit2 + 1).map((d) => {\n//             return d.hdNext.hdLabel\n//         }))\n//         .padding(0.3);\n\n//     chartClasses\n//         .append(\"g\")\n//         .attr(\"class\", \"hammingLine\")\n//         .attr(\"transform\", \"translate(0,\" + height + \")\")\n//         .call(\n//             d3.axisBottom(Xscale)\n//                 .tickPadding(20)\n//                 .tickSize(0)\n//         )\n//         .selectAll(\"text\").remove()\n\n\n//     let Yscale = d3.scaleLinear()\n//         .range([height, 0])\n//         .domain([0, 10]);\n\n//     chartClasses\n//         .append(\"g\")\n//         .attr(\"class\", \"axisLine\")\n//         .call(d3.axisLeft(Yscale).tickValues([1, 5, 10]))\n\n//     chartClasses\n//         .selectAll(\"rect\")\n//         .data(this.state.hdValues.slice(this.state.limit1, this.state.limit2 + 1))\n//         .enter()\n//         .append(\"rect\")\n//         .attr(\"fill\", (d) => {\n//             if (d.phenotype <= this.state.boundary1 & d.phenotype >= this.state.limit1) {\n//                 return 'lime'\n//             } else if (d.phenotype >= this.state.boundary2 & d.phenotype <= this.state.limit2) {\n//                 return 'orange'\n//             } else {\n//                 return '#222'\n//             }\n//         })\n//         .attr(\"x\", (d) => Xscale(d.hdNext.hdLabel))\n//         .attr(\"y\", (d) => Yscale(d.hdNext.hd))\n//         .attr(\"width\", Xscale.bandwidth())\n//         .attr(\"height\", (d) => height - Yscale(d.hdNext.hd))\n//         .attr(\"class\", \"hammingBar\")\n\n\n\n\n//     let new_height = height + 10\n\n//     let Xscale1 = d3.scaleLinear()\n//         .range([0, width])\n//         .domain([this.state.limit1, this.state.limit2 + 1])\n\n//     chartClasses\n//         .append(\"g\")\n//         .attr(\"class\", \"yellowLine\")\n//         .attr(\"transform\", \"translate(0,\" + new_height + \")\")\n//         .call(\n//             d3.axisBottom(Xscale1)\n//                 .tickPadding(5)\n//                 .tickValues([\n//                     this.state.limit1,\n//                     this.state.boundary1,\n//                     this.state.boundary2,\n//                     this.state.limit2\n//                 ])\n//                 .tickSize(0)\n//         )\n//         .selectAll(\"text\")\n//         .attr(\"transform\", (d) => {\n//             if (d === this.state.limit1) {\n//                 return \"translate(10,0)rotate(0)\"\n//             } else if (d === this.state.boundary1) {\n//                 return \"translate(-10,0)rotate(0)\"\n//             } else if (d === this.state.boundary2) {\n//                 return \"translate(15,0)rotate(0)\"\n//             } else if (d === this.state.limit2) {\n//                 return \"translate(-10,0)rotate(0)\"\n//             }\n//         })\n//         .attr(\"fill\", (d) => {\n//             if (d === this.state.limit1) {\n//                 return \"lime\"\n//             } else if (d === this.state.boundary1) {\n//                 return \"lime\"\n//             } else if (d === this.state.boundary2) {\n//                 return \"orange\"\n//             } else if (d === this.state.limit2) {\n//                 return \"orange\"\n//             } else {\n//                 return \"#ddd\"\n//             }\n//         })\n\n//     let gBoundaries = chartClasses.append(\"g\").attr(\"id\", \"gBoundaries\")\n\n//     chartClasses.append(\"line\")\n//         .attr(\"class\", \"boundary\")\n//         .attr(\"id\", \"limit12\")\n//         .attr(\"dragging\", true)\n//         .attr(\"x1\", Xscale1(this.state.boundary2))\n//         .attr(\"x2\", Xscale1(this.state.boundary2))\n//         .attr(\"y1\", Yscale(-7))\n//         .attr(\"y2\", Yscale(-4))\n\n//     chartClasses.append(\"line\")\n//         .attr(\"id\", \"limit1\")\n//         .attr(\"class\", \"boundary left\")\n//         .attr(\"dragging\", true)\n//         .attr(\"x1\", Xscale1(this.state.limit1))\n//         .attr(\"x2\", Xscale1(this.state.limit1))\n//         .attr(\"y1\", Yscale(-7))\n//         .attr(\"y2\", Yscale(-4))\n\n//     chartClasses.append(\"line\")\n//         .attr(\"id\", \"limit2\")\n//         .attr(\"class\", \"boundary right\")\n//         .attr(\"dragging\", true)\n//         .attr(\"x1\", Xscale1(this.state.limit2))\n//         .attr(\"x2\", Xscale1(this.state.limit2))\n//         .attr(\"y1\", Yscale(-7))\n//         .attr(\"y2\", Yscale(-4));\n\n//     gBoundaries.selectAll('line').on('mouseover', function () {\n//         let id = d3.select(this).attr(\"id\")\n//         let xxx = parseInt(d3.select(this).attr(\"x1\"))\n//         let yyy = parseInt(d3.select(this).attr(\"y1\"))\n//         let legend = parse(`${id} <br/> [${xxx}, ${yyy}]`)\n//         console.log(\"id, X: \", id, xxx,)\n//     })\n\n//     gBoundaries.selectAll('line').on('mouseout', function () {\n//         let id = d3.select(this).attr(\"id\")\n//         let xxx = parseInt(d3.select(this).attr(\"x1\"))\n//         this.setState({ [id]: newValue })\n//         console.log(\"newValue: \", newValue)\n//     })\n\n//     gBoundaries.selectAll(\"line\")\n//         .call(\n//             d3.drag()\n//                 .on('drag', function (e) {\n//                     //let lim1 = this.state.limit1\n//                     let x = d3.select(this).attr('x1')\n\n//                     let id = d3.select(this).attr(\"id\")\n\n//                     d3.select(this).attr(\"x1\", x)\n//                     d3.select(this).attr(\"x2\", x)\n//                 }\n//                 )\n//         )\n// };",["474","475"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/hdCodValues.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HeatmapHook.js",["476","477","478","479","480","481","482"],"// /* \n// d3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/heatmap_data.csv\").then(function (data) {\n\n//  */\n\n\n//import React from \"react\";\nimport * as d3 from \"d3\";\nimport \"./hamming_style.sass\";\n\nimport { dec2bin, hdSelf, hdOther } from \"./hammingFunctions\";\n\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\nimport { useState } from \"react\";\n\n// import parse from \"html-react-parser\"\n\nfunction HeatMapHook(props) {\n\n    const refHeatMap = useRef()\n    const refHeatMapSmall = useRef()\n\n\n    const [data, setData] = useState([])\n    const [class1, setClass1] = useState([])\n    const [classes, setClasses] = useState([])\n    const [class2, setClass2] = useState([]) // just for hd-cod;\n\n    const [hd_self, setSelf] = useState(0)\n    const [hd_other, setOther] = useState(0)\n    const [hd_cod, setCod] = useState(0)\n\n    //const [plotAvg, setPlotAvg] = useState(true)\n    const [plotAvg, setPlotAvg] = useState(false)\n\n\n\n    // Creates the data and sets it as state; \n    // uses limits, supplied as props. \n\n\n    useEffect(() => {\n        // let size = 41\n        // let boundary2 = props.boundary1 + 1\n        // let class1 = d3.range(props.boundary1 - size, props.boundary1 + 1)\n        // let classes = d3.range(props.boundary1 - size, boundary2 + 1 + size)\n        // let class2 = d3.range(props.boundary1 + 1, boundary2 + 1 + size)\n\n        let class1 = d3.range(props.limit1, props.boundary1 + 1)\n        let classes = d3.range(props.limit1, props.limit2 + 1)\n        let class2 = d3.range(props.boundary2, props.limit2 + 1)\n\n        let myData = []\n        class1.forEach((b1) => {\n            let g1 = dec2bin(10, b1)\n            classes.forEach((b12) => {\n                let g12 = dec2bin(10, b12)\n                let hd = 0\n                for (let i = 0; i < g12.length; i++) {\n                    if (g1[i] !== g12[i]) {\n                        hd = hd + 1\n                    }\n                }\n                myData.push(\n                    { b1: b1, b12: b12, hd: hd, g1: g1, g12: g12 }\n                )\n            })\n        })\n\n\n        // HD self, other, cod\n        let hd1, hd2, hd3;\n        if (classes.length > 0) {\n            hd1 = hdSelf(class1)\n            hd2 = hdOther(class1, class2)\n            hd3 = Math.abs(hd1 - hd2)\n        } else {\n            hd1 = 0\n            hd2 = 0\n            hd3 = Math.abs(hd1 - hd2)\n        }\n\n\n        setData(myData)\n        setClass1(class1)\n        setClasses(classes)\n        setClass2(class2)\n\n        setSelf(hd1)\n        setOther(hd2)\n        setCod(hd3.toFixed(1))\n\n    }, [props])\n\n\n\n    // ===============================================\n\n    useEffect(() => {\n        let margin = { top: 60, left: 150, bottom: 50, right: 110 }\n        //let margin = { top: 80, left: 100, bottom: 100, right: 325 }\n\n        let colorGreen = 'rgb(28, 255, 28)'\n        let colorOrange = 'rgb(255, 128, 49)'\n\n        var greenOrange = d3.scaleLinear()\n            .domain([1, 10])\n            .range([colorGreen, colorOrange])\n\n        let svgWidth\n        let svgHeight\n\n        if (document.getElementById(\"svgHeatMapHook\")) {\n            svgWidth = document.getElementById(\"svgHeatMapHook\").clientWidth\n            svgHeight = document.getElementById(\"svgHeatMapHook\").clientHeight\n        } else {\n            svgWidth = 550\n            svgHeight = 250\n        }\n\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n\n        // SCALES:\n        let myGroups = Array.from(new Set(data.map(d => d.b1)))\n        let myVars = Array.from(new Set(data.map(d => d.b12)))\n\n        let X_Band = d3.scaleBand().range([0, width]).domain(myVars)\n        let Y_band = d3.scaleBand().range([height, 0]).domain(myGroups)\n\n\n        let chartHeatMap = d3.select(refHeatMap.current).attr(\"transform\",\n            `translate(${margin.left},${margin.top})`);\n\n\n\n\n\n        // CHART INFO:\n        let chartInfo = chartHeatMap.select(\".chartInfo\")\n            .attr(\"transform\", `translate(${0},${0})`)\n\n        chartInfo.selectAll(\"text\").remove()\n\n        // TITLE:\n        chartInfo\n            .append('text')\n            .text(\"HeatmapHook.js\")\n            .attr(\"id\", \"chartTitle1\")\n            .attr(\"x\", -130)\n            .attr(\"y\", -40)\n            .attr(\"fill\", \"yellow\")\n            .attr(\"font-size\", '16px')\n\n\n        // HD SELF:\n        chartInfo.append(\"text\").attr(\"fill\", \"lime\")\n            .attr(\"font-size\", \"14px\")\n            .attr(\"x\", 50)\n            .attr(\"y\", 160)\n            .text(hd_self)\n\n        // HD OTHER:\n        chartInfo.append(\"text\").attr(\"fill\", \"orange\")\n            .attr(\"font-size\", \"14px\")\n            .attr(\"x\", 200)\n            .attr(\"y\", 160)\n            .text(hd_other)\n\n        // COMBINED:\n        chartInfo.append(\"text\").attr(\"fill\", \"cyan\")\n            .attr(\"font-size\", \"14px\")\n            .attr(\"x\", 120)\n            .attr(\"y\", 180)\n            .text(() => {\n                // return `HDcod = | ${hd_self} - ${hd_other} | = ${hd_cod}`\n                return hd_cod\n            })\n\n\n\n\n        // X-axis:\n        chartHeatMap.select(\".heatmapX\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(\n                d3.axisBottom(X_Band)\n                    .tickValues([])\n                // .tickValues(classes)\n                // .tickPadding(11)\n            )\n            .selectAll(\"text\").remove()\n        // .style(\"color\", (d) => {\n        //     if (d <= d3.max(myGroups)) {\n        //         return 'lime'\n        //     } else {\n        //         return 'orange'\n        //     }\n        // })\n\n\n        // Y-axis:\n        chartHeatMap.select(\".heatmapY\")\n            .call(\n                d3.axisLeft(Y_band)\n                    .tickValues([])\n                // .tickValues((class1))\n                // .tickPadding(11)\n            )\n            .selectAll(\"text\").remove()\n        // .text(\n        //     (d) => {\n        //         return `${d}: ${dec2bin(10, d)}`\n        //     }\n        // )\n\n\n        // TOOLTIP:\n        const ttHeatMap = d3.select(\"#ttHeatMap\")\n            .style(\"opacity\", 0)\n            .style(\"class\", \"tooltip\")\n            .style(\"background-color\", \"white\")\n            .style(\"border\", \"solid\")\n            .style(\"border-width\", \"1px\")\n            .style(\"border-radius\", \"5px\")\n            .style(\"padding\", \"5px\")\n            .style(\"font-size\", \"11px\")\n            .attr(\"z-index\", 0)\n\n\n        // MOUSE OVER, MOVE, LEAVE:\n        const mouseover = function (event, d) {\n            //console.log(event)\n            ttHeatMap\n                .style(\"opacity\", 0.8)\n\n        }\n\n        const mousemove = function (event, d) {\n            //console.log(d)\n            ttHeatMap\n                .style(\"opacity\", 0.8)\n                .html(d.description)\n                .style(\"left\", (event.layerX - 30) + \"px\")\n                .style(\"top\", (event.layerY - 15) + \"px\")\n                .style(\"position\", \"absolute\")\n        }\n\n        const mouseleave = function (event, d) {\n            ttHeatMap\n                .style(\"opacity\", 0)\n        }\n\n\n        // DATA:\n        chartHeatMap\n            .selectAll(\"rect\")\n            .data(data)\n            .join(\n                enter => enter.append('rect').attr(\"class\", \"new\"),\n                update => update.attr(\"class\", \"update\"),\n                exit => exit.remove().transition()\n                    .duration(1000)\n            )\n            .attr(\"x\", function (d) { return X_Band(d.b12) })\n            .attr(\"y\", function (d) { return Y_band(d.b1) })\n            .attr(\"width\", X_Band.bandwidth())\n            .attr(\"height\", Y_band.bandwidth())\n            .on(\"mouseover\", mouseover)\n            .on(\"mousemove\", mousemove)\n            .on(\"mouseleave\", mouseleave)\n            .transition()\n            .duration(1000)\n            .style(\"fill\", function (d) {\n\n                if (plotAvg === true) {\n                    if (d.b12 <= props.boundary1) {\n                        return greenOrange(hd_self)\n                    } else {\n                        return greenOrange(hd_other)\n                    }\n                } else {\n                    return greenOrange(d.hd)\n                }\n\n\n            })\n\n\n\n\n    }, [data]);\n\n\n\n\n\n    // SMALL VERSION, ONLY AVERAGES of HD SELF - OTHER\n\n\n\n    useEffect(() => {\n        let margin = { top: 60, left: 30, bottom: 150, right: 450 }\n\n        let colorGreen = 'rgb(28, 255, 28)'\n        let colorOrange = 'rgb(255, 128, 49)'\n\n        var greenOrange = d3.scaleLinear()\n            .domain([1, 10])\n            .range([colorGreen, colorOrange])\n\n        let svgWidth = 550\n        let svgHeight = 250\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n\n\n\n        let smallData = [\n            {\n                b1: 1, b12: 1, hd: hd_self,\n                class: `${props.limit1} - ${props.boundary1}`, g1: \"0111010111\", g12: \"0111010111\"\n            },\n            {\n                b1: 1, b12: 2, hd: hd_other,\n                class: `${props.boundary2} - ${props.limit2}`, g1: \"0111010111\", g12: \"0111010111\"\n            }]\n\n        // SCALES:\n        let mySmallGroups = Array.from(new Set(smallData.map(d => d.b1)))\n        let mySmallVars = Array.from(new Set(smallData.map(d => d.b12)))\n\n        let X_Band = d3.scaleBand().range([0, 100]).domain(mySmallVars)\n        let Y_band = d3.scaleBand().range([50, 0]).domain(mySmallGroups)\n\n        let chartHeatMap = d3.select(refHeatMapSmall.current).attr(\"transform\",\n            `translate(${margin.left},${margin.top})`);\n\n        chartHeatMap.select(\".smallInfo\").selectAll(\"text\").remove()\n        chartHeatMap.select(\".smallInfo\").append(\"text\")\n            .text(hd_cod)\n            .attr(\"font-size\", \"14px\")\n            .attr(\"x\", 35)\n            .attr(\"y\", -10)\n            .attr(\"fill\", \"cyan\")\n        //.attr(\"font-family\", \"Arial\")\n\n\n        // X-axis:\n        chartHeatMap.select(\".smallX\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(\n                d3.axisBottom(X_Band)\n                    .tickSize(0)\n                    .tickPadding(20)\n\n            )\n            .selectAll(\"text\")\n            .style(\"color\", (d) => {\n                if (d <= d3.max(mySmallGroups)) {\n                    return 'lime'\n                } else {\n                    return 'orange'\n                }\n            })\n            .text((d) => {\n                if (d === 1) {\n                    return hd_self\n                } else {\n                    return hd_other\n                }\n            })\n            .attr(\"font-size\", \"12px\")\n\n\n        // Y-axis:\n        chartHeatMap.select(\".smallY\")\n            .call(\n                d3.axisLeft(Y_band)\n                    .tickValues([])\n                    .tickSize(0)\n            )\n\n\n        // SMALL DATA:\n        chartHeatMap\n            .selectAll(\"rect\")\n            .data(smallData)\n            .join(\n                enter => enter.append('rect').attr(\"class\", \"new\"),\n                update => update.attr(\"class\", \"update\"),\n                exit => exit.remove().transition()\n                    .duration(1000)\n            )\n            .attr(\"x\", function (d) { return X_Band(d.b12) })\n            .attr(\"y\", function (d) { return Y_band(d.b1) })\n            .attr(\"width\", X_Band.bandwidth())\n            .attr(\"height\", Y_band.bandwidth())\n            .transition()\n            .duration(1000)\n            .style(\"fill\", function (d) {\n                // console.log(\"d: \", parseFloat(d.hd) + 1)\n                return greenOrange(parseFloat(d.hd))\n\n\n            })\n\n\n        // chartHeatMap\n        //     .selectAll(\"rect\").on(\"mouseover\", mouseover)\n        //     .on(\"mousemove\", mousemove)\n        //     .on(\"mouseleave\", mouseleave)\n\n\n\n    }, [data]);\n\n\n    return (\n\n        <>\n            <div\n                id=\"divHeatMapHook\"\n                style={{\n                    position: \"relative\",\n                    marginTop: \"10px\",\n                    border: \"1px solid red\"\n                }}\n            >\n                <svg id=\"svgHeatMapHook\">\n\n                    <g ref={refHeatMap}>\n                        <g className=\"heatmapX\"></g>\n                        <g className=\"heatmapY\"></g>\n                        <g className=\"chartInfo\"></g>\n                    </g>\n\n\n                    <g ref={refHeatMapSmall}>\n                        <g className=\"smallX\"></g>\n                        <g className=\"smallY\"></g>\n                        <g className=\"smallInfo\"></g>\n                    </g>\n\n\n\n                </svg>\n\n                <div id=\"ttHeatMap\"></div>\n\n            </div >\n\n        </>\n\n    )\n};\n\nexport default HeatMapHook;\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/inputNumberHook.js",["483"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/TableHook.js",["484","485"],"import \"./hamming_style.sass\";\nimport \"./phenotypes.sass\";\n//import \"./scatter.sass\";\n\n\n//import parse from \"html-react-parser\"\nimport * as d3 from \"d3\";\n\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\nimport { useState } from \"react\";\n\nimport { dec2bin } from \"./hammingFunctions\";\n\n\n\n\nfunction HammingCodTable(props) {\n\n    const refHDTable = useRef()\n\n    const [data, setData] = useState([])\n    const [class1, setclass1] = useState([])\n    const [classes, setClasses] = useState([])\n\n\n    useEffect(() => {\n        let size = 2\n        let boundary2 = props.boundary1 + 1\n        let class1 = d3.range(props.boundary1 - size, boundary2)\n        let classes = d3.range(props.boundary1 - size, boundary2 + 1 + size)\n\n\n        let myData = []\n        class1.forEach((b1) => {\n            let g1 = dec2bin(5, b1)\n            classes.forEach((b12) => {\n                let g12 = dec2bin(5, b12)\n                let hd = 0\n                for (let i = 0; i < g12.length; i++) {\n                    if (g1[i] !== g12[i]) {\n                        hd = hd + 1\n                    }\n                }\n                myData.push(\n                    { b1: b1, b12: b12, hd: hd, g1: g1, g12: g12 }\n                )\n            })\n        })\n        console.log(myData)\n        setData(myData)\n        setclass1(class1)\n        setClasses(classes)\n\n    }, [props])\n\n\n    useEffect(() => {\n        let margin = { top: 50, left: 100, bottom: 50, right: 50 }\n        let svgWidth = 550\n        let svgHeight = 250\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n        // let X_Linear = d3.scaleLinear()\n        //     .range([0, width])\n        //     .domain([d3.min(classes) - 1, d3.max(classes) + 1])\n\n        // let Y_Linear = d3.scaleLinear()\n        //     .range([height, 0])\n        //     .domain([d3.max(class1) + 1, d3.min(class1) - 1])\n\n        // let Z_Linear = d3.scaleLinear()\n        //     .range([2, 12])\n        //     .domain([0, 10])\n\n\n        //let svg = d3.select(refSVG.current)\n        let tableHD = d3.select(refHDTable.current).attr(\"transform\",\n            `translate(${margin.left},${margin.top})`)\n\n        // scatter2.select(\".scatter2X\")\n        //     .attr(\"transform\", \"translate(0,\" + height + \")\")\n        //     .call(\n        //         d3\n        //             .axisBottom(X_Linear)\n        //             .tickValues(classes)\n        //             .tickPadding(11)\n        //     )\n        //     .selectAll('text')\n        //     .transition()\n        //     .duration(1000)\n        //     .attr('fill', (d) => {\n        //         if (d <= props.boundary1) {\n        //             return 'lime'\n        //         } else {\n        //             return 'orange'\n        //         }\n        //     })\n\n        // scatter2.select(\".scatter2Y\")\n        //     .call(\n        //         d3\n        //             .axisLeft(Y_Linear)\n        //             .tickValues((class1))\n        //             .tickPadding(11)\n        //     )\n        //     .selectAll('text')\n        //     .text((d) => d.toFixed(0))\n        //     .text((d) => {\n        //         console.log(\"text d: \", d)\n        //         return dec2bin(10, d)\n        //     })\n\n\n        //var groupedData = d3.group(data, (d) => d.b12)\n        var groupedArrayedData = Array.from(d3.group(data, (d) => d.b1))\n\n        tableHD.selectAll(\"tr\")\n            .data(groupedArrayedData)\n            .join(\n                enter => enter.append('tr'),\n                update => update.attr(\"class\", \"update\"),\n                exit => exit.remove()\n            )\n            .selectAll('td')\n            //.data(d => d)\n            .data((d) => {\n                return d[1]\n            })\n            .join(\n                enter => enter.append('td').attr(\"class\", \"cell\"),\n                update => update.attr(\"class\", \"cellUp\"),\n                exit => exit.remove()\n            )\n            // .attr(\"width\", 45)\n            // .attr(\"height\", 20)\n            // .text((d, i) => {\n            //     return d\n            // })\n            //.html(\"whattt\")\n            .html((d) => {\n                console.log(\"d cell: \", d)\n\n                return d.g1\n            })\n            //.attr(\"stroke-width\", 1)\n            .attr(\"stroke\", \"#fff\")\n            .attr(\"stroke-width\", 1)\n            .attr(\"fill\", \"#ddd\")\n            .attr(\"color\", \"cyan\")\n            .attr(\"opacity\", .8);\n\n\n\n        // tableHD.on('mouseover', (e, d) => {\n        //     //e.target.style.opacity = 1\n        //     console.log(e.target)\n        //     console.log(\"d: \", d)\n        // })\n\n\n        // .on('mouseout', (e, d) => {\n        //     e.target.style.opacity = .7\n        // })\n        // ;\n\n\n\n        // scatter2\n        //     .selectAll(\"circle\")\n        //     .data(data)\n        //     .join(\n        //         enter => enter.append('circle').attr(\"class\", \"new\"),\n        //         update => update.attr(\"class\", \"update\"),\n        //         exit => exit.remove().transition()\n        //             .duration(1500)\n\n        //     )\n        //     .transition()\n        //     .duration(1000)\n        //     .attr(\"cx\", (d) => X_Linear(d.b12))\n        //     .attr(\"cy\", (d) => Y_Linear(d.b1))\n        //     .attr(\"r\", (d) => Z_Linear(d.hd))\n        //     .attr(\"stroke-width\", 1)\n        //     .attr(\"fill\", \"#ddd\")\n        //     .attr(\"stroke\", \"cyan\")\n        //     .attr(\"stroke-width\", 1)\n        //     .attr(\"opacity\", .4);\n\n\n    }, [data]);\n\n\n\n\n\n\n    return (\n\n        <>\n\n            <div\n                id=\"divScatter2\"\n                style={{\n                    position: \"relative\",\n                    marginTop: \"10px\",\n                    width: \"550px\",\n                    border: \"1px solid teal\"\n                }}\n            >\n                <label>{class1.toString().replaceAll(',', ', ')}</label>\n\n                <label>{classes.slice(3).toString().replaceAll(',', ', ')}</label>\n\n                {/* <svg id=\"svgScatter2\" ref={refSVG} >\n                    < g ref={refScatter2}>\n                        <g className=\"scatter2X\"></g>\n\n                        <g className=\"scatter2Y\"></g>\n                    </g>\n                </svg> */}\n\n                <table >\n                    <tbody ref={refHDTable}>\n\n\n                    </tbody>\n                </table>\n\n            </div >\n\n\n            {/* <div\n                id=\"divScatter2\"\n                style={{\n                    position: \"relative\",\n                    marginTop: \"10px\",\n                }}\n            >\n                <table ref={refHDTable}></table>\n            </div > */}\n\n        </>\n\n    )\n}\n\n\nexport default HammingCodTable;\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_hamming/HammingDistances.js",["486","487","488","489","490","491","492"],"import \"./hamming_style.sass\";\nimport \"./phenotypes.sass\";\n\n//import parse from \"html-react-parser\"\nimport * as d3 from \"d3\";\nimport { dec2bin, hdSelf, hdOther } from \"./hammingFunctions\";\n\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\nimport { useState } from \"react\";\n\nimport { hdValues } from \"./hdValues\";\n\n\nfunction HammingDistances(props) {\n    const refHammingDistances = useRef()\n\n    const [data, setData] = useState(hdValues)\n    const [class1, setClass1] = useState([])\n    const [classes, setClasses] = useState([])\n    const [class2, setClass2] = useState([]) // just for hd-cod;\n\n\n    useEffect(() => {\n        let size = 3\n        let boundary2 = props.boundary1 + 1\n        let class1 = d3.range(props.boundary1 - size, props.boundary1 + 1)\n        let classes = d3.range(props.boundary1 - size, boundary2 + 1 + size)\n        let class2 = d3.range(props.boundary1 + 1, boundary2 + 1 + size)\n\n        let myData = []\n\n        class1.forEach((b1) => {\n            let g1 = dec2bin(10, b1)\n            classes.forEach((b12) => {\n                let g12 = dec2bin(10, b12)\n                let hd = 0\n                for (let i = 0; i < g12.length; i++) {\n                    if (g1[i] !== g12[i]) {\n                        hd = hd + 1\n                    }\n                }\n                myData.push(\n                    { b1: b1, b12: b12, hd: hd, g1: g1, g12: g12 }\n                )\n            })\n        })\n        // console.log(\"HammingDistances:\")\n        // console.log(myData)\n\n        //setData(myData)\n        setClass1(class1)\n        setClasses(classes)\n        setClass2(class2)\n\n    }, [props])\n\n\n    useEffect(() => {\n        let margin = { top: 20, right: 20, bottom: 100, left: 40, }\n        let svgWidth = 550\n        let svgHeight = 250\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n        let X_Band = d3.scaleBand()\n            .range([0, width])\n            .domain(\n                data.map((d) => {\n                    return d.hdNext.hdLabel\n                }))\n            .padding(0.0);\n\n        let Y_Linear = d3.scaleLinear().range([height, 0]).domain([1, 10]);\n\n        let HammingChart = d3.select(refHammingDistances.current).attr(\"transform\",\n            `translate(${margin.left},${margin.top})`);\n\n        HammingChart.select(\".hammingX\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(\n                d3.axisBottom(X_Band)\n                    .tickSize(0)\n            )\n            .selectAll(\"text\").remove()\n\n        HammingChart.select(\".hammingY\")\n            .call(\n                d3.axisLeft(Y_Linear)\n                    .tickPadding(10)\n            )\n\n\n        HammingChart.select(\".hammingBarPhens\")\n            .selectAll(\"rect\")\n            .data(data)\n            .join(\n                enter => enter.append('rect').attr(\"class\", \"new\"),\n                update => update.attr(\"class\", \"update\"),\n                exit => exit.remove().transition()\n                    .duration(1000)\n            )\n            .attr(\"x\", (d) => X_Band(d.hdNext.hdLabel))\n            .attr(\"y\", (d) => Y_Linear(d.hdNext.hd))\n            .attr(\"width\", X_Band.bandwidth())\n            .attr(\"height\", (d) => height - Y_Linear(d.hdNext.hd))\n            .attr(\"stroke-width\", 1)\n\n\n\n    }, []);\n\n\n\n\n\n    useEffect(() => {\n\n        var updateColors = () => {\n            let hammingBins = d3.select(\".hammingBarPhens\").selectAll(\"rect\")\n\n            hammingBins.attr(\"fill\", (d) => {\n                if (d.phenotype >= props.limit1 & d.phenotype <= props.boundary1) {\n                    return 'rgb(28, 255, 28)'\n                } else if (d.phenotype >= props.boundary2 & d.phenotype <= props.limit2) {\n                    return 'rgb(255, 128, 49)'\n\n                } else {\n                    return '#fff'\n                }\n            })\n            hammingBins.attr(\"stroke\", (d) => {\n                if (d.phenotype >= props.limit1 & d.phenotype <= props.boundary1) {\n                    return 'rgb(28, 255, 28)'\n                } else if (d.phenotype >= props.boundary2 & d.phenotype <= props.limit2) {\n                    return 'rgb(255, 128, 49)'\n                } else {\n                    return 'none'\n                }\n            })\n        }\n\n        updateColors()\n\n\n    }, [props.limit1, props.boundary1, props.limit2, props.boundary2]\n    );\n\n\n\n\n    useEffect(() => {\n        let HammingChart = d3.select(refHammingDistances.current)\n\n        HammingChart.append(\"rect\")\n\n    })\n\n\n\n\n\n\n    return (\n\n        <>\n            <div\n                id=\"divHammingChart\"\n                style={{\n                    backgroundColor: \"#446b58\",\n                    position: \"relative\",\n                    marginTop: \"10px\",\n                }}\n            >\n                <svg id=\"svgHammingChart\">\n\n                    <g ref={refHammingDistances}>\n                        <g className=\"hammingX\"></g>\n                        <g className=\"hammingY\"></g>\n                        <g className=\"chartInfo\"></g>\n                        <g className=\"hammingBarPhens\"></g>\n                    </g>\n\n                </svg>\n\n                {/* <div id=\"ttPhenotypes\"></div> */}\n\n            </div >\n\n        </>\n\n    )\n}\n\n\nexport default HammingDistances;\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_input/InputRange.js",["493","494","495","496","497","498","499","500","501","502","503"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/MathematicalModels.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/D3ScatterRatios.js",["504"],"\n\nimport * as d3 from \"d3\";\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\n\n\n\nexport default function D3ScatterRatios(props) {\n\n    //const refSVG = useRef()\n    const refScatterRatios = useRef()\n    const refPredictedRatios = useRef()\n\n\n\n    useEffect(() => {\n\n        let margin = { top: 50, left: 120, bottom: 100, right: 20 }\n\n        let svgWidth = document.getElementById(\"svgScatterRatios\").clientWidth\n        let svgHeight = document.getElementById(\"svgScatterRatios\").clientHeight\n\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n\n        //    ---------------   POSITION  ------------------------\n\n        let scatter2 = d3.select(refScatterRatios.current)\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n        let scatter222 = d3.select(refPredictedRatios.current)\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n\n        //    ---------------   SCALES  ------------------------\n\n\n        // The chart must be square, so the SMALLEST dimension\n        //  becomes the range for both axes: \n        let rangeX = [0, d3.min([width, height])]\n        let rangeY = [d3.min([width, height]), 0]\n\n        //let dataX = Array.from(new Set(props.data.map(d => d.scheduleData.r1 / d.scheduleData.r2)))\n        //let dataY = Array.from(new Set(props.data.map(d => d.scheduleData.b1 / d.scheduleData.b2)))\n        let dataX = Array.from(props.data.map(d => d.scheduleData.r1 / d.scheduleData.r2))\n        let dataY = Array.from(props.data.map(d => d.scheduleData.b1 / d.scheduleData.b2))\n\n\n        // keep it square, using the HIGHEST value:\n        let highestValue = d3.max([d3.max(dataX), d3.max(dataY)])\n\n        let domainX = [0, highestValue]\n        let domainY = [0, highestValue]\n\n        let X_Linear = d3.scaleLinear().range(rangeX).domain(domainX)\n        let Y_Linear = d3.scaleLinear().range(rangeY).domain(domainY)\n\n\n\n        //    ---------------   TITLES  ------------------------\n\n        scatter2.selectAll(\".axisLabel\").remove();\n\n        scatter2\n            .append('text').attr(\"class\", \"axisLabel\")\n            .text(\"y\")\n            .attr(\"x\", -margin.left * 0.5)\n            .attr(\"y\", height * 0.55)\n            .attr(\"fill\", \"#ccc\")\n            .attr(\"font-family\", \"Times New Roman\")\n            .attr(\"font-size\", \"18px\")\n\n        scatter2\n            .append('text').attr(\"class\", \"axisLabel\")\n            .text(\"x\")\n            .attr(\"x\", width * 0.30)\n            .attr(\"y\", height * 1.30)\n            .attr(\"fill\", \"#ccc\")\n            .attr(\"font-family\", \"Times New Roman\")\n            .attr(\"font-size\", \"18px\")\n\n\n\n        //    ---------------   AXES  ------------------------\n\n        scatter2.select(\".scatterRatiosX\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(\n                d3\n                    .axisBottom(X_Linear)\n                    .tickPadding(10)\n                    //.tickValues(tickValuesX)\n                    .ticks(12)\n                    .tickSize(-d3.min([height, width]))\n            )\n\n        scatter2.select(\".scatterRatiosY\")\n            .call(\n                d3\n                    .axisLeft(Y_Linear)\n                    .tickPadding(10)\n                    //.tickValues(tickValuesY)\n                    .tickSize(-d3.min([height, width]))\n                    .ticks(12)\n            )\n\n        //    ---------------   HOVER  ------------------------\n\n        let onHover = (e, d) => {\n            let tgt = e.explicitOriginalTarget\n            let circleId = tgt.attributes[1].value\n\n            let bb = props.data.filter((item) => {\n                return circleId === `Schedule${item.schedule}`\n            })\n\n            let bbb1 = (bb[0].scheduleData.b1 / bb[0].scheduleData.b2).toFixed(1)\n            let bbb2 = (bb[0].scheduleData.r1 / bb[0].scheduleData.r2).toFixed(1)\n\n            let xx = parseInt(tgt.attributes[2].value)\n            let yy = parseInt(tgt.attributes[3].value)\n\n            e.target.style.stroke = \"cyan\"\n            e.target.style.fill = \"cyan\"\n\n            scatter2.append(\"text\")\n                .attr(\"x\", xx - 50)\n                .attr(\"y\", yy - 25)\n                .text(`${bbb2}, ${bbb1}`)\n                .attr(\"class\", \"d3tooltip\")\n                .style(\"fill\", \"white\")\n                .attr(\"font-size\", \"14px\")\n                .attr(\"font-family\", \"Courier New\");\n        };\n\n\n        let hoverOver = (e, d) => {\n            d3.selectAll(\".d3tooltip\").remove()\n            e.target.style.stroke = \"white\"\n            e.target.style.fill = \"#ffffff89\"\n        };\n\n\n        //   -----------------------   PERFECT MATCHING   ------------------------\n        // plot line from 0 to max of dataX and dataY, maxRatio:\n\n        let maxRatio = (d3.max([d3.max(dataX), d3.max(dataY)])).toFixed(1)\n        scatter2.append(\"line\")\n            .attr(\"x1\", X_Linear(0))\n            .attr(\"y1\", Y_Linear(0))\n            .attr(\"x2\", X_Linear(maxRatio))\n            .attr(\"y2\", Y_Linear(maxRatio))\n            .attr(\"class\", \"perfectMatching\")\n            .attr(\"stroke\", \"#aaa\")\n            .attr(\"stroke-width\", 1)\n            .attr(\"stroke-dasharray\", 2)\n\n\n        //   -----------------------   DATA POINTS   ------------------------\n\n        scatter2\n            .selectAll(\"circle\")\n            .data(props.data)\n            .join(\n                enter => enter.append('circle').attr(\"class\", \"new\")\n                    .on(\"mouseover\", onHover)\n                    .on('mouseout', hoverOver),\n                update => update.attr(\"class\", \"update\"),\n                exit => exit.remove()\n            )\n            // .transition()\n            // .duration(1000)\n            .on(\"mouseover\", d => {\n                onHover(d)\n            })\n            .on('mouseout', hoverOver)\n            .attr(\"id\", (d) => `Schedule${d.schedule}`)\n            .attr(\"cx\", (d) => X_Linear(d.scheduleData.r1 / d.scheduleData.r2))\n            .attr(\"cy\", (d) => Y_Linear(d.scheduleData.b1 / d.scheduleData.b2))\n            .attr(\"r\", 5)\n            .attr(\"stroke-width\", 1)\n            .attr(\"fill\", \"#ffffff75\")\n            .attr(\"stroke\", \"white\")\n\n\n        //   -----------------------   PREDICTED VALUES  ------------------------\n\n        console.log(\"bias: \", 10 ** (-0.06))\n        let xRange = d3.range(0, 2.2, 0.1)\n        let yPrimeList = []\n        xRange.forEach(val => yPrimeList.push(\n            [X_Linear(val), Y_Linear(0.87 * val ** 0.85)]\n        ))\n\n        var myLine222 = d3.line().curve(d3.curveCardinal)\n        var myPath = myLine222(yPrimeList)\n\n        scatter2.append(\"path\").attr(\"id\", \"muie\")\n            .attr(\"d\", myPath)\n            .style(\"stroke\", \"red\")\n            .style(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .style(\"stroke-dasharray\", 0);\n\n\n\n    }, [props.data]);\n\n\n\n\n\n\n    return (\n\n        <div id=\"divScatterRatios\">\n\n            <svg id=\"svgScatterRatios\">\n\n                <g ref={refScatterRatios}>\n\n                    <g className=\"scatterRatiosX\"></g>\n\n                    <g className=\"scatterRatiosY\"></g>\n\n                    <path id=\"muieMami\"></path>\n                </g>\n\n\n            </svg>\n\n        </div>\n    )\n}\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/BasicSummaryTable.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/D3ScatterLogs.js",["505"],"\n\nimport * as d3 from \"d3\";\n\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\n//import { useState } from \"react\";\n\n//import regression from \"regression\";\nconst regression = window.regression;\n\n\nexport default function D3ScatterLogs(props) {\n\n    const refScatterLogs = useRef()\n\n\n\n    useEffect(() => {\n\n        let margin = { top: 75, left: 75, bottom: 75, right: 75 }\n\n        let svgWidth = document.getElementById(\"svgScatterLogs\").clientWidth\n        let svgHeight = document.getElementById(\"svgScatterLogs\").clientHeight\n\n        let width = svgWidth - margin.left - margin.right\n        let height = svgHeight - margin.top - margin.bottom\n\n\n        //    ---------------   POSITION  ------------------------\n\n        let scatterLogs = d3.select(refScatterLogs.current)\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`)\n\n\n\n\n        //    ---------------   DATA PREP  ------------------------\n        props.data.forEach((sch) => {\n            sch.ratioB = (sch.scheduleData.b1 / sch.scheduleData.b2).toFixed(2)\n            sch.ratioR = (sch.scheduleData.r1 / sch.scheduleData.r2).toFixed(2)\n            sch.logB = Math.log10(sch.scheduleData.b1 / sch.scheduleData.b2).toFixed(2)\n            sch.logR = Math.log10(sch.scheduleData.r1 / sch.scheduleData.r2).toFixed(2)\n        })\n\n        //let dataX = Array.from(new Set(props.data.map(d => d.logR)))\n        //let dataY = Array.from(new Set(props.data.map(d => d.logB)))\n\n\n        // console.log(\"dataX: \", dataX)\n        // console.log(\"dataY: \", dataY)\n\n        //    ---------------   SCALES  ------------------------\n\n\n        // The chart must be square, so the smallest dimension\n        //  becomes the range for both axes: \n        let rangeX = [0, d3.min([width, height])]\n        let rangeY = [d3.min([width, height]), 0]\n\n        let tickValuesX = [-2, 0, 2]\n        let tickValuesY = [-2, 0, 2]\n        let myTickValues = d3.range(d3.min(tickValuesX), d3.max(tickValuesX), 0.5)\n\n        // let tickValuesX = [-.5, 0, .5]\n        // let tickValuesY = [-.5, 0, .5]\n\n        // let tickValuesX = [-.10, 0, .10]\n        // let tickValuesY = [-.10, 0, .10]\n        // let myTickValues = d3.range(d3.min(tickValuesX), d3.max(tickValuesX), 0.05)\n\n        myTickValues.push(d3.max(tickValuesX))\n\n        let domainX = [d3.min(tickValuesX), d3.max(tickValuesX)]\n        let domainY = [d3.min(tickValuesY), d3.max(tickValuesY)]\n\n        let X_Linear = d3.scaleLinear().range(rangeX).domain(domainX)\n        let Y_Linear = d3.scaleLinear().range(rangeY).domain(domainY)\n\n\n\n        //    ---------------   TITLES  ------------------------\n\n        // scatter2.selectAll(\".axisLabel\").remove();\n\n        // scatter2\n        //     .append('text').attr(\"class\", \"axisLabel\")\n        //     .text(\"Log(B1/B2)\")\n        //     .attr(\"x\", -margin.left * 0.8)\n        //     .attr(\"y\", height * 0.55)\n        //     .attr(\"fill\", \"#ccc\")\n        //     .attr(\"font-family\", \"Courier New\")\n        //     .attr(\"font-size\", \"14px\")\n\n        // scatter2\n        //     .append('text').attr(\"class\", \"axisLabel\")\n        //     .text(\"Log(r1/r2)\")\n        //     .attr(\"x\", width * 0.12)\n        //     .attr(\"y\", height * 1.30)\n        //     .attr(\"fill\", \"#ccc\")\n        //     .attr(\"font-family\", \"Courier New\")\n        //     .attr(\"font-size\", \"14px\")\n\n\n\n        //    ---------------   AXES  ------------------------\n\n        scatterLogs.select(\".scatterLogsX\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(\n                d3\n                    .axisBottom(X_Linear)\n                    .tickPadding(10)\n                    //.tickValues([0])\n                    //.tickValues(tickValuesX)\n                    .tickValues(myTickValues)\n                    .tickSize(-d3.min([height, width]))\n            )\n            .selectAll(\"path\").remove()\n            .selectAll(\"text\").style(\"font-size\", \"10px\")\n\n\n        scatterLogs.select(\".scatterLogsY\")\n            .call(\n                d3\n                    .axisLeft(Y_Linear)\n                    .tickPadding(10)\n                    //.tickValues([0])\n                    //.tickValues(tickValuesY)\n                    .tickValues(myTickValues)\n                    .tickSize(-d3.min([height, width]))\n            )\n            .selectAll(\"path\").remove()\n\n        //    ---------------   HOVER  ------------------------\n\n        let onHover = (e, d) => {\n            let tgt = e.explicitOriginalTarget\n            let circleId = tgt.attributes[1].value\n\n            let bb = props.data.filter((item) => {\n                return circleId === `Schedule${item.schedule}`\n            })\n\n            //let bbb1 = (bb[0].scheduleData.b1 / bb[0].scheduleData.b2).toFixed(1)\n            //let bbb2 = (bb[0].scheduleData.r1 / bb[0].scheduleData.r2).toFixed(1)\n\n            let xx = parseInt(tgt.attributes[2].value)\n            let yy = parseInt(tgt.attributes[3].value)\n\n            e.target.style.stroke = \"cyan\"\n            e.target.style.fill = \"cyan\"\n\n            scatterLogs.append(\"text\")\n                .attr(\"x\", xx - 50)\n                .attr(\"y\", yy - 25)\n                //.text(`${bbb1}, ${bbb2}`)\n                .text(circleId)\n                .attr(\"class\", \"d3tooltip\")\n                .style(\"fill\", \"white\")\n                .attr(\"font-size\", \"14px\")\n                .attr(\"font-family\", \"Courier New\");\n        };\n\n\n        let hoverOver = (e, d) => {\n            d3.selectAll(\".d3tooltip\").remove()\n            e.target.style.stroke = \"white\"\n            e.target.style.fill = \"#ffffff89\"\n        };\n\n\n        //   -----------------------   DATA POINTS   ------------------------\n\n        scatterLogs\n            .selectAll(\"circle\")\n            .data(props.data)\n            .join(\n                enter => enter.append('circle').attr(\"class\", \"new\")\n                    .on(\"mouseover\", onHover)\n                    .on('mouseout', hoverOver),\n                update => update.attr(\"class\", \"update\"),\n                exit => exit.remove()\n            )\n            // .transition()\n            // .duration(1000)\n            .on(\"mouseover\", d => {\n                onHover(d)\n            })\n            .on('mouseout', hoverOver)\n            .attr(\"id\", (d) => `Schedule${d.schedule}`)\n            .attr(\"cx\", (d) => X_Linear(d.logR))\n            .attr(\"cy\", (d) => Y_Linear(d.logB))\n\n            .attr(\"r\", 5)\n            .attr(\"stroke-width\", 1)\n            .attr(\"fill\", \"#ffffff89\")\n            .attr(\"stroke\", \"white\");\n\n\n\n        //  -----------------------    REGRESSION     --------------------\n\n\n        let regData = [];\n        props.data.forEach((item) => {\n            regData.push(\n                [parseFloat(item.logR), parseFloat(item.logB)]\n            )\n        })\n\n        const result = regression.linear(regData)\n        const gradient = result.equation[0];\n        const yIntercept = result.equation[1];\n        const predictedB = result.predict;\n\n        // console.log(\"regression: \", result)\n        // console.log(\"gradient: \", gradient)\n        // console.log(\"yIntercept: \", yIntercept)\n        // console.log(\"10^INTERCEPT: \", 10 ** yIntercept)\n        // console.log(\"result.string: \", result.string)\n        // console.log(\"predictedB: \", predictedB)\n        // console.log(\"predictedB: \", predictedB(-1))\n        // console.log(\"predictedB: \", predictedB(1))\n\n\n        //const regLine = d3.line().data(regData)\n        //scatterLogs.append(\"path\").attr(\"datum\", regLine)\n\n        scatterLogs.selectAll(\".fittedLine\").remove()\n        scatterLogs.selectAll(\".parameters\").remove()\n\n        // scatterLogs.append(\"line\").attr(\"class\", \"fittedLine\")\n        //     .attr(\"x1\", X_Linear(d3.min(tickValuesX) * gradient + yIntercept))\n        //     .attr(\"y1\", Y_Linear(d3.min(tickValuesY) * gradient + yIntercept))\n        //     .attr(\"x2\", X_Linear(d3.max(tickValuesX) * gradient + yIntercept))\n        //     .attr(\"y2\", Y_Linear(d3.max(tickValuesY) * gradient + yIntercept))\n        //     .attr(\"stroke\", \"red\")\n        //     .attr(\"stroke-width\", 2)\n\n\n        scatterLogs.append(\"line\").attr(\"class\", \"fittedLine\")\n            .attr(\"x1\", X_Linear(predictedB(d3.min(tickValuesX))[0]))\n            .attr(\"y1\", Y_Linear(predictedB(d3.min(tickValuesX))[1]))\n            .attr(\"x2\", X_Linear(predictedB(d3.max(tickValuesX))[0]))\n            .attr(\"y2\", Y_Linear(predictedB(d3.max(tickValuesX))[1]))\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 2)\n\n\n        scatterLogs.append(\"line\").attr(\"class\", \"perfectMatching\")\n            .attr(\"x1\", X_Linear(d3.min(tickValuesX) * 1.00 + 0.00))\n            .attr(\"y1\", Y_Linear(d3.min(tickValuesY) * 1.00 + 0.00))\n            .attr(\"x2\", X_Linear(d3.max(tickValuesX) * 1.00 + 0.00))\n            .attr(\"y2\", Y_Linear(d3.max(tickValuesY) * 1.00 + 0.00))\n            .attr(\"stroke\", \"#bbb\")\n            .attr(\"stroke-width\", 1)\n            .attr(\"stroke-dasharray\", 0)\n\n        scatterLogs.append(\"text\").attr(\"class\", \"parameters\").attr(\"x\", -50).attr(\"y\", -50).text(`slope(a): ${gradient}; intercept: ${yIntercept};`).attr(\"fill\", \"#fff\")\n\n    }, [props.data]);\n\n\n\n\n\n\n    return (\n\n        <div id=\"divScatterLogs\">\n\n            <svg id=\"svgScatterLogs\">\n\n                <g ref={refScatterLogs}>\n\n                    <g className=\"scatterLogsX\"></g>\n\n                    <g className=\"scatterLogsY\"></g>\n\n                </g>\n\n            </svg>\n\n        </div>\n    )\n}\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/sensitivity/MatchingEquations.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/EtbdEmergence.js",["506","507","508","509"],"import \"../sensitivity/mathematical_models.sass\";\nimport { nanoid } from \"nanoid\";\n\n// import \"../etbd_selection/selection.sass\";\nimport { useState, useEffect } from \"react\";\n\nimport ReadMore from \"./ReadMore\";\nimport CollapseHook from \"./CollapseHook\"\n\n//import DrawEtbdInteractive from \"../etbd_emergence/DrawEtbdInteractive\"\n\n//import EmergenceDemo from \"../etbd_emergence/EmergenceDemo\";\nimport EmergenceMain from \"../emergence/EmergenceMain\";\n\n\nexport default function EtbdEmergence(props) {\n\n    var [population, updatePopulation] = useState()\n\n\n    return (\n        <div\n            className=\"item\"\n            content1={props.qualDate}\n            key={nanoid()}\n            id={props.date}\n\n            style={{\n                fontFamily: props.fontFam,\n                marginTop: \"3rem\",\n                marginBottom: \"3rem\"\n            }}\n        >\n            <div key={nanoid()} className=\"itemContent\">\n\n\n                {/* -------------------      EMERGENCE demo      ---------------------- */}\n\n\n                <div key={nanoid()} className=\"projectColumnLeft\" >\n\n                    <span key={nanoid()} className=\"title\">{props.title}</span>\n\n                    <ReadMore maxChars={1000} overview={props.description} />\n\n                    <CollapseHook\n                        collapsedTitle={\"Relevant work\"}\n                        collapsedText={\n                            <div key={nanoid()} className=\"divRefs\">  {props.references}  </div>\n                        }\n                    />\n                    <div key={nanoid()} className=\"links\" >  {props.links}  </div>\n                </div>\n\n\n\n\n                <div key={nanoid()} className=\"demo_emergence\">\n                    {/* <EmergenceDemo /> */}\n                    <EmergenceMain />\n                </div>\n\n\n            </div>\n        </div>\n    )\n}\n\n{/* <div className=\"infoCarousel\">\n                                <p>The text changes, guiding the user through the simulation.</p>\n                            </div> */}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/etbd_emergence/DrawEtbdInteractive.js",["510","511","512","513","514","515","516","517","518","519"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/EmergenceMain.js",["520","521","522","523","524","525","526","527","528","529","530","531","532"],"import \"./fade_effects.sass\"\n\nimport \"../sensitivity/mathematical_models.sass\";\nimport \"../etbd_emergence/emergence.sass\";\nimport \"./emergence22.sass\";\n\nimport \"./selection/toggle_reinforcement.sass\"\n\nimport React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { dec2binList } from \"../etbd_hamming/hammingFunctions\";\nimport * as d3 from \"d3\";\n\nimport { Fade } from \"react-reveal\"\n\nimport { NeonStart, NeonEmission, NeonEmissionV2, NeonCreateNewPopulation, NeonSelection, NeonRecombination, NeonMutation } from \"./NeonsFunctionality\";\n\n\n// import ToggleReinforcement from \"./selection/ToggleReinforcement\"\n// import EmergenceSettings from \"./EmergenceSettings\"\n// import { ToggleButtonGroup, ToggleButton, Button } from \"react-bootstrap\"\n\n\nimport AgentHistory from \"./AgentHistory\"\n\nimport ButtonNext from \"./ButtonNext\"\n\n//import RecombinationDemo from \"./recombination/RecombinationDemo\"\nimport MutationDemo from \"./mutation/MutationDemo\"\n\nimport Emission from \"./emission/Emission\"\nimport Selection from \"./selection/Selection\"\nimport { Button } from \"react-bootstrap\"\n\nimport Rec2 from \"./rechooks/Rec2\"\n\nimport { MyD3Component } from \"./SvgRecord\"\n\n\nlet defaultGeneration = []\n\nfor (let i = 0; i < 5; i++) {\n\n    defaultGeneration.push(\n        {\n            phenotype: \"\",\n            genotype: \"\",\n            status: \"\",      // emited, reinforced, or empty; used in emergence22.sass for styling;\n            fitness: 0,\n            mutant: false\n        }\n    )\n}\n\n\nexport default class EmergenceMain extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            agentHistory: [{ tn: -2, population: defaultGeneration }, { tn: -1, population: defaultGeneration }],\n\n            popSize: 5,\n            nrBits: \"\",\n\n            demoState: \"start\",\n            low: 0,\n            high: 63,\n\n            ems: \"?\",\n            reinforced: false,\n            rnfMessage: \"not reinforced\",\n            rnfColor: \"#555\",\n\n            parents: [],\n            genotype1: [0, 0, 0, 0, 0, 0],\n            genotype2: [1, 1, 1, 1, 1, 1],\n\n            childPhenotype: 57,\n            childGenotype: [0, 1, 0, 1, 1, 1, 1],\n\n            mutatedPhenotype: \"?\",\n            mutatedGenotype: [\"?\", \"?\", \"?\", \"?\"],\n\n            fitnessZero: \"\",\n            allParents: [],\n            allChildren: [],\n\n            fitness_colors: [\"#000\", \"#ff6200\"],\n            responses: 0,\n\n            miu1: 15\n        }\n\n        this.initializeAgent = this.initializeAgent.bind(this)\n        this.doSomething = this.doSomething.bind(this)\n        this.recombinePair = this.recombinePair.bind(this)\n        this.addChildItem = this.addChildItem.bind(this)\n        this.automateRecombination = this.automateRecombination.bind(this)\n    }\n\n\n    componentWillMount() {\n        console.log(\"EmergenceMain willMount; get rid of it.\")\n        let binaryHigh = this.state.high.toString(2)\n        this.setState({ nrBits: binaryHigh.length })\n        let cg = Array.apply(null, Array(binaryHigh.length)).map(function (x, i) { return \"\"; })\n        this.setState({ childGenotype: cg })\n    }\n\n\n    componentDidMount() {\n        this.initializeAgent()\n    }\n\n    initializeAgent = () => {\n\n        this.setState({ demoState: \"emission\" })\n\n        let bits = this.state.nrBits\n\n        let population = []\n        let generation = []\n        let n = this.state.popSize\n\n        for (let i = 0; i < n; i++) {\n            let x = d3.randomInt(this.state.low, this.state.high)()\n            population.push(x)\n        }\n\n        population.sort((a, b) => a > b)\n\n        this.setState({ parentPopulation: population })\n        this.setState({ population: population })\n\n        // AGENT HISTORY:\n        let history = this.state.agentHistory\n\n        population.forEach((item) => {\n            let bitString = dec2binList(bits, parseInt(item))\n            generation.push({\n                phenotype: parseInt(item),\n                genotype: bitString,\n                status: \"\"\n            })\n        })\n\n        history.push({\n            tn: 0,\n            population: generation\n        })\n\n        this.setState({ agentHistory: history })\n    }\n\n\n\n    // EMIT A RESPONSE\n\n    doSomething = (value) => {\n        let history = this.state.agentHistory\n        let gen = history[history.length - 1]\n        let pop = gen.population\n\n        let individual = pop.filter(item => item.phenotype === parseInt(value))\n\n        individual[0].status = \"emited\"\n\n        this.setState({ ems: parseInt(value) })\n        this.setState({ agentHistory: history })\n        this.setState({ demoState: \"selection\" })\n    }\n\n\n\n\n    reinforceResponse = () => {\n\n        let ah = this.state.agentHistory\n        let gn = ah[ah.length - 1]\n\n        if (this.state.reinforced === false) {\n            let ems = gn.population.filter(item => item.status === \"emited\")[0]\n            ems.status = \"reinforced\"\n\n            this.setState({ fitnessZero: ems.phenotype })\n\n            gn.population.forEach((item) => {\n                // let rf = Math.abs(item.phenotype - ems.phenotype)\n                // item.fitness = rf\n\n                let rd = Math.abs(item.phenotype - ems.phenotype)\n                let a = 1 / this.state.miu1\n                let rf = a * Math.E ** (-a * item.phenotype)\n                let rf1 = 1 - Math.E ** (-a * item.phenotype)\n\n\n                item.fitness = rf.toFixed(3)\n\n                // console.log('-------------')                \n                // console.log(\"rd: \", rd)\n                // console.log(\"miu1: \", this.state.miu1)\n                // console.log(\"a: \", a)\n                // console.log(\"rf: \", rf)\n            })\n\n            let chosenFitness = d3.randomExponential(1 / this.state.miu1)(this.state.low, this.state.high)\n\n\n            console.log(\"chosenFitness: \", parseInt(chosenFitness))\n            // let myVals = []\n            // for (let i = 0; i < 1000000; i++) {\n            //     // let chosenFitness = d3.randomExponential(1, 5)(this.state.miu1)\n            //     let chosenFitness = d3.randomExponential(1 / this.state.miu1)(this.state.low, this.state.high)\n\n            //     let cf = parseInt(chosenFitness)\n            //     myVals.push(1 / chosenFitness)\n            // }\n\n            // console.log(\"miu = 5, (1, 5): \", d3.mean(myVals), d3.median(myVals))\n\n            // let chosenFitness = d3.randomExponential(1, 5)(this.state.miu1) * 1000\n            // let cf = parseInt(chosenFitness)\n\n\n\n\n        } else {\n            let ems = gn.population.filter(item => item.status === \"reinforced\")[0]\n            ems.status = \"emited\"\n        }\n\n\n        this.setState({ agentHistory: ah })\n\n        if (this.state.reinforced === false) {\n            this.setState({\n                reinforced: true,\n                rnfMessage: \"reinforced\",\n                rnfColor: \"yellow\"\n            })\n        } else {\n            this.setState({\n                reinforced: false,\n                rnfMessage: \"not reinforced\",\n                rnfColor: \"#555\"\n            })\n        }\n    }\n\n\n\n    //  SELECT PARENTS:\n\n    doSomethingSelect = (event) => {\n        let value = event.currentTarget.value\n        let bits = this.state.nrBits\n        let gn = dec2binList(bits, parseInt(value))\n        let ppp = this.state.parents\n        let allP = this.state.allParents\n\n        ppp.push(parseInt(value))\n\n        if (ppp.length === 1) {\n            this.setState({ parents: ppp })\n            allP.unshift(ppp)\n        }\n\n        if (ppp.length === 2) {\n            ppp.sort((a, b) => a > b)\n            allP[0] = ppp\n            this.setState({ allParents: allP, parents: [] })\n        }\n\n        if (allP.length >= this.state.popSize && ppp.length === 2) {\n            let pair = allP[0]\n            let idx = 0\n\n            let p1 = parseInt(pair[0])\n            let p2 = parseInt(pair[1])\n            let g1 = dec2binList(this.state.nrBits, p1)\n            let g2 = dec2binList(this.state.nrBits, p2)\n\n            allP[idx] = []\n\n            this.setState({\n                parents: [p1, p2],\n                genotype1: g1,\n                genotype2: g2,\n                allParents: allP,\n                demoState: \"recombination\"\n            })\n        }\n    };\n\n\n\n    twoFitParents = () => {\n        let parents = []\n\n        let miu = 15\n        let fitnessZero = this.state.ems\n        let range = [this.state.low, this.state.high]\n\n        let parentPopulation = this.state.agentHistory[this.state.agentHistory.length - 1].population\n        let population = []\n\n        parentPopulation.forEach((item) => {\n            population.push(item.phenotype)\n        })\n\n        while (parents.length < 2) {\n            let randomFitness = parseInt(d3.randomExponential(1 / miu)(range[0], range[1]))\n            let phen1 = fitnessZero - randomFitness\n            let phen2 = fitnessZero + randomFitness\n\n            if (population.includes(phen1) && !parents.includes(phen1) && parents.length < 2) {\n                parents.push(phen1)\n            }\n\n            if (population.includes(phen2) && !parents.includes(phen2) && parents.length < 2) {\n                parents.push(phen2)\n            }\n        }\n\n        return parents\n    }\n\n\n\n\n    automateSelection = () => {\n        let parentPopulation = this.state.agentHistory[this.state.agentHistory.length - 1].population\n        let bits = this.state.nrBits\n        let allP = this.state.allParents\n        let i = 0\n\n\n        for (i; i < this.state.popSize; i++) {\n\n            let pair = []\n\n            if (this.state.reinforced === true) {\n                pair = this.twoFitParents()\n            } else {\n                let p1 = parentPopulation[Math.floor(Math.random() * parentPopulation.length)]\n                let p2 = parentPopulation[Math.floor(Math.random() * parentPopulation.length)]\n                pair = [p1.phenotype, p2.phenotype]\n            }\n\n            pair.sort((a, b) => a > b)\n            allP.unshift(pair)\n        }\n\n        this.setState({\n            allParents: allP,\n            demoState: \"recombination\"\n        })\n    };\n\n\n\n\n\n\n\n\n\n    recombinePair = (event) => {\n        let x0 = event.currentTarget.id\n        let x = event.currentTarget.id.split(\"_\")\n        let idx = parseInt(x[1]) - 1\n        let allPairs = this.state.allParents\n\n        allPairs[idx] = []\n\n        let v = event.currentTarget.value.split(\",\")\n        let p1 = parseInt(v[0])\n        let p2 = parseInt(v[1])\n        let g1 = dec2binList(this.state.nrBits, p1)\n        let g2 = dec2binList(this.state.nrBits, p2)\n\n        this.setState({\n            parents: [p1, p2],\n            genotype1: g1,\n            genotype2: g2,\n            allParents: allPairs\n        })\n    };\n\n\n\n    automateRecombination = () => {\n        let bits = this.state.nrBits\n        let allP = this.state.allParents\n        let allC = []\n\n        allP.forEach(pair => {\n            let p1 = pair[0]\n            let p2 = pair[1]\n            let g1 = dec2binList(bits, p1)\n            let g2 = dec2binList(bits, p2)\n\n            let cg = []\n            let cp = 0\n\n            for (let i = 0; i < g1.length; i++) {\n                let gene = \"\"\n                let power = g1.length - i - 1\n\n\n                let rnd = Math.random()\n                if (rnd < .5) {\n                    gene = parseInt(g1[i])\n                } else {\n                    gene = parseInt(g2[i])\n                }\n\n                cg.push(gene)\n                let slotValue = gene * 2 ** power\n                cp = cp + slotValue\n            }\n\n\n            let childItem = this.createChildItem(cp)\n            allC.push(childItem)\n        })\n\n\n        this.setState({\n            allChildren: allC,\n            demoState: \"mutation\"\n        })\n    };\n\n\n\n\n    createChildItem = (value) => {\n        let a = parseInt(value)\n        let b = dec2binList(this.state.nrBits, a)\n        let rf = Math.abs(a - this.state.fitnessZero)\n        return (\n            {\n                phenotype: a,\n                genotype: b,\n                fitness: rf,\n                mutant: false,\n                status: \"\"\n            }\n        )\n    };\n\n    addChildItem = (newChild) => {\n        let childItem = this.createChildItem(newChild)\n        let ac = this.state.allChildren\n        ac.push(childItem)\n\n        if (ac.length >= this.state.popSize) {\n            this.setState({\n                parents: [],\n                allChildren: ac,\n                demoState: \"mutation\"\n            })\n        }\n\n        let allPairs = this.state.allParents\n        let pair = allPairs.find(item => item.length === 2)\n\n        if (pair) {\n            let idx = allPairs.indexOf(pair)\n            let p1 = parseInt(pair[0])\n            let p2 = parseInt(pair[1])\n            let g1 = dec2binList(this.state.nrBits, p1)\n            let g2 = dec2binList(this.state.nrBits, p2)\n\n            allPairs[idx] = []\n\n            this.setState({ parents: [p1, p2], genotype1: g1, genotype2: g2, allParents: allPairs, allChildren: ac })\n        }\n    };\n\n    mutateChild = (event) => {\n        let x = event.currentTarget.id.split(\"_\")\n        let idx = parseInt(x[1]) - 1\n        let childItem = this.state.allChildren[idx]\n\n        this.setState({ childPhenotype: childItem.phenotype })\n        this.setState({ childGenotype: childItem.genotype })\n        this.setState({ mutatedGenotype: childItem.genotype })\n        this.setState({ mutantIndex: idx })\n    }\n\n\n    mutateChildAutomatic = (event) => {\n        let x = event.currentTarget.id.split(\"_\")\n        let idx = parseInt(x[1]) - 1\n        let childItem = this.state.allChildren[idx]\n\n        this.setState({ childPhenotype: childItem.phenotype })\n        this.setState({ childGenotype: childItem.genotype })\n        this.setState({ mutatedGenotype: childItem.genotype })\n        this.setState({ mutantIndex: idx })\n    }\n\n\n    replaceOriginal = (mutatedChild) => {\n        let ac = this.state.allChildren\n\n        let p = parseInt(mutatedChild)\n        let g = dec2binList(this.state.nrBits, p)\n        let childIndex = this.state.mutantIndex\n\n        ac[childIndex].phenotype = p\n        ac[childIndex].genotype = g\n        ac[childIndex].mutant = true\n        ac[childIndex].status = \"mutant\"\n\n        this.setState({ allChildren: ac })\n    }\n\n\n\n    automateMutation = () => {\n        let ac = this.state.allChildren\n        let idx1 = Math.floor(Math.random() * this.state.popSize)\n        let idx2 = Math.floor(Math.random() * this.state.nrBits)\n\n        this.setState({ mutantIndex: idx1 })\n\n        let child = ac[idx1]\n\n        let childP = child.phenotype\n        let childG = child.genotype\n\n        this.setState({\n            childPhenotype: childP,\n            childGenotype: childG,\n            //mutantGenotype: child.genotype,\n        })\n\n        let mg = []\n        let mutant = 0\n\n        // Re-create the original genotype; when it reaches the bit\n        //  with index === idx2, flip it; results in a mutated genotype. \n        child.genotype.forEach((bit, i) => {\n            if (i !== idx2) {\n                mg.push(bit)\n            } else {\n                mg.push(Math.abs(1 - bit))\n            }\n        })\n\n\n        // Compute the mutated phenotype:\n        mg.forEach((bit, i) => {\n            let power = mg.length - 1 - i\n            let slotValue = bit * 2 ** power\n            mutant += slotValue\n        })\n\n        child.genotype = mg\n        child.phenotype = mutant\n        child.status = \"mutant\"\n        this.setState({\n            allChildren: ac,\n        })\n    };\n\n\n    swapPopulations = () => {\n        let ah = this.state.agentHistory\n        let ac = this.state.allChildren\n        let tn = ah[ah.length - 1].tn\n\n        let newPopulation = {\n            tn: tn + 1,\n            population: ac\n        }\n\n        ah.push(newPopulation)\n\n        // if (tn > 0) {\n        //     ah = ah,slice(1)\n        // }\n\n        this.setState({\n            agentHistory: ah,\n            allParents: [],\n            allChildren: [],\n            ems: \"\",\n            reinforced: false,\n            demoState: \"emission\",\n        })\n    };\n\n\n\n    automateOneGeneration = () => {\n        let ah = this.state.agentHistory\n        let gn = ah[ah.length - 1]\n        let tn = gn.tn\n\n        // RANDOM EMISSION:\n        let myEms = gn.population[Math.floor(Math.random() * gn.population.length)]\n        myEms.status = \"emited\"\n        this.setState({ ems: myEms.phenotype })\n        this.setState({ demoState: \"selection\" })\n\n        // SELECT PARENTS:\n        this.automateSelection()\n\n        // RECOMBINE:\n        this.automateRecombination()\n\n        // MUTATE ONE GENOTYPE:\n        setTimeout(() => {\n            this.automateMutation()\n            this.swapPopulations()\n        }, 1000)\n    };\n\n\n\n    automateMultiple = () => {\n        let x = 5\n        for (let i = 0; i < x; i++) {\n            setTimeout(this.automateOneGeneration())\n        }\n    };\n\n\n\n    render() {\n        let AllTheParents = []\n        let AllTheChildren = []\n        // let fitness_gradient = d3.scaleLinear()\n        //     .domain([1, 99])\n        //     .range([this.state.fitness_colors[0], this.state.fitness_colors[1]])\n\n\n        if (this.state.allParents) {\n            for (let i = 0; i < this.state.popSize; i++) {\n                let pairId = `pair_${i + 1}`\n                let pair = this.state.allParents[i] ? this.state.allParents[i] : [\"\", \"\"]\n\n                // let pair = [\"\", \"\"]\n                // if (this.state.allParents[i]) {\n                //     pair = this.state.allParents[i]\n                // }\n\n                AllTheParents.push(\n\n                    <button\n                        disabled={false}\n                        id={pairId}\n                        value={pair}\n                        key={nanoid()}\n                        className=\"btn-pair\"\n                        onClick={this.recombinePair}\n                    >\n                        <span>{pair[0]}</span>\n                        <span>{pair[1]}</span>\n\n                    </button>\n                )\n            }\n        };\n\n\n\n        if (this.state.allChildren) {\n            for (let i = 0; i < this.state.popSize; i++) {\n                let childId = `child_${i + 1}`\n                let childPhen = this.state.allChildren[i] ? this.state.allChildren[i].phenotype : \"\"\n                let childStatus = this.state.allChildren[i] ? this.state.allChildren[i].status : \"\"\n\n                // let childPhen = \"\"\n                // let childStatus = \"\"\n\n                // if (this.state.allChildren[i]) {\n                //     childPhen = this.state.allChildren[i].phenotype\n                //     childStatus = this.state.allChildren[i].status\n                // }\n\n                AllTheChildren.push(\n                    <button\n                        title={childStatus}\n                        id={childId}\n                        value={childPhen}\n                        key={nanoid()}\n                        className=\"btn-child\"\n                        onClick={this.mutateChild}\n                    // style={{\n                    //     background: fitness_gradient(i * 10),\n                    //     border: `1px solid ${fitness_gradient(i * 10)}`\n                    // }}\n\n                    >\n                        {childPhen}\n                    </button>\n                )\n            }\n        };\n\n\n\n        return (\n\n\n            <div key={nanoid()} className=\"row_emergence\">\n\n\n\n                <div key={nanoid()} className='columnA' >\n\n                    {/* <NeonStart\n                        demoState={this.state.demoState}\n                        randomPopulation={this.initializeAgent}\n                    /> */}\n\n\n\n                    {/* <div className=\"div_col\" key={nanoid()}>\n                        <MyD3Component\n                            // data={[10, 4, 12]}\n                            data={this.state.agentHistory}\n                        />\n                    </div> */}\n\n\n                    {/* <div className=\"div_col\" key={nanoid()}>\n                        <AgentHistory\n                            data={this.state.agentHistory.slice(1)}\n                        />\n                    </div> */}\n\n\n                    <div className=\"div_col\" key={nanoid()}>\n\n                        {/* <div className=\"div_row\">\n                            <NeonEmission demoState={this.state.demoState} />\n                        </div> */}\n\n\n                        <div className=\"div_row\">\n                            <NeonEmissionV2 demoState={this.state.demoState} />\n                        </div>\n\n\n                        <div\n                            style={{\n                                width: \"90%\",\n                                height: \"50px\",\n                                margin: \"10px auto\",\n                                padding: \"0\",\n                                justifyContent: \"space-between\",\n                                boxShadow: this.state.demoState === \"emission\" ? '0 0 10px #fff' : \"0 0 0px\"\n\n                            }}\n                            className=\"div_row\"\n                            key={nanoid()}\n                        >\n\n                            <Emission\n                                population={this.state.agentHistory[this.state.agentHistory.length - 1].population}\n                                doSomething={this.doSomething}\n                            />\n                        </div>\n\n                        <div className=\"div_row\">\n\n                            <Button\n                                variant={\n                                    this.state.reinforced === false ? \"outline-info\" : \"warning\"\n                                }\n\n                                disabled={\n                                    this.state.demoState === \"selection\" ? false : true\n                                }\n\n                                title=\"Click to reinforce it\"\n                                id=\"btnReinforce\"\n                                className=\"toggle_reinforcement\"\n                                onClick={this.reinforceResponse}\n                            // style={{\n                            //     color: this.state.rnfColor,\n                            // }}\n                            >\n                                {this.state.rnfMessage}\n                            </Button>\n                        </div>\n\n                    </div>\n\n\n                </div>\n\n\n\n\n\n\n\n\n                <div className='columnB' key={nanoid()} >\n\n\n\n\n                    <div\n                        style={{\n                            width: \"90%\",\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            margin: \"auto\",\n                            padding: \"10px\",\n                            boxShadow: \"-2px -2px 10px 1px #222\",\n\n                        }}\n                        key={nanoid()}\n                    >\n\n\n\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                width: \"100%\",\n                                margin: \"auto\",\n                            }}\n                        >\n\n                            <NeonSelection\n                                demoState={this.state.demoState}\n                                reinforced={this.state.reinforced}\n                                allParents={this.state.allParents}\n                                popSize={this.state.popSize}\n                            />\n\n                            <button\n                                className=\"btn-automate\"\n                                onClick={this.automateSelection}\n                                key={nanoid()}\n                                title=\"automate it\"\n\n                            >\n                            </button>\n                        </div>\n\n\n\n\n                        <Selection\n                            demoState={this.state.demoState}\n                            population={this.state.agentHistory[this.state.agentHistory.length - 1].population}\n                            doSomethingSelect={this.doSomethingSelect}\n                            reinforced={this.state.reinforced}\n                        />\n\n                        <div className=\"parents-wrapper\" key={nanoid()}>\n                            {AllTheParents}\n                        </div>\n\n\n\n\n                    </div>\n\n\n\n\n\n\n\n\n\n                    <div\n                        key={nanoid()}\n                        style={{\n                            width: \"90%\",\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            margin: \"20px auto\",\n                            padding: \"10px\",\n                            boxShadow: \"-2px -2px 10px 1px #222\",\n\n                        }}\n                    >\n\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                width: \"100%\",\n                                margin: \"auto auto 15px auto\",\n                            }}\n                        >\n\n                            < NeonRecombination demoState={this.state.demoState} />\n\n                            <button\n                                className=\"btn-automate\"\n                                onClick={this.automateRecombination}\n                                key={nanoid()}\n                                title=\"automate it\"\n                            >\n                            </button>\n\n                        </div>\n\n\n                        <Rec2\n                            nrBits={this.state.nrBits}\n                            demoState={this.state.demoState}\n                            low={this.state.low}\n                            high={this.state.high}\n                            addChildItem={this.addChildItem}\n                            parent1={this.state.parents[0]}\n                            parent2={this.state.parents[1]}\n                            g1={this.state.genotype1}\n                            g2={this.state.genotype2}\n                        />\n                    </div>\n\n\n\n\n                    <div\n                        style={{\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            width: \"90%\",\n                            padding: \"0px\",\n                            margin: \"auto\",\n                            boxShadow: \"-2px -2px 10px 1px #222\",\n\n                        }}\n                    >\n\n\n\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                width: \"100%\",\n                                height: \"fit-content\",\n                                margin: \"auto\",\n                                padding: \"10px\",\n                            }}\n                        >\n\n                            <NeonMutation demoState={this.state.demoState} />\n\n\n\n\n                        </div>\n\n\n\n                        <div className=\"children-wrapper\" key={nanoid()}  >\n                            {AllTheChildren}\n\n                            <button\n                                className=\"btn-swap\"\n                                onClick={this.swapPopulations}\n                                key={nanoid()}\n                                title=\"Replace parents with children and start again.\"\n                            >\n                            </button>\n\n                        </div>\n\n\n\n                        <div\n                            className=\"div_row\"\n                            key={nanoid()}\n                            style={{\n                                width: \"90%\",\n                                height: \"fit-content\",\n                                margin: \"15px auto auto auto\",\n                                padding: \"0\",\n                                justifyContent: \"space-between\"\n\n                            }}\n                        >\n\n\n                            <MutationDemo\n                                genotype={this.state.childGenotype}\n                                addToNext={this.replaceOriginal}\n                                demoState={this.state.demoState}\n                                nrBits={this.state.nrBits}\n                                childPhenotype={this.state.childPhenotype}\n                            />\n\n\n\n                        </div>\n\n\n                    </div>\n\n\n\n\n                </div>\n\n\n            </div >\n        )\n    }\n\n\n\n\n}\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/AgentHistory.js",["533"],"import React from \"react\"\nimport { nanoid } from \"nanoid\"\nimport * as d3 from \"d3\"\n\n\nexport default class AgentHistory extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n    }\n\n\n    render() {\n\n        let xxx = this.props.data.slice(0, this.props.data.length - 1)\n\n\n        // fitness gradient goes black to orange:\n        let color1 = '#000'\n        let color2 = '#ff6200'\n\n        var fitness_gradient = d3.scaleLinear()\n            .domain([0, 0.1])\n            .range([color1, color2])\n\n\n\n        return (\n\n            <div\n                id=\"divAgentHistory\"\n                style={{\n                    height: \"auto\",\n                    width: \"100%\",\n                    margin: \"auto\",\n                    border: \"0px\",\n                    backgroundColor: \"#282c34\"\n                }}\n                key={nanoid()}\n            >\n\n                {\n                    xxx.map((gn) => {\n                        return (\n                            <div>\n                                {\n                                    gn.population.map((item, i) => {\n                                        let cellId = `phenotype_${i + 1}`\n                                        return (\n\n\n                                            <button\n                                                key={nanoid()}\n                                                title={item.status}\n                                                value={item.phenotype}\n                                                id={cellId}\n                                                className=\"btn_history\"\n                                                style={{\n                                                    background: fitness_gradient(parseFloat(item.fitness)),\n                                                    border: `1px solid ${fitness_gradient(parseFloat(item.fitness))}`\n                                                }}\n                                            >\n                                                {item.phenotype}\n                                            </button>\n\n\n                                        )\n                                    })\n                                }\n                            </div>\n\n                        )\n                    })\n                }\n\n\n\n                {/* <table className=\"table_history\" key={nanoid()}>\n                    <tbody>\n\n\n                        {\n                            this.props.data.map((generation) => {\n\n                                return (\n\n                                    <tr className=\"generation\" key={nanoid()} >\n\n                                        <th className=\"cell_tn\" key={nanoid()} >\n                                            t <sub> {generation.tn} </sub>\n                                        </th>\n\n\n                                        {\n                                            generation.population.map((phenotype) => {\n\n                                                return (\n\n                                                    <td key={nanoid()} >\n                                                        {phenotype}\n                                                    </td>\n                                                )\n                                            })\n                                        }\n\n\n                                        <td key={nanoid()}  >\n                                            {generation.emission}\n                                        </td>\n\n\n                                        <td key={nanoid()} >\n                                            {generation.reinforced}\n                                        </td>\n\n                                    </tr>\n                                )\n                            })\n                        }\n\n                    </tbody>\n                </table > */}\n\n\n            </div >\n        )\n    }\n\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/ButtonNext.jsx",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/mutation/MutationDemo.jsx",["534","535","536","537","538"],"import \"./checkbox_mutation.sass\"\nimport React from \"react\"\nimport CheckProps from \"./CheckProps\"\nimport { nanoid } from \"nanoid\"\n//import ButtonNext from \"../ButtonNext\"\nimport { Button } from \"react-bootstrap\"\n\n\nexport default class MutationDemo extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.onChange = this.onChange.bind(this)\n    }\n\n\n\n    onChange = (e) => {\n        let a = this.state[[e.target.name]][0]\n        let b = this.state[[e.target.name]][1]\n        let b1 = Math.abs(1 - b)\n        let absVal = this.state[[e.target.name]][2]\n\n        this.setState({\n            [e.target.name]: [e.target.checked, b1, absVal]\n        })\n    }\n\n\n\n\n    createStates = () => {\n\n        let bits = this.props.nrBits\n        let defaultGenotype = []\n\n        let x\n\n        if (this.props.genotype === []) {\n            x = Array.length(bits).fill(\"\")\n            console.log(\"mutation genotype: \", x)\n        } else {\n            x = this.props.genotype\n        }\n\n        x.map((item, i) => {\n            let power = x.length - 1 - i\n            let cellName = `bit${power}`\n            this.setState({ [cellName]: [false, item, 2 ** power] })\n        })\n    }\n\n\n\n    componentWillMount() {\n        this.createStates()\n    }\n\n\n    computePhenotype = () => {\n        let mtn = 0\n        Object.entries(this.state).map((entry) => {\n            let info = entry[1]\n            mtn += info[1] * info[2]\n        })\n\n        return mtn\n    }\n\n\n\n    submitMutantPhenotype = (e) => {\n        let xxx = this.computePhenotype()\n        this.props.addToNext(xxx)\n    }\n\n\n\n    render() {\n\n        const Checkboxes = Object.entries(this.state).map((entry) => {\n            let cellName = entry[0]\n\n            return (\n                <CheckProps\n                    mutant={this.state[[cellName]][0]}\n                    bitState={this.state[[cellName]][1]}\n                    cellValue={this.state[[cellName]][2]}\n                    bitName={cellName}\n                    onChange={this.onChange}\n                />\n            )\n        })\n\n\n        // const myPhenotype = this.computePhenotype()\n        let myPhenotype = this.computePhenotype()\n\n\n        // let section_opacity = 0.5\n        // if (this.props.demoState === \"mutation\") {\n        //     section_opacity = 1\n        // }\n\n\n        return (\n\n            <div\n                //className=\"div_cbx\" \n                style={{\n                    width: \"100%\",\n                    margin: \"auto\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                }}\n                key={nanoid()}\n            >\n\n                <div className=\"div_cbx\" key={nanoid()}>\n                    {Checkboxes}\n                </div>\n\n                <div\n                    id='divReplaceOriginal'\n                    key={nanoid()}\n                    onClick={this.submitMutantPhenotype}\n                    title={\"click to replace the original phenotype\"}\n                >\n\n                    <span id=\"spanOriginal\" >\n                        {this.props.childPhenotype}\n                    </span>\n\n\n                    <label id=\"lblMutant\" >\n                        <div id=\"divMutantText\"\n                            style={{\n                                color: this.props.childPhenotype === myPhenotype ? \"#5ee478\" : \"tomato\",\n                            }}\n                        >\n                            {myPhenotype}\n                        </div>\n                    </label>\n\n\n                </div>\n\n\n\n\n            </div>\n\n        )\n    }\n}\n\n\n\n\n\n\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/mutation/CheckProps.js",["539"],"import React from \"react\"\nimport { nanoid } from \"nanoid\"\nimport parse from \"html-react-parser\"\n\nexport default class CheckProps extends React.Component {\n\n    render() {\n        return (\n\n            <React.Fragment>\n\n\n                <label\n                    className=\"cbx_mutation\"\n                    key={nanoid()}\n                    style={{\n                        textAlign: \"center\",\n                        fontSize: \"13px\",\n                        fontWeight: 300,\n                        //height: \"40px\",\n                        //border: \"1px solid red\"\n\n                    }}\n                    title={2 ** this.props.bitName[this.props.bitName.length - 1]}\n\n                    data-power2={this.props.power2}\n\n                >\n\n                    2<sup>{this.props.bitName[this.props.bitName.length - 1]}</sup>\n\n\n                    <input\n                        key={nanoid()}\n                        className=\"cbx_input\"\n                        type=\"checkbox\"\n                        //type=\"radio\"\n                        checked={this.props.mutant}\n                        value={this.props.bitState}\n                        name={this.props.bitName}\n                        onChange={this.props.onChange}\n                    />\n\n\n                    <div\n                        value={this.props.bitState}\n\n                        class=\"cbx_text\"\n                        key={nanoid()}\n                    >\n                        {this.props.bitState}\n                    </div>\n\n                </label>\n\n            </React.Fragment>\n\n        )\n    }\n}\n\n\n\n\n\n\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/HammingDistances.js",["540","541"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/recombination/RecombinationDemo.jsx",["542","543","544","545"],"import \"./radio_bit.sass\"\n\n\nimport React from \"react\"\n\nimport { nanoid } from \"nanoid\"\n//import ButtonNext from \"../ButtonNext\"\n\nimport RadioBit from \"./RadioBit\"\nimport { dec2binList } from \"../../etbd_hamming/hammingFunctions\";\nimport { Button } from \"react-bootstrap\"\n\nexport default class RecombinationDemo extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.onChange = this.onChange.bind(this)\n    }\n\n\n    onChange = (e) => {\n\n        console.log(\"Recombination on change, props demoState =  \", this.state.demoState)\n\n\n        let a = this.state[[e.target.name]]\n        console.log(\"recombination, on change, a: \", a)\n        this.setState({\n            [e.target.name]: [a[0], a[1], parseInt(e.target.value), a[3]]\n        })\n    }\n\n\n\n\n\n\n    createStates = () => {\n\n        let nrBits = this.props.nrBits\n        let p1, p2, x1, x2\n\n        if (!this.props.parents) {\n            p1 = this.props.low\n            p2 = this.props.high\n            x1 = dec2binList(nrBits, p1)\n            x2 = dec2binList(nrBits, p2)\n        } else {\n            p1 = this.props.parent1\n            p2 = this.props.parent2\n            x1 = this.props.genotype1\n            x2 = this.props.genotype2\n\n        }\n\n\n        x1.map((item, i) => {\n            let power = x1.length - 1 - i\n            let cellName = `myChildBit${power}`\n            let outcome = \"\"\n            let rnd = Math.random()\n            if (rnd < .5) {\n                outcome = x1[i]\n            } else {\n                outcome = x2[i]\n            }\n\n            this.setState({ [cellName]: [x1[i], x2[i], outcome, 2 ** power] })\n        })\n    }\n\n\n\n\n\n\n    componentWillMount() {\n        this.createStates()\n    }\n\n\n    // componentDidUpdate() {\n    //     this.createStates()\n    // }\n\n\n    computeChildPhenotype = () => {\n        let child = 0\n        let emptyBits = 0\n        Object.entries(this.state).map((entry) => {\n            let bitState = entry[1][2]\n            let slotValue = entry[1][3]\n            child += bitState * slotValue\n\n            if (bitState === \"?\" | bitState === \"\") {\n                emptyBits += 1\n            }\n        })\n\n        if (emptyBits > 0) {\n            return \"\"\n        } else {\n            return child\n        }\n    }\n\n\n    submitChildPhenotype = (e) => {\n        let cp = this.computeChildPhenotype()\n        //this.props.goToMutation(xxx)\n        this.props.addChildItem(cp)\n    }\n\n\n\n    render() {\n\n\n\n        let MyGenotypes = Object.entries(this.state).map((entry) => {\n\n            let cellName = entry[0]\n            let sameThing = false\n\n            if (this.state[[cellName]][0] === this.state[[cellName]][1]) {\n                sameThing = true\n            }\n            return (\n                <RadioBit\n                    bitName={cellName}\n                    bitState1={this.state[[cellName]][0]}\n                    bitState2={this.state[[cellName]][1]}\n                    chosenBit={this.state[[cellName]][2]}\n                    equal={sameThing}\n                    onChange={this.onChange}\n\n                />\n            )\n        })\n\n\n        let ChildPhenotype = this.computeChildPhenotype()\n\n        let section_opacity = 0.7\n        if (this.props.demoState === \"recombination\") {\n            section_opacity = 1\n        }\n\n\n        if (this.props.demoState !== \"start\") {\n            return null\n        } else {\n            return (\n                <div\n\n                    className=\"div_genotypes\"\n                // style={{\n                //     opacity: section_opacity,\n                //     transition: \"opacity 2s\",\n                // }}\n                >\n\n\n                    <div className=\"div_radio_bit div_labels\">\n\n                        <label\n                            className=\"radio_bit\"\n                            style={{\n                                border: \"1px solid #0062cc\",\n                                borderBottom: \"0px solid #0062cc\",\n                            }}\n                        >\n                            <div\n                                value={this.props.parent1}\n                                className=\"radio_text\"\n                                style={{\n                                    color: \"#ddd\",\n                                    fontSize: \"14px\",\n                                }}\n                            >\n                                {this.props.parent1}\n\n                            </div>\n                        </label>\n\n\n                        <label\n                            className=\"radio_bit\"\n                            style={{\n                                border: \"1px solid #0062cc\",\n                                borderTop: \"none\",\n\n                            }}\n                        >\n                            <div\n                                value={this.props.parent2}\n                                className=\"radio_text\"\n                                style={{\n                                    color: \"#ddd\",\n                                    fontSize: \"14px\",\n                                }}\n                            >\n                                {this.props.parent2}\n                            </div>\n                        </label>\n\n\n\n                        <label className=\"radio_bit\"\n                            style={{\n                                marginTop: \"5px\"\n\n                            }}\n                        >\n                            <div className=\"radio_text\"\n                                style={{\n                                    color: \"#5ee478\",\n                                    height: \"30px\",\n                                    fontSize: \"14px\",\n                                    transition: \"color 1s\",\n\n                                }}\n                            >  {ChildPhenotype}  </div>\n                        </label>\n\n                    </div>\n\n\n                    {MyGenotypes}\n\n\n                    <Button\n                        onClick={this.submitChildPhenotype}\n                        variant=\"outline-info\"\n                        style={{\n                            height: \"30px\", fontSize: \"10px\", margin: \"auto\",\n                        }}\n                    >\n                        next\n\n                    </Button>\n\n                </div>\n            )\n        }\n\n\n    }\n}\n\n\n\n\n\n\n\n",["546","547"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/recombination/RadioBit.jsx",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/NeonsFunctionality.js",["548","549","550","551","552","553","554","555"],"import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Fade } from \"react-reveal\"\n\n\n\nexport function NeonStart(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"start\") {\n            return \"light_on_orange\"\n        } else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div key={nanoid()}\n            className=\"darwinian_cycle\"\n            style={{\n                margin: \"auto\",\n                marginBottom: \"20px\",\n                marginTop: \"10px\",\n\n\n            }}\n        >\n\n\n            <h2\n                key={nanoid()}\n                className={neonClass}\n                style={{\n                    fontSize: \"20px\", textAlign: \"center\", fontFamily: \"monospace\"\n                }}\n                onClick={props.randomPopulation}\n            >\n                Click to play\n            </h2>\n\n        </div>\n\n    )\n};\n\n\n\n\nexport function NeonEmission(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"emission\") {\n            return \"light_on_white\"\n        } else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div\n            key={nanoid()}\n            className=\"darwinian_cycle\"\n            // style={{ margin: \"30px auto 0px auto\", }}\n            style={{ margin: \"auto\", }}\n\n        >\n\n            <h2\n                key={nanoid()}\n                className={neonClass}\n                style={{\n                    fontSize: \"16px\", textAlign: \"center\", fontFamily: \"monospace\"\n                }}\n            >\n\n                <i>Emit</i> a response</h2>\n\n        </div>\n    )\n};\n\n\n\n\nexport function NeonEmissionV2(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"emission\") {\n            // return \"light_on_white_v2\"\n            return \"light_on_blue\"\n        } else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div\n            key={nanoid()}\n            className=\"darwinian_cycle\"\n            style={{\n                margin: \"auto\",\n            }}\n        >\n\n            <h2\n                key={nanoid()}\n                className={neonClass}\n                style={{\n                    fontSize: \"16px\", textAlign: \"center\", fontFamily: \"monospace\"\n                }}\n            >\n\n                <i>Emit</i> a response</h2>\n\n        </div>\n    )\n};\n// export function NeonReinforcement(props) {\n//     var [neonClass, setNeonClass] = useState(() => {\n//         if (props.demoState === \"emission\") {\n//             //return \"light_on_orange\"\n//             return \"light_on_white\"\n//         } else {\n//             return \"light_off\"\n//         }\n//     })\n\n\n//     return (\n//         <div\n//             key={nanoid()}\n//             className=\"darwinian_cycle\"\n//         >\n//             <h2\n//                 key={nanoid()}\n//                 className={neonClass}\n//             >\n\n//                 <i>Emit</i> a response</h2>\n//         </div>\n//     )\n// };\n\n\n\nexport function NeonCreateNewPopulation(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"selection\" | props.demoState === \"recombination\" | props.demoState === \"mutation\") {\n            return \"light_on_neon\"\n        } else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div\n            key={nanoid()}\n            className=\"darwinian_cycle\"\n        >\n            <h2\n                key={nanoid()}\n                className={neonClass}\n            >\n\n                Create new generation</h2>\n        </div>\n    )\n};\n\n\nexport function NeonSelection(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"selection\" && props.reinforced === true) {\n            return \"light_on_yellow\"\n        }\n        else if (props.demoState === \"selection\" && props.reinforced === false) {\n            return \"light_on_white\"\n        }\n        else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div\n            key={nanoid()}\n            className=\"darwinian_cycle\"\n        >\n            <h2\n                key={nanoid()}\n                className={neonClass}\n            >\n                Select parents\n            </h2>\n        </div>\n    )\n};\n\n\n\nexport function NeonRecombination(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"recombination\") {\n            //return \"light_on_green\"\n            return \"light_on_white\"\n\n        } else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div\n            key={nanoid()}\n            className=\"darwinian_cycle\"\n        >\n            <h2\n                key={nanoid()}\n                className={neonClass}\n            >\n                Recombination\n\n\n            </h2>\n        </div>\n    )\n};\n\n\nexport function NeonMutation(props) {\n    var [neonClass, setNeonClass] = useState(() => {\n        if (props.demoState === \"mutation\") {\n            //return \"light_on_pink\"\n            return \"light_on_white\"\n\n        } else {\n            return \"light_off\"\n        }\n    })\n\n\n    return (\n        <div\n            key={nanoid()}\n            className=\"darwinian_cycle\"\n        >\n            <h2\n                key={nanoid()}\n                className={neonClass}\n            >\n                Mutation\n            </h2>\n\n        </div>\n    )\n};","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/emission/Emission.jsx",["556","557","558"],"import \"../emergence22.sass\"\nimport React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { nanoid } from \"nanoid\"\nimport { Fade } from \"react-reveal\"\n\nexport default function Emission(props) {\n    //const [emission, setEmission] = useState(\"\")\n\n    function handleClick(event) {\n        props.doSomething(event.target.value)\n    }\n\n    return (\n        <>\n            <div\n                key={nanoid()}\n                style={{\n                    //border: \"1px solid #ff0000\",\n                    height: \"30px\",\n                    margin: \"auto\",\n                    display: \"inline-flex\",\n                    //backgroundColor: \"transparent\"\n                }}\n            >\n                {/* {\n                    props.population.map((item, i) => {\n                        let cellId = `phenotype_${i + 1}`\n                        return (\n                            <button\n                                title={\"emited\"}\n                                value={item}\n                                id={cellId}\n                                onClick={handleClick}\n                                className=\"btn_ems\"\n                                style={{\n                                    color: \"dark grey\",\n                                    width: \"30px\",\n                                    height: \"30px\",\n                                    margin: \"auto\",\n                                    //background: \"gradient fitness\",\n                                    color: \"#ff00ff\",\n\n                                }}\n\n                            >\n                                {item}\n                            </button>\n                        )\n                    })\n                } */}\n\n\n                {\n                    props.population.map((item, i) => {\n                        let cellId = `phenotype_${i + 1}`\n                        return (\n\n\n                            <button\n                                key={nanoid()}\n                                title={item.status}\n                                value={item.phenotype}\n                                id={cellId}\n                                onClick={handleClick}\n                                className=\"btn_ems\"\n                            >\n                                {item.phenotype}\n                            </button>\n\n                        )\n                    })\n                }\n\n\n            </div>\n        </>\n\n    )\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/selection/ToggleReinforcement.jsx",["559"],"import { useState, useEffect } from \"react\"\nimport { nanoid } from \"nanoid\"\nimport \"./toggle_reinforcement.sass\"\n\n\nexport default function ToggleReinforcement(props) {\n    const [reinforced, setReinforced] = useState(false)\n    const [btnText, setBtnText] = useState(\"not reinforced\")\n\n    const myText = [\"not reinforced\", \"reinforced\"]\n\n    function handleChange(e) {\n        if (e.target.checked === false) {\n            setReinforced(!reinforced)\n            setBtnText(myText[1])\n        }\n        if (e.target.checked === true) {\n            setReinforced(!reinforced)\n            setBtnText(myText[0])\n        }\n\n    }\n\n    return (\n        <label\n            className=\"toggle_reinforcement\"\n\n            style={{\n                width: \"50px\",\n                //height: \"0px\",\n            }}\n            key={nanoid()}\n        >\n            {btnText}\n\n            <input\n                checked={reinforced}\n                value={reinforced}\n                onChange={handleChange}\n                type=\"checkbox\"\n                style={{\n                    width: \"0px\",\n                    height: \"0px\",\n                    opacity: 0,\n                }}\n                key={nanoid()}\n            >\n            </input>\n        </label>\n    )\n}",["560","561"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/selection/Selection.js",["562","563"],"import \"../emergence22.sass\"\nimport React from \"react\"\n//import { useState, useEffect } from \"react\"\nimport { nanoid } from \"nanoid\"\nimport { Fade } from \"react-reveal\"\nimport { Button } from \"react-bootstrap\"\nimport * as d3 from \"d3\"\n\nexport default class Selection extends React.Component {\n\n    // constructor(props) {\n    //     super(props)\n\n    //     this.selectParent = this.selectParent.bind(this)\n    // }\n\n\n    // selectParent = (event) => {\n\n    //     this.props.doSomethingSelect(event.target.value)\n    // }\n\n\n\n    render() {\n\n        // fitness gradient goes black to orange:\n        // let color1 = '#000'\n        // let color2 = '#ff6200'\n\n        let color1 = 'yellow'\n        let color2 = '#274235'\n\n\n        var fitness_gradient = d3.scaleLinear()\n            .domain([0, 0.1])\n            .range([color2, color1])\n\n\n        let ParentPopulation\n\n        if (this.props.population) {\n            ParentPopulation = this.props.population.map((item, i) => {\n                let cellId = `phenotype_${i + 1}`\n                let parent\n\n                if (item) {\n                    parent = item\n                } else {\n                    parent = { phenotype: \"\", genotype: \"\", status: \"\" }\n                }\n\n                return (\n\n                    <button\n                        dataParent={false}\n                        key={nanoid()}\n                        title={parent.status}\n                        value={parent.phenotype}\n                        id={cellId}\n                        onClick={this.props.doSomethingSelect}\n                        className=\"btn-selection\"\n\n                        style={{\n                            background: this.props.reinforced === true ? fitness_gradient(parseFloat(item.fitness)) : \"transparent\",\n                            border: this.props.reinforced === true ? `1px solid ${fitness_gradient(parseFloat(item.fitness))}` : `0px solid ${fitness_gradient(parseFloat(item.fitness))}`\n                        }}\n\n                    >\n                        {parent.phenotype}\n\n                    </button>\n                )\n            })\n        }\n\n\n\n        return (\n            <div className=\"parents-wrapper\" key={nanoid()}  >\n                {ParentPopulation}\n            </div>\n        )\n    }\n}\n\n\n","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/EmergenceSettings.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/rechooks/Rec2.js",["564"],"//import {useState, useEffect} from \"react\"\n// import { Form, ButtonToolbar, Button, ButtonGroup, InputGroup, FormControl } from \"react-bootstrap\"\n\nimport React from \"react\"\nimport RadioHook from \"./RadioHook\"\nimport { Button } from \"react-bootstrap\"\n\nimport { dec2binList } from \"../../etbd_hamming/hammingFunctions\";\nimport { nanoid } from \"nanoid\"\n\nexport default class Rec2 extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n\n        this.onChange = this.onChange.bind(this)\n    }\n\n\n    onChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n\n\n    createStates = () => {\n\n        let nrBits = this.props.nrBits\n        let p1, p2, x1, x2\n\n        if (!this.props.parents) {\n            p1 = this.props.low\n            p2 = this.props.high\n\n        } else {\n            p1 = this.props.parent1\n            p2 = this.props.parent2\n        }\n\n\n        x1 = dec2binList(nrBits, p1)\n        x2 = dec2binList(nrBits, p2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // console.log(\"x1, x2: \", x1, x2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        for (let i = 0; i < nrBits; i++) {\n\n            let power = x1.length - 1 - i\n            let cellName = `childBit_${power}`\n\n            let outcome = \"\"\n            let bit1 = parseInt(x1[i])\n            let bit2 = parseInt(x2[i])\n\n\n            if (bit1 === bit2) {\n                outcome = parseInt(bit1)\n            } else {\n                // let rnd = Math.random()\n                // if (rnd < .5) {\n                //     outcome = bit1\n                // } else {\n                //     outcome = bit2\n                // }\n            }\n\n\n            this.setState({ [cellName]: outcome })\n        }\n    }\n\n\n\n    componentWillMount() {\n        this.createStates()\n    }\n\n\n    computeChildPhenotype = () => {\n        let child = 0\n\n        Object.entries(this.state).map((entry) => {\n\n            let cellName = entry[0]\n            let power = cellName[cellName.length - 1]\n\n\n            let bitState = this.state[[cellName]]\n            let slotValue = 2 ** power\n\n            // 2 ** props.bitName[props.bitName.length - 1]\n\n\n\n            child += bitState * slotValue\n        })\n        return child\n    }\n\n\n\n\n\n    submitChildPhenotype = (e) => {\n        let cp = this.computeChildPhenotype()\n        this.props.addChildItem(cp)\n    }\n\n\n    render() {\n\n        let MyGenotypes = Object.entries(this.state).map((entry, i) => {\n            let cellName = entry[0]\n            let sameThing = false\n\n            if (this.props.g1[i] === this.props.g2[i]) {\n                sameThing = true\n            }\n\n            return (\n                <RadioHook\n                    bitName={cellName}\n                    bit1={this.props.g1[i]}\n                    bit2={this.props.g2[i]}\n                    chosenBit={this.state[[cellName]]}\n                    equal={sameThing}\n                    onChange={this.onChange}\n\n                />\n            )\n        })\n\n\n\n        let ChildPhenotype = this.computeChildPhenotype()\n\n\n        return (\n\n            <div\n                key={nanoid()}\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    width: \"100%\",\n                    margn: \"auto\",\n                }}\n            >\n\n                {/* <button\n                    disabled={false}\n                    //id={pairId}\n                    //value={pair}\n                    key={nanoid()}\n                    className=\"btn-pair\"\n                //onClick={this.recombinePair}\n                >\n                    <span\n                        key={nanoid()}\n                        value={this.props.parent1}\n                    // style={{\n                    //     margin: \"auto\",\n                    //     width: \"70px\"\n                    // }}\n                    >\n                        {this.props.parent1 ? this.props.parent1 : this.props.low}\n                    </span>\n\n                    <span\n                        key={nanoid()}\n                        value={this.props.parent2}\n                    // style={{\n                    //     margin: \"auto\",\n                    //     width: \"70px\"\n                    // }}\n                    >\n                        {this.props.parent2 ? this.props.parent2 : this.props.high}\n                    </span>\n\n                </button>\n\n\n                <button\n                    value={ChildPhenotype}\n                    key={nanoid()}\n                    className=\"btn-child\"\n                >\n                    {ChildPhenotype}\n\n                </button>\n\n\n\n                <div\n                    key={nanoid()}\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        //border: \"1px solid blue\",\n                        //width: \"100%\", \n                        margin: \"auto\",\n                    }}>\n\n\n                    <div\n                        key={nanoid()}\n                        style={{\n                            textAlign: \"left\",\n                            display: \"inline-flex\",\n                            margin: \"0px auto 10px auto\",\n                            //width: \"100%\",\n                            //border: \"1px solid orange\"\n\n                        }}\n                    >\n                        {MyGenotypes}\n\n                    </div>\n\n\n\n                    <div\n                        key={nanoid()}\n                        style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                            width: \"100%\",\n                            justifyContent: \"space-beteen\",\n                            margin: \"10px auto auto auto\",\n                            height: \"fit-content\",\n                            //border: \"1px solid lime\"\n\n                        }}\n                    >\n\n\n                        <Button\n                            onClick={this.submitChildPhenotype}\n                            variant=\"outline-success\"\n                            key={nanoid()}\n                            style={{\n                                width: \"70px\",\n                                height: \"30px\",\n                                fontSize: \"10px\",\n                                margin: \"auto\",\n                                padding: \"2px\",\n                                marginLeft: \"0px\",\n                            }}\n                        >\n                            next pair\n\n                        </Button>\n\n\n\n                    </div>\n\n                </div> */}\n\n                <div\n                    className=\"div_radio_bit1 div_labels1\"\n                    key={nanoid()}\n                    style={{\n                        margin: \"auto\",\n                        width: \"60px\",\n                        color: \"#ddd\",\n\n                    }}\n                >\n\n                    <label\n                        className=\"radio_bit1\"\n                        key={nanoid()}\n                        style={{\n                            backgroundColor: '#0063cc2f',\n                            marginBottom: \"0px\",\n                        }}\n                    >\n                        <div\n                            value={this.props.parent1}\n                            className=\"radio_text1\"\n                            key={nanoid()}\n                            style={{\n                                color: \"#ddd\",\n                                fontSize: \"14px\",\n                            }}\n                        >\n                            {this.props.parent1}\n\n                        </div>\n                    </label>\n\n\n                    <label\n                        className=\"radio_bit1\"\n                        key={nanoid()}\n                        style={{\n                            borderTop: \"0px solid #0063cc2f\",\n                            backgroundColor: '#0063cc2f',\n                            marginTop: \"0px\",\n                        }}\n                    >\n                        <div\n                            value={this.props.parent2}\n                            className=\"radio_text1\"\n                            key={nanoid()}\n                            style={{\n                                color: \"#ddd\",\n                                fontSize: \"14px\",\n                            }}\n                        >\n                            {this.props.parent2}\n                        </div>\n                    </label>\n\n\n\n\n                    <label\n                        //className=\"radio_bit1\"\n                        key={nanoid()}\n                        style={{\n                            marginTop: \"20px\",\n                            width: \"60px\",\n                            borderRadius: \"0px\",\n                        }}\n                    >\n                        <div\n                            //className=\"radio_text1\"\n                            key={nanoid()}\n                            style={{\n                                border: \"1px solid #0063cc90\",\n                                //color: \"#ddd\",\n                                textAlign: \"center\",\n                                height: \"100%\",\n                                fontSize: \"14px\",\n                                width: \"100%\",\n                                padding: \"2px\"\n                            }}\n                        >\n                            {ChildPhenotype}\n                        </div>\n                    </label>\n\n\n                </div>\n\n\n\n\n\n\n\n                <div\n                    key={nanoid()}\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        //border: \"1px solid blue\",\n                        //width: \"100%\", \n                        margin: \"auto\",\n                    }}>\n\n\n                    <div\n                        key={nanoid()}\n                        style={{\n                            textAlign: \"left\",\n                            display: \"inline-flex\",\n                            margin: \"0px auto 10px auto\",\n                            //width: \"100%\",\n                            //border: \"1px solid orange\"\n\n                        }}\n                    >\n                        {MyGenotypes}\n\n                    </div>\n\n\n\n                    <div\n                        key={nanoid()}\n                        style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                            width: \"100%\",\n                            justifyContent: \"space-beteen\",\n                            margin: \"10px auto auto auto\",\n                            height: \"fit-content\",\n                            //border: \"1px solid lime\"\n\n                        }}\n                    >\n\n\n                        <Button\n                            onClick={this.submitChildPhenotype}\n                            variant=\"outline-success\"\n                            key={nanoid()}\n                            style={{\n                                width: \"70px\",\n                                height: \"30px\",\n                                fontSize: \"10px\",\n                                margin: \"auto\",\n                                padding: \"2px\",\n                                marginLeft: \"0px\",\n                            }}\n                        >\n                            next pair\n\n                        </Button>\n\n\n\n                    </div>\n\n                </div>\n\n\n\n\n\n\n\n\n\n\n\n\n            </div>\n        )\n\n    }\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/rechooks/RadioHook.js",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/emergence/SvgRecord.js",["565","566"],"import { useState, useEffect, useRef } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport * as d3 from \"d3\"\n\n\nexport const MyD3Component = (props) => {\n\n    const d3Container = useRef(null)\n\n    useEffect(\n        () => {\n            if (props.data && d3Container.current) {\n                // const svg = d3.select(d3Container.current)\n                // const update = svg.append('g').selectAll('text').data(props.data)\n                // update.enter()\n                //     .append('text')\n                //     .attr('x', (d, i) => (i + 1) * 50)\n                //     .attr('y', 150)\n                //     .attr(\"font-size\", 14)\n                //     .attr(\"fill\", '#fff')\n                //     .text((d) => d)\n                // update.exit().remove()\n\n                const svg = d3.select(d3Container.current)\n                svg.append('text').attr('x', 100).attr('y', 140).text('generations').attr('fill', '#ccc').attr('font-size', '12px')\n                svg.append('text').attr('x', 15).attr('y', 70).text('B').attr('fill', '#ccc').attr('font-size', '16px')\n\n                svg.append('line')\n                    .attr('x1', 50).attr('y1', 125)\n                    .attr('x2', 50).attr('y2', 25)\n                    .attr('stroke', '#ccc')\n                    .attr('stroke-width', 1)\n\n                svg.append('line')\n                    .attr('x1', 50).attr('y1', 125)\n                    .attr('x2', 200).attr('y2', 125)\n                    .attr('stroke', '#ccc')\n                    .attr('stroke-width', 1)\n\n\n                const X = d3\n                    .scaleLinear()\n                    .domain([0, 10])\n                    .range([0, 200]);\n\n                const Y = d3\n                    .scaleLinear()\n                    .domain([10, 0])\n                    .range([0, 100]);\n\n                //let axisTime = svg.axisBottom(scaleTime);\n\n\n                const gTime = svg\n                    .append(\"g\")\n                    .attr(\"transform\", `translate(100, ${-15})`)\n\n                //gTime.call(axisTime);\n\n\n                // const update = svg.append('g').selectAll('circle').data(props.data)\n                // const update = gTime.selectAll('circle').data(props.data)\n\n                // update.enter()\n                //     .append('circle')\n                //     .attr('cx', (d) => X(d.tn))\n                //     .attr('cy', (d) => Y(d.tn))\n                //     .attr(\"r\", 3)\n                //     .attr(\"stroke\", '#ccc')\n                //     .attr(\"stroke-width\", 1)\n                //     .attr(\"fill\", '#555')\n\n                // update.exit().remove()\n\n                const update1 = gTime.selectAll('text').data(props.data.slice(2))\n\n                update1.enter()\n                    .append('text')\n                    .attr('x', (d) => X(d.tn))\n                    .attr('y', (d) => Y(d.tn))\n                    // .attr(\"stroke\", '#ccc')\n                    // .attr(\"stroke-width\", 1)\n\n                    .attr('font-size', '10px')\n\n                    .attr('fill', (d) => {\n                        let item = d.population.filter(entry => entry.status === \"emited\")\n                        if (item[0]) {\n                            return '#eee'\n                        } else {\n                            return \"#555\"\n                        }\n\n                    })\n                    .text((d) => {\n                        let item = d.population.filter(entry => entry.status === \"emited\")\n                        if (item[0]) {\n                            return item[0].phenotype\n                        } else {\n                            console.log(\"item: \", item)\n                            return \"NaN\"\n                        }\n\n                    })\n\n                update1.exit().remove()\n            }\n        },\n        [props.data, d3Container.current]\n    )\n\n\n\n    // svg1.append('circle').attr('cx', 150).attr('cy', 80).attr('r', 30).attr('fill', 'red')\n\n    // d3.select('#emergenceSvgRec').append('circle').attr('cx', 150).attr('cy', 80).attr('r', 30).attr('fill', 'red')\n    //console.log(\"svg record: \", svg1)\n\n    // let scaleTime = d3\n    //     .scaleLinear()\n    //     .domain([0, 20])\n    //     .range([0, 150]);\n\n    // let axisTime = d3.axisBottom(scaleTime);\n\n    // axisTime.ticks(10)\n    // axisTime.tickValues([5, 10, 15])\n\n    // let gTime = svg1\n    //     .append(\"g\")\n    //     .style(\"font\", \"12px sans-serif\")\n    //     .attr(\"transform\", `translate(25, ${120})`);\n\n    // gTime.call(axisTime);\n\n\n    // let scaleResponses = d3\n    //     .scaleLinear()\n    //     .domain([100, 0])\n    //     .range([0, 150]);\n\n    // let axisResponses = d3.axisLeft(scaleResponses);\n\n    // let gResponses = svg1\n    //     .append(\"g\")\n    //     .attr(\"stroke\", '#fff')\n    //     .attr(\"transform\", `translate(35, 10)`);\n\n    // gResponses.call(axisResponses);\n\n    // svg1.append(\"text\").text('responses')\n    //     .attr('x', 50)\n    //     .attr('y', 20)\n    //     .attr(\"font-size\", \"10px\")\n    //     .attr(\"fill\", \"rgb(50, 200, 100\")\n    //     .attr(\"stroke\", \"#ff0000\")\n\n    //     .attr(\"font-weight\", 300)\n    //     .style(\"color\", \"#fff\")\n\n    // svg1.append(\"text\").text('generations')\n    //     .attr('x', 10)\n    //     .attr('y', 50)\n    //     .attr(\"font-size\", \"1rem\")\n    //     .attr(\"fill\", \"rgb(50, 200, 100\")\n    //     .attr(\"font-weight\", 300)\n\n\n    return (\n        <svg ref={d3Container} key={nanoid()} className=\"svg-emergence-record\">\n\n            {/* <circle fill=\"red\" cx={10} cy={30} r={10} fill=\"lime\" id=\"testCircle\"></circle>\n            <rect fill=\"green\" x={20} y={50} width={100} height={25} id=\"testRect\"></rect>*/}\n\n        </svg>\n    )\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/ResearchTrajectory.jsx",["567","568","569","570","571","572","573","574"],"// import './chapters.sass'\n\nimport { nanoid } from \"nanoid\"\nimport data from '../../DATA/myData'\nimport parse from \"html-react-parser\"\n\n\nexport default function ResearchTrajectory() {\n\n\n    // const phenList = ['behavior acquisition, extinction,', 'extinction bursts, spontaneous recovery,', 'escape, avoidance, behavior suppression,', 'conditioned reinforcement, stimulus control, ...']\n\n    // behavior acquisition, extinction,, extinction bursts, spontaneous recovery,, escape, avoidance, behavior suppression,, conditioned reinforcement, stimulus control, ...\n\n    // const phenList = ['behavior acquisition and extinction,', 'escape and avoidance,', 'conditioned reinforcement and stimulus control, ...']\n\n\n    return (\n\n        <div\n            id='researchTrajectory'\n            key={nanoid()}\n            style={{\n                backgroundColor: '#274235',  //  green timeline\n                backgroundColor: '#FF6347',  //  tomato\n\n                backgroundColor: '#FF6347',  //  tomato\n                backgroundColor: '#FF6347',  //  tomato\n                backgroundColor: '#F0FFFF',  //  azure\n                //backgroundColor: '#FAFAD2',  //  tomato\n                backgroundColor: '#ccc',\n\n\n\n                width: '100%',\n                minHeight: '100vh'\n\n            }}\n        >\n\n\n\n\n            {/* <div className=\"carved-text\" key={nanoid()}>\n\n                <span id=\"span1\" key={nanoid()}>RESEARCH</span>\n\n\n                <span id=\"span2\" >  2007 - ____ </span>\n\n                <span className=\"span_shaddow\" key={nanoid()}>I study computational theories of behavior dynamics. That's where I started, anyway.</span>\n\n            </div> */}\n\n\n\n            <div className=\"div-row\" key={nanoid()}  >\n\n\n\n                <div className=\"col1\" key={nanoid()} >\n\n                    <div\n                        className='txt-inset-dark'\n                        key={nanoid()}\n                    >\n\n                        {/* <p className=\"paragraph-story\" key={nanoid()} >\n                            Every moment is an opportunity to <i>stop</i> and <i>do something else</i>. A fork in the road, if you will.\n                        </p>\n\n\n                        <p className=\"paragraph-story\" key={nanoid()} >\n                            The probability to \"go\" one way or another depends on experience.\n                        </p> */}\n\n\n                        {/* <p className=\"paragraph-story\" key={nanoid()} >\n                            The probability to choose a course of action depends on how it went in the past and the context in which it happened.\n                        </p> */}\n\n                        <p\n                            className=\"paragraph-story\"\n                            key={nanoid()}\n                            style={{\n                                fontSize: '14px',\n                                fontWeight: 800,\n                                width: \"450px\",\n                            }}\n                        >\n                            <b>We know </b> that all behavioral phenomena examined in the lab emerge - <span>trial</span> after <span>trial</span> after <span>trial</span> - from some combinations of reinforcers, punishers, and contextual cues.\n\n                            <br /><br />\n                            What we don't know is how it happens.\n                        </p>\n\n                        <p\n                            className=\"paragraph-story\"\n                            key={nanoid()}\n                            style={{\n                                fontSize: '16px',\n                                fontWeight: 900,\n                                //fontFamily: 'Courier New',\n                                // fontFamily: 'Architects Daughter, cursive',\n                                fontFamily: 'Roboto Mono, monospace',\n\n                                width: \"400px\",\n                                fontWeight: \"900px\",\n                                margin: \"20px auto\",\n                                fontVariantCaps: 'all-petite-caps',\n\n                            }}\n                        >\n                            <ol>\n                                <li>behavior acquisition & extinction</li>\n                                <li>undermatching</li>\n                                <li>escape and avoidance</li>\n                                <li>conditioned reinforcement</li>\n                                <li>stimulus control</li>\n                                <li>...</li>\n\n                            </ol>\n                        </p>\n\n\n\n\n\n                        {/* <p\n                            className=\"paragraph-story\"\n                            key={nanoid()}\n                            style={{\n                                fontSize: '14px',\n                                fontWeight: 900,\n                                width: \"450px\",\n\n\n                            }}\n                        >\n                            What we don't know is how it happens.\n                        </p> */}\n\n\n                    </div>\n\n\n\n\n\n                    {/* <div className=\"txt-inset-green\" key={nanoid()}\n                        style={{\n                            margin: \"20px auto 20px auto\",\n                            padding: \"20px\",\n                            fontSize: \"16px\",\n                            border: \"1px solid #777\",\n                        }}>\n\n\n                        <p\n                            className=\"paragraph-story\"\n                            key={nanoid()}\n                            style={{\n                                width: \"400px\",\n                                margin: \"auto\",\n                            }}\n                            key={nanoid()}\n\n                        >\n                            A good theory would recreate known phenomena, fill in gaps, reconcile inconsistencies, and connect the dynamics of behavior with brain function, cognition, and development.\n\n                        </p>\n                    </div> */}\n\n                </div>\n\n\n\n\n\n                {/* The probability to choose one course of action over another varies with experience.\n\n                    Choices produce preference patterns that can be analyzed on many dimensions.\n\n                    Learning theories propose causal mechanisms for how this happen.\n                    \n                    For the past fifteen years I verifyed, tested and built  computational theories of learning, or behavior dynamics.\n\n                    //------------------------------------------\n\n                    A complete theory of learning should recreate what we know, fill in the gaps, reconcile contradictory findings, and connect this body of knowledge with those from other fields (Popa, 2019)\n                    //------------------------------------------\n\n                    \n                    */}\n\n\n                {/* \n                {\n                    data.researchText.map((item) => {\n                        return (\n                            <p\n                                className=\"p-left\"\n                                style={{\n                                    border: \"1px solid #fff\",\n                                    padding: \"0px\",\n                                    margin: \"100px auto 10px auto\",\n                                    width: \"550px\",\n                                    fontSize: \"14px\",\n                                }}\n                            >\n                                {\n                                    parse(item)\n                                }\n\n                            </p>\n                        )\n                    })\n                }\n\n */}\n\n            </div>\n\n\n\n\n\n\n        </div>\n\n    )\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/teaching/TeachingCard.jsx",["575","576","577"],"import { nanoid } from \"nanoid\"\nimport React from \"react\"\nimport { Fade } from \"react-reveal\"\n\n\nexport default class TeachingCard extends React.Component {\n    render() {\n        let fontClr = \"\"\n\n        if (this.props.schoolCode === \"agnes\") {\n            fontClr = \"fcb3ff\"\n        }\n        if (this.props.schoolCode === \"emory\" || this.props.schoolCode === \"oxford\") {\n            fontClr = \"edfd36\"\n        }\n        if (this.props.schoolCode === \"georgia\") {\n            fontClr = \"71b6ff\"\n        }\n\n\n        // if (!this.props.schools.includes(this.props.schoolCode)) {\n        //     return null\n        // }\n        if (this.props.teachingDetails === false) {\n            return null\n        }\n        else {\n            return (\n                <div\n                    className='divDetails'\n                // style={{ margin: \"0px\", fontSize: \"12px\", display: \"flex\", flexDirection: \"column\", textAlign: \"left\", width: \"100%\", padding: \"0px 5px \", color: \"#19f8e2\" }}\n                >\n\n                    <span\n                        style={{\n                            margin: \"1px\",\n                            textAlign: \"left\",\n                            width: \"100%\",\n                            color: \"#eee\",\n                            color: `#${fontClr}`\n                        }}\n                    >\n                        {this.props.institution}\n                    </span>\n\n\n\n\n\n                    <span\n                        style={{\n                            margin: \"1px\",\n                            textAlign: \"left\",\n                            width: \"100%\",\n                            color: \"#ddd\",\n                        }}\n                    >\n                        {this.props.semester}  {this.props.sections > 1 ? ` , ${this.props.sections} sections` : null}\n                    </span>\n\n\n\n                    <span\n                        style={{\n                            margin: \"1px\",\n                            textAlign: \"left\",\n                            width: \"100%\",\n                            color: \"#ddd\",\n                        }}\n                    >\n                        {this.props.role === \"Instructor\" ? null : this.props.role}\n                    </span>\n\n                </div >\n            )\n        }\n\n    }\n\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/teaching/TeachingAssistant.jsx",["578","579","580"],"import { nanoid } from \"nanoid\"\nimport React from \"react\"\nimport { Fade } from \"react-reveal\"\nimport { assistantRoles } from \"../../DATA/infoTeaching\"\nimport { Card } from \"react-bootstrap\"\n\n\n\nexport default class TeachingAssistant extends React.Component {\n    render() {\n\n        const infoTA = assistantRoles()\n\n        const TARoles = infoTA.map((item) => {\n            return (\n                <tr>\n                    <th\n                        style={{\n                            padding: \"5px\",\n                            width: \"220px\",\n\n                        }}\n                    >\n                        {item.name}\n                    </th>\n\n                    <td\n                        style={{\n                            padding: \"5px\",\n                            width: \"150px\",\n                        }}\n                    >\n                        {item.semester}\n                    </td>\n\n                    <td\n                        style={{\n                            padding: \"5px\",\n                            width: \"150px\",\n                        }}\n                    >\n                        for {item.instructor}\n                    </td>\n                </tr>\n            )\n        })\n\n        return (\n            <div\n\n                style={{\n                    width: \"100%\",\n                    margin: \"auto\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    //padding: \"0px\",\n                    //color: \"#19f8e2\", \n                }}\n            >\n\n                <div className='divDetails'>\n\n                    <table>\n                        {TARoles}\n\n                    </table>\n\n\n\n                </div >\n\n\n\n\n\n                {/* \n                <Card\n                    className=\"card\"\n                    key={nanoid()}\n                    style={{\n                        width: \"180px\",\n                        backgroundColor: \"transparent\",\n                        opacity: 1,\n                        boxShadow: \"1px 1px 4px #042e23\",\n                        border: \"0px solid #31D1B3\",\n                    }}\n                >\n\n                    <Card.Title\n                        style={{\n                            fontSize: \"12px\",\n                            textAlign: \"center\",\n                            //color: \"#31D1B3\",\n                            color: \"#bbb\",\n                            marginTop: \"10px\"\n                        }}\n                    >\n                        Teaching Assistant\n\n                    </Card.Title>\n\n                    <Card.Subtitle\n                        style={{\n                            fontSize: \"12px\",\n                            textAlign: \"center\",\n                            marginBottom: \"15px\",\n                            color: \"#bbb\"\n                        }}\n                    >\n                        Emory University <br />2007 - 2013\n\n                    </Card.Subtitle>\n\n\n                    {TARoles}\n\n                </Card>\n\n */}\n            </div >\n        )\n    }\n\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/radar/RadarChart.jsx",[],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/radar/radarData.jsx",["581"],"//let d3.scale.ordinal = require(\"d3\")\nimport react from \"react\"\n\nimport * as d3 from \"d3\"\n\n\nexport function radarData() {\n\n\n    // let myData = [\n    //     [//iPhone\n    //         { axis: \"Battery Life\", value: 0.22 },\n    //         { axis: \"Brand\", value: 0.28 },\n    //         { axis: \"Contract Cost\", value: 0.29 },\n    //         { axis: \"Design And Quality\", value: 0.17 },\n    //         { axis: \"Have Internet Connectivity\", value: 0.22 },\n    //         { axis: \"Large Screen\", value: 0.02 },\n    //         { axis: \"Price Of Device\", value: 0.21 },\n    //         { axis: \"To Be A Smartphone\", value: 0.50 }\n    //     ], [//Samsung\n    //         { axis: \"Battery Life\", value: 0.27 },\n    //         { axis: \"Brand\", value: 0.16 },\n    //         { axis: \"Contract Cost\", value: 0.35 },\n    //         { axis: \"Design And Quality\", value: 0.13 },\n    //         { axis: \"Have Internet Connectivity\", value: 0.20 },\n    //         { axis: \"Large Screen\", value: 0.13 },\n    //         { axis: \"Price Of Device\", value: 0.35 },\n    //         { axis: \"To Be A Smartphone\", value: 0.38 }\n    //     ], [//Nokia Smartphone\n    //         { axis: \"Battery Life\", value: 0.26 },\n    //         { axis: \"Brand\", value: 0.10 },\n    //         { axis: \"Contract Cost\", value: 0.30 },\n    //         { axis: \"Design And Quality\", value: 0.14 },\n    //         { axis: \"Have Internet Connectivity\", value: 0.22 },\n    //         { axis: \"Large Screen\", value: 0.04 },\n    //         { axis: \"Price Of Device\", value: 0.41 },\n    //         { axis: \"To Be A Smartphone\", value: 0.30 }\n    //     ]\n    // ]\n\n    let myData = [\n        [//iPhone\n            //{ axis: \"\", value: 0.51 },\n\n            { axis: \"Sensitivity\", value: 0.75 },\n            { axis: \"Variability\", value: 0.4 },\n            { axis: \"Bias\", value: 0.5 },\n\n            { axis: \"\", value: 0.6 },\n            { axis: \"\", value: 0.75 },\n            { axis: \"\", value: 0.22 },\n            { axis: \"\", value: 0.61 },\n            { axis: \"\", value: 0.70 },\n            { axis: \"\", value: 0.21 },\n            { axis: \"\", value: 0.80 },\n\n            { axis: \"\", value: 0.50 },\n            { axis: \"\", value: 0.21 },\n            // { axis: \"\", value: 0.50 },\n\n        ]\n    ]\n\n    return myData\n\n}\n\n\n\n\nexport function radarOptions() {\n\n    let w = 400\n    let h = 300\n    //let margin = { top: 100, right: 100, bottom: 100, left: 100 }\n    let margin = { top: 0, right: 0, bottom: 0, left: 0 }\n\n    let width = Math.min(w, window.innerWidth - 10) - margin.left - margin.right\n\n    let height = Math.min(h, window.innerHeight - margin.top - margin.bottom - 20)\n\n\n\n    // let color = d3.scaleOrdinal()\n    //     .range([\n    //         \"#EDC951\",   //\n    //         \"#CC333F\",   //\n    //         \"#00A0B0\"    //\n    //     ])\n\n\n    let color = d3.scaleOrdinal()\n        .range([\n            \"#ccc\",   //\n            \"#CC333F\",   //\n            \"#00A0B0\"    //\n        ])\n\n\n    let myOptions = {\n        w: width,\n        h: height,\n        margin: margin,\n        maxValue: 1,\n\n        levels: 2,\n        dotRadius: 3,\n\n        roundStrokes: false,\n        color: color,\n\n        dotFill: \"#777\",\n\n        // arcSize: Math.PI * 2,\n        arcSize: Math.PI * 2,\n\n        maxAngle: 30,\n\n\n    }\n\n    return myOptions\n}\n\n",["582","583"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/radar/RadarFunction.jsx",["584","585","586","587","588"],"import \"./radarStyles.sass\"\n\nimport * as d3 from \"d3\"\nimport { radarData, radarOptions } from \"./radarData\"\n\nimport { useEffect } from \"react\"\n\nexport default function RadarFunction() {\n    // let id = '.radarChart'\n    let id = '#svgRadar'\n\n    let data = radarData()\n    let options = radarOptions()\n\n\n    var cfg = {\n        w: 400,\n        h: 300,\n        // margin: { top: 20, right: 20, bottom: 20, left: 20 },\n        margin: { top: 0, right: 0, bottom: 0, left: 0 },\n\n        levels: 3,\t\t\t\t// number of inner circles\n        minValue: 0,\n        maxValue: 0,\n\n        labelFactor: 1.30, \t//How much farther than the radius of the outer circle should the labels be placed\n        wrapWidth: 60, \t\t//The number of pixels after which a label needs to be given a new line\n        //opacityArea: 0.35, \t//The opacity of the area of the blob\n        opacityArea: 0.15, \t// blob area\n        dotRadius: 5,\n\n        opacityCircles: 0.0, \t//The opacity of the circles of each blob\n        strokeWidth: 1, \t\t//The width of the stroke around each blob\n        roundStrokes: false,\t//If true the area and stroke will follow a round path (cardinal-closed)\n        color: d3.scaleOrdinal(),\n\n\n        dotFill: \"#ccc\",\n        // arcSize: Math.PI * 2,\n        arcSize: Math.PI * 2,\n\n        maxAngle: 30,\n\n    };\n\n    //Put all of the options into a variable called cfg\n    if ('undefined' !== typeof options) {\n        for (var i in options) {\n            if ('undefined' !== typeof options[i]) { cfg[i] = options[i]; }\n        }//for i\n    }//if\n\n\n\n    // max value; if the supplied maxValue is smaller than the actual one, replace by the max in the data; ... wow\n\n    // var maxValue = Math.max(cfg.maxValue, d3.max(data, function (i) { return d3.max(i.map(function (o) { return o.value; })) }));\n\n    var maxValue = cfg.maxValue;\n\n\n\n    // axes' names\n    var allAxis = (data[0].map(function (i, j) { return i.axis }))\n\n    var total = allAxis.length // nr of axes\n    var radius = Math.min(cfg.w / 2, cfg.h / 2)\n    var Format = d3.format('%')\n\n    // slice width, in radians: \n    // var angleSlice = Math.PI * 2 / total\n\n    var angleSlice = cfg.arcSize / total\n\n\n\n    // Scale for the radius\n\n    var rScale = d3.scaleLinear()\n        .range([0, radius])\n        .domain([0, maxValue]);\n\n\n\n\n\n    /////////////////////////////////////////////////////////\n    //////////// Create the container SVG and g /////////////\n    /////////////////////////////////////////////////////////\n\n\n    useEffect(() => {\n        d3.select(id).select(\"svg\").remove();\n\n        //Initiate the radar chart SVG\n        // var svg = d3.select(id).append(\"svg\")\n        //     .attr(\"width\", cfg.w + cfg.margin.left + cfg.margin.right)\n        //     .attr(\"height\", cfg.h + cfg.margin.top + cfg.margin.bottom)\n        //     .attr(\"class\", \"radar\" + id);\n\n        var svg = d3.select('#svgRadar')\n\n        // var svg = d3.select(id).append(\"svg\")\n        //     .attr(\"width\", cfg.w + cfg.margin.left + cfg.margin.right)\n        //     .attr(\"height\", cfg.h + cfg.margin.top + cfg.margin.bottom)\n        //     .attr(\"class\", \"radar\" + id);\n\n        //Append a g element\t\t\n        var g = svg.append(\"g\")\n            .attr(\"transform\",\n                // `translate(${(cfg.w / 4 + cfg.margin.left + 650)} , ${(cfg.h / 2 + cfg.margin.top + cfg.h / 4 + 120)})`\n\n                `translate(${(cfg.w / 2 + cfg.margin.left)} , ${(cfg.h / 2 + cfg.margin.top)})`\n            );\n\n        // .attr(\"transform\", \"translate(\" + (cfg.w / 2 + cfg.margin.left) + \",\" + (cfg.h / 2 + cfg.margin.top) + \")\");\n\n        /////////////////////////////////////////////////////////\n        ////////// Glow filter for some extra pizzazz ///////////\n        /////////////////////////////////////////////////////////\n\n        //Filter for the outside glow\n        var filter = g.append('defs').append('filter').attr('id', 'glow'),\n            feGaussianBlur = filter.append('feGaussianBlur').attr('stdDeviation', '2.5').attr('result', 'coloredBlur'),\n            feMerge = filter.append('feMerge'),\n            feMergeNode_1 = feMerge.append('feMergeNode').attr('in', 'coloredBlur'),\n            feMergeNode_2 = feMerge.append('feMergeNode').attr('in', 'SourceGraphic');\n\n\n\n        //                     CIRCULAR GRID        \n\n        // var gArcs = svg.append('g')\n        //     .attr(\"transform\",\n        //         `translate(${525}, ${225})`);\n\n        // var arc1 = d3.arc()\n        //     .innerRadius(149)\n        //     .outerRadius(150)\n        //     .startAngle(0)\n        //     .endAngle(Math.PI / 2);\n\n        // gArcs.append(\"path\")\n        //     .attr(\"class\", \"arc1\")\n        //     .attr(\"d\", arc1)\n        //     .attr(\"fill\", \"tomato\");\n\n\n        //Wrapper for the grid & axes\n        var axisGrid = g.append(\"g\").attr(\"class\", \"axisWrapper\");\n\n        //Draw the background circles\n\n        // axisGrid.selectAll(\".levels\")\n        //     .data(d3.range(1, (cfg.levels + 1)).reverse())\n        //     .enter()\n        //     .append(\"circle\")\n        //     .attr(\"class\", \"gridCircle\")\n        //     .attr(\"r\", function (d, i) { return radius / cfg.levels * d; })\n        //     .style(\"fill\", \"#CDCDCD\")\n        //     .style(\"stroke\", \"#CDCDCD\")\n        //     .style(\"fill-opacity\", cfg.opacityCircles)\n        //     .style(\"filter\", \"url(#glow)\");\n\n\n\n        //Text indicating at what % each level is\n        // axisGrid.selectAll(\".axisLabel\")\n        //     .data(d3.range(1, (cfg.levels + 1)).reverse())\n        //     .enter().append(\"text\")\n        //     .attr(\"class\", \"axisLabel\")\n        //     .attr(\"x\", 4)\n        //     .attr(\"y\", function (d) { return -d * radius / cfg.levels; })\n        //     .attr(\"dy\", \"1.5em\")\n        //     .style(\"font-size\", \"12px\")\n        //     .attr(\"fill\", \"#737373\")\n        //     .text(function (d, i) {\n        //         let a = maxValue * d / cfg.levels\n\n        //         let b = a.toFixed(2)\n        //         let c = `${b * 100}%`\n        //         return c;\n        //     });\n\n\n\n\n        //                     AXES \n\n\n        // Straight lines radiating outward from the center:\n        var axis = axisGrid.selectAll(\".axis\")\n            .data(allAxis)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"axis\");\n\n\n        //Append the lines\n        axis.append(\"line\")\n            .attr(\"x1\", 0)\n            .attr(\"y1\", 0)\n            .attr(\"x2\", function (d, i) { return rScale(maxValue * 1.1) * Math.cos(angleSlice * i - Math.PI / 2); })\n            .attr(\"y2\", function (d, i) { return rScale(maxValue * 1.1) * Math.sin(angleSlice * i - Math.PI / 2); })\n            .attr(\"class\", \"line\")\n            //.style(\"stroke\", \"white\")\n            .style(\"stroke\", \"#ddd\")\n            .style(\"stroke-width\", \"1px\")\n            .style(\"stroke-dasharay\", 4);\n\n        //Append the labels at each axis\n        axis.append(\"text\")\n            .attr(\"class\", \"legend\")\n            .style(\"font-size\", \"12px\")\n            .style(\"fill\", \"#999\")\n\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"dy\", \"0.35em\")\n            .attr(\"x\", function (d, i) { return rScale(maxValue * cfg.labelFactor) * Math.cos(angleSlice * i - Math.PI / 2); })\n            .attr(\"y\", function (d, i) { return rScale(maxValue * cfg.labelFactor) * Math.sin(angleSlice * i - Math.PI / 2); })\n            .text(function (d) { return d })\n            .call(wrap, cfg.wrapWidth);\n\n\n\n\n\n        //        CHART BLOBS         \n\n\n        //The radial line function\n        var radarLine = d3.lineRadial()\n            //.interpolate(\"linear-closed\")\n\n\n            .curve(d3.curveLinearClosed)\n            .radius(function (d) { return rScale(d.value); })\n            .angle(function (d, i) { return i * angleSlice; });\n\n        if (cfg.roundStrokes) {\n            //radarLine.interpolate(\"cardinal-closed\");\n            radarLine.curve(d3.curveCardinalClosed)\n        }\n\n        //Create a wrapper for the blobs\t\n        var blobWrapper = g.selectAll(\".radarWrapper\")\n            .data(data)\n            .enter().append(\"g\")\n            .attr(\"class\", \"radarWrapper\");\n\n        //Append the backgrounds\t\n        blobWrapper\n            .append(\"path\")\n            .attr(\"class\", \"radarArea\")\n            .attr(\"d\", function (d, i) { return radarLine(d); })\n            .style(\"fill\", function (d, i) { return cfg.color(i); })\n            .style(\"fill-opacity\", cfg.opacityArea)\n            .on('mouseover', function (d, i) {\n                //Dim all blobs\n                d3.selectAll(\".radarArea\")\n                    .transition().duration(200)\n                    .style(\"fill-opacity\", 0.1);\n                //Bring back the hovered over blob\n                d3.select(this)\n                    .transition().duration(200)\n                    .style(\"fill-opacity\", 0.7);\n            })\n            .on('mouseout', function () {\n                //Bring back all blobs\n                d3.selectAll(\".radarArea\")\n                    .transition().duration(200)\n                    .style(\"fill-opacity\", cfg.opacityArea);\n            });\n\n        //Create the outlines\t\n        blobWrapper.append(\"path\")\n            .attr(\"class\", \"radarStroke\")\n            .attr(\"d\", function (d, i) { return radarLine(d); })\n            .style(\"stroke-width\", cfg.strokeWidth + \"px\")\n            .style(\"stroke\", function (d, i) { return cfg.color(i); })\n            .style(\"fill\", \"none\")\n            .style(\"filter\", \"url(#glow)\");\n\n\n\n        //Append the circles  --  DATA POINTS\n\n\n        blobWrapper.selectAll(\".radarCircle\")\n            .data(function (d, i) { return d; })\n            .enter().append(\"circle\")\n            .attr(\"class\", \"radarCircle\")\n            .attr(\"r\", cfg.dotRadius)\n            .attr(\"cx\", function (d, i) { return rScale(d.value) * Math.cos(angleSlice * i - Math.PI / 2); })\n            .attr(\"cy\", function (d, i) { return rScale(d.value) * Math.sin(angleSlice * i - Math.PI / 2); })\n            // .style(\"fill\", function (d, i, j) { return cfg.color(j); })\n            .style(\"fill\", cfg.dotFill)\n\n            .style(\"fill-opacity\", 0.8);\n\n\n\n\n\n        //              TOOLTIP\n        // \n        //    append invisible circles\n\n        // wrapper:\n        var blobCircleWrapper = g.selectAll(\".radarCircleWrapper\")\n            .data(data)\n            .enter().append(\"g\")\n            .attr(\"class\", \"radarCircleWrapper\");\n\n        //Append a set of invisible circles on top for the mouseover pop-up\n        blobCircleWrapper.selectAll(\".radarInvisibleCircle\")\n            .data(function (d, i) { return d; })\n            .enter().append(\"circle\")\n            .attr(\"class\", \"radarInvisibleCircle\")\n            .attr(\"r\", cfg.dotRadius * 1.5)\n            .attr(\"cx\", function (d, i) { return rScale(d.value) * Math.cos(angleSlice * i - Math.PI / 2); })\n            .attr(\"cy\", function (d, i) { return rScale(d.value) * Math.sin(angleSlice * i - Math.PI / 2); })\n            .style(\"fill\", \"none\")\n            .style(\"pointer-events\", \"all\")\n            .on(\"mouseover\", function (d, i) {\n                let newX = parseFloat(d3.select(this).attr('cx')) - 10;\n                let newY = parseFloat(d3.select(this).attr('cy')) - 10;\n\n                tooltip\n                    .attr('x', newX)\n                    .attr('y', newY)\n                    .text(Format(d.value))\n                    .transition().duration(200)\n                    .style('opacity', 1);\n            })\n            .on(\"mouseout\", function () {\n                tooltip.transition().duration(200)\n                    .style(\"opacity\", 0);\n            });\n\n        //Set up the small tooltip for when you hover over a circle\n        var tooltip = g.append(\"text\")\n            .attr(\"class\", \"tooltip\")\n            .style(\"opacity\", 0);\n\n\n\n\n        //                   WRAP SVG TEXT\n        // \n        // from http://bl.ocks.org/mbostock/7555321\n\n\n        function wrap(text, width) {\n            text.each(function () {\n                var text = d3.select(this),\n                    words = text.text().split(/\\s+/).reverse(),\n                    word,\n                    line = [],\n                    lineNumber = 0,\n                    lineHeight = 1.4, // ems\n                    y = text.attr(\"y\"),\n                    x = text.attr(\"x\"),\n                    dy = parseFloat(text.attr(\"dy\")),\n                    tspan = text.text(null).append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n\n                while (word = words.pop()) {\n                    line.push(word);\n                    tspan.text(line.join(\" \"));\n                    if (tspan.node().getComputedTextLength() > width) {\n                        line.pop();\n                        tspan.text(line.join(\" \"));\n                        line = [word];\n                        tspan = text.append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n                    }\n                }\n            });\n        }\n    }, [])\n\n\n\n\n    return (\n\n        <svg id=\"svgRadar\"\n            style={{\n                border: \"1px solid #ccc\",\n                width: \"320px\",\n                height: \"300px\",\n                margin: \"20px auto\",\n\n            }}\n        >\n\n        </svg>\n    )\n}//RadarChart","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/radar/PseudoRadar.jsx",["589"],"/home/jnfri/Documents/react_portfolio/src/COMPONENTS/background/ResearchBegins.jsx",["590","591","592","593","594"],"// import \"./chapters.sass\"\n\nimport { nanoid } from \"nanoid\"\nimport data from '../../DATA/myData'\nimport parse from \"html-react-parser\"\nimport * as d3 from \"d3\"\nimport { useEffect } from \"react\"\n\n\nexport default function ResearchBegins() {\n\n    const phenString = 'behavior acquisition and extinction; extinction bursts and spontaneous recovery; escape, avoidance, and behavior suppression; conditioned reinforcement and stimulus control, ...'\n\n    /* \n        const phenomenaCircles = [\n            { 'cx': 50, 'cy': 200 },\n            { 'cx': 100, 'cy': 200 },\n            { 'cx': 175, 'cy': 125 },\n            { 'cx': 200, 'cy': 125 },\n            { 'cx': 225, 'cy': 125 },\n            { 'cx': 250, 'cy': 125 },\n            { 'cx': 275, 'cy': 70 },\n            { 'cx': 375, 'cy': 200 },\n            { 'cx': 415, 'cy': 200 },\n            { 'cx': 450, 'cy': 200 },\n            { 'cx': 475, 'cy': 150 },\n            { 'cx': 500, 'cy': 200 },\n            { 'cx': 520, 'cy': 200 },\n        ]\n    \n        const phenomenaAxes = [\n            { 'x1': 50, 'y1': 200, 'x2': 500, 'y2': 200 },\n        ]\n    \n        const crCurve = d3.line()\n            .x(d => d.cx)\n            .y(d => d.cy)\n            .curve(d3.curveCatmullRom)\n    \n        useEffect(() => {\n            let svg = d3.select('#svgBehaviorPhenomena')\n                .attr(\"width\", '600px')\n                .attr(\"height\", '300px')\n                .attr(\"margin\", '20px auto')\n    \n            let gTexts = svg.append('g')\n            let gCircles = svg.append('g')\n            let gAxes = svg.append('g')\n    \n            let gBehaviorPath = svg.append('g')\n    \n            gBehaviorPath\n                .append(\"path\")\n                .attr(\"d\", crCurve(phenomenaCircles))\n                .style(\"stroke\", \"#aaa\")\n                .style(\"stroke-width\", 3)\n                .attr(\"fill\", \"none\")\n    \n    \n            gAxes.selectAll('line').data(phenomenaAxes).join('line')\n                .attr('x1', d => d.x1)\n                .attr('y1', d => d.y1)\n                .attr('x2', d => d.x2)\n                .attr('y2', d => d.y2)\n                .attr('stroke', '#aaa')\n                .attr('stroke-width', 1)\n                .attr('stroke-dasharray', 3)\n    \n    \n            gTexts.append('text').text('BEHAVIOR').attr(\"x\", 240).attr(\"y\", 50)\n                .attr('class', 'txt-phenomena')\n                .style('font-size', '16px')\n                .style('stroke', '#aaa')\n    \n    \n            gTexts.append('text').text('acquisition').attr(\"x\", 160).attr(\"y\", 165).attr('class', 'txt-phenomena').style('stroke', '#A9A9A9')\n    \n    \n            gTexts.append('text').text('extinction').attr(\"x\", 350).attr(\"y\", 230).attr('class', 'txt-phenomena').style('stroke', '#A9A9A9')\n            gTexts.append('text').text('spontaneous').attr(\"x\", 450).attr(\"y\", 100).attr('class', 'txt-phenomena').style('stroke', '#A9A9A9')\n            gTexts.append('text').text('recovery').attr(\"x\", 450).attr(\"y\", 120).attr('class', 'txt-phenomena').style('stroke', '#A9A9A9')\n    \n    \n            svg.append('rect').attr('fill', '#fff')\n                .attr('x', 240)\n                .attr('y', 60)\n                .attr('width', 70)\n                .attr('height', 220)\n                .attr('stroke', 'tomato')\n                .attr('stroke-width', 0)\n    \n    \n            gAxes.selectAll('circle').data(phenomenaCircles).join('circle')\n                .attr('cx', d => d.cx)\n                .attr('cy', d => d.cy)\n                .attr('r', 1)\n                .attr('stroke', 'lightgrey')\n                .attr('stroke-width', 1)\n                .attr('fill', '#aaa')\n        }, [])\n    \n     */\n    return (\n\n        <div\n            id='researchBegins'\n            key={nanoid()}\n            style={{\n                width: '100%',\n                minHeight: '100vh'\n            }}\n        >\n\n\n\n\n            <div className=\"carved-text\" key={nanoid()}\n\n            >\n\n                <span className=\"span-title\" key={nanoid()}>RESEARCH</span>\n\n\n                <span className=\"span-year\" >  2007 - ____ </span>\n\n\n                <span className=\"span-intro\" key={nanoid()}>\n                    I study computational theories of <i>learning</i>, or behavior dynamics.\n                </span>\n\n\n            </div>\n\n\n\n\n\n            <div\n                key={nanoid()}\n                style={{\n                    border: \"1px solid red\",\n                    margin: \"auto\",\n                    //padding: \"0px\",\n                    //margin: \"100px auto 10px auto\",\n                    //width: \"550px\",\n                    //fontSize: \"14px\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                }}\n            >\n\n                {/* <svg id='svgBehaviorPhenomena' key={nanoid()}>\n\n                </svg> */}\n\n\n                {/* <LearningNetwork /> */}\n\n\n                {/* <div\n                    style={{\n                        width: \"150px\",\n                        height: \"200px\",\n                        border: \"0px solid #aaa\",\n                        backgroundColor: \"transparent\",\n                        margin: \"auto\",\n                        color: \"#778899\",\n                        color: \"#A9A9A9\",\n                        fontFamily: \"Montserrat\",\n                        fontWeight: 700,\n                        fontSize: \"16px\",\n                        padding: \"10px\",\n                    }}\n                    key={nanoid()}\n                >\n                    <p>\n                        reinforcers<br />\n                        punishers<br />\n                        context<br />\n\n                    </p>\n                </div> */}\n\n\n                {/* <div\n                    style={{\n                        //border: \"1px solid lime\",\n                        width: \"500px\",\n                        height: \"200px\",\n                        border: \"0px solid #aaa\",\n                        backgroundColor: \"transparent\",\n                        margin: \"auto\",\n                        color: \"#778899\",\n                        color: \"#A9A9A9\",\n                        fontFamily: \"Montserrat\",\n                        fontWeight: 700,\n                        fontSize: \"16px\",\n                        lineHeight: \"26px\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        flexWrap: \"wrap\",\n                        padding: \"10px 14px\",\n                    }}\n                    key={nanoid()}\n\n                >\n\n\n\n                    <p>\n                        {phenString}\n                    </p>\n\n\n\n                </div> */}\n\n\n            </div>\n\n\n\n\n        </div>\n\n    )\n}","/home/jnfri/Documents/react_portfolio/src/COMPONENTS/timeline_files/LovelyOgive.jsx",["595","596"],{"ruleId":"597","replacedBy":"598"},{"ruleId":"599","replacedBy":"600"},{"ruleId":"601","severity":1,"message":"602","line":2,"column":10,"nodeType":"603","messageId":"604","endLine":2,"endColumn":16},{"ruleId":"601","severity":1,"message":"605","line":4,"column":8,"nodeType":"603","messageId":"604","endLine":4,"endColumn":13},{"ruleId":"601","severity":1,"message":"602","line":5,"column":10,"nodeType":"603","messageId":"604","endLine":5,"endColumn":16},{"ruleId":"601","severity":1,"message":"606","line":31,"column":13,"nodeType":"603","messageId":"604","endLine":31,"endColumn":19},{"ruleId":"607","severity":1,"message":"608","line":49,"column":21,"nodeType":"609","messageId":"610","endLine":49,"endColumn":36},{"ruleId":"607","severity":1,"message":"608","line":50,"column":21,"nodeType":"609","messageId":"610","endLine":50,"endColumn":36},{"ruleId":"601","severity":1,"message":"605","line":5,"column":8,"nodeType":"603","messageId":"604","endLine":5,"endColumn":13},{"ruleId":"601","severity":1,"message":"611","line":238,"column":13,"nodeType":"603","messageId":"604","endLine":238,"endColumn":24},{"ruleId":"601","severity":1,"message":"612","line":280,"column":17,"nodeType":"603","messageId":"604","endLine":280,"endColumn":22},{"ruleId":"601","severity":1,"message":"613","line":281,"column":17,"nodeType":"603","messageId":"604","endLine":281,"endColumn":22},{"ruleId":"601","severity":1,"message":"614","line":444,"column":29,"nodeType":"603","messageId":"604","endLine":444,"endColumn":31},{"ruleId":"601","severity":1,"message":"614","line":465,"column":29,"nodeType":"603","messageId":"604","endLine":465,"endColumn":31},{"ruleId":"601","severity":1,"message":"615","line":532,"column":29,"nodeType":"603","messageId":"604","endLine":532,"endColumn":31},{"ruleId":"601","severity":1,"message":"615","line":551,"column":29,"nodeType":"603","messageId":"604","endLine":551,"endColumn":31},{"ruleId":"607","severity":1,"message":"616","line":988,"column":37,"nodeType":"609","messageId":"610","endLine":988,"endColumn":42},{"ruleId":"601","severity":1,"message":"617","line":12,"column":8,"nodeType":"603","messageId":"604","endLine":12,"endColumn":12},{"ruleId":"601","severity":1,"message":"618","line":17,"column":8,"nodeType":"603","messageId":"604","endLine":17,"endColumn":19},{"ruleId":"619","severity":1,"message":"620","line":100,"column":52,"nodeType":"621","messageId":"622","endLine":100,"endColumn":53},{"ruleId":"623","severity":1,"message":"624","line":129,"column":50,"nodeType":"625","messageId":"626","endLine":129,"endColumn":52},{"ruleId":"627","severity":1,"message":"628","line":219,"column":9,"nodeType":"629","messageId":"630","endLine":233,"endColumn":10},{"ruleId":"631","severity":1,"message":"632","line":219,"column":9,"nodeType":"603","messageId":"633","endLine":219,"endColumn":16,"fix":"634"},{"ruleId":"597","replacedBy":"635"},{"ruleId":"599","replacedBy":"636"},{"ruleId":"601","severity":1,"message":"605","line":3,"column":8,"nodeType":"603","messageId":"604","endLine":3,"endColumn":13},{"ruleId":"601","severity":1,"message":"637","line":9,"column":8,"nodeType":"603","messageId":"604","endLine":9,"endColumn":30},{"ruleId":"601","severity":1,"message":"638","line":15,"column":8,"nodeType":"603","messageId":"604","endLine":15,"endColumn":25},{"ruleId":"601","severity":1,"message":"639","line":5,"column":8,"nodeType":"603","messageId":"604","endLine":5,"endColumn":12},{"ruleId":"607","severity":1,"message":"616","line":79,"column":90,"nodeType":"609","messageId":"610","endLine":79,"endColumn":95},{"ruleId":"607","severity":1,"message":"616","line":89,"column":90,"nodeType":"609","messageId":"610","endLine":89,"endColumn":95},{"ruleId":"601","severity":1,"message":"640","line":3,"column":8,"nodeType":"603","messageId":"604","endLine":3,"endColumn":16},{"ruleId":"623","severity":1,"message":"641","line":10,"column":39,"nodeType":"625","messageId":"626","endLine":10,"endColumn":41},{"ruleId":"601","severity":1,"message":"612","line":111,"column":13,"nodeType":"603","messageId":"604","endLine":111,"endColumn":18},{"ruleId":"601","severity":1,"message":"613","line":112,"column":13,"nodeType":"603","messageId":"604","endLine":112,"endColumn":18},{"ruleId":"601","severity":1,"message":"642","line":146,"column":13,"nodeType":"603","messageId":"604","endLine":146,"endColumn":15},{"ruleId":"601","severity":1,"message":"614","line":235,"column":29,"nodeType":"603","messageId":"604","endLine":235,"endColumn":31},{"ruleId":"601","severity":1,"message":"614","line":256,"column":29,"nodeType":"603","messageId":"604","endLine":256,"endColumn":31},{"ruleId":"601","severity":1,"message":"615","line":324,"column":29,"nodeType":"603","messageId":"604","endLine":324,"endColumn":31},{"ruleId":"601","severity":1,"message":"615","line":343,"column":29,"nodeType":"603","messageId":"604","endLine":343,"endColumn":31},{"ruleId":"601","severity":1,"message":"643","line":381,"column":17,"nodeType":"603","messageId":"604","endLine":381,"endColumn":24},{"ruleId":"601","severity":1,"message":"644","line":4,"column":8,"nodeType":"603","messageId":"604","endLine":4,"endColumn":16},{"ruleId":"601","severity":1,"message":"612","line":172,"column":13,"nodeType":"603","messageId":"604","endLine":172,"endColumn":18},{"ruleId":"601","severity":1,"message":"613","line":173,"column":13,"nodeType":"603","messageId":"604","endLine":173,"endColumn":18},{"ruleId":"601","severity":1,"message":"645","line":239,"column":13,"nodeType":"603","messageId":"604","endLine":239,"endColumn":27},{"ruleId":"601","severity":1,"message":"642","line":259,"column":13,"nodeType":"603","messageId":"604","endLine":259,"endColumn":15},{"ruleId":"601","severity":1,"message":"643","line":408,"column":17,"nodeType":"603","messageId":"604","endLine":408,"endColumn":24},{"ruleId":"646","severity":1,"message":"647","line":582,"column":43,"nodeType":"625","messageId":"648","endLine":585,"endColumn":22},{"ruleId":"649","severity":1,"message":"650","line":6,"column":5,"nodeType":"651","messageId":"652","endLine":8,"endColumn":6},{"ruleId":"653","severity":1,"message":"654","line":22,"column":13,"nodeType":"603","messageId":"655","endLine":22,"endColumn":20},{"ruleId":"601","severity":1,"message":"656","line":1,"column":8,"nodeType":"603","messageId":"604","endLine":1,"endColumn":13},{"ruleId":"601","severity":1,"message":"657","line":2,"column":10,"nodeType":"603","messageId":"604","endLine":2,"endColumn":18},{"ruleId":"601","severity":1,"message":"658","line":2,"column":31,"nodeType":"603","messageId":"604","endLine":2,"endColumn":37},{"ruleId":"659","severity":1,"message":"660","line":57,"column":8,"nodeType":"661","endLine":57,"endColumn":10,"suggestions":"662"},{"ruleId":"597","replacedBy":"663"},{"ruleId":"599","replacedBy":"664"},{"ruleId":"607","severity":1,"message":"616","line":91,"column":56,"nodeType":"609","messageId":"610","endLine":91,"endColumn":61},{"ruleId":"601","severity":1,"message":"665","line":16,"column":8,"nodeType":"603","messageId":"604","endLine":16,"endColumn":15},{"ruleId":"623","severity":1,"message":"666","line":104,"column":17,"nodeType":"667","messageId":"668","endLine":104,"endColumn":23},{"ruleId":"601","severity":1,"message":"669","line":2,"column":8,"nodeType":"603","messageId":"604","endLine":2,"endColumn":18},{"ruleId":"601","severity":1,"message":"670","line":3,"column":8,"nodeType":"603","messageId":"604","endLine":3,"endColumn":19},{"ruleId":"623","severity":1,"message":"666","line":44,"column":17,"nodeType":"667","messageId":"668","endLine":44,"endColumn":23},{"ruleId":"597","replacedBy":"671"},{"ruleId":"599","replacedBy":"672"},{"ruleId":"659","severity":1,"message":"673","line":126,"column":8,"nodeType":"661","endLine":126,"endColumn":10,"suggestions":"674"},{"ruleId":"597","replacedBy":"675"},{"ruleId":"599","replacedBy":"676"},{"ruleId":"601","severity":1,"message":"677","line":26,"column":12,"nodeType":"603","messageId":"604","endLine":26,"endColumn":18},{"ruleId":"601","severity":1,"message":"678","line":27,"column":12,"nodeType":"603","messageId":"604","endLine":27,"endColumn":19},{"ruleId":"601","severity":1,"message":"679","line":28,"column":12,"nodeType":"603","messageId":"604","endLine":28,"endColumn":18},{"ruleId":"601","severity":1,"message":"680","line":35,"column":21,"nodeType":"603","messageId":"604","endLine":35,"endColumn":31},{"ruleId":"659","severity":1,"message":"681","line":294,"column":8,"nodeType":"661","endLine":294,"endColumn":14,"suggestions":"682"},{"ruleId":"601","severity":1,"message":"683","line":316,"column":13,"nodeType":"603","messageId":"604","endLine":316,"endColumn":18},{"ruleId":"659","severity":1,"message":"684","line":419,"column":8,"nodeType":"661","endLine":419,"endColumn":14,"suggestions":"685"},{"ruleId":"601","severity":1,"message":"658","line":2,"column":10,"nodeType":"603","messageId":"604","endLine":2,"endColumn":16},{"ruleId":"601","severity":1,"message":"683","line":62,"column":13,"nodeType":"603","messageId":"604","endLine":62,"endColumn":18},{"ruleId":"601","severity":1,"message":"686","line":63,"column":13,"nodeType":"603","messageId":"604","endLine":63,"endColumn":19},{"ruleId":"601","severity":1,"message":"687","line":6,"column":19,"nodeType":"603","messageId":"604","endLine":6,"endColumn":25},{"ruleId":"601","severity":1,"message":"688","line":6,"column":27,"nodeType":"603","messageId":"604","endLine":6,"endColumn":34},{"ruleId":"601","severity":1,"message":"689","line":18,"column":18,"nodeType":"603","messageId":"604","endLine":18,"endColumn":25},{"ruleId":"601","severity":1,"message":"677","line":19,"column":12,"nodeType":"603","messageId":"604","endLine":19,"endColumn":18},{"ruleId":"601","severity":1,"message":"678","line":20,"column":12,"nodeType":"603","messageId":"604","endLine":20,"endColumn":19},{"ruleId":"601","severity":1,"message":"679","line":21,"column":12,"nodeType":"603","messageId":"604","endLine":21,"endColumn":18},{"ruleId":"659","severity":1,"message":"660","line":111,"column":8,"nodeType":"661","endLine":111,"endColumn":10,"suggestions":"690"},{"ruleId":"601","severity":1,"message":"687","line":6,"column":19,"nodeType":"603","messageId":"604","endLine":6,"endColumn":25},{"ruleId":"601","severity":1,"message":"688","line":6,"column":27,"nodeType":"603","messageId":"604","endLine":6,"endColumn":34},{"ruleId":"601","severity":1,"message":"689","line":18,"column":18,"nodeType":"603","messageId":"604","endLine":18,"endColumn":25},{"ruleId":"601","severity":1,"message":"677","line":19,"column":12,"nodeType":"603","messageId":"604","endLine":19,"endColumn":18},{"ruleId":"601","severity":1,"message":"678","line":20,"column":12,"nodeType":"603","messageId":"604","endLine":20,"endColumn":19},{"ruleId":"601","severity":1,"message":"679","line":21,"column":12,"nodeType":"603","messageId":"604","endLine":21,"endColumn":18},{"ruleId":"691","severity":2,"message":"692","line":112,"column":31,"nodeType":"603","messageId":"693","endLine":112,"endColumn":37},{"ruleId":"691","severity":2,"message":"694","line":113,"column":31,"nodeType":"603","messageId":"693","endLine":113,"endColumn":39},{"ruleId":"691","severity":2,"message":"692","line":114,"column":28,"nodeType":"603","messageId":"693","endLine":114,"endColumn":34},{"ruleId":"691","severity":2,"message":"694","line":115,"column":45,"nodeType":"603","messageId":"693","endLine":115,"endColumn":53},{"ruleId":"659","severity":1,"message":"660","line":120,"column":8,"nodeType":"661","endLine":120,"endColumn":10,"suggestions":"695"},{"ruleId":"601","severity":1,"message":"696","line":33,"column":13,"nodeType":"603","messageId":"604","endLine":33,"endColumn":23},{"ruleId":"601","severity":1,"message":"697","line":141,"column":17,"nodeType":"603","messageId":"604","endLine":141,"endColumn":19},{"ruleId":"601","severity":1,"message":"698","line":5,"column":20,"nodeType":"603","messageId":"604","endLine":5,"endColumn":29},{"ruleId":"601","severity":1,"message":"699","line":18,"column":10,"nodeType":"603","messageId":"604","endLine":18,"endColumn":20},{"ruleId":"601","severity":1,"message":"700","line":18,"column":22,"nodeType":"603","messageId":"604","endLine":18,"endColumn":38},{"ruleId":"701","severity":1,"message":"702","line":69,"column":1,"nodeType":"703","messageId":"704","endLine":71,"endColumn":39},{"ruleId":"601","severity":1,"message":"705","line":2,"column":10,"nodeType":"603","messageId":"604","endLine":2,"endColumn":19},{"ruleId":"601","severity":1,"message":"658","line":3,"column":21,"nodeType":"603","messageId":"604","endLine":3,"endColumn":27},{"ruleId":"601","severity":1,"message":"706","line":7,"column":15,"nodeType":"603","messageId":"604","endLine":7,"endColumn":21},{"ruleId":"601","severity":1,"message":"707","line":8,"column":16,"nodeType":"603","messageId":"604","endLine":8,"endColumn":23},{"ruleId":"601","severity":1,"message":"708","line":10,"column":10,"nodeType":"603","messageId":"604","endLine":10,"endColumn":16},{"ruleId":"601","severity":1,"message":"709","line":10,"column":18,"nodeType":"603","messageId":"604","endLine":10,"endColumn":30},{"ruleId":"601","severity":1,"message":"710","line":13,"column":10,"nodeType":"603","messageId":"604","endLine":13,"endColumn":17},{"ruleId":"601","severity":1,"message":"711","line":13,"column":19,"nodeType":"603","messageId":"604","endLine":13,"endColumn":32},{"ruleId":"601","severity":1,"message":"712","line":41,"column":13,"nodeType":"603","messageId":"604","endLine":41,"endColumn":15},{"ruleId":"601","severity":1,"message":"713","line":42,"column":13,"nodeType":"603","messageId":"604","endLine":42,"endColumn":15},{"ruleId":"601","severity":1,"message":"714","line":14,"column":10,"nodeType":"603","messageId":"604","endLine":14,"endColumn":14},{"ruleId":"601","severity":1,"message":"715","line":16,"column":10,"nodeType":"603","messageId":"604","endLine":16,"endColumn":19},{"ruleId":"601","severity":1,"message":"716","line":16,"column":21,"nodeType":"603","messageId":"604","endLine":16,"endColumn":33},{"ruleId":"601","severity":1,"message":"717","line":16,"column":51,"nodeType":"603","messageId":"604","endLine":16,"endColumn":74},{"ruleId":"601","severity":1,"message":"718","line":24,"column":8,"nodeType":"603","messageId":"604","endLine":24,"endColumn":20},{"ruleId":"601","severity":1,"message":"719","line":26,"column":8,"nodeType":"603","messageId":"604","endLine":26,"endColumn":18},{"ruleId":"601","severity":1,"message":"720","line":37,"column":10,"nodeType":"603","messageId":"604","endLine":37,"endColumn":23},{"ruleId":"601","severity":1,"message":"721","line":193,"column":21,"nodeType":"603","messageId":"604","endLine":193,"endColumn":23},{"ruleId":"601","severity":1,"message":"722","line":196,"column":21,"nodeType":"603","messageId":"604","endLine":196,"endColumn":24},{"ruleId":"601","severity":1,"message":"723","line":259,"column":13,"nodeType":"603","messageId":"604","endLine":259,"endColumn":15},{"ruleId":"601","severity":1,"message":"724","line":335,"column":13,"nodeType":"603","messageId":"604","endLine":335,"endColumn":17},{"ruleId":"601","severity":1,"message":"725","line":371,"column":13,"nodeType":"603","messageId":"604","endLine":371,"endColumn":15},{"ruleId":"601","severity":1,"message":"726","line":604,"column":13,"nodeType":"603","messageId":"604","endLine":604,"endColumn":15},{"ruleId":"649","severity":1,"message":"650","line":8,"column":5,"nodeType":"651","messageId":"652","endLine":11,"endColumn":6},{"ruleId":"601","severity":1,"message":"727","line":6,"column":10,"nodeType":"603","messageId":"604","endLine":6,"endColumn":16},{"ruleId":"601","severity":1,"message":"728","line":20,"column":13,"nodeType":"603","messageId":"604","endLine":20,"endColumn":14},{"ruleId":"601","severity":1,"message":"729","line":36,"column":13,"nodeType":"603","messageId":"604","endLine":36,"endColumn":28},{"ruleId":"623","severity":1,"message":"666","line":47,"column":25,"nodeType":"625","messageId":"730","endLine":47,"endColumn":27},{"ruleId":"623","severity":1,"message":"666","line":63,"column":48,"nodeType":"625","messageId":"730","endLine":63,"endColumn":50},{"ruleId":"601","severity":1,"message":"605","line":3,"column":8,"nodeType":"603","messageId":"604","endLine":3,"endColumn":13},{"ruleId":"601","severity":1,"message":"731","line":7,"column":8,"nodeType":"603","messageId":"604","endLine":7,"endColumn":19},{"ruleId":"601","severity":1,"message":"602","line":8,"column":10,"nodeType":"603","messageId":"604","endLine":8,"endColumn":16},{"ruleId":"601","severity":1,"message":"602","line":6,"column":10,"nodeType":"603","messageId":"604","endLine":6,"endColumn":16},{"ruleId":"623","severity":1,"message":"666","line":57,"column":26,"nodeType":"625","messageId":"730","endLine":57,"endColumn":28},{"ruleId":"623","severity":1,"message":"666","line":90,"column":48,"nodeType":"625","messageId":"730","endLine":90,"endColumn":50},{"ruleId":"601","severity":1,"message":"732","line":146,"column":13,"nodeType":"603","messageId":"604","endLine":146,"endColumn":28},{"ruleId":"597","replacedBy":"733"},{"ruleId":"599","replacedBy":"734"},{"ruleId":"601","severity":1,"message":"714","line":3,"column":10,"nodeType":"603","messageId":"604","endLine":3,"endColumn":14},{"ruleId":"601","severity":1,"message":"735","line":8,"column":21,"nodeType":"603","messageId":"604","endLine":8,"endColumn":33},{"ruleId":"601","severity":1,"message":"735","line":50,"column":21,"nodeType":"603","messageId":"604","endLine":50,"endColumn":33},{"ruleId":"601","severity":1,"message":"735","line":86,"column":21,"nodeType":"603","messageId":"604","endLine":86,"endColumn":33},{"ruleId":"601","severity":1,"message":"735","line":147,"column":21,"nodeType":"603","messageId":"604","endLine":147,"endColumn":33},{"ruleId":"601","severity":1,"message":"735","line":173,"column":21,"nodeType":"603","messageId":"604","endLine":173,"endColumn":33},{"ruleId":"601","severity":1,"message":"735","line":204,"column":21,"nodeType":"603","messageId":"604","endLine":204,"endColumn":33},{"ruleId":"601","severity":1,"message":"735","line":234,"column":21,"nodeType":"603","messageId":"604","endLine":234,"endColumn":33},{"ruleId":"601","severity":1,"message":"657","line":3,"column":10,"nodeType":"603","messageId":"604","endLine":3,"endColumn":18},{"ruleId":"601","severity":1,"message":"698","line":3,"column":20,"nodeType":"603","messageId":"604","endLine":3,"endColumn":29},{"ruleId":"601","severity":1,"message":"714","line":5,"column":10,"nodeType":"603","messageId":"604","endLine":5,"endColumn":14},{"ruleId":"601","severity":1,"message":"698","line":1,"column":20,"nodeType":"603","messageId":"604","endLine":1,"endColumn":29},{"ruleId":"597","replacedBy":"736"},{"ruleId":"599","replacedBy":"737"},{"ruleId":"601","severity":1,"message":"714","line":5,"column":10,"nodeType":"603","messageId":"604","endLine":5,"endColumn":14},{"ruleId":"601","severity":1,"message":"727","line":6,"column":10,"nodeType":"603","messageId":"604","endLine":6,"endColumn":16},{"ruleId":"623","severity":1,"message":"666","line":119,"column":48,"nodeType":"625","messageId":"730","endLine":119,"endColumn":50},{"ruleId":"601","severity":1,"message":"657","line":1,"column":10,"nodeType":"603","messageId":"604","endLine":1,"endColumn":18},{"ruleId":"659","severity":1,"message":"738","line":109,"column":9,"nodeType":"661","endLine":109,"endColumn":42,"suggestions":"739"},{"ruleId":"601","severity":1,"message":"639","line":4,"column":8,"nodeType":"603","messageId":"604","endLine":4,"endColumn":12},{"ruleId":"601","severity":1,"message":"605","line":5,"column":8,"nodeType":"603","messageId":"604","endLine":5,"endColumn":13},{"ruleId":"607","severity":1,"message":"608","line":25,"column":17,"nodeType":"609","messageId":"610","endLine":25,"endColumn":32},{"ruleId":"607","severity":1,"message":"608","line":27,"column":17,"nodeType":"609","messageId":"610","endLine":27,"endColumn":32},{"ruleId":"607","severity":1,"message":"608","line":28,"column":17,"nodeType":"609","messageId":"610","endLine":28,"endColumn":32},{"ruleId":"607","severity":1,"message":"608","line":29,"column":17,"nodeType":"609","messageId":"610","endLine":29,"endColumn":32},{"ruleId":"607","severity":1,"message":"608","line":31,"column":17,"nodeType":"609","messageId":"610","endLine":31,"endColumn":32},{"ruleId":"607","severity":1,"message":"740","line":108,"column":33,"nodeType":"609","messageId":"610","endLine":108,"endColumn":43},{"ruleId":"601","severity":1,"message":"602","line":1,"column":10,"nodeType":"603","messageId":"604","endLine":1,"endColumn":16},{"ruleId":"601","severity":1,"message":"714","line":3,"column":10,"nodeType":"603","messageId":"604","endLine":3,"endColumn":14},{"ruleId":"607","severity":1,"message":"616","line":40,"column":29,"nodeType":"609","messageId":"610","endLine":40,"endColumn":34},{"ruleId":"601","severity":1,"message":"602","line":1,"column":10,"nodeType":"603","messageId":"604","endLine":1,"endColumn":16},{"ruleId":"601","severity":1,"message":"714","line":3,"column":10,"nodeType":"603","messageId":"604","endLine":3,"endColumn":14},{"ruleId":"601","severity":1,"message":"741","line":5,"column":10,"nodeType":"603","messageId":"604","endLine":5,"endColumn":14},{"ruleId":"601","severity":1,"message":"742","line":2,"column":8,"nodeType":"603","messageId":"604","endLine":2,"endColumn":13},{"ruleId":"597","replacedBy":"743"},{"ruleId":"599","replacedBy":"744"},{"ruleId":"601","severity":1,"message":"745","line":124,"column":13,"nodeType":"603","messageId":"604","endLine":124,"endColumn":27},{"ruleId":"601","severity":1,"message":"746","line":126,"column":13,"nodeType":"603","messageId":"604","endLine":126,"endColumn":26},{"ruleId":"601","severity":1,"message":"747","line":127,"column":13,"nodeType":"603","messageId":"604","endLine":127,"endColumn":26},{"ruleId":"748","severity":1,"message":"749","line":367,"column":24,"nodeType":"750","messageId":"751","endLine":367,"endColumn":42},{"ruleId":"659","severity":1,"message":"752","line":379,"column":8,"nodeType":"661","endLine":379,"endColumn":10,"suggestions":"753"},{"ruleId":"659","severity":1,"message":"754","line":66,"column":8,"nodeType":"661","endLine":66,"endColumn":10,"suggestions":"755"},{"ruleId":"601","severity":1,"message":"639","line":4,"column":8,"nodeType":"603","messageId":"604","endLine":4,"endColumn":12},{"ruleId":"601","severity":1,"message":"605","line":5,"column":8,"nodeType":"603","messageId":"604","endLine":5,"endColumn":13},{"ruleId":"601","severity":1,"message":"756","line":6,"column":13,"nodeType":"603","messageId":"604","endLine":6,"endColumn":15},{"ruleId":"601","severity":1,"message":"698","line":7,"column":10,"nodeType":"603","messageId":"604","endLine":7,"endColumn":19},{"ruleId":"601","severity":1,"message":"757","line":12,"column":11,"nodeType":"603","messageId":"604","endLine":12,"endColumn":21},{"ruleId":"607","severity":1,"message":"758","line":254,"column":21,"nodeType":"609","messageId":"610","endLine":254,"endColumn":27},{"ruleId":"607","severity":1,"message":"759","line":255,"column":21,"nodeType":"609","messageId":"610","endLine":255,"endColumn":27},"no-native-reassign",["760"],"no-negated-in-lhs",["761"],"no-unused-vars","'nanoid' is defined but never used.","Identifier","unusedVar","'parse' is defined but never used.","'Skills' is assigned a value but never used.","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected","'timeElapsed' is assigned a value but never used.","'r1min' is assigned a value but never used.","'r2min' is assigned a value but never used.","'t1' is assigned a value but never used.","'t2' is assigned a value but never used.","Duplicate key 'color'.","'Qual' is defined but never used.","'LovelyOgive' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-labels","Unexpected labeled statement.","LabeledStatement","unexpectedLabel","no-unused-labels","'HAMMING:' is defined but never used.","unused",{"range":"762","text":"763"},["760"],["761"],"'hamming_abs_reinf_rate' is defined but never used.","'TeachingAssistant' is defined but never used.","'data' is defined but never used.","'ReadMore' is defined but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'Be' is assigned a value but never used.","'delta_t' is assigned a value but never used.","'ReactDOM' is defined but never used.","'allPopulations' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'randomFitness', 'relativeFitnessValues'.","unsafeRefs","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-redeclare","'X_group' is already defined.","redeclared","'React' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["764"],["760"],["761"],"'TableHD' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'InputGroup' is defined but never used.","'FormControl' is defined but never used.",["760"],["761"],"React Hook useEffect has a missing dependency: 'props.myData'. Either include it or remove the dependency array.",["765"],["760"],["761"],"'class1' is assigned a value but never used.","'classes' is assigned a value but never used.","'class2' is assigned a value but never used.","'setPlotAvg' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hd_cod', 'hd_other', 'hd_self', 'plotAvg', and 'props.boundary1'. Either include them or remove the dependency array.",["766"],"'width' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hd_cod', 'hd_other', 'hd_self', 'props.boundary1', 'props.boundary2', 'props.limit1', and 'props.limit2'. Either include them or remove the dependency array.",["767"],"'height' is assigned a value but never used.","'hdSelf' is defined but never used.","'hdOther' is defined but never used.","'setData' is assigned a value but never used.",["768"],"no-undef","'X_Band' is not defined.","undef","'Y_Linear' is not defined.",["769"],"'scatter222' is assigned a value but never used.","'bb' is assigned a value but never used.","'useEffect' is defined but never used.","'population' is assigned a value but never used.","'updatePopulation' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'scaleBand' is defined but never used.","'setLow' is assigned a value but never used.","'setHigh' is assigned a value but never used.","'genOne' is assigned a value but never used.","'updateGenOne' is assigned a value but never used.","'myRange' is assigned a value but never used.","'updateMyRange' is assigned a value but never used.","'c1' is assigned a value but never used.","'c2' is assigned a value but never used.","'Fade' is defined but never used.","'NeonStart' is defined but never used.","'NeonEmission' is defined but never used.","'NeonCreateNewPopulation' is defined but never used.","'AgentHistory' is defined but never used.","'ButtonNext' is defined but never used.","'MyD3Component' is defined but never used.","'rd' is assigned a value but never used.","'rf1' is assigned a value but never used.","'gn' is assigned a value but never used.","'bits' is assigned a value but never used.","'x0' is assigned a value but never used.","'tn' is assigned a value but never used.","'Button' is defined but never used.","'a' is assigned a value but never used.","'defaultGenotype' is assigned a value but never used.","expectedInside","'HammingDemo' is defined but never used.","'section_opacity' is assigned a value but never used.",["760"],["761"],"'setNeonClass' is assigned a value but never used.",["760"],["761"],"React Hook useEffect has an unnecessary dependency: 'd3Container.current'. Either exclude it or remove the dependency array. Mutable values like 'd3Container.current' aren't valid dependencies because mutating them doesn't re-render the component.",["770"],"Duplicate key 'fontWeight'.","'Card' is defined but never used.","'react' is defined but never used.",["760"],["761"],"'feGaussianBlur' is assigned a value but never used.","'feMergeNode_1' is assigned a value but never used.","'feMergeNode_2' is assigned a value but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","React Hook useEffect has missing dependencies: 'Format', 'allAxis', 'angleSlice', 'cfg', 'data', 'id', 'maxValue', and 'rScale'. Either include them or remove the dependency array.",["771"],"React Hook useEffect has a missing dependency: 'radarCirclesData'. Either include it or remove the dependency array.",["772"],"'d3' is defined but never used.","'phenString' is assigned a value but never used.","Duplicate key 'margin'.","Duplicate key 'border'.","no-global-assign","no-unsafe-negation",[5524,5541],"",{"desc":"773","fix":"774"},{"desc":"775","fix":"776"},{"desc":"777","fix":"778"},{"desc":"779","fix":"780"},{"desc":"773","fix":"781"},{"desc":"773","fix":"782"},{"desc":"783","fix":"784"},{"desc":"785","fix":"786"},{"desc":"787","fix":"788"},"Update the dependencies array to be: [data]",{"range":"789","text":"790"},"Update the dependencies array to be: [props.myData]",{"range":"791","text":"792"},"Update the dependencies array to be: [data, hd_cod, hd_other, hd_self, plotAvg, props.boundary1]",{"range":"793","text":"794"},"Update the dependencies array to be: [data, hd_cod, hd_other, hd_self, props.boundary1, props.boundary2, props.limit1, props.limit2]",{"range":"795","text":"796"},{"range":"797","text":"790"},{"range":"798","text":"790"},"Update the dependencies array to be: [props.data]",{"range":"799","text":"800"},"Update the dependencies array to be: [Format, allAxis, angleSlice, cfg, data, id, maxValue, rScale]",{"range":"801","text":"802"},"Update the dependencies array to be: [radarCirclesData]",{"range":"803","text":"804"},[2083,2085],"[data]",[3661,3663],"[props.myData]",[8280,8286],"[data, hd_cod, hd_other, hd_self, plotAvg, props.boundary1]",[11883,11889],"[data, hd_cod, hd_other, hd_self, props.boundary1, props.boundary2, props.limit1, props.limit2]",[3363,3365],[3740,3742],[3820,3853],"[props.data]",[12990,12992],"[Format, allAxis, angleSlice, cfg, data, id, maxValue, rScale]",[2110,2112],"[radarCirclesData]"]